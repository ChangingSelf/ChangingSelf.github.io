<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在服务器上部署第二个hexo博客</title>
      <link href="/posts/second-hexo-blog-deploy/"/>
      <url>/posts/second-hexo-blog-deploy/</url>
      
        <content type="html"><![CDATA[<p>老弟也开始接触编程了，所以打算给他也搭建一个hexo博客。</p><p>本文主要记录在同一个服务器上部署第二个hexo博客的过程，hexo及其配置环境的安装不赘述。</p><span id="more"></span><h2 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h2><p>教完没有前端基础的老弟hexo博客如何在本地运行之后，教他如何手动部署到服务器上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line"><span class="variable">$hexo</span> clean</span><br><span class="line"><span class="comment"># 生成站点内容</span></span><br><span class="line"><span class="variable">$hexo</span> generate</span><br></pre></td></tr></table></figure><p>生成好的站点内容会放在public目录下，将public目录下的文件上传到服务器，并调整nginx配置新增站点即可。</p><p>创建网站目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$su</span> -</span><br><span class="line"><span class="variable">$mkdir</span> -p /data/www/meshddy-blog</span><br><span class="line"><span class="variable">$chown</span> -R git:git /data/www/meshddy-blog</span><br><span class="line"><span class="variable">$chmod</span> -R 755 /data/www/meshddy-blog</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新增nginx站点配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">root</span> /data/www/meshddy-blog;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line"><span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line"><span class="attribute">server_name</span> meshddy.yxchangingself.xyz;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line"><span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line"><span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line"><span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我分配了一个子域名给他，在腾讯云控制台添加该子域名的A记录DNS解析，手动部署就完成了。</p><h2 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h2><p>参考：</p><ul><li>本站博客：<a href="https://yxchangingself.xyz/posts/hexo-blog-reboot-2024/#%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8">2024年底，hexo博客的迁移部署、升级和重启 - 编程技术笔记</a></li><li>官方文档：<a href="https://hexo.io/zh-cn/docs/one-command-deployment">一键部署 | Hexo</a></li></ul><p>每次都手动上传文件比较麻烦，所以也弄一下一键部署。</p><p>由于之前已经完成了建立git用户等前期准备，现在需要做的，就是为他新建一个git仓库，并配置hook。</p><h3 id="远程服务器配置git仓库"><a href="#远程服务器配置git仓库" class="headerlink" title="远程服务器配置git仓库"></a>远程服务器配置git仓库</h3><p>关于Git钩子可参见官方文档：<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">Git - Git 钩子</a></p><blockquote><p>和其它版本控制系统一样，Git 能<strong>在特定的重要动作发生时触发自定义脚本。</strong>有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。</p></blockquote><p>你将其理解为一个触发器即可，发生某个事件或者说动作的时候就执行自定义脚本。</p><p>Hexo部署博客的过程：</p><ol><li>使用源代码（未渲染的markdown以及主题的代码等）生成网站静态文件</li><li>将静态文件通过git从本地库提交到远程库</li><li>git的远程库使用bare参数做成没有工作区的裸仓库形式，将网站目录当做其工作区，在远程裸仓库接收到推送时，将收到的内容检出到网站目录中，完成对网站内容的更新。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> /home/git</span><br><span class="line"><span class="comment"># 新建裸仓库</span></span><br><span class="line"><span class="variable">$git</span> init --bare meshddy-blog.git</span><br><span class="line"><span class="comment"># 新建hook</span></span><br><span class="line"><span class="variable">$vim</span> blog.git/hooks/post-receive</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写<code>hooks/post-receive</code>脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/data/www/meshddy-blog --git-dir=/home/git/meshddy-blog.git checkout -f</span><br></pre></td></tr></table></figure><p>这个命令是用于从指定的 Git 仓库（参数git-dir）检出文件到一个非标准的工作目录（参数work-tree），强制覆盖原有文件。</p><p>由于新建的是裸仓库，没有工作空间，所以在触发post-receive（接收提交）的时候，需要利用以上钩子将提交内容检出到指定的工作空间中，也就是网站目录下，这样就实现了，git提交到这个远程库就可以更新网站。</p><p>最后调一调权限，服务器端就大功告成了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$chown</span> -R git:git /home/git/meshddy-blog.git</span><br><span class="line"><span class="variable">$chmod</span> +x /home/git/meshddy-blog.git/hooks/post-receive</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="本地配置一键部署"><a href="#本地配置一键部署" class="headerlink" title="本地配置一键部署"></a>本地配置一键部署</h3><ol><li>安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑 <code>_config.yml</code></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">tencent:</span> <span class="string">&#x27;git@服务器IP:/home/git/meshddy-blog.git&#x27;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>配置SSH公钥到服务器以便免密登录。在需要部署博客的电脑上用如下命令生成SSH公钥：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>在用户文件夹的.ssh目录下，会生成id_rsa和id_rsa.pub文件，分别是私钥和公钥。</p><p>视角回到<strong>服务器</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```Bash</span><br><span class="line">$su - git #切换到git用户</span><br><span class="line">$mkdir  ~/.ssh</span><br><span class="line">$vim  ~/.ssh/authorized_keys</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将id_rsa.pub文件中的内容添加到该文件末尾就可以了，每个公钥各占一行。</p><p>在本地主机的终端检查是否可以登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```Bash</span><br><span class="line">$ssh -v git@服务器IP #参数v代表verbose，详细显示调试信息，可以去掉</span><br></pre></td></tr></table></figure><ol start="4"><li>在本地主机执行部署命令，即可部署完成：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云对象存储COS自建图床并配置Obsidian自动上传</title>
      <link href="/posts/image-host-powered-by-object-storage/"/>
      <url>/posts/image-host-powered-by-object-storage/</url>
      
        <content type="html"><![CDATA[<p>博客的图片如果存储在本地，那么博客将会越来越臃肿，于是还是转回使用图床。免费图床不知道什么时候就用不了了，还是自建比较稳妥，至少能够自己把控。</p><p>为什么不在服务器上用minio之类的方案进行搭建，而是额外购买对象存储？因为服务器比较贵，说不定什么时候就不续费了，不想将太多东西绑在上面，对象存储则比较便宜，要是服务器不续租了图床也能继续用。算是一种“解耦”吧。而且服务器性能也有限，不想分出性能给图床。</p><p>原本想使用“轻量对象存储”的，但一看功能有点简陋，还是选好一些的吧，不弄轻量的，应该也贵不了多少。</p><p>本文将使用腾讯云对象存储搭建一个图床，并配置Obsidian和PicGo实现便利的上传图片功能。</p><p>有了自己的图床后，终于不必在写博客的时候担心图片怎么存储了，可以放心地插图</p><span id="more"></span><h1 id="添加子账号"><a href="#添加子账号" class="headerlink" title="添加子账号"></a>添加子账号</h1><p>主要参考官方文档：<a href="https://cloud.tencent.com/document/product/436/74373">对象存储 使用 PicGo+Typora+COS 搭建图床服务-实践教程-文档中心-腾讯云</a></p><p>添加子账号是为了进行key的权限管理，如果直接用主账号的key，被攻击了就完蛋了。</p><p>添加子账号官方文档说得比较清楚，这里就不赘述了。</p><p>登录子账号之后在<a href="https://console.cloud.tencent.com/cam/capi">密钥管理</a>页面获取如下信息：</p><ul><li>Secretld：开发者拥有的项目身份识别 ID，用于身份认证</li><li>SecretKey：开发者拥有的项目身份密钥</li><li>AppId：开发者访问 COS 服务时拥有的用户维度唯一资源标识，用以标识资源</li></ul><p>其中，SecretKey只有在创建密钥的时候才能看到，需要自行保存下来。</p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110163013368.png" alt="image.png"></p><h1 id="创建存储桶"><a href="#创建存储桶" class="headerlink" title="创建存储桶"></a>创建存储桶</h1><p>存储桶的官方介绍：<a href="https://cloud.tencent.com/document/product/436/13312">对象存储 存储桶概述-开发者指南-文档中心-腾讯云</a></p><blockquote><p><strong>存储桶（Bucket）</strong> 是<strong>对象</strong>的载体，可理解为存放对象的“容器”，且该“容器”无容量上限。对象以扁平化结构存放在存储桶中，无文件夹和目录的概念，用户可选择将对象存放到单个或多个存储桶中。</p></blockquote><p>而对象就是我们要上传的图片文件。</p><p>我新建了一个名为“image-host-自动生成的数字串”的存储桶，用来当做图床，同理，还可以创建其他的存储桶用于别的应用，比如同步思源笔记的数据等。</p><p>一些设置：</p><ul><li><strong>所属地域：</strong> 我选择了存放博客的服务器的所属地域</li><li><strong>多AZ（Availability Zone）：</strong> 简单来说就是花更多钱多地容灾，让你的数据更安全，且开启后无法关闭，一开始就得想好要不要选。我就不开启了，图床里面也不是特别重要的数据，省点钱，相信腾讯云的基础容灾能力。</li><li><strong>访问权限：</strong> 这里一开始我是选了私有读写，不过后来改为了<strong>公有读私有写</strong>，这样才能让博客读者能够看到图片。告警策略和防盗链之类的配置记得创建好之后要开，具体看官方文档，这里不赘述。</li><li><strong>版本控制：</strong> 作为图床，不需要修改图片，所以就不开版本控制，省存储空间。</li><li><strong>极智压缩：</strong> 这个开了是用于节约下行流量的，也就是存储的是原图，但是别人看你图片的时候是压缩后的，节约了流量费用。当然也可以在上传时压缩，节约上传费用。</li></ul><p><img src="https://images.yxchangingself.xyz/2025/01/20250110163148704.png" alt="image.png"></p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110163154003.png" alt="image.png"></p><h1 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h1><p><a href="https://cloud.tencent.com/document/product/436/102509">对象存储 存储桶切换自定义域名-实践教程-文档中心-腾讯云</a></p><p>这个时候要访问里面的图片还是得使用指定的一长串域名，而且“2024年1月1日后创建的桶不支持使用默认域名在浏览器预览文件”，直接在浏览器访问会下载图片而不是预览图片。因此需要自定义源站域名。</p><p>在桶管理页面的“域名与传输管理”里找到“自定义源站域名”，可以绑定已经备案的域名。</p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110163221933.png" alt="image.png"></p><p>我绑定了博客站点域名的子域名images，接着去额外申请了这个子域名的SSL免费证书。</p><p>需要注意的是，你绑定完之后，还需要手动去DNS服务商（在这里是腾讯云）那里配置一个CNAME记录，指向此处显示的域名。否则仍然会解析失败，显示一个红色感叹号：“当前链路下未检测到该域名的CNAME记录”。</p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110163434632.png" alt="image.png"></p><h1 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h1><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a>是一款支持多种云存储配置、快捷生成图片链接的工具。</p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110163923739.png" alt="image.png"></p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110163447459.png" alt="image.png"></p><p>将前面的信息都填进去，参考官方文档：</p><ul><li><strong>COS 版本：</strong> 选择 COS v5。</li><li><strong>设定 Secretld：</strong> 开发者拥有的项目身份识别 ID，用于身份认证，可在 <a href="https://console.cloud.tencent.com/capi">API 密钥管理</a> 页面中创建和获取。</li><li><strong>设定 SecretKey：</strong> 开发者拥有的项目身份密钥，可在 <a href="https://console.cloud.tencent.com/capi">API 密钥管理</a> 页面获取。</li><li><strong>设定 Bucket：</strong> 存储桶，COS 中用于存储数据的容器。有关存储桶的进一步说明，请参见 <a href="https://cloud.tencent.com/document/product/436/13312">存储桶概述</a> 文档。</li><li><strong>设定 AppId：</strong> 开发者访问 COS 服务时拥有的用户维度唯一资源标识，用以标识资源，可在 <a href="https://console.cloud.tencent.com/capi">API 密钥管理</a> 页面获取。</li><li><strong>设定存储区域：</strong> 存储桶所属地域信息，枚举值可参见 <a href="https://cloud.tencent.com/document/product/436/6224">可用地域</a> 文档，例如 ap-beijing、ap-hongkong、eu-frankfurt 等。</li><li><strong>设定存储路径：</strong> 图片存放到 COS 存储桶中的路径。</li><li><strong>设定自定义域名：</strong> 可选，若您为上方的存储空间配置了自定义源站域名，则可填写。相关介绍可参见 <a href="https://cloud.tencent.com/document/product/436/36638">开启自定义源站域名</a>。</li><li><strong>设定网址后缀：</strong> 通过在网址后缀添加 COS 数据处理参数实现图片压缩、裁剪、格式转换等操作，相关介绍可参见 <a href="https://cloud.tencent.com/document/product/436/54049">图片处理</a>。</li></ul><p>这里说的存储路径，是图片上传后图片在存储桶内的文件路径。</p><p>你可能会问，对象存储不是没有文件夹的吗？这个是为了让习惯了文件系统的用户更方便使用而加的，实际上并没有文件夹，我猜想实现方式是将同一个前缀的对象以文件夹的格式显示，或是存储了文件夹名作为对象的元数据。</p><p>用子域名来区分图床和博客站之后，就没什么必要建一个images目录来区分了。存储桶的根目录下新建名为“2025”的文件夹，按照年份来管理上传的图片，每年手动改一下上传目录就行。</p><p>为了避免重名图片覆盖掉已有的图片，设置为使用时间戳重命名图片。</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>博客中大多数图片都不需要很高的清晰度，只是用来展示大致操作、布局或样式，因此为了节约流量费用和存储费用，就需要将其压缩。</p><p>不过创建存储桶时选择的图片“极智压缩”和我想象得不太一样，我以为是上传前压缩好，存储的是压缩后的图片，没想到是查看时压缩，节约的是流量而不是存储费用。</p><p>看了文档之后得知也有上传时压缩，不过需要在请求体里面加参数，picgo在<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.4.0-beta.4">2.4.0-beta.4</a>开始支持极智压缩的配置，但实际使用中图片并没有被压缩，只是加了个已经可以被省略掉的参数。得找个别的办法。</p><p><a href="https://zi4dbek.github.io/posts/3849a396/index.html">图床杂谈：PicGo 安装图片压缩插件，减少图床原图大小 | zi4dbek 的小站</a></p><p>安装插件商店中的<a href="https://github.com/juzisang/picgo-plugin-compress">compress</a>插件后，选用imagemin本地压缩，可以把1.39MB压缩成251.67KB，不错。</p><p>但需要注意的是，安装之后需要在插件设置里面手动启用transformer-compress，才会在上传后进行压缩操作。</p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110164157716.png" alt="20250110164109815.png"></p><h2 id="Obsidian插件"><a href="#Obsidian插件" class="headerlink" title="Obsidian插件"></a>Obsidian插件</h2><p>我用于写博客的是obsidian这款笔记软件，它有个利用picgo来上传图片的插件Image Auto Upload Plugin。参见：<a href="https://zhuanlan.zhihu.com/p/627930429">Obsidian中图床自动上传设置-使用PicGo - 知乎</a></p><p>安装好插件之后，只要开着PicGo，就可以实现粘贴的同时上传到COS了。</p>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对象存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一次若依管理系统部署练习</title>
      <link href="/posts/ruoyi-deploy/"/>
      <url>/posts/ruoyi-deploy/</url>
      
        <content type="html"><![CDATA[<p>给新服务器搭建环境，以及部署一下若依后台管理系统，进一步熟悉部署流程，使用的是若依前后端分离版本。</p><p>因为主要是记录环境配置，所以若依部署的部分没那么详细。</p><p>服务器是腾讯云轻量应用服务器，Debian12。2核2G（但后面内存炸了，启动不起来，只能含泪加钱升级内存）</p><span id="more"></span><h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><p>参考文章：</p><ul><li><a href="https://www.sjkjc.com/posts/install-mysql8-on-debian-12/">在 Debian 12 中安装 MySQL 8</a></li><li><a href="https://zhuanlan.zhihu.com/p/671625026">Debian 安装 MySQL 8.0 - 知乎</a></li></ul><p>在官网找到MySQL APT Repository页面，然后用wget命令下载deb文件：<a href="https://dev.mysql.com/downloads/repo/apt/">MySQL :: Download MySQL APT Repository</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$wget</span> https://repo.mysql.com/mysql-apt-config_0.8.33-1_all.deb -P /tmp</span><br><span class="line"><span class="variable">$sudo</span> dpkg -i /tmp/mysql-apt-config_0.8.33-1_all.deb</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>报错提示gnupg未安装，那么就安装gnupg。</p><p>安装之后记得还得apt update，否则会报错说找不到<code>mysql-server</code>的安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt install gnupg</span><br><span class="line"><span class="variable">$sudo</span> apt update</span><br><span class="line"><span class="variable">$sudo</span> apt install mysql-server</span><br></pre></td></tr></table></figure><p>照着参考文章里面选默认安装选项，设定好root的密码，就可以用如下命令启动mysql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><p>进去之后创建新用户，并授予权限。原因是：</p><blockquote><p>注意：root账号在debian系统中无法直接开启远程连接，所以需要新建mysql用户；</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;your_username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;your_password&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;your_username&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">mysql<span class="operator">&gt;</span> FLUSH PRIVILEGES;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果想要改密码，那就登录需要改密码的账号，进入mysql终端，执行以下命令（参考<a href="https://blog.csdn.net/qq_40757240/article/details/118068317">MySQL修改root用户密码_修改mysql root密码-CSDN博客</a>）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;your_username&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;new_password&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h1><ul><li>官网下载：<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">Java Archive Downloads - Java SE 8</a></li><li>主要参考：<a href="https://blog.csdn.net/weixin_52952273/article/details/139432464"><strong>Debian 12 JDK安装教程_debian12 安装jdk-CSDN博客</strong></a></li><li><a href="https://cn.linux-console.net/?p=14501">如何在 Debian 和 Ubuntu 上安装 Oracle Java JDK 18</a></li></ul><p>用网上随便找的共享Oracle账号下载了jdk 8u202的tar.gz包之后，上传到&#x2F;usr&#x2F;local&#x2F;java路径，解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> tar -zxvf jdk-8u202-linux-x64.tar.gz -C /usr/local/java</span><br></pre></td></tr></table></figure><p>修改环境变量：<a href="https://blog.csdn.net/u011262253/article/details/86083351">Linux 添加环境变量的五种方法_linux添加环境变量-CSDN博客</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> vim /etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk1.8.0_202</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使环境变量生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$source</span> /etc/profile</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>不过如果想要让其对所有用户生效，需要重启系统。</p><h1 id="安装redis"><a href="#安装redis" class="headerlink" title="安装redis"></a>安装redis</h1><p>debian安装redis很简单，用apt可以直接安装redis-server，中途没有遇到什么问题，安装完毕就自动启动服务了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> apt update</span><br><span class="line"><span class="variable">$sudo</span> apt install redis-server</span><br></pre></td></tr></table></figure><h1 id="部署若依"><a href="#部署若依" class="headerlink" title="部署若依"></a>部署若依</h1><ul><li>官方部署文档：<a href="https://doc.ruoyi.vip/ruoyi-vue/document/hjbs.html">环境部署 | RuoYi</a></li></ul><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>上传后端的jar包和前端打包好的dist目录。</p><p>前端文件我放在&#x2F;data&#x2F;www&#x2F;ruoyi，后端我放在&#x2F;home&#x2F;ruoyi&#x2F;jar当中。本来是放在其他地方的，但发现ruoyi启动时在上述目录生成logs目录了，大概是忘记改默认日志路径了，所以干脆使用这个路径来放了。</p><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>将后端所需的sql文件上传到服务器，在sql文件所在的目录进入mysql终端，创建<code>ry-vue</code>数据库，由于有特殊符号连字符，这里注意要用倒引号括起来。</p><p>接着执行sql脚本。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database `ry<span class="operator">-</span>vue`;</span><br><span class="line">mysql<span class="operator">&gt;</span> use `ry<span class="operator">-</span>vue`;</span><br><span class="line">mysql<span class="operator">&gt;</span> source ry_20240629.sql;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="启动后端"><a href="#启动后端" class="headerlink" title="启动后端"></a>启动后端</h2><p><a href="http://将若依官网提供的run.bat脚本改为适用于linux的run.sh/">将若依官网提供的run.bat脚本改为适用于linux的run.sh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[信息] 使用Jar部署Web应用&quot;</span></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"><span class="comment">#改为jar包存放的路径</span></span><br><span class="line"><span class="built_in">cd</span> /home/ruoyi/jar </span><br><span class="line"></span><br><span class="line">JAVA_OPTS=<span class="string">&quot;-Xms256m -Xmx1024m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=512m&quot;</span></span><br><span class="line"></span><br><span class="line">java <span class="variable">$JAVA_OPTS</span> -jar ruoyi-admin.jar</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;按任意键继续...&quot;</span></span><br></pre></td></tr></table></figure><p>运行run.sh即可。</p><p>如果需要长期挂在后台运行，使用screen命令创建虚拟终端，随后在虚拟终端中运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$screen</span> -R ruoyi</span><br><span class="line">$./run.sh</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>Ctrl+A+D</code>可以离开这个终端，之后可以通过如下命令回到这个名为ruoyi的终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$screen</span> -r ruoyi</span><br></pre></td></tr></table></figure><h2 id="配置nginx站点"><a href="#配置nginx站点" class="headerlink" title="配置nginx站点"></a>配置nginx站点</h2><p>和<a href="https://yxchangingself.xyz/posts/hexo-blog-reboot-2024/">上一篇文章</a>一样，在sites-available目录下复制一份模板站点的配置文件，配置软链接到sites-enabled目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/ruoyi</span><br><span class="line"><span class="variable">$ln</span> -s /etc/nginx/sites-available/ruoyi /etc/nginx/sites-enabled/ruoyi</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>跟着官方文档配置站点</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#listen       80;</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">12306</span>;<span class="comment"># 这里可以换成对外开放的端口</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /data/www/ruoyi;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /prod-api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> REMOTE-HOST <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重载nginx配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$nginx</span> -s reload</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过服务器IP加端口或者域名加端口，就能访问到若依的前端页面了，当然，腾讯云的防火墙得加个开放对应端口的规则，这里不赘述。</p><h2 id="解决405错误"><a href="#解决405错误" class="headerlink" title="解决405错误"></a>解决405错误</h2><p>不过，验证码没有出来，浏览器控制台还报405 (Not Allowed)错误。</p><p>浏览器控制台的报错是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://服务器IP:配置文件指定的端口/stage-api/login 405 (Not Allowed)</span><br></pre></td></tr></table></figure><p>原来是因为，我打包的时候用的是stage环境的配置，而nginx配的是prod的配置，将“location &#x2F;prod-api&#x2F;”改为“location &#x2F;stage-api&#x2F;”就完成了。</p><h1 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h1><p>毕竟只是测试部署流程，若依后台的初始密码都没有改，将端口暴露在公网还不做任何防护不太好，所以做好准备之前还是先将这个站点关掉吧。</p><p>这个也很简单，将sites-enabled目录下的软链接删掉即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$rm</span> /etc/nginx/sites-enabled/ruoyi</span><br></pre></td></tr></table></figure><p>或者防火墙直接关掉这个端口更快。</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> mysql </tag>
            
            <tag> java </tag>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年底，hexo博客的迁移部署、升级和重启</title>
      <link href="/posts/hexo-blog-reboot-2024/"/>
      <url>/posts/hexo-blog-reboot-2024/</url>
      
        <content type="html"><![CDATA[<p>2024年底，以前学生价活动租的腾讯云服务器的续费次数已经用光，租了个新服务器，以前挂在上面的服务都得迁移，五年前搭建的Hexo博客也是如此。</p><p>迁移之后，将相关依赖全都升级了一遍，又加了一些新的功能，比如夜间模式。</p><p>以前部署的时候很多东西不了解，现在基本上都能弄明白是怎么回事了。</p><span id="more"></span><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a></p><p>现在用的主要是pnpm：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install -g pnpm</span><br></pre></td></tr></table></figure><p>不只是服务器，电脑也换了新的，不过所需的Nodejs和Git在之前就安装好了，只差Hexo。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pnpm</span> install -g hexo-cli</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在github上拉取自己的博客代码目录安装依赖并启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pnpm</span> install</span><br><span class="line"><span class="variable">$hexo</span> clean</span><br><span class="line"><span class="variable">$hexo</span> server</span><br></pre></td></tr></table></figure><p>没启动成功，因为存在一些版本冲突。</p><h1 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h1><p>我新建了另一个文件夹，使用如下命令安装Icarus主题时报错，难道是主题的问题？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> init</span><br><span class="line"><span class="variable">$pnpm</span> install -S hexo-theme-icarus hexo-renderer-inferno</span><br><span class="line"><span class="variable">$hexo</span> config theme icarus</span><br><span class="line"><span class="variable">$hexo</span> server</span><br></pre></td></tr></table></figure><p>我找到了情况相同的issue：<a href="https://github.com/ppoffice/hexo-theme-icarus/issues/1318">ERROR Process failed: layout&#x2F;tag.jsx · Issue #1318 · ppoffice&#x2F;hexo-theme-icarus</a></p><p><img src="https://images.yxchangingself.xyz/2025/01/20250110161546062.png" alt="image.png"></p><p>issue中的解决方案和我在报错里面看到的两个缺失的依赖一样，只不过我不太明白为什么会缺这两个。</p><p>除了装那两个缺失的依赖之外，还装了hexo-log，否则也运行不起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pnpm</span> install -S @babel/preset-env</span><br><span class="line"><span class="variable">$pnpm</span> install -S babel-plugin-inferno</span><br><span class="line"><span class="variable">$pnpm</span> install -S hexo-log</span><br></pre></td></tr></table></figure><p>安装完毕后，用于测试的新Hexo项目就可以运行了。</p><p>按照前面的流程其实将原本无法启动的源码也启动起来了。</p><h1 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h1><p>本地的hexo源代码修复了，该部署到服务器了。以前部署服务器的时候还基本什么都不懂，照着网上的资料一通操作，用宝塔面板搭好了，现在什么也想不起来，正好借此回忆一下。</p><p>新服务器我改用了Debian（以前的是CentOS），没选宝塔应用模板，开局只有装好系统的机子，没有其他应用。之后也尽量不使用宝塔这类运维面板，毕竟有时候限制有点大，还会让自己学不到东西。</p><ul><li><a href="https://blog.csdn.net/qq_41467882/article/details/124861190">将 Hexo 部署&#x2F;迁移到腾讯云轻量服务器_hexo部署到腾讯云-CSDN博客</a></li><li><a href="https://cloud.tencent.com/developer/article/1140005">Hexo 博客部署到腾讯云教程-腾讯云开发者社区-腾讯云</a>****</li><li><a href="https://blog.csdn.net/jiunian_2761/article/details/122908142">Hexo博客进阶：将Hexo部署到云服务器（CentOS）_centos运行hexo博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/lhrfighting/article/details/117845405"><strong>静态博客Hexo搭建——本地and服务器_hexo 宝塔-CSDN博客</strong></a>（主要参考此博客）</li><li><a href="https://segmentfault.com/q/1010000000410277">linux 大家一般把web目录放在哪个分区下面呢？放在&#x2F;data目录下面安全吗？ - SegmentFault 思否</a></li></ul><h2 id="安装git并添加git用户"><a href="#安装git并添加git用户" class="headerlink" title="安装git并添加git用户"></a>安装git并添加git用户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$apt</span> install git</span><br><span class="line"><span class="variable">$useradd</span> -m git <span class="comment">#参数m代表为该用户生成家目录</span></span><br><span class="line"><span class="variable">$passwd</span> git <span class="comment">#为git用户设置密码</span></span><br></pre></td></tr></table></figure><h2 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h2><p>如果之前没有生成SSH公钥，就回到<strong>本地计算机</strong>用如下命令生成（参见：<a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">生成新的 SSH 密钥并将其添加到 ssh-agent - GitHub 文档</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="variable">$ssh</span>-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="mailto:&#x79;&#111;&#x75;&#114;&#x5f;&#x65;&#x6d;&#x61;&#x69;&#108;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;">&#x79;&#111;&#x75;&#114;&#x5f;&#x65;&#x6d;&#x61;&#x69;&#108;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#111;&#x6d;</a>替换为自己的邮箱。</p><p>在用户文件夹的.ssh目录下，会生成id_rsa和id_rsa.pub文件，分别是私钥和公钥。</p><p>视角回到<strong>远程计算机</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$su</span> - git <span class="comment">#切换到git用户</span></span><br><span class="line"><span class="variable">$mkdir</span>  ~/.ssh</span><br><span class="line"><span class="variable">$vim</span>  ~/.ssh/authorized_keys</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将id_rsa.pub文件里面的公钥复制粘贴进去，就添加好了。</p><p>添加完公钥之后调整权限使得只有git这个用户可用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$chmod</span> 600 /home/git/.ssh/authorized_keys</span><br><span class="line"><span class="variable">$chmod</span> 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p>在本地主机的终端检查是否可以登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span> -v git@服务器IP <span class="comment">#参数v代表verbose，详细显示调试信息，可以去掉</span></span><br></pre></td></tr></table></figure><p>这样就可以用git用户免密登录到服务器了。这也是要单独新建git用户并严格限制权限的原因，总不能用root用户免密登录。（以前我没配这个，确实是用root账号每次输密码登录的）</p><h2 id="配置hooks"><a href="#配置hooks" class="headerlink" title="配置hooks"></a>配置hooks</h2><p>关于Git钩子可参见官方文档：<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">Git - Git 钩子</a></p><blockquote><p>和其它版本控制系统一样，Git 能<strong>在特定的重要动作发生时触发自定义脚本。</strong> 有两组这样的钩子：客户端的和服务器端的。 客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。</p></blockquote><p>你将其理解为一个触发器即可，发生某个事件或者说动作的时候就执行自定义脚本。</p><p>Hexo部署博客的过程：</p><ol><li>使用源代码（未渲染的markdown以及主题的代码等）生成网站静态文件</li><li>将静态文件通过git从本地库提交到远程库</li><li>git的远程库使用bare参数做成没有工作区的裸仓库形式，将网站目录当做其工作区，在远程裸仓库接收到推送时，将收到的内容检出到网站目录中，完成对网站内容的更新。</li></ol><p>首先建好网站目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$su</span> -</span><br><span class="line"><span class="variable">$mkdir</span> -p /data/www/blog</span><br><span class="line"><span class="variable">$chown</span> -R git:git /data/www/blog</span><br><span class="line"><span class="variable">$chmod</span> -R 755 /data/www/blog</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着建好裸仓库（相关概念参见：<a href="https://cloud.tencent.com/developer/article/1825910">Git init和Git init –bare的区别，以及Git init –bare如何创建工作空间-腾讯云开发者社区-腾讯云</a>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cd</span> /home/git</span><br><span class="line"><span class="variable">$git</span> init --bare blog.git</span><br><span class="line"></span><br><span class="line"><span class="variable">$vim</span> blog.git/hooks/post-receive</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后编写<code>hooks/post-receive</code>脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">git --work-tree=/data/www/blog --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><p>这个命令是用于从指定的 Git 仓库（参数git-dir）检出文件到一个非标准的工作目录（参数work-tree），强制覆盖原有文件。</p><p>由于新建的是裸仓库，没有工作空间，所以在触发post-receive（接收提交）的时候，需要利用以上钩子将提交内容检出到指定的工作空间中，也就是网站目录下，这样就实现了，git提交到这个远程库就可以更新网站。</p><p>最后调一调权限就大功告成了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$chown</span> -R git:git /home/git/blog.git</span><br><span class="line"><span class="variable">$chmod</span> +x /home/git/blog.git/hooks/post-receive</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h2><p>安装不必多言：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$apt</span> install nginx</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vim</span> /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>主配置文件<code>nginx.conf</code>中导入了<code>sites-enabled</code>目录下所有配置的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="attribute">include</span> /etc/nginx/sites-enabled/*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>里面只有一个default文件，还是链接着<code>sites-enabled</code>同目录下<code>sites-available</code>下的default的软链接文件。</p><p>相关概念参见：<a href="https://www.jianshu.com/p/42c4ffd044e6">Nginx 的 sites-available 和 sites-enabled 的区别 - 简书</a></p><p>这是为了方便配置各个站点而设计的结构。于是在<code>sites-available</code>复制了一份default文件，在<code>sites-enabled</code>新建了对应的链接文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cp</span> /etc/nginx/sites-available/default /etc/nginx/sites-available/hexo-blog</span><br><span class="line"><span class="variable">$ln</span> -s /etc/nginx/sites-available/hexo-blog /etc/nginx/sites-enabled/hexo-blog</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里要注意，ln命令新建的链接文件是后面那个，而不是前面那个，一开始我写反了提示我文件已存在。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$nginx</span> -t <span class="comment"># 测试配置文件有无语法错误</span></span><br><span class="line"><span class="variable">$nginx</span> -s reload <span class="comment"># 重载配置文件</span></span><br></pre></td></tr></table></figure><p>这样一来就全部配置好了，可以输入IP在浏览器访问。</p><h2 id="部署SSL证书"><a href="#部署SSL证书" class="headerlink" title="部署SSL证书"></a>部署SSL证书</h2><p>将域名解析记录修改为新的IP之后，还需要部署SSL证书来让用户可以通过https访问。</p><p>腾讯云的免费证书的签发有效期限从一年变为了三个月，不过好歹仍然免费，不过是到时候麻烦点，三个月要重新申请一次。</p><p>旧的一月份才过期，先用旧的顶着。</p><p>在nginx配置目录新建一个目录用来专门放ssl证书的4个文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> /etc/nginx/certificate</span><br></pre></td></tr></table></figure><p>nginx配置如下，要注意这里的地址是相对于<code>nginx.conf</code>文件的地址而不是相对于<code>sites-available/hexo-blog</code>的地址，因为站点配置最终是被导入到主配置文件当中。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># listen 80 default_server;</span></span><br><span class="line">        <span class="comment"># listen [::]:80 default_server;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># SSL configuration</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl default_server;</span><br><span class="line">        <span class="attribute">ssl_certificate</span> certificate/yxchangingself.xyz_bundle.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> certificate/yxchangingself.xyz.key;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">root</span> /data/www/blog;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        <span class="attribute">index</span> index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">server_name</span> yxchangingself.xyz;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">                <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">                <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样一来就完成了，可以通过域名访问到博客，和几天前过期前一样。</p><h1 id="升级依赖"><a href="#升级依赖" class="headerlink" title="升级依赖"></a>升级依赖</h1><p>升级Icarus主题，不过遇到了Error [ERR_REQUIRE_ESM]: require() of ES Module not support的问题：<a href="https://blog.csdn.net/zsusanj/article/details/127866155">错误 [ERR_REQUIRE_ESM]:不支持 ES 模块的 require()怎么解决_require() of es module-CSDN博客</a></p><p>查看了一下有很多依赖已经过时了，需要升级。</p><p>趁着这个机会，我打算全面升级一下博客源码的依赖版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pnpm</span> update</span><br></pre></td></tr></table></figure><p>执行之后仍然有17个依赖过时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WARN  17 deprecated subdependencies found: axios@0.19.2, chokidar@1.7.0, core-js@1.2.7, cuid@2.1.8, fsevents@1.2.13, glob@6.0.4, glob@7.2.3, hexo-bunyan@1.0.0, highlight.js@9.18.5, inflight@1.0.6, resolve-url@0.2.1, rimraf@2.4.5, source-map-resolve@0.5.3, source-map-resolve@0.6.0, source-map-url@0.4.1, swig-templates@2.0.3, urix@0.1.0</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/Guzarish/article/details/128006070">npm 如何更新项目最新依赖包-CSDN博客</a></li><li><a href="https://blog.csdn.net/u012855229/article/details/139372358">几种更新 npm 项目依赖的实用方法_npm 更新依赖-CSDN博客</a></li></ul><p>参考以上资料，npm全局安装npm-check-updates，并执行<code>ncu -u</code>命令，将如下过时依赖的版本在<code>package.json</code>文件中修改：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bulma-stylus              ^0.8.0  →  ^0.9.1</span><br><span class="line">chokidar                  ^3.6.0  →  ^4.0.1</span><br><span class="line">hexo                      ^5.4.2  →  ^7.3.0</span><br><span class="line">hexo-component-inferno   ^0.10.5  →  ^3.1.2</span><br><span class="line">hexo-deployer-git         ^2.1.0  →  ^4.0.0</span><br><span class="line">hexo-generator-archive    ^1.0.0  →  ^2.0.0</span><br><span class="line">hexo-generator-category   ^1.0.0  →  ^2.0.0</span><br><span class="line">hexo-generator-feed       ^2.2.0  →  ^3.0.0</span><br><span class="line">hexo-generator-index      ^1.0.0  →  ^4.0.0</span><br><span class="line">hexo-generator-tag        ^1.0.0  →  ^2.0.0</span><br><span class="line">hexo-log                  ^2.0.0  →  ^4.1.0</span><br><span class="line">hexo-pagination           ^1.0.0  →  ^4.0.0</span><br><span class="line">hexo-renderer-ejs         ^1.0.0  →  ^2.0.0</span><br><span class="line">hexo-renderer-inferno     ^0.1.3  →  ^1.0.2</span><br><span class="line">hexo-renderer-marked      ^2.0.0  →  ^6.3.0</span><br><span class="line">hexo-renderer-stylus      ^2.1.0  →  ^3.0.1</span><br><span class="line">hexo-server               ^1.0.0  →  ^3.0.0</span><br><span class="line">hexo-util                 ^2.7.0  →  ^3.3.0</span><br><span class="line">inferno                  ^7.4.11  →  ^8.2.3</span><br><span class="line">inferno-create-element   ^7.4.11  →  ^8.2.3</span><br></pre></td></tr></table></figure><p>运行时遇到了问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR Asset render failed: css/default.css</span><br><span class="line">Error: D:/02_Areas/Blog/ChangingSelf_blog_src/node_modules/bulma-stylus/stylus/utilities/functions.styl:8:5</span><br></pre></td></tr></table></figure><p>查找issue发现有人已经遇到过了：<a href="https://github.com/ppoffice/hexo-theme-icarus/issues/1243">【已解决】主题与bulma-stylus@0.9.2-rc.1不兼容。请不要手贱乱更新依赖。 · Issue #1243 · ppoffice/hexo-theme-icarus</a></p><p>把那个依赖的版本改回旧版本就ok。</p><h1 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h1><h2 id="live2D"><a href="#live2D" class="headerlink" title="live2D"></a>live2D</h2><p>升级完之后live2D不见了，因为原本的live2D涉及修改主题的源代码。</p><p>参考着以前自己写的博客很快恢复了：<a href="https://yxchangingself.xyz/posts/hexo_blog_switch_theme_3/#live2D%E7%9C%8B%E6%9D%BF%E5%A8%98">记第三次博客切换主题以及主题优化 - 编程技术笔记</a></p><p>写博客还是挺有用的，帮助别人也帮助未来的自己。</p><h2 id="关于图片"><a href="#关于图片" class="headerlink" title="关于图片"></a>关于图片</h2><p>之后就不用图床了，直接将图放在&#x2F;source&#x2F;images文件夹里面了，图片还是放自己这里安心，占空间就占空间吧，总比图片丢了好。</p><p>obsidian可以设置将图片放在“当前文件所在文件夹下的指定子文件夹中”，指定为attachments目录就可以了。</p><p>本地存放文件有两种方式，方案一就是上面那种，方案二是hexo提供的，每次新增会生成一个和文章同名的文件夹用于放该文章的图片。</p><p>虽然可以更方便地知道图片的归属了，但文章间图片共享变复杂了，也没法用obsidian实现，得手动放图片，更麻烦。</p><p>删除未引用图片这件事可以交给obsidian。</p><p>编辑：以上做法好像不行，还是得放在&#x2F;source&#x2F;images下面，等之后有空再去调整。</p><h2 id="热力图"><a href="#热力图" class="headerlink" title="热力图"></a><a href="https://github.com/codepzj/hexo-graph">热力图</a></h2><blockquote><p>hexo-graph，一个基于 echarts，集成博客热力图，博客月份统计图，分类统计图，标签统计图的多元化可交互插件。</p></blockquote><h2 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h2><p>其他插件主要添加功能性的，涉及hexo内嵌标签等非markdown语法的插件就算了。</p><p>参考文章：<a href="https://loafing.cn/posts/hexo-tags.html">「推荐」本站用到的 hexo 插件 | 若风</a></p><h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a><a href="https://github.com/netcan/hexo-generator-index-pin-top">文章置顶</a></h4><blockquote><p>先 <code>npm uninstall hexo-generator-index --save</code><br>再 <code>npm install hexo-generator-index-pin-top --save</code><br>在 <code>Front-matter</code> 插入 <code>top:100</code>，数字越大文章在首页的位置越靠前。</p></blockquote><h4 id="文章隐藏"><a href="#文章隐藏" class="headerlink" title="文章隐藏"></a><a href="https://github.com/printempw/hexo-hide-posts">文章隐藏</a></h4><blockquote><p><code>npm install hexo-hide-posts --save</code> 默认 <code>hidden: true</code> 用于隐藏，hidden 可自定义为自己喜欢的名字。</p></blockquote><h3 id="热力图-1"><a href="#热力图-1" class="headerlink" title="热力图"></a><a href="https://github.com/codepzj/hexo-graph">热力图</a></h3><p>可以激励写作，所以单开了一个页面放相关的数据。</p><h2 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h2><p>照着这一篇修改就行：<a href="https://scutlmg.github.io/2021/09/14/Hexo-icarus%E4%B8%BB%E9%A2%98%E9%BB%91%E5%A4%9C%E6%A8%A1%E5%BC%8F%E4%BB%A5%E5%8F%8A%E8%83%8C%E6%99%AF/">Hexo-icarus主题黑夜模式以及背景</a></p><p>日间模式的背景图没啥想法就先不加了，其实博客主体组件都挡着背景，也不太适合放，夜间模式的流星挺好的。</p><!-- ![](/images/hexo夜间模式.png) --><p><img src="https://yxchangingself.xyz/images/hexo%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F.png"></p>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> hexo </tag>
            
            <tag> ssl </tag>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制的第一个vscode语言扩展插件</title>
      <link href="/posts/vscode-extension/"/>
      <url>/posts/vscode-extension/</url>
      
        <content type="html"><![CDATA[<p>最近迷上了TRPG（Tabletop Role-playing game，桌上角色扮演游戏），即俗称的“跑团”。玩家在主持人的引导下，扮演自己的游戏角色进行冒险。在结束之后，会有想要将这个过程记录下来的欲望，从而有了各种各样的“跑团replay视频”。</p><p>制作跑团replay视频比较复杂，但<a href="https://www.bilibili.com/video/BV1GY4y1H7wK/">回声工坊</a>这一高效工具的出现，让这个过程变得非常简单，只需要找好媒体素材（角色立绘、背景图片、BGM、音效等）以及处理一下跑团Log（即跑团游戏记录）就可以很快输出一集视频。</p><p>为了更加方便跑团replay视频的制作，我编写了一个vscode插件——<code>TRPG Replay Generator Log</code>——来方便跑团Log的处理。</p><p>本文对编写这个插件的过程做一个记录和总结。</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide">Visual Studio Code Syntax Highlight Guide</a></li><li><a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Visual Studio Code publishing extension</a></li><li><a href="https://macromates.com/manual/en/language_grammars">TextMate language grammars</a></li></ul><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>回声工坊这个软件所做的工作其实是根据输入的特定格式的Log文件、媒体定义文件、角色配置文件，将准备好的各种素材按照一定的规则拼接在一起。</p><p>回声工坊的Log文件的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"># 综合演示</span><br><span class="line">&lt;set:formula&gt;:sincurve</span><br><span class="line">&lt;set:am_method_default&gt;:&lt;pass_up_black=20&gt;</span><br><span class="line">&lt;set:tx_method_default&gt;:&lt;w2w=1&gt;</span><br><span class="line">&lt;set:bb_method_default&gt;:&lt;replace=0&gt;</span><br><span class="line"></span><br><span class="line">&lt;set:BGM&gt;:BGM1</span><br><span class="line">&lt;set:speech_speed&gt;:500</span><br><span class="line">&lt;background&gt;&lt;replace=30&gt;:bg1</span><br><span class="line"></span><br><span class="line">[张安翔]:^本视频是DanDDXuanX 编写的#TRPG-Replay-Generator的基本演示工程。&#123;SE1;*3.5&#125;</span><br><span class="line">[KP]:项目链接：#https://github.com/DanDDXuanX/TRPG-Replay-Generator&#123;SE1;5&#125;</span><br><span class="line">&lt;set:speech_speed&gt;:300</span><br><span class="line">&lt;hitpoint&gt;:(张安翔,10,10,9)</span><br><span class="line"></span><br><span class="line">[张安翔]:^本工具基于python3 和 pygame2.0，在windows10系统上开发。#演示使用的媒体素材来自网络，侵删。&#123;SE1;5&#125;</span><br><span class="line">[张安翔]:那么，演示开始。&#123;SE1;5&#125;</span><br><span class="line"></span><br><span class="line">&lt;dice&gt;:(测试姓名1 力量,100,75,3),(测试姓名2 sancheck,100,60,25),(测试姓名3 图书馆,100,75,85),(测试姓名4 侦察,100,60,100)</span><br><span class="line"></span><br><span class="line">&lt;hitpoint&gt;:(张安翔,10,9,5)</span><br><span class="line"></span><br><span class="line">&lt;dice&gt;:(测试姓名1 力量,100,75,3),(测试姓名2 sancheck,100,60,25),(测试姓名3 图书馆,100,75,85),(测试姓名4 侦察,100,60,100)</span><br><span class="line">&lt;dice&gt;:(1d8,8,NA,4),(1d4,4,NA,4)</span><br><span class="line">&lt;hitpoint&gt;:(短,4,4,1)</span><br><span class="line">&lt;hitpoint&gt;:(用来测试的一极长文本,4,1,4)</span><br><span class="line"></span><br><span class="line">&lt;background&gt;&lt;cross=60&gt;:bg2</span><br><span class="line">&lt;set:speech_speed&gt;:250</span><br><span class="line">&lt;set:am_method_default&gt;:&lt;replace=0&gt;</span><br><span class="line">&lt;set:tx_method_default&gt;:&lt;all=0&gt;</span><br><span class="line">&lt;set:am_dur_default&gt;:10</span><br><span class="line">&lt;set:tx_dur_default&gt;:7</span><br><span class="line"></span><br><span class="line">&lt;set:BGM&gt;:stop</span><br><span class="line"></span><br><span class="line">[张安翔]:在对话行里建立最基本的发言小节，播放基本音效。&#123;SE1;5&#125;</span><br><span class="line">[KP]&lt;black&gt;:使用切换效果修饰符，指定切换模式为渐隐。&#123;SE1;5&#125;</span><br><span class="line"></span><br><span class="line">&lt;hitpoint&gt;:(张安翔,10,5,7)</span><br><span class="line"></span><br><span class="line">[张安翔]&lt;black=30&gt;:在切换效果修饰符中，指定切换时间为30。&#123;SE1;5&#125;</span><br><span class="line">[KP]&lt;black&gt;:使用文本效果修饰符，指定文字显示模式为逐字显示。&lt;w2w&gt;&#123;SE1;5&#125;</span><br><span class="line">[张安翔]&lt;black&gt;:在文本效果修饰符中，指定单位时间为2。&lt;w2w=2&gt;&#123;SE1;5&#125;</span><br><span class="line"></span><br><span class="line">&lt;hitpoint&gt;:(张安翔,10,7,4)</span><br><span class="line"></span><br><span class="line">[张安翔,KP.double]&lt;black&gt;:在角色框里指定多位角色，实现多人同框。&lt;w2w=2&gt;&#123;SE1;5&#125;</span><br><span class="line">[KP.double,张安翔]&lt;black&gt;:置于首位的角色为主要发言人，其余角色设置为半透明。&lt;w2w=2&gt;&#123;SE1;5&#125;</span><br><span class="line"></span><br><span class="line">&lt;set:BGM&gt;:BGM1</span><br><span class="line"></span><br><span class="line">[旁白]&lt;black&gt;:没有立绘的文本框同样以角色的形式在角色表里定义，可以作为旁白或者骰子使用。&lt;w2w=2&gt;</span><br><span class="line"></span><br><span class="line">&lt;hitpoint&gt;:(张安翔,10,4,9)</span><br><span class="line"></span><br><span class="line">&lt;set:BGM&gt;:stop</span><br><span class="line"></span><br><span class="line">&lt;background&gt;&lt;black=60&gt;:bg1</span><br><span class="line"></span><br><span class="line">[张安翔(60),KP.double]&lt;replace=0&gt;:调整角色的透明度参数，手动设置立绘透明度。&lt;w2w=5&gt;&#123;SE1;5&#125;</span><br><span class="line">[张安翔.scared,KP.double]:指明角色的subtype，展示差分立绘。&lt;w2w=5&gt;&#123;SE1;5&#125;</span><br><span class="line">[张安翔,KP.double]:在发言文本中以井号作为换行符；#设置手动换行模式；#并逐行显示内容。&lt;l2l=5&gt;&#123;SE1;5&#125;</span><br><span class="line"></span><br><span class="line">[旁白]&lt;black&gt;:———————演示结束——————</span><br><span class="line"></span><br><span class="line">&lt;hitpoint&gt;:(张安翔,10,9,0)</span><br></pre></td></tr></table></figure><p>回声工坊的作者用的是<code>Sublime</code>，所以他只写了适用于<code>Sublime</code>的语法高亮文件，用<code>vscode</code>编辑跑团Log的我就没法享受到语法高亮了。</p><p>于是我打算照着作者发在交流群里的Sublime语法高亮文件来写一个vscode语法高亮文件之类的东西，不过后来发现还是得开发一个语言扩展才行。</p><p>找到了这样一篇官网的文档：<a href="https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide">Visual Studio Code Syntax Highlight Guide-官网文档</a>，接着开始开发vscode扩展。</p><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><h2 id="安装脚手架工具"><a href="#安装脚手架工具" class="headerlink" title="安装脚手架工具"></a>安装脚手架工具</h2><p>按照<a href="https://code.visualstudio.com/api/get-started/your-first-extension">Your First Extension</a>这篇文章中说的那样，首先安装<a href="https://nodejs.org/en/">Node.js</a>和<a href="https://git-scm.com/">Git</a>，接着用下面的命令安装Yeoman和VS Code Extension Generator：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yo generator-code</span><br></pre></td></tr></table></figure><p>Yeoman是个脚手架工具，可以用简单的指令快速搭建好开发环境。安装完毕之后，使用如下指令唤出一个命令行菜单，用上下箭头按键来选择要搭建的环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yo code</span><br></pre></td></tr></table></figure><h2 id="选择要搭建的扩展"><a href="#选择要搭建的扩展" class="headerlink" title="选择要搭建的扩展"></a>选择要搭建的扩展</h2><p>借用官网文档中的图片：<br><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/yo-new-language.png" alt="选择要搭建的扩展"></p><h2 id="输入一些基本信息"><a href="#输入一些基本信息" class="headerlink" title="输入一些基本信息"></a>输入一些基本信息</h2><p><img src="https://code.visualstudio.com/assets/api/language-extensions/syntax-highlighting/generated-new-language-extension.png" alt="输入一些基本信息"></p><p>从回声工坊的作者写的<code>sublime</code>语法高亮文件<code>RepGenLog.sublime-syntax</code>中可以知道他将回声工坊的log文件的扩展名定义为“.rgl”，也就是<code>Replay Generator Log</code>的首字母缩写（一开始我还记错成“.rpl”，以为是“replay”的缩写），所以这个语言扩展的名字就定为了“TRPG Replay Generator Log”，语言名称也定为“rgl”</p><p>因为官网的文档已经说的很详细了，这部分就不细说了，不想单纯复制粘贴。</p><h2 id="package-json文件"><a href="#package-json文件" class="headerlink" title="package.json文件"></a>package.json文件</h2><p>生成好的文件当中，比较重要的就是这个<code>package.json</code>文件了，因为这个扩展插件的基本信息都在这个里面，主要的文件的路径也是在这里配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;trpg-replay-generator-log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;displayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TRPG Replay Generator Log&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Syntax highlighting and code snippets for TRPG-Replay-Generator-Log language&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;vscode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.67.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;publisher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yxChangingSelf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;categories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;Programming Languages&quot;</span><span class="punctuation">,</span><span class="string">&quot;Themes&quot;</span><span class="punctuation">,</span><span class="string">&quot;Snippets&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;languages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;rgl&quot;</span><span class="punctuation">,</span> <span class="string">&quot;rgl&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.rgl&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;configuration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./language-configuration.json&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">,</span><span class="attr">&quot;grammars&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;scopeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source.rgl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./syntaxes/rgl.tmLanguage.json&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这里注意其中的<code>contributes</code>，这里配置了<code>languages</code>和<code>grammars</code>两个属性。</p><p>前者配置了语言相关的内容，包括id、与该语言关联的文件扩展名以及语言配置文件的路径”.&#x2F;language-configuration.json”。</p><p>后者配置了语法相关的内容，包括展示给人看的语言名称、根scope以及语法定义文件的路径”.&#x2F;syntaxes&#x2F;rgl.tmLanguage.json”。</p><p>因为目前只需要语法高亮，可以先看后面这个文件。</p><h1 id="标记化（Tokenization）"><a href="#标记化（Tokenization）" class="headerlink" title="标记化（Tokenization）"></a>标记化（Tokenization）</h1><p>要实现语法高亮，首先需要将这个语言标记化，学过编译原理的应该知道这就是词法分析那一步，也就是将输入划分为一个个词法单元（Token），告诉计算机每一个词法单元是哪一类。（Breaking text into a list of tokens）</p><blockquote><p>Each <strong>token</strong> is associated with a scope that defines the context of the token. A <strong>scope</strong> is a dot separated list of identifiers that specify the context of the current token. The <code>+</code> operation in JavaScript, for example, has the scope <code>keyword.operator.arithmetic.js</code>.</p></blockquote><p>这里的<code>scope</code>就是我们需要为<code>token</code>打上的“标记”了。</p><p>简单来说，就是我们需要先将各种<code>token</code>分好类，之后才方便将同类的东西染上相同的颜色。</p><h2 id="TextMate"><a href="#TextMate" class="headerlink" title="TextMate"></a>TextMate</h2><blockquote><p>VS Code 使用 <code>TextMate</code> 语法作为语法标记引擎。为 TextMate 编辑器发明，由于开源社区创建和维护的大量语言包，它们已被许多其他编辑器和 IDE 采用。</p></blockquote><p>TextMate的语法详见：<a href="https://macromates.com/manual/en/language_grammars">TextMate language_grammars</a></p><p>详细的就不说了，只说用到的部分。</p><p>主要有两种形式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comment.line&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^#.+$&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就是将<code>name</code>所定义的<code>scope</code>分配给<code>match</code>用正则表达式匹配出对应的<code>token</code>。</p><p>另一种形式是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span>&#x27;string.quoted.double.untitled&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;begin&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;end&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;patterns&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> </span><br><span class="line">        <span class="punctuation">&#123;</span>   <span class="string">&quot;name&quot;</span> = &#x27;constant.character.escape.untitled&#x27;<span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;match&quot;</span> = <span class="string">&quot;\\.&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>begin</code>和<code>end</code>定义了首尾，将其中所有的内容分配为<code>name</code>定义的<code>scope</code>，其中的<code>patterns</code>属性是在被<code>begin</code>和<code>end</code>框定的范围内继续进行标记。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>写好之后用f5运行一个加载了该扩展的vscode窗口来检查写的是否正确，可以在<code>ctrl+shift+p</code>调出来的命令面板中输入<code>Developer: Inspect Editor Tokens and Scopes</code>来开启<code>Scope inspector</code>这个东西，它可以显示光标所在位置的<code>token</code>的<code>scope</code>，方便检查</p><h2 id="最后写好的语法高亮文件"><a href="#最后写好的语法高亮文件" class="headerlink" title="最后写好的语法高亮文件"></a>最后写好的语法高亮文件</h2><p><code>rgl.tmLanguage.json</code>:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgl&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#comments&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#dialog&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#command&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#error&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;comment.line&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^#.+$&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;dialog&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;entity.name.function&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;begin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(?=^\\[)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;end&quot;</span><span class="punctuation">:</span><span class="string">&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;variable.parameter&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^\\[([\\ \\w\\.\\;\\(\\)\\,]+)\\]&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;punctuation.colon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\\B:&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword.operator&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(\\^|#)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;storage.type&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;\\w+(\\=\\d+)?&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string.quoted.double&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(&#123;.+&#125;)?$&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;command&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;entity.name.function&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;begin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(?=^&lt;(set:[^&gt;]+|background|dice|hitpoint)&gt;)&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;end&quot;</span><span class="punctuation">:</span><span class="string">&quot;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword.control&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^&lt;(set:[^&gt;]+|background|dice|hitpoint)&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;punctuation.colon&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\\B:&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;constant.numeric&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\\b(-)?\\d+$\\b&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword.declaration.function&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(linear|quadratic|quadraticR|sigmoid|right|left|sincurve)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;storage.type&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;\\w+(\\=\\d+)?&gt;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;variable.parameter&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;\\((.+?),(\\d+),([\\d]+|NA),(\\d+)\\)&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;error&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;patterns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;invalid.illegal&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^[\\t\\ ]+$&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;scopeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source.rgl&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="主题化（Theming）"><a href="#主题化（Theming）" class="headerlink" title="主题化（Theming）"></a>主题化（Theming）</h1><p>标记好了所有的元素之后，就可以开始给它们染色了，也就是“使用主题或用户设置将标记映射到特定的颜色和样式”（Using themes or user settings to map the tokens to specific colors and styles）</p><p>其实没有这一步也是可以的，因为标记了这些<code>token</code>之后，运行时可以看到已经染好色了，这是正在使用的vscode主题根据这些标记染的色。</p><p>不过为了和回声工坊作者的语法高亮显示效果尽量一致，我自定义了一个主题<code>rgl theme</code>，调整配色。</p><p>因为不知道怎么在项目中创建主题，官网文档里面也只是说在一开始的时候用脚手架创建，我就用<code>yo code</code>命令创建了一个自定义主题的插件的项目，对比两个项目的不同，接着合并两个项目。</p><p>在<code>package.json</code>里面新增了<code>themes</code>这一项，指定了主题定义文件的路径，最后再在自动生成的文件中修改需要修改的颜色就行了。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;contributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;languages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;aliases&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;rgl&quot;</span><span class="punctuation">,</span> <span class="string">&quot;rgl&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;.rgl&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;configuration&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./language-configuration.json&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">,</span><span class="attr">&quot;grammars&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;scopeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;source.rgl&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./syntaxes/rgl.tmLanguage.json&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">,</span><span class="attr">&quot;themes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rgl theme&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;uiTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vs-dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./themes/rgl theme-color-theme.json&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><p>详细步骤参考：<a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension">Visual Studio Code publishing extension-官网文档</a></p><p>简要步骤（请查看官网文档，这里仅仅是简化步骤）：</p><ol><li>安装VSCE。vsce是“Visual Studio Code Extensions”的缩写，是一个用于打包、发布和管理 VS Code 扩展的命令行工具。</li><li>在Azure DevOps中<a href="https://docs.microsoft.com/zh-cn/azure/devops/organizations/accounts/create-organization?view=azure-devops">创建自己的组织</a>，需要微软账号</li><li>在组织主页获取<code>Personal access tokens</code>，这个token需要开放<code>Marketplace</code>下的<code>Manage</code>权限</li><li><a href="https://marketplace.visualstudio.com/manage">创建发布者</a>，需要和刚才创建组织时登录的是同一个微软账号</li><li>使用<code>vsce login &lt;publisher name&gt;</code>命令，并用之前获取的<code>Personal access tokens</code>来验证</li><li>在扩展插件的文件夹内使用<code>vsce publish</code>命令发布扩展</li></ol><p>看起来很复杂，但实际上做起来很快，没有遇到什么困难（除了纠结用什么名字之外）</p><p>前面的步骤都完成之后，以后发布新版本就只需要最后一步，即使用<code>vsce publish</code>命令发布扩展，很方便。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《算法笔记》C与C++语言相关</title>
      <link href="/posts/c-and-cpp-grammar-in-algorithm-note/"/>
      <url>/posts/c-and-cpp-grammar-in-algorithm-note/</url>
      
        <content type="html"><![CDATA[<p>这是一篇学习笔记，基于胡凡主编的《算法笔记》的第二章“C&#x2F;C++快速入门”。</p><p>在学习那一章的过程中，我将其中之后用的到的内容整理为这篇笔记，适合了解C和C++语言的人用于复习其语法中与做算法题相关的特性与技巧。</p><p>本文中部分内容经过顺序调整和补充，不完全按照原书内容。<strong>详细内容请看原书。</strong></p><span id="more"></span><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p><code>%d</code>为int输出格式。</p><p><code>%lld</code>为long long输出格式</p><ul><li>32位或者$10^9$以内的整数：int</li><li>64位或者$10^{18}$以内的整数：long long。且字面量后面要加上LL后缀</li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p><code>%f</code>为float和double的输出格式。</p><p><code>%lf</code>为double输入格式。</p><p>都用double型就好。float型只有6-7位有效精度，double型有15-16位。</p><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p><code>%c</code>为char型输出格式。</p><p><code>%s</code>为char数组输出格式。</p><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p>c++中直接用，c中得添加<code>stdbool.h</code>头文件。</p><p>整型常量赋值给布尔变量时0为false，非0为true。</p><p>作为整型数据输出时，true为1，false为0。</p><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(新类型名)变量名<span class="comment">//C中的转换</span></span><br><span class="line">新类型名(变量名)<span class="comment">//C++才能用</span></span><br></pre></td></tr></table></figure><h2 id="无穷大的表示"><a href="#无穷大的表示" class="headerlink" title="无穷大的表示"></a>无穷大的表示</h2><p>无穷大INF可以设置为int型的最大值，即$(1&lt;&lt;31)-1$。</p><p>但更常用$2^{30}-1$以避免相加之后溢出，它的十六进制形式：<code>0x3fffffff</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> INF = (<span class="number">1</span>&lt;&lt;<span class="number">31</span>)<span class="number">-1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">0x3fffffff</span>;</span><br></pre></td></tr></table></figure><h2 id="条件表达式的简化"><a href="#条件表达式的简化" class="headerlink" title="条件表达式的简化"></a>条件表达式的简化</h2><ul><li>条件表达式为<code>表达式!=0</code>可以省略<code>!=0</code></li><li>条件表达式为<code>表达式==0</code>时可以省略<code>==0</code>并取反，即变为<code>!表达式</code></li></ul><h2 id="常用math函数"><a href="#常用math函数" class="headerlink" title="常用math函数"></a>常用math函数</h2><p>头文件:<code>math.h</code></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>fabs(double x)</td><td>对double变量取绝对值</td></tr><tr><td>floor(double x)、ceil(double x)</td><td>对double变量向下取整、向上取整，但返回值为double型</td></tr><tr><td>pow(double r,double p)</td><td>返回$r^p$</td></tr><tr><td>sqrt(double x)</td><td>返回x的算术平方根</td></tr><tr><td>log(double x)</td><td>返回$lnx$,需要用换底公式$\log_ab&#x3D;\frac{lnb}{lna}$得到其他底数的对数</td></tr><tr><td>sin(double x)等三角函数</td><td></td></tr><tr><td>asin(double x)等反三角函数</td><td></td></tr><tr><td>round(double x)</td><td>返回保留整数部分的四舍五入后的x，但返回值为double型</td></tr></tbody></table><h2 id="常用字符串函数"><a href="#常用字符串函数" class="headerlink" title="常用字符串函数"></a>常用字符串函数</h2><p>头文件：<code>string.h</code></p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>strlen(字符数组)</td><td>返回字符串长度，不含<code>\0</code></td></tr><tr><td>strcmp(字符数组1,字符数组2)</td><td>按字典序比较大小，串1大于串2返回正整数，小于则返回负整数，等于则返回0</td></tr><tr><td>strcpy(字符数组1,字符数组2)</td><td>将字符数组2的内容复制到字符数组1，包括<code>\0</code></td></tr><tr><td>strcat(字符数组1,字符数组2)</td><td>将字符数组2接到字符数组1后面</td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><h4 id="定义数组时初始化"><a href="#定义数组时初始化" class="headerlink" title="定义数组时初始化"></a>定义数组时初始化</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*一维数组*/</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;<span class="comment">//其余元素（a[4]~a[9]）被赋值为0</span></span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//声明一个长度为10的数组并将a[0]赋值为0，并使得其余元素默认为0</span></span><br><span class="line"><span class="comment">//若不赋予初值，则元素初值为随机值</span></span><br><span class="line"><span class="type">int</span> c[<span class="number">10</span>] = &#123;&#125;;<span class="comment">//c++才能这么写，c中会报错</span></span><br><span class="line"><span class="comment">/*二维数组*/</span></span><br><span class="line"><span class="type">int</span> d[<span class="number">5</span>][<span class="number">6</span>] = &#123;&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">8</span>,<span class="number">4</span>&#125;,&#123;&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;<span class="comment">//其余元素被赋值为0，同样的，空&#123;&#125;在c中报错</span></span><br><span class="line"><span class="comment">/*字符数组*/</span></span><br><span class="line"><span class="type">char</span> str1[<span class="number">6</span>] = &#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;<span class="comment">//同整数数组</span></span><br><span class="line"><span class="type">char</span> str2[<span class="number">6</span>] = <span class="string">&quot;Hello&quot;</span><span class="comment">//这种方式字符串以\0结尾</span></span><br></pre></td></tr></table></figure><p>若数组大小过大（$10^6$级别），需要将其定义在主函数外面。</p><p>因为函数内部局部变量使用系统栈，空间较小，容易栈溢；</p><p>而函数外部全局变量使用静态存储区，空间较大。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000000</span>];<span class="comment">//10^6级别定义在外部</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="利用memset函数初始化"><a href="#利用memset函数初始化" class="headerlink" title="利用memset函数初始化"></a>利用memset函数初始化</h4><p>头文件：<code>string.h</code></p><p>用于给某个范围内的内存区域的每个字节赋相同的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(首地址,每个字节的值,区域长度);</span><br><span class="line"><span class="comment">//初始化数组。多维数组与之相同</span></span><br><span class="line"><span class="built_in">memset</span>(数组名,值,<span class="built_in">sizeof</span>(数组名));<span class="comment">//给数组的每个元素赋相同的值。一般赋值0或-1，不容易出错。</span></span><br></pre></td></tr></table></figure><p>由于0的补码为全0,-1的补码为全1，不容易赋值错误，尽量只用memset设置这两种初值，赋其他值使用fill函数。</p><h3 id="以数组作为函数参数"><a href="#以数组作为函数参数" class="headerlink" title="以数组作为函数参数"></a>以数组作为函数参数</h3><ul><li>参数中数组的第一维可以省略。但第二维以及更高维的长度不可省略。</li><li>数组作为参数时，对数组元素的修改等同于对原数组元素的修改。（我的理解：数组名仍然是值传递，但是复制给形参的只不过是数组首地址，根据这个首地址对数组元素寻址到的数组元素就是原本的数组元素）</li></ul><h2 id="浮点数比较"><a href="#浮点数比较" class="headerlink" title="浮点数比较"></a>浮点数比较</h2><p>由于浮点数存储的误差，不能直接用<code>==</code>来比较两个浮点数是否相等，需要用一个极小数eps来修正。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-8</span>;<span class="comment">//10^-8</span></span><br><span class="line"><span class="comment">//为了方便使用，可以定义如下的宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Equ(a,b) ((fabs((a)-(b)))&lt;(eps))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> More(a,b) ((a)-(b)&gt;(eps))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Less(a,b) ((a)-(b)&lt;(-eps))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MoreEqu(a,b) ((a)-(b)&gt;(-eps))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LessEqu(a,b) ((a)-(b)&lt;(eps))</span></span><br><span class="line"><span class="comment">//圆周率</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br></pre></td></tr></table></figure><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>一般的OJ系统一秒运算次数约为$10^7-10^8$.</p><p>因此$O(n^2)$的复杂度在n&#x3D;1000时是可以承受的（$10^6$级别），n&#x3D;100000时是不可承受的（$10^{10}$级别）</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1,p2;<span class="comment">//注意：p1为int*，但p2为int</span></span><br><span class="line"><span class="type">int</span> *p3,*p4;<span class="comment">//这样才是将二者都定义为int*</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> *p5 = &amp;a, *p6 = &amp;b;<span class="comment">//用取址符&amp;取变量地址并赋值给指针变量</span></span><br><span class="line">(*p5)++;<span class="comment">//将p5指向的存储空间内的值自增1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,*p5,*p6);<span class="comment">//用取值符*取地址对应的值，这里输出&quot;2 2&quot;</span></span><br></pre></td></tr></table></figure><ul><li>指针是一个unsigned类型的整数。</li><li>指针变量可以进行加法，对<code>int*p</code>来说，p+1代表下一个int型变量地址。支持自增操作。</li><li>指针变量可以进行减法，减法结果是两个地址偏移的距离，<strong>距离以指针的基类型为单位</strong>。支持自减操作。</li></ul><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><p>数组名称可作为数组首地址使用，即对于int数组a：<code>a==&amp;a[0]</code>，<code>a+i==&amp;a[i]</code>，<code>*(a+i)==a[i]</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p=a,*q=&amp;a[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,q - p);<span class="comment">//输出5而非20，因为这里的差值以int为单位</span></span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>用于产生变量的别名，无法对常量使用。在函数参数类型后加上<code>&amp;</code>，这样就可以将形参作为实参的别名，对形参的修改可以影响到实参。</p><p><strong>这是c++的语法，c中会报错。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">change</span><span class="params">(<span class="type">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line">    x = <span class="number">1</span>;<span class="comment">//可以改变传入的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指针的引用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span>* &amp;p1,<span class="type">int</span>* &amp;p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//交换的是传入的两个指针</span></span><br><span class="line">    <span class="type">int</span>*temp = p1;</span><br><span class="line">    p1 = p2;</span><br><span class="line">    p2 = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义举例</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    student* next;<span class="comment">//无法定义自身类型，但是可以定义自身类型的指针。C语言中会报错，C++不会报错。</span></span><br><span class="line">&#125;stu,*p;<span class="comment">//定义完之后可以同时定义对应的变量</span></span><br><span class="line">p = &amp;stu;</span><br><span class="line"><span class="comment">//访问结构体的元素</span></span><br><span class="line">stu.id = <span class="number">1</span>;</span><br><span class="line">(*p).id = <span class="number">2</span>;</span><br><span class="line">p-&gt;id = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>使用构造函数（C++才有，C没有）。默认会生成无参构造函数，但如果自己定义了，那么就不会生成默认的无参构造函数。构造函数可以重载。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> _id,<span class="type">char</span> _gender)&#123;</span><br><span class="line">        id=_id;gender=_gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">student stu = <span class="built_in">student</span>(<span class="number">1</span>,<span class="string">&#x27;M&#x27;</span>);</span><br></pre></td></tr></table></figure><p>或者用简化版：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">    <span class="built_in">student</span>(<span class="type">int</span> _id,<span class="type">char</span> _gender):<span class="built_in">id</span>(_id),<span class="built_in">gender</span>(_gender)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">student stu = <span class="built_in">student</span>(<span class="number">1</span>,<span class="string">&#x27;M&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">&#125;;</span><br><span class="line">student stu = &#123; <span class="number">1</span>,<span class="string">&#x27;M&#x27;</span> &#125;;<span class="comment">//顺序对应即可</span></span><br></pre></td></tr></table></figure><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>可以直接用<code>=</code>复制相同类型的结构体变量，C和C++均可。但是这种方式是<strong>浅拷贝</strong>，对指针成员只复制地址，不复制指向的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">student</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> gender;</span><br><span class="line">&#125;stu1,stu2;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stu<span class="number">1.</span>id = <span class="number">1</span>;</span><br><span class="line">    stu<span class="number">1.</span>gender = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">    stu2 = stu1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %c&quot;</span>, stu<span class="number">2.</span>id, stu<span class="number">2.</span>gender);<span class="comment">//输出&quot;1 M&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h3 id="scanf输入"><a href="#scanf输入" class="headerlink" title="scanf输入"></a>scanf输入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;格式控制串&quot;</span>,变量地址);<span class="comment">//变量前记得加&amp;取地址，数组名称本身就是地址</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d:%d:%d&quot;</span>,&amp;hh,&amp;mm,&amp;ss);<span class="comment">//输入&quot;13:45:20&quot;格式的数据</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<span class="comment">//输入&quot;3 4&quot;这类空格隔开的数字时，可以省略空格</span></span><br><span class="line"><span class="comment">//因为除了%c之外，对其他格式符的输入以空白符为结束标志</span></span><br><span class="line"><span class="comment">//字符数组使用%s，读入时以空格和换行为结束标志，因此scanf无法直接读入带空格或换行的字符串到一个字符数组中</span></span><br></pre></td></tr></table></figure><p>scanf的返回值为成功赋值的变量个数，如果遇到错误或者EOF，则返回值为EOF</p><h3 id="printf输出"><a href="#printf输出" class="headerlink" title="printf输出"></a>printf输出</h3><p>double输入用 %lf，输出用%f。</p><p>助记：读进来的时候要严格一些，需要知道你是double还是float，但是输出的时候没那么严格，因为可以隐式转换。就像小区保安需要你刷卡进小区，但是出小区时不管你是不是住户，直接给你开门就行。</p><p>默认输出6位小数，不足六位以 0 补齐,超过六位按四舍五入截断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> a;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a);<span class="comment">//123456789.123456789</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, a);<span class="comment">//123456789.123457</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实用输出格式：</p><table><thead><tr><th>输出格式</th><th>说明</th></tr></thead><tbody><tr><td>%md</td><td>使不足m位的int变量以m位右对齐输出，高位空格补齐。超过m位保持不变。</td></tr><tr><td>%0md</td><td>同%md，只不过高位用0补齐而不是空格</td></tr><tr><td>%.mf</td><td>让浮点数保留m位小数输出，四舍六入五成双，“保留m位小数”用这个即可。不考虑怎么舍入</td></tr></tbody></table><h3 id="getchar和putchar"><a href="#getchar和putchar" class="headerlink" title="getchar和putchar"></a>getchar和putchar</h3><p>分别为输入和输出单个字符，可接收换行符。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c;</span><br><span class="line">c = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br></pre></td></tr></table></figure><h3 id="gets和puts"><a href="#gets和puts" class="headerlink" title="gets和puts"></a>gets和puts</h3><p>分别为输入和输出一行字符串，并存放在一维数组中。</p><p>puts输出时自带换行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[] = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="type">char</span> b[] = <span class="string">&quot;def&quot;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(a);</span><br><span class="line">    <span class="built_in">puts</span>(b);<span class="comment">//输出结果里b字符串换了一行来显示</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, <span class="built_in">sizeof</span>(a));<span class="comment">//输出4而不是3，所以这种初始化方式末尾是带有\0的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abc</span><br><span class="line">def</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>gets以换行符结束，不同于scanf以空白符结束，所以可以读入带空格的字符。</p><p>因此scanf完一个整数后，如果要使用gets，需要先用getchar接收整数后的换行符。</p><p>gets与scanf都会自动在读入的字符串末尾添加<code>\0</code></p><h3 id="sscanf和sprintf"><a href="#sscanf和sprintf" class="headerlink" title="sscanf和sprintf"></a>sscanf和sprintf</h3><p>头文件：<code>string.h</code></p><p>即在scanf和printf前面再加一个字符数组参数，输入输出的源头与目的就变成了该字符数组，用法同scanf和printf</p><h3 id="cin和cout"><a href="#cin和cout" class="headerlink" title="cin和cout"></a>cin和cout</h3><p>头文件：<code>iostream</code></p><p>命名空间：<code>std</code></p><p>C++输入输出函数，速度比不上scanf和printf，在算法题中一般不用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cin&gt;&gt;n&gt;&gt;c&gt;&gt;a&gt;&gt;b;<span class="comment">//可以连续读入多个变量，无需指定类型</span></span><br><span class="line"><span class="type">char</span> str[<span class="number">100</span>];</span><br><span class="line">cin.<span class="built_in">getline</span>(str,<span class="number">100</span>);<span class="comment">//读入一整行需要用getline函数</span></span><br><span class="line">string str2;<span class="comment">//STL中的string容器</span></span><br><span class="line"><span class="built_in">getline</span>(cin,str);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;a&lt;&lt;b&lt;&lt;c&lt;&lt;d&lt;&lt;endl;<span class="comment">//可以连续输出多个变量，无需指定类型。endl表示换行</span></span><br><span class="line"><span class="comment">//格式化输出</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line">cout &lt;&lt; <span class="built_in">setiosflags</span>(ios::fixed) &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>) &lt;&lt; <span class="number">123.4567</span> &lt;&lt; endl;<span class="comment">//输出123.46</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从markdown到nga bbscode的转换程序</title>
      <link href="/posts/markdown-bbscode-converter/"/>
      <url>/posts/markdown-bbscode-converter/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nga.178.com/">NGA（艾泽拉斯国家地理）</a>论坛使用一种自定义的名为 <code>bbscode</code> 的代码来排版帖子内容，类似HTML，它也是一种标记语言，对bbscode的详细介绍可见：<a href="https://nga.178.com/read.php?tid=9268613">[NGA常用BBS代码][奥运帖]Project N —— 《从入门到精通：排版的艺术 Ver.3》</a>。</p><p>这种论坛自定义标记语言可以和markdown、html进行相互转换。例子如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[h]标题[/h]</span><br><span class="line">[b]加粗文字[/b]</span><br><span class="line">[list]</span><br><span class="line">[*] 列表项</span><br><span class="line">[*] 列表项</span><br><span class="line">[/list]</span><br><span class="line">[quote]引用块[/quote] </span><br></pre></td></tr></table></figure><p>在使用NGA论坛的时候遇到了将markdown文本转换为bbscode的需求，所以打算用python写一个简单的转换程序。由于不涉及复杂的GUI，本项目使用tkinter来编写界面。</p><p>项目地址：</p><ul><li><p>[<a href="https://github.com/ChangingSelf/nga-bbscode-converter">github仓库地址</a>]</p></li><li><p>[<a href="https://gitee.com/ChangingSelf/nga-bbscode-converter">gitee仓库地址</a>]</p></li><li><p><a href="https://nga.178.com/read.php?tid=27512061">NGA论坛内本工具软件的发布帖</a></p></li></ul><span id="more"></span><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://i.loli.net/2021/07/09/S8VpBGRCgb6yIlA.gif"></p><h1 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包"></a>自定义包</h1><p>自定义包 <code>bbscode</code>结构非常简单，只含有 <code>__init__.py</code>和一个python文件 <code>converter.py</code> 。</p><p><code>converter.py</code>中含有 <code>md_to_bbscode</code>这一核心转换方法，参数为markdown文本字符串，返回bbscode字符串。</p><p>这个转换函数的原理非常简单，只用到了python的一个正则表达式替换方法 <code>re.sub</code>，它的参数分别为：</p><ul><li><p><code>pattern</code>：用于匹配替换内容的正则表达式</p></li><li><p><code>repl</code>：用于替换匹配结果的字符串（在其中可以使用<code>\匹配组下标</code>表示匹配组，从1开始），或者用于处理匹配结果的函数</p></li><li><p><code>string</code>：被处理的字符串</p></li><li><p><code>count</code>：可选，模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</p></li><li><p><code>flags</code>：可选，正则匹配模式</p></li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_quote</span>(<span class="params">matched</span>):</span><br><span class="line">    quote = matched.group(<span class="number">1</span>)</span><br><span class="line">    quote = re.sub(<span class="string">r&quot;&gt; (.*?)&quot;</span>,<span class="string">&quot;&quot;</span>,quote)</span><br><span class="line">    quote = <span class="string">&quot;[quote]\n&#123;&#125;\n[/quote]&quot;</span>.<span class="built_in">format</span>(quote)</span><br><span class="line">    <span class="keyword">return</span> quote</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_list</span>(<span class="params">matched</span>):</span><br><span class="line">    l = matched.group(<span class="number">1</span>)</span><br><span class="line">    l = re.sub(<span class="string">r&quot;[-*] &quot;</span>,<span class="string">&quot;[*]&quot;</span>,l)</span><br><span class="line">    l = <span class="string">&quot;[list]\n&#123;&#125;\n[/list]&quot;</span>.<span class="built_in">format</span>(l)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">replace_italic</span>(<span class="params">matched</span>):</span><br><span class="line">    <span class="comment"># 到了第53个中文字符的时候NGA论坛就会报错：一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三/* bbscode i too long */</span></span><br><span class="line">    <span class="comment"># 所以需要每50个字符就分一个[i]标签</span></span><br><span class="line">    italic = matched.group(<span class="number">1</span>)</span><br><span class="line">    step = <span class="number">50</span></span><br><span class="line">    italics = [italic[i:i+step] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(italic),step)]</span><br><span class="line">    italic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> italics:</span><br><span class="line">        italic +=<span class="string">&quot;[i]&#123;&#125;[/i]&quot;</span>.<span class="built_in">format</span>(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> italic</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md_to_bbscode</span>(<span class="params">md_str:<span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    将markdown字符串转换为bbscode字符串</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    bbscode = md_str</span><br><span class="line">    <span class="comment"># 链接</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;[^!]\[(.*?)\]\((.*?)\)&quot;</span>,<span class="string">r&quot;[url=\2]\1[/url]&quot;</span>,bbscode)</span><br><span class="line">    <span class="comment"># 图片</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;\!\[(.*?)\]\((.*?)\)&quot;</span>,<span class="string">r&quot;[img]\2[/img]&quot;</span>,bbscode)</span><br><span class="line">    <span class="comment"># 标题，注意设置flag为MULTILINE以改变^的语义</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;^(#+)\s?(.*)&quot;</span>,<span class="string">r&quot;[h]\2[/h]&quot;</span>,bbscode,flags=re.MULTILINE)</span><br><span class="line">    <span class="comment"># 加粗</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;\*\*(.*?)\*\*&quot;</span>,<span class="string">r&quot;[b]\1[/b]&quot;</span>,bbscode)</span><br><span class="line">    <span class="comment"># 斜体</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;\*(.*?)\*&quot;</span>,replace_italic,bbscode)</span><br><span class="line">    <span class="comment"># 下划线</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;&lt;u&gt;(.*?)&lt;/u&gt;&quot;</span>,<span class="string">r&quot;[u]\1[/u]&quot;</span>,bbscode)</span><br><span class="line">    <span class="comment"># 删除线</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;~~(.*?)~~&quot;</span>,<span class="string">r&quot;[del]\1[/del]&quot;</span>,bbscode)</span><br><span class="line">    <span class="comment"># 引用块</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;((&gt; (.*)\n?)+)&quot;</span>,replace_quote,bbscode)</span><br><span class="line">    <span class="comment"># 列表</span></span><br><span class="line">    bbscode = re.sub(<span class="string">r&quot;(([-|*] (.*)\n?)+)&quot;</span>,replace_list,bbscode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bbscode</span><br></pre></td></tr></table></figure><h2 id="无序列表的替换"><a href="#无序列表的替换" class="headerlink" title="无序列表的替换"></a>无序列表的替换</h2><p>从代码可以看出，大部分markdown代码都可以直接转换为bbscode，但对于列表、引用块来说，它们对应的bbscode除了项目符号之外，还需要在两侧加上对应的标签，这就无法直接替换，需要编写自定义repl函数了。</p><p>以无序列表的转换为例，markdown的无序列表代码如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 列表项1</span><br><span class="line"><span class="bullet">-</span> 列表项2</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> 列表项a</span><br><span class="line"><span class="bullet">*</span> 列表项b </span><br></pre></td></tr></table></figure><p>以上两种方式都是无序列表。需要将它们转换为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[list]</span><br><span class="line">[*] 列表项1</span><br><span class="line">[*] 列表项2</span><br><span class="line">[/list]</span><br><span class="line"></span><br><span class="line">[list]</span><br><span class="line">[*] 列表项a</span><br><span class="line">[*] 列表项b</span><br><span class="line">[/list] </span><br></pre></td></tr></table></figure><p>首先需要用正则表达式匹配到每一个列表项，匹配单个列表项： <code>[-|*] (.*)\n?</code></p><p>如果想要匹配多行列表项，就需要使用循环匹配符号 <code>+</code>，至少匹配一项。即：<code>([-|*] (.*)\n?)+</code></p><p>但是此时取匹配组1是取不到所有列表项的，在外面再套一层括号，这时的匹配组1就是我们要的整个无序列表了。</p><p>在替换函数 <code>replace_list</code>中，参数为正则表达式的匹配对象，将项目符号替换并在前后添加 <code>[list]</code>标签即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_list</span>(<span class="params">matched</span>):</span><br><span class="line">    l = matched.group(<span class="number">1</span>)</span><br><span class="line">    l = re.sub(<span class="string">r&quot;[-*] &quot;</span>,<span class="string">&quot;[*]&quot;</span>,l)</span><br><span class="line">    l = <span class="string">&quot;[list]\n&#123;&#125;\n[/list]&quot;</span>.<span class="built_in">format</span>(l)</span><br><span class="line">    <span class="keyword">return</span> l</span><br></pre></td></tr></table></figure><p>多行引用转bbscode引用块的原理相同，不赘述。</p><h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><p>需要编写的界面只有一个多行输入框加上按钮，直接放代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> bbscode <span class="keyword">import</span> converter</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line"></span><br><span class="line">root.title(<span class="string">&quot;bbscode转换器&quot;</span>)</span><br><span class="line"><span class="comment"># 输入框</span></span><br><span class="line">inputText = tk.Text(root,height=<span class="number">20</span>,width=<span class="number">100</span>)</span><br><span class="line">inputText.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换按钮</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md_to_bbscode</span>():</span><br><span class="line">    md_str = inputText.get(<span class="string">&#x27;1.0&#x27;</span>,tk.END)</span><br><span class="line">    bbscode = converter.md_to_bbscode(md_str)</span><br><span class="line">    inputText.delete(<span class="string">&#x27;1.0&#x27;</span>, tk.END)</span><br><span class="line">    inputText.insert(<span class="string">&#x27;1.0&#x27;</span>,bbscode)</span><br><span class="line"></span><br><span class="line">convertBtn = tk.Button(root,text=<span class="string">&quot;markdown转换为bbscode&quot;</span>,command=md_to_bbscode)</span><br><span class="line">convertBtn.pack()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tkinter </tag>
            
            <tag> markdown </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Word域代码实现将形如“图一-1”的题注修改为“图1-1”</title>
      <link href="/posts/2028856356/"/>
      <url>/posts/2028856356/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在用word编写毕业论文时，遇到了这样一个问题：通过多级列表的设置将一级标题设置为汉字数字之后，若需要设置包含章节号的题注（形如“图1-1”）时，则会变成“图一-1”的形式。本篇文章解决的就是将形如“图一-1”的题注通过设置域代码，在不修改一级标题格式的情况下改为“图1-1”。</p><p><img src="https://i.loli.net/2021/06/27/zTUkBaNlcY8IxvG.png"></p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.zhihu.com/question/23512189">word里面，如何在章节编号为第一章、第二章这种情况，实现图根据章节编号并且形式为图1.1、图2.1？</a></li><li><a href="https://blog.csdn.net/jingss_3/article/details/6424899">Word 自动更改题注章节编号格式“图一.1”为“图1.1”</a></li><li>[<a href="https://blog.csdn.net/h8178/article/details/78919418">word技巧]把标题、图表题注编号由“一.1”改为”1.1”</a></li><li><a href="https://blog.csdn.net/songchuwang1868/article/details/104816016">一篇文章教会你使用word域代码（seq field code ）</a> ：这个方法也是可以的，不过本文没有采用。</li><li><a href="https://support.microsoft.com/zh-cn/office/%E8%AE%BE%E7%BD%AE%E5%9F%9F%E7%BB%93%E6%9E%9C%E7%9A%84%E6%A0%BC%E5%BC%8F-baa61f5a-5636-4f11-ab4f-6c36ae43508c?ui=zh-CN&rs=zh-CN&ad=CN#ID0EAABAAA=%E6%97%A5%E6%9C%9F-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%BC%80%E5%85%B3_(@)">设置域显示格式的开关-微软官方</a></li><li><a href="https://www.bilibili.com/video/av755180281/">word将“图一.x”修改为“图1.x”-Bilibili</a></li><li><a href="https://support.microsoft.com/zh-cn/office/%E5%9F%9F%E4%BB%A3%E7%A0%81%EF%BC%9Aquote-%E5%9F%9F-26f0d723-07a8-4076-9097-a71459f3d44c?ui=zh-cn&rs=zh-cn&ad=cn">域代码：Quote 域-微软官方</a></li><li><a href="https://support.microsoft.com/zh-cn/office/%E5%9F%9F%E4%BB%A3%E7%A0%81%EF%BC%9Astyleref-%E5%9F%9F-4ad557c2-c8ab-48ba-8fe3-901d0a5775d0?ui=zh-CN&rs=zh-CN&ad=CN">STYLEREF域代码官方文档链接</a></li></ul><h1 id="什么是域代码"><a href="#什么是域代码" class="headerlink" title="什么是域代码"></a>什么是域代码</h1><p>使用组合键 <code>Alt+F9</code> ，可以<strong>显示或隐藏文档中所有域代码</strong> ：</p><p><img src="https://i.loli.net/2021/06/27/S2s5zVQlyErwMIj.png"></p><p>从上图中可以看到，原本的“图 一-1”已经变成了“图 { STYLEREF 1 \s }-{SEQ 图 * ARABIC \s 1}”，如果你此时直接复制它们，会发现粘贴出来的仍然是“图 一-1”，而将光标放在花括号中，则会将花括号括住的内容选中成为一个整体。其中花括号括住的部分就是<strong>“域代码”</strong> 。</p><p>你使用“添加题注”的对话框为图片添加题注时，插入的实际上就是这些“域代码”，你使用 <code>Ctrl+F9</code>组合键（会生成域代码的花括号，手动输入花括号是不行的）插入题注效果是一样的。</p><p>在这里 <code>&#123;STYLEREF 1 \s&#125;</code> 代表了章节号，也就是汉字数字“一”和“二”， <code>&#123;SEQ 图 \* ARABIC \s 1&#125;</code>代表了图的题注编号。</p><p>其中 <code>STYLEREF</code> 和<code>SEQ</code> 是“域”的名字，而后面的内容则是“域”的参数与“格式开关”（即域的格式选项）。</p><ul><li><p><code>&#123;STYLEREF 1 \s&#125;</code> 代表“插入具有样式名为‘1’的文本，并在指定标题级别下面重新开始（ <code>\s</code>，此处未指定标题级别）”。</p></li><li><p><code>&#123;SEQ 图 \* ARABIC \s 1&#125;</code>代表“插入名为’图’的序列的下一个编号，将结果显示为阿拉伯基数（ <code>\* ARABIC</code>），并在一级标题下面重新开始编号（ <code>\s</code>，此处标题级别为1，即若是到了下一个一级标题下，则会重新从1开始编号）”。</p></li></ul><p>得知了word题注是用“域代码”实现的事实后，现在我们要做的事情就是将<code>&#123;STYLEREF 1 \s&#125;</code>的输出结果从汉字数字转变为阿拉伯数字，尝试将<code>\* ARABIC</code>开关加入其中，似乎并没有效果。</p><p>我在网上搜索到了另一个解决方案，利用迂回的方式将其转化，见：<a href="https://blog.csdn.net/h8178/article/details/78919418">[word技巧]把标题、图表题注编号由“一.1”改为”1.1”</a></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>将<code>&#123;STYLEREF 1 \s&#125;</code>修改为 <code>&#123; QUOTE &quot;一九一一年一月&#123; STYLEREF 1 \s &#125;日&quot; \@&quot;D&quot; &#125;</code>就可以了，注意花括号仍然得是使用 <code>Ctrl+F9</code>组合键生成的花括号。</p><p>我找到的文章并未说明其原理，但了解了域代码相关知识后，也不难理解原理。</p><p>首先找到 <code>QUOTE</code>域的相关说明：<a href="https://support.microsoft.com/zh-cn/office/%E5%9F%9F%E4%BB%A3%E7%A0%81%EF%BC%9Aquote-%E5%9F%9F-26f0d723-07a8-4076-9097-a71459f3d44c?ui=zh-cn&rs=zh-cn&ad=cn">域代码：Quote 域-微软官方</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; QUOTE &quot;LiteralText&quot; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>“LiteralText”：插入的文本，必须加引号。它可以包含除 AutoNum、AutoNumLgl、AutoNumOut 或 Symbol 以外的所有其他域。</p></blockquote><p>也就是说，<code>QUOTE &quot;一九一一年一月&#123; STYLEREF 1 \s &#125;日&quot;</code> 这一部分是将“<code>一九一一年一月&#123; STYLEREF 1 \s &#125;日</code>”插入到域代码所在位置，如果是第一章，那么最终结果就是<code>一九一一年一月一日</code>。</p><p>看到这里，也许你已经猜到后面那个<code>\@&quot;D&quot;</code>开关是在干什么了：</p><blockquote><p><a href="https://support.microsoft.com/zh-cn/office/%E8%AE%BE%E7%BD%AE%E5%9F%9F%E7%BB%93%E6%9E%9C%E7%9A%84%E6%A0%BC%E5%BC%8F-baa61f5a-5636-4f11-ab4f-6c36ae43508c?ui=zh-CN&rs=zh-CN&ad=CN#ID0EAABAAA=%E6%97%A5%E6%9C%9F-%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E5%BC%80%E5%85%B3_(@)">设置域结果格式-微软官方</a><br>日期-时间格式开关 (\ @) 指定如何显示日期或时间。</p><p>例如, switch \ @ “dddd, mmmm d, yyyy” 字段{ DATE \ @ “dddd, MMMM d, yyyy” }显示 “星期五, 2019 年11月23日”。结合以下日期和时间说明: day (d)、month (M) 和 year (y);小时 (h) 和分钟 (m)-生成日期时间格式。你还可以包含文本、标点和空格。</p><p>字母 <strong>d</strong>  显示月份中的日期或一个星期中的某一天。 字母 <strong>d</strong>  可以大写或小写。此格式项目将某个星期或月份的某一天显示为数字；对于单位数日子，数字前面不加 0（零）。 例如，某月的第 6 天显示为 <strong>6</strong> 。</p></blockquote><p>所以该开关的意思是，将最终结果中的“天”给显示出来，而我们前面的内容得到的是<code>一九一一年一月一日</code>，那么输出结果就是 <code>1</code>，这样就通过日期转换将汉字数字转换为阿拉伯数字了。</p><p>这个日期无关紧要，只要格式是中文日期即可，例如我改为 <code>&#123;QUOTE “二零二一年四月&#123; STYLEREF 1 \s &#125;日” \@”D”&#125;</code>也没有关系。</p><p>之后再使用组合键 <code>Alt+F9</code> ，就可以隐藏域代码，只显示域代码的结果了。</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>虽然问题解决了，但是每次都要输入这样的域代码非常费劲。我在B站找到了一个视频，up主的解决方案很好：<a href="https://www.bilibili.com/video/av755180281/">word将“图一.x”修改为“图1.x”-Bilibili</a>。</p><p>他使用了word的另一个好用的功能——构建基块。</p><p><img src="https://i.loli.net/2021/06/27/8AO913otHiBYSQU.png"></p><ol><li><p>选中刚刚写好的题注</p></li><li><p>使用组合键 <code>Alt+F3</code> ，会弹出一个名为“新建构建基块”的对话框，修改构建基块的名称。例如修改为“图注”。</p></li><li><p>点击“确定”保存</p></li></ol><p>之后如果想要插入这样的题注，那么直接输入该构建基块的名称（此处为“图注”二字），word就会在你输入的地方显示一个提示“按Enter插入”，此时按下Enter键，就可以插入这一个构建基块了。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> word </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git管理的Android项目忽略密码或token的方法</title>
      <link href="/posts/android-project-gitignore-token/"/>
      <url>/posts/android-project-gitignore-token/</url>
      
        <content type="html"><![CDATA[<p>在照着Android教材《第一行代码 第三版》写天气预报app项目的时候，我发现如果把开发者token写在代码里面，用git管理的时候就会把token暴露出来，即使后面删掉，也会留在commit历史中。而<code>.gitignore</code>一般是忽略整个文件，没办法忽略单独一行。</p><p>所以可以将密码或者开发者token单独放在一个文件中，用<code>.gitignore</code>忽略它，并且在使用的时候读取其中的token。</p><span id="more"></span><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li><p>在<code>app/src/main/res/values</code>目录下新建一个资源文件<code>tokens.xml</code>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;token&quot;</span>&gt;</span>TAkhjf8d1nlSlspN（这里改成你的token）<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在使用的时候可以用<code>R.string.token</code>来直接访问，也可以将它存在一个全局可得的地方。</p></li><li><p>把上面那个文件加入<code>.gitignore</code>。</p></li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>创建好之后不要让你的IDE自动把这个文件<code>git add</code>了，否则<code>.gitignore</code>不起作用，如果你已经<code>git add</code>了，就使用下面这条命令恢复。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> reset HEAD app/src/main/res/values/tokens.xml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第四次博客文章分类调整</title>
      <link href="/posts/adjust_categories_4/"/>
      <url>/posts/adjust_categories_4/</url>
      
        <content type="html"><![CDATA[<p>之前的分类过于模糊，导致写完文章不知道该放在哪个分类，所以再次调整分类。</p><p><a href="https://yxchangingself.xyz/posts/adjust_categories/">第一次分类调整</a></p><p><a href="https://yxchangingself.xyz/posts/categories_description/">第二次分类调整</a></p><p><a href="https://yxchangingself.xyz/posts/hexo_blog_switch_theme_3/#more">第三次分类调整</a></p><span id="more"></span><h1 id="原本的文章分类"><a href="#原本的文章分类" class="headerlink" title="原本的文章分类"></a>原本的文章分类</h1><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>复盘总结</td><td>对过程进行回顾，总结经验，优化流程。</td></tr><tr><td>学习笔记</td><td>知识点总结等都放在这里。</td></tr><tr><td>解决方案</td><td>对某个特定问题的解决办法。</td></tr><tr><td>日志随笔</td><td>随笔，博客更新日志等。</td></tr><tr><td>目录索引</td><td>将本博客的文章定期进行汇总分类。</td></tr></tbody></table><p>分类之间的一些区别：</p><p><strong>复盘总结：</strong>以叙述过程与思路为主，一般含有步骤总结，思路记录（比如：我是如何想到这一步的？），一般不含对知识点的讲解。该分类下是比较抽象的文章</p><p><strong>学习笔记：</strong>以介绍结果与设计为主，长的像教程。可能含有大量代码，一般含有新知识点的总结说明，我在b站上面录了视频的项目对应的博客文章一般也属于这个。该分类下是比较具体的文章。</p><p><strong>解决方案：</strong>以介绍问题及其解决方法为主，比起学习笔记，更适合作为教程。它将复盘总结中的一些经验提取出来，又不像学习笔记一样冗长复杂。</p><p>调整分类前，“过程复盘”这个分类占了五分之三的内容，而其他分类比较少，比较不平衡，而且分类的标准太模糊，以至于我经常不知道该放到哪里去。</p><p>调整之后，“知识整理”、“算法理解”归入“学习笔记”，“工具使用”归入“解决方案”，减少了分类数量，并且明确了分类标准。按照新标准对文章调整分类，“学习笔记”和“复盘总结”各占二十多篇，不再是“指南针面板”了</p><h1 id="调整后的文章分类"><a href="#调整后的文章分类" class="headerlink" title="调整后的文章分类"></a>调整后的文章分类</h1><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>项目总结</td><td>课设、练习等或大或小的项目的总结，一般会写设计思路，遇到的问题等</td></tr><tr><td>学习笔记</td><td>目的是回顾知识的笔记</td></tr><tr><td>解决方案</td><td>对某个特定问题的解决办法。</td></tr><tr><td>博客站务</td><td>与该博客站点的搭建、部署、修改、索引相关的文章</td></tr><tr><td>日志随笔</td><td>杂记、随笔（定期总结之类的一般发我公众号不发这里）</td></tr></tbody></table><h1 id="分类变化说明"><a href="#分类变化说明" class="headerlink" title="分类变化说明"></a>分类变化说明</h1><p>有些分类名称没变，但是含义变了。</p><p><strong>“复盘总结”变成了“项目总结”</strong>。考虑到所有的博客都有一定的复盘性质，不好分，所以改为“项目总结”，从而“内容包括项目”的文章就要放在该分类下。</p><p>何谓项目？美国项目管理协会（PMI）对项目的定义是：“为创造独特的产品、服务或成果而进行的一次性努力。”，具有目的性、一次性、临时性、独特性、整体性的特点。（参考：<a href="https://zhuanlan.zhihu.com/p/120182287">项目到底是什么-知乎</a>）</p><p>我写的课设以及一些练习就有这样的特点，能产出代码成果、做完之后就结束、有规定的完成时间等，这些项目的总结文章，写完之后不一定会再去看，写完了发出来类似归档。</p><p><strong>“学习笔记”名称未变，但是内容划分规则变了。</strong>不再介绍成果，而是纯粹的知识点笔记梳理，有成果的文章都归类到“项目总结”中去了。这样可以避免两个分类难以区分的情况。这里的文章不同于“项目总结”归档式的文章，而是可以时时回顾的“笔记”。</p><p>“<strong>解决方案”未变。</strong></p><p><strong>“目录索引”并入新建的分类“博客站务”。</strong>目录索引这一分类文章不多，没必要单独开一个分类，而博客站点相关的内容不能仅仅使用一个<code>hexo</code>标签来标记。</p><p><strong>“日志随笔”中博客更新相关内容并入“博客站务”。</strong></p><p>调整之后，除了“项目总结”仍然是二十多篇、读书笔记是新增的只有一篇之外，其他的分类下文章数目大部分是十篇左右，比起调整前分布更加均匀。</p><h1 id="文章分类流程"><a href="#文章分类流程" class="headerlink" title="文章分类流程"></a>文章分类流程</h1><p>按顺序判定：</p><ul><li>是否与博客站点相关？是，则归类“博客站务”；</li><li>是否含有成品？是，则归类“项目总结”；</li><li>是否是某个特定问题的解决方案？是，则归类“解决方案”；</li><li>是否需要回顾或者以后可能用的到？是，则归类“学习笔记”；</li><li>以上全否，放入“日志随笔”</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于React+Electron的CraftTweaker脚本生成器</title>
      <link href="/posts/CraftTweaker-Assistant/"/>
      <url>/posts/CraftTweaker-Assistant/</url>
      
        <content type="html"><![CDATA[<p>在看到好友<a href="https://gitee.com/StringOD">StringOD</a>的一篇博客<a href="https://stringod.gitee.io/2020/11/26/wo-de-shi-jie-zi-ding-yi-pei-fang-jiao-ben-sheng-cheng-qi/">《我的世界自定义配方脚本生成器》</a>之后，我有了些想法。</p><p><code>CraftTweaker</code>是沙盒游戏<code>Minecraft</code>的一个Mod（<strong>Mod</strong>ification，模组，游戏的一种修改或增强程序），通过使用一种名为<code>ZenScript</code>的自定义脚本语言，修改游戏中的合成配方。</p><p>不过这个mod的最新版本是没有对应的GUI程序的，所以要生成想要的合成配方不是那么容易，得手动编写<code>ZenScript</code>脚本。StringOD的那篇博客中，用易语言实现了一个功能比较完善的GUI程序——<code>AutoSpawnZScript</code>。</p><p>恰好我在大四的第一个综合实践中使用过React+Antd来编写前端界面，而且之前用<a href="https://gitee.com/gaoyoubo/hexo-client">hexo-client</a>的时候了解到了Electron这个东西可以把web程序变为桌面应用程序，所以就想用React+Antd+Electron来尝试编写一下这个逻辑简单的脚本生成器，以巩固React的知识，以及学习一下Electron怎么用。</p><p>本文主要讲一下本项目（<a href="https://gitee.com/ChangingSelf/crafttweaker-assistant">CraftTweaker-Assistant</a>，托管于gitee）的大致情况与设计思路。</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/29164782">结合React创建Electron桌面应用-知乎</a></li><li><a href="https://juejin.cn/post/6844903555921362952">React + Electron 搭建一个桌面应用-掘金</a></li><li><a href="https://docs.blamejared.com/1.16/zh/getting_started/">CraftTweaker的官方文档</a></li></ul><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><p>步骤概括起来大致是：</p><ol><li>创建React项目</li><li>添加electron包</li><li>进行配置</li></ol><p>详细内容可以参考上文给出的参考链接。因为参考链接说的很详细了，所以我这里就不用它们来凑字数了。</p><h1 id="界面原型"><a href="#界面原型" class="headerlink" title="界面原型"></a>界面原型</h1><p>我用ipad上面的notability绘制了一个简单的界面原型如下：</p><p><img src="https://i.loli.net/2021/01/03/Uu7eNTKkPZjtFH4.png" alt="初版原型"></p><p>从这张图可以看到，我对StringOD的项目的界面做出的改进主要有：</p><p>第一，可以展示物品的图片，物品的名称则在鼠标悬停时出现的提示框中展示；</p><p>第二，选择物品不再是用列表或者下拉框，而是点选需要选择物品的格子之后，会弹出一个物品选择对话框，点击想要选择的物品之后就可以选择成功。</p><p>而物品选择对话框的数据则是从json文件中读取，我设定的文件规则如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mod名&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;物品名&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;texture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;物品材质图片url&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>用于测试的数据为：</p><figure class="highlight json"><figcaption><span>itemsData.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;minecraft&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;arrow&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;texture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.loli.net/2021/01/04/6LFr15vAUhzHESf.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flint&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;texture&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i.loli.net/2021/01/05/phzikbtaQ7qPGSV.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stick&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;texture&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i.loli.net/2021/01/05/La1Vd4TPo7RDZer.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;feather&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;texture&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://i.loli.net/2021/01/05/UQX4CoJ3EGmatHO.png&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>物品材质图片暂时使用上传到图床的图片，在以后的版本中，会兼容本地图片路径。</p><h1 id="ZenScript简介"><a href="#ZenScript简介" class="headerlink" title="ZenScript简介"></a>ZenScript简介</h1><p>自定义合成配方，需要使用<code>ZenScript</code>编写如下的合成配方脚本（借用自<a href="https://gitee.com/StringOD">StringOD</a>的<a href="https://stringod.gitee.io/2020/11/26/wo-de-shi-jie-zi-ding-yi-pei-fang-jiao-ben-sheng-cheng-qi/">《我的世界自定义配方脚本生成器》</a>）：</p><figure class="highlight jsx"><figcaption><span>test.zs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 龙蛋: 黑曜石围绕着鸡蛋, 最坚硬的蛋</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;StringOD_LongDan&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dragon_egg&gt; * <span class="number">1</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:egg&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:obsidian&gt;]);</span><br><span class="line">                               </span><br><span class="line"><span class="comment">// 刷怪箱: 铁栅栏围绕着箱子, 网格一样的箱子</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;StringOD_ShuaGuaiXiang&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:spawner&gt; * <span class="number">1</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:chest&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:iron_bars&gt;]);</span><br><span class="line">                               </span><br><span class="line"><span class="comment">// 烈焰粉: 被岩浆桶围起来的木棍</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;StringOD_LieYanFen&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:blaze_powder&gt; * <span class="number">9</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:stick&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:lava_bucket&gt;]);</span><br><span class="line">                               </span><br><span class="line"><span class="comment">// 牛蛋: 被生牛肉围绕起来的鸡蛋</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;StringOD_NiuDan&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:cow_spawn_egg&gt; * <span class="number">1</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:egg&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:beef&gt;]);</span><br><span class="line">                               </span><br><span class="line"><span class="comment">// 史莱姆蛋: 被粘液球围绕起来的鸡蛋</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;StringOD_ShiLaiMuDan&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_spawn_egg&gt; * <span class="number">1</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:egg&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:slime_ball&gt;]);</span><br><span class="line">                               </span><br><span class="line"><span class="comment">// 恶魂之泪: 牛奶桶里面有很多类似的液体, 工作台九宫格中的任意位置</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;StringOD_EHunZhiLei&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ghast_tear&gt; * <span class="number">9</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:milk_bucket&gt;]);</span><br><span class="line">                               </span><br><span class="line"><span class="comment">// 末影人蛋: 末影珍珠围绕着鸡蛋</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;StringOD_MoYingRenDan&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:enderman_spawn_egg&gt; * <span class="number">1</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:egg&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:ender_pearl&gt;]);</span><br></pre></td></tr></table></figure><p>将其保存为扩展名为<code>.zs</code>的文件例如<code>test.zs</code>，并将其置于游戏主目录的<code>scripts</code>目录下（前提是你得安装了<a href="https://www.mcmod.cn/class/669.html">CraftTweaker</a>这个mod），启动游戏，就能使用你的新合成表了。</p><p>你可以在游戏中使用<code>/reload</code>命令来重新加载脚本，从而不必每次重开游戏来调试新写的zs脚本。</p><p>minecraft的配方是由9个材料物品堆和1个成品物品堆构成的，并且分为三种类型：无序配方（<strong>Shapeless</strong>），有序配方（<strong>Shaped</strong>），镜像有序配方（<strong>Shaped Mirrored</strong>）。</p><p>在游戏中，它们之间的区别在于，物品在合成台的九宫格内摆放的形状会不会影响合成的物品的类型和数目。</p><p>而在<code>zenscript</code>中，他们的区别在于调用的函数不同，以及原料的参数编写方式不太一样。</p><p>无序配方：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A shapeless recipe can have up to 9 inputs</span></span><br><span class="line"><span class="comment">// This also demonstrates that more than one output can be used. In this example, 8 grass will be outputted.</span></span><br><span class="line">craftingTable.<span class="title function_">addShapeless</span>(<span class="string">&quot;shapeless_example_2&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:grass&gt; * <span class="number">8</span>, [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:wheat_seeds&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:dirt&gt;]);</span><br></pre></td></tr></table></figure><p>有序配方：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Adding a shaped recipe</span></span><br><span class="line">craftingTable.<span class="title function_">addShaped</span>(<span class="string">&quot;shaped_example_1&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:arrow&gt;, [</span><br><span class="line">    [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:diamond&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:diamond&gt;],</span><br><span class="line">    [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:air&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:flint&gt;],</span><br><span class="line">    [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:air&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:flint&gt;]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>有序镜像配方：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Adding a shaped mirrored recipe</span></span><br><span class="line">craftingTable.<span class="title function_">addShapedMirrored</span>(<span class="string">&quot;shaped_mirror_example_1&quot;</span>, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:arrow&gt; * <span class="number">2</span>, [</span><br><span class="line">    [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:diamond&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:diamond&gt;],</span><br><span class="line">    [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:air&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:flint&gt;],</span><br><span class="line">    [&lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:air&gt;, &lt;<span class="attr">item</span>:<span class="attr">minecraft</span>:flint&gt;]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h1 id="组件设计与实现"><a href="#组件设计与实现" class="headerlink" title="组件设计与实现"></a>组件设计与实现</h1><p>本项目的组件有三个：</p><ol><li><code>CraftTable</code>（合成台）：用于容纳主要功能组件</li><li><code>ItemBox</code>（物品框）：合成台组件的主要组成部分，用于展示物品图片，并响应点击事件以弹出物品选择对话框</li><li><code>ItemSelector</code>（物品选择器）：即物品选择对话框</li></ol><p>同时需要用到一个普通的非组件类来封装物品相关数据，这里沿用了<a href="https://docs.blamejared.com/1.16/zh/getting_started/">CraftTweaker的官方文档</a>中的命名，即<code>ItemStack</code>（物品堆）。</p><p>之所以是物品堆，是因为除了保存物品本身的信息之外，还需要保存物品堆叠的数目，在<code>minecraft</code>中，一个物品框中是可以堆叠多个物品的。</p><h2 id="ItemStack物品堆"><a href="#ItemStack物品堆" class="headerlink" title="ItemStack物品堆"></a>ItemStack物品堆</h2><p>该类封装了物品的几个基本属性（更多属性以后再加），以及物品当前堆叠数目，默认值为“1个空气物品”，即什么都没有。空气（<code>&lt;item:minecraft:air&gt;</code>即代表空）。</p><p>比较简单，故直接上代码：</p><figure class="highlight javascript"><figcaption><span>src\entity\ItemStack.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 物品堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemStack</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; modName mod名称，原版则为&#x27;minecraft&#x27;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; itemName 物品名称，如&#x27;egg&#x27;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; texture 材质图片url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">int</span>&#125; amount 物品数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">modName = <span class="string">&#x27;minecraft&#x27;</span>, itemName = <span class="string">&#x27;air&#x27;</span>, texture = <span class="string">&#x27;&#x27;</span>, amount = <span class="number">1</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">modName</span> = modName;<span class="comment">//mod名称，原版则为&#x27;minecraft&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">itemName</span> = itemName;<span class="comment">//物品名称，如&#x27;egg&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">texture</span> = texture;<span class="comment">//材质url</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">amount</span> = amount;<span class="comment">//物品数目</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">itemName</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">modName</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`&lt;item:<span class="subst">$&#123;<span class="variable language_">this</span>.modName&#125;</span>:<span class="subst">$&#123;<span class="variable language_">this</span>.itemName&#125;</span>&gt;`</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ItemStack</span>;</span><br></pre></td></tr></table></figure><h2 id="ItemBox物品框"><a href="#ItemBox物品框" class="headerlink" title="ItemBox物品框"></a>ItemBox物品框</h2><p>物品框用于展示物品，它目前只有一个<code>state</code>（状态）：<code>ItemStack</code>，用于表明当前物品框内是什么物品，以及堆叠数目。</p><p>使用antd的方形头像框来模拟合成台的物品框，鼠标悬停提示框内显示物品名称。</p><figure class="highlight jsx"><figcaption><span>src\components\ItemBox.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Avatar</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CodeSandboxOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@ant-design/icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ItemStack</span> <span class="keyword">from</span> <span class="string">&quot;../entity/ItemStack&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Tooltip</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 物品框，用于在合成表中显示物品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">itemStack</span>:props.<span class="property">itemStack</span> || <span class="keyword">new</span> <span class="title class_">ItemStack</span>(),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentWillReceiveProps</span>(<span class="params">nextProps</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">itemStack</span>:nextProps.<span class="property">itemStack</span> || <span class="keyword">new</span> <span class="title class_">ItemStack</span>()</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Tooltip</span> <span class="attr">title</span>=<span class="string">&#123;this.state.itemStack.toString()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Avatar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">shape</span>=<span class="string">&quot;square&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">size</span>=<span class="string">&quot;large&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">src</span>=<span class="string">&#123;this.state.itemStack.texture&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">CodeSandboxOutlined</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;...this.props&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          &#123;this.state.itemStack.itemName&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Avatar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Tooltip</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ItemBox</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ItemSelector物品选择器"><a href="#ItemSelector物品选择器" class="headerlink" title="ItemSelector物品选择器"></a>ItemSelector物品选择器</h2><p>这个物品选择器，就是点击物品框之后弹出的那个用于选择物品的对话框。</p><p>它需要读取存储着物品数据的json文件来加载物品框，普通的js是不能读取本地文件的，需要用到nodejs的文件模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure><p>但是直接这样导入，是没办法使用里面的函数的，会报错说该模块没有某某函数。</p><p>查了一圈资料（资料的链接忘记保存了），得到下面这个解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure><p>不过这样会导致你从<code>localhost:3000</code>打开的这个项目会报错，不要紧，因为你用<code>electron</code>打开的是可以用的。</p><p>还有一个问题，就是如果使用异步的<code>fs.readFile()</code>函数，则会产生一个很奇怪的现象，那就是文件读取时好时坏。</p><p>有的时候可以正常工作，而下一次打开有可能就无法读取文件了，使用<code>console.log</code>发现这个函数前面的内容都能执行，但是它就是不调用我给它的回调函数。</p><p>但是我改成使用同步的<code>fs.readFileSync()</code>函数后，问题得到了解决，但我还是不明白为什么会出现这种情况。</p><p>其代码如下：</p><figure class="highlight jsx"><figcaption><span>src\components\ItemSelector.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Modal</span>, <span class="title class_">Button</span>,<span class="title class_">Spin</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ItemStack</span> <span class="keyword">from</span> <span class="string">&quot;../entity/ItemStack&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ItemBox</span> <span class="keyword">from</span> <span class="string">&quot;./ItemBox&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="variable language_">window</span>.<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ItemSelector</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">loading</span>:<span class="literal">true</span>,<span class="comment">//加载状态</span></span><br><span class="line">      <span class="attr">itemList</span>:[<span class="keyword">new</span> <span class="title class_">ItemStack</span>()],</span><br><span class="line">      <span class="attr">onSelectItem</span>:props.<span class="property">onSelectItem</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">readItemList</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用json文件读取itemList</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; fileName </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  readItemList=<span class="function">(<span class="params">fileName=<span class="string">&#x27;itemsData.json&#x27;</span></span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(fileName);</span><br><span class="line">    <span class="comment">//读取文件</span></span><br><span class="line">    <span class="comment">//不知道为啥，异步的方法时不时就会无法调用回调函数</span></span><br><span class="line">    <span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(fileName);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initSelectorByJsonString</span>(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fs.readFile(fileName, &quot;utf-8&quot;, (error, data)=&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   //  用error来判断文件是否读取成功</span></span><br><span class="line">    <span class="comment">//   if (error) return console.log(&quot;读取文件失败:&quot; + error.message);</span></span><br><span class="line">    <span class="comment">//   this.initSelectorByJsonString(data);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用json字符串来初始化选择器</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; data json字符串</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  initSelectorByJsonString=<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> itemList = [<span class="keyword">new</span> <span class="title class_">ItemStack</span>()];</span><br><span class="line">    <span class="keyword">let</span> jsonObject = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line">    <span class="comment">//console.log(jsonObject);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> modName <span class="keyword">in</span> jsonObject)&#123;</span><br><span class="line">      <span class="comment">//遍历每一个mod的每个物品</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> itemName <span class="keyword">in</span> jsonObject[modName])&#123;</span><br><span class="line">        itemList.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">ItemStack</span>(modName,itemName,jsonObject[modName][itemName].<span class="property">texture</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//console.log(itemList);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置state</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">loading</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="attr">itemList</span>:itemList,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;选择物品&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">footer</span>=<span class="string">&#123;null&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...this.props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Spin</span> <span class="attr">spinning</span>=<span class="string">&#123;this.state.loading&#125;</span> <span class="attr">tip</span>=<span class="string">&quot;加载物品列表中，请稍候&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            this.state.itemList.map((item,index)=&gt;&#123;</span></span><br><span class="line"><span class="language-xml">              return (</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">ItemBox</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span> <span class="attr">itemStack</span>=<span class="string">&#123;item&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.state.onSelectItem(item)&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">              )</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Spin</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.state.loading&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ItemSelector</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CraftTable合成台"><a href="#CraftTable合成台" class="headerlink" title="CraftTable合成台"></a>CraftTable合成台</h2><p>该组件用于将物品框等主要功能组件组合起来，进行布局，以及存储当前已经设置的配方。</p><p>它的<code>state</code>为：</p><table><thead><tr><th>state</th><th>简介</th></tr></thead><tbody><tr><td>isItemSelectorVisible</td><td>物品选择器是否可见</td></tr><tr><td>itemList</td><td>元素为ItemStack的数组，下标0为输出框，1~9为原料框</td></tr><tr><td>curIndex</td><td>当前选择的物品框下标，-1为未选择</td></tr><tr><td>recipeName</td><td>配方名称</td></tr><tr><td>recipeType</td><td>配方类型，0-无序，1-有序，2-镜像有序</td></tr><tr><td>zenscript</td><td>生成的zs脚本</td></tr></tbody></table><p>它提供了一个方法<code>onSelectItem()</code>，参数为<code>ItemStack</code>类型，作为子组件<code>ItemSelector</code>的选择物品回调函数。</p><p>代码如下（比较长，可以点击代码块左上角图标以折叠）：</p><figure class="highlight jsx"><figcaption><span>src\components\CraftTable.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Row</span>, <span class="title class_">Col</span>, <span class="title class_">Space</span>, <span class="title class_">Tooltip</span>, <span class="title class_">Card</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ItemBox</span> <span class="keyword">from</span> <span class="string">&quot;./ItemBox&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ArrowRightOutlined</span>,<span class="title class_">CopyOutlined</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@ant-design/icons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ItemSelector</span> <span class="keyword">from</span> <span class="string">&quot;./ItemSelector&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ItemStack</span> <span class="keyword">from</span> <span class="string">&quot;../entity/ItemStack&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">InputNumber</span>,<span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Select</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Option</span> &#125; = <span class="title class_">Select</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">TextArea</span> &#125; = <span class="title class_">Input</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合成台组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CraftTable</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="keyword">let</span> itemList = [];<span class="comment">//0为输出框，1~9为原料框</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">      itemList.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">ItemStack</span>());<span class="comment">//默认为1个&lt;minecraft:air&gt;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">isItemSelectorVisible</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">itemList</span>: itemList,<span class="comment">//存储物品id</span></span><br><span class="line">      <span class="attr">curIndex</span>:-<span class="number">1</span>,<span class="comment">//当前选择的物品框下标，-1为未选择</span></span><br><span class="line">      <span class="attr">recipeName</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment">//配方名称</span></span><br><span class="line">      <span class="attr">recipeType</span>:<span class="number">0</span>,<span class="comment">//配方类型，0-无序，1-有序，2-镜像有序</span></span><br><span class="line">      <span class="attr">zenscript</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 打开物品选择器</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">int</span>&#125; index 当前选中的物品框下标</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  openItemSelector = <span class="function">(<span class="params">index</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isItemSelectorVisible</span>: <span class="literal">true</span> ,<span class="attr">curIndex</span>:index&#125;);</span><br><span class="line"></span><br><span class="line">  closeItemSelector = <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">isItemSelectorVisible</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 选择物品的回调函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">ItemStack</span>&#125; item 物品</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onSelectItem = <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">curIndex</span>===-<span class="number">1</span>) <span class="keyword">return</span>;<span class="comment">//未选择物品框</span></span><br><span class="line">    <span class="keyword">let</span> itemList = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>;</span><br><span class="line">    itemList[<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">curIndex</span>] = item;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">isItemSelectorVisible</span>:<span class="literal">false</span>,</span><br><span class="line">      <span class="attr">itemList</span>:itemList,</span><br><span class="line">    &#125;,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改配方名称回调</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; e </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onRecipeInputChange=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line"><span class="attr">recipeName</span>:e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改成品数目回调</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onAmountInputChange=<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> itemList = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>;</span><br><span class="line">    itemList[<span class="number">0</span>].<span class="property">amount</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line"><span class="attr">itemList</span>:itemList</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 配方类型回调</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; value </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onRecipeTypeChange=<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">recipeType</span>:value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成配方的脚本</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  createRecipeZenScript=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">recipeName</span>)&#123;</span><br><span class="line">      <span class="comment">//未输入配方名</span></span><br><span class="line">      message.<span class="title function_">error</span>(<span class="string">&#x27;请输入配方名&#x27;</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> zenscript = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> ingredients =<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> outputItemStr = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>[<span class="number">0</span>].<span class="title function_">toString</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>[<span class="number">0</span>].<span class="property">amount</span>!==<span class="number">1</span>) outputItemStr += <span class="string">&#x27;*&#x27;</span>+ <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>[<span class="number">0</span>].<span class="property">amount</span>;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">recipeType</span>)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:<span class="attr">default</span>:<span class="comment">//无序</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">itemList</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">itemStack,index</span>)=&gt;</span>&#123;</span><br><span class="line">          <span class="keyword">if</span>(index!==<span class="number">0</span>) ingredients+=<span class="string">&#x27;,&#x27;</span></span><br><span class="line">          ingredients+=itemStack.<span class="title function_">toString</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        zenscript = <span class="string">`craftingTable.addShapeless(&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.state.recipeName&#125;</span>&quot;,<span class="subst">$&#123;outputItemStr&#125;</span>,[<span class="subst">$&#123;ingredients&#125;</span>]);`</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//有序</span></span><br><span class="line">        </span><br><span class="line">        ingredients=<span class="string">`[<span class="subst">$&#123;a[<span class="number">1</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">2</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">3</span>].toString()&#125;</span>],[<span class="subst">$&#123;a[<span class="number">4</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">5</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">6</span>].toString()&#125;</span>],[<span class="subst">$&#123;a[<span class="number">7</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">8</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">9</span>].toString()&#125;</span>]`</span></span><br><span class="line">        zenscript = <span class="string">`craftingTable.addShaped(&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.state.recipeName&#125;</span>&quot;,<span class="subst">$&#123;outputItemStr&#125;</span>,[<span class="subst">$&#123;ingredients&#125;</span>]);`</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//有序镜像</span></span><br><span class="line">        ingredients=<span class="string">`[<span class="subst">$&#123;a[<span class="number">1</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">2</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">3</span>].toString()&#125;</span>],[<span class="subst">$&#123;a[<span class="number">4</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">5</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">6</span>].toString()&#125;</span>],[<span class="subst">$&#123;a[<span class="number">7</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">8</span>].toString()&#125;</span>,<span class="subst">$&#123;a[<span class="number">9</span>].toString()&#125;</span>]`</span></span><br><span class="line">        zenscript = <span class="string">`craftingTable.addShapedMirrored(&quot;<span class="subst">$&#123;<span class="variable language_">this</span>.state.recipeName&#125;</span>&quot;,<span class="subst">$&#123;outputItemStr&#125;</span>,[<span class="subst">$&#123;ingredients&#125;</span>]);`</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">zenscript</span>:zenscript</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 复制按钮回调</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onCopy=<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ItemSelector</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">visible</span>=<span class="string">&#123;this.state.isItemSelectorVisible&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onSelectItem</span>=<span class="string">&#123;this.onSelectItem&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onCancel</span>=<span class="string">&#123;this.closeItemSelector&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>配方名称<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onRecipeInputChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">ItemBox</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">key</span>=<span class="string">&#123;1&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">itemStack</span>=<span class="string">&#123;this.state.itemList[1]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.openItemSelector(1)&#125;</span></span><br><span class="line"><span class="language-xml">              /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/* 中间省略9个重复的格子*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Tooltip</span> <span class="attr">title</span>=<span class="string">&quot;成品数目&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">InputNumber</span> <span class="attr">min</span>=<span class="string">&#123;1&#125;</span> <span class="attr">defaultValue</span>=<span class="string">&#123;1&#125;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.onAmountInputChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Tooltip</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>配方类型：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Select</span> <span class="attr">defaultValue</span>=<span class="string">&#123;0&#125;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">120</span> &#125;&#125; <span class="attr">onChange</span>=<span class="string">&#123;this.onRecipeTypeChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">&#123;0&#125;</span>&gt;</span>无序<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">&#123;1&#125;</span>&gt;</span>有序<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Option</span> <span class="attr">value</span>=<span class="string">&#123;2&#125;</span>&gt;</span>有序镜像<span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">shape</span>=<span class="string">&quot;round&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.createRecipeZenScript&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              合成</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Button</span> <span class="attr">id</span>=<span class="string">&#x27;copy&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">shape</span>=<span class="string">&quot;round&quot;</span> <span class="attr">icon</span>=<span class="string">&#123;</span>&lt;<span class="attr">CopyOutlined</span>/&gt;</span>&#125;onClick=&#123;this.onCopy&#125;&gt;</span></span><br><span class="line"><span class="language-xml">              复制脚本</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Col</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Space</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Row</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Card</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.state.zenscript&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CraftTable</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h1><p><img src="https://i.loli.net/2021/01/12/HSCBWq5PdrJ3UEV.png" alt="初版效果图"></p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>本文主要讲的是<a href="https://gitee.com/ChangingSelf/crafttweaker-assistant">CraftTweaker-Assistant</a>这个项目的大致情况，以及遇到的一些问题。这个项目逻辑比较简单，主要是让我巩固一下React的相关知识。</p><p>现在完成的是最初的版本，只实现了最基本的功能，后续如果有时间，可能会和StringOD一起继续更新。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在hexo的Icarus主题页面底部加入备案号</title>
      <link href="/posts/hexo-Icarus-beian-in-footer/"/>
      <url>/posts/hexo-Icarus-beian-in-footer/</url>
      
        <content type="html"><![CDATA[<p>2020年12月31日提交的ICP备案申请，在今天（2020年1月7日）通过啦！</p><p>接着就是要把备案号添加到博客页脚。</p><span id="more"></span><p>参考的资料链接为：<a href="https://blog.csdn.net/ye17186/article/details/111564883">Hexo博客icarus主题定制篇</a></p><blockquote><h2 id="定制备案"><a href="#定制备案" class="headerlink" title="定制备案"></a>定制备案</h2><p>icarus主题目前没有备案的扩展点，官方后续应该后支持这个功能，我先自己扩展一个用用。</p><p>编辑文件<code>node_modules\hexo-theme-icarus\layout\common\footer.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">            logo,</span><br><span class="line">            logoUrl,</span><br><span class="line">            siteUrl,</span><br><span class="line">            siteTitle,</span><br><span class="line">            siteYear,</span><br><span class="line">            author,</span><br><span class="line">            links,</span><br><span class="line">            showVisitorCounter,</span><br><span class="line">            visitorCounterTitle,</span><br><span class="line">            <span class="comment">/* 添加下面这行代码 */</span></span><br><span class="line">beian</span><br><span class="line">        &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/ppoffice/hexo-theme-icarus&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;noopener&quot;</span>&gt;</span>Icarus<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;<span class="comment">/* 添加下面这行代码 */</span>&#125;</span><br><span class="line">&lt;br /&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;beian.url&#125;</span>&gt;</span>&#123;beian.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure><p>配置<code>_config.icarus.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beian:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">xxxxxx备案号</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">xxxurl</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure></blockquote><p>上面这部分是关于参考博客的原文的引用。</p><p>我打开的是<code>themes\icarus\layout\common\footer.jsx</code> ，应该是安装的时候用的方式不同，博主用的应该是插件式的方式安装Icarus主题。不过都一样。</p><p>我第一次尝试的时候只添加了<code>&lt;br /&gt;&lt;a href=&#123;beian.url&#125;&gt;&#123;beian.title&#125;&lt;/a&gt;</code>这一部分代码，没看到上面，随后hexo报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err: ReferenceError: beian is not defined</span><br></pre></td></tr></table></figure><p><code>beian</code>未定义？我已经在配置文件中定义了<code>beian</code>这个配置项啊。随后看到了上面那部分，原来是因为，虽然配置传入了<code>Footer</code>组件的属性，但是并未被解构赋值取出来，所以需要在一开头把<code>beian</code>这一项取出来。</p><p>然而，即使我这样做了，还是出现了问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">err: TypeError: Cannot read property &#x27;title&#x27; of undefined</span><br></pre></td></tr></table></figure><p>这说明<code>beian</code>还是未定义，是哪里出现问题了呢？</p><p>我发现这个文件中除了<code>Footer</code>这个react组件的定义之外，还有如下代码：</p><figure class="highlight jsx"><figcaption><span>themes\icarus\layout\common\footer.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">cacheComponent</span>(<span class="title class_">Footer</span>, <span class="string">&#x27;common.footer&#x27;</span>, <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; config, helper &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> &#123; url_for, _p, date &#125; = helper;</span><br><span class="line">    <span class="keyword">const</span> &#123; logo, title, author, footer, plugins &#125; = config;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> links = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (footer &amp;&amp; footer.<span class="property">links</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(footer.<span class="property">links</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> link = footer.<span class="property">links</span>[name];</span><br><span class="line">            links[name] = &#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="title function_">url_for</span>(<span class="keyword">typeof</span> link === <span class="string">&#x27;string&#x27;</span> ? link : link.<span class="property">url</span>),</span><br><span class="line">                <span class="attr">icon</span>: link.<span class="property">icon</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        logo,</span><br><span class="line">        <span class="attr">logoUrl</span>: <span class="title function_">url_for</span>(logo),</span><br><span class="line">        <span class="attr">siteUrl</span>: <span class="title function_">url_for</span>(<span class="string">&#x27;/&#x27;</span>),</span><br><span class="line">        <span class="attr">siteTitle</span>: title,</span><br><span class="line">        <span class="attr">siteYear</span>: <span class="title function_">date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&#x27;YYYY&#x27;</span>),</span><br><span class="line">        author,</span><br><span class="line">        links,</span><br><span class="line">        <span class="attr">showVisitorCounter</span>: plugins &amp;&amp; plugins.<span class="property">busuanzi</span> === <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">visitorCounterTitle</span>: <span class="title function_">_p</span>(<span class="string">&#x27;plugin.visitor_count&#x27;</span>, <span class="string">&#x27;&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;0&lt;/span&gt;&#x27;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以发现，这段代码的前面有个<code>config</code>，并且解构赋值了几个在配置文件中存在的字段，我想，这应该就是读取配置并且将它们作为属性传给<code>Footer</code>组件的代码了，所以我在这里也做了修改：</p><figure class="highlight jsx"><figcaption><span>themes\icarus\layout\common\footer.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">cacheComponent</span>(<span class="title class_">Footer</span>, <span class="string">&#x27;common.footer&#x27;</span>, <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; config, helper &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> &#123; url_for, _p, date &#125; = helper;</span><br><span class="line">    <span class="keyword">const</span> &#123; logo, title, author, footer, plugins,beian &#125; = config;<span class="comment">//在这里添加beian</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> links = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (footer &amp;&amp; footer.<span class="property">links</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(footer.<span class="property">links</span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> link = footer.<span class="property">links</span>[name];</span><br><span class="line">            links[name] = &#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="title function_">url_for</span>(<span class="keyword">typeof</span> link === <span class="string">&#x27;string&#x27;</span> ? link : link.<span class="property">url</span>),</span><br><span class="line">                <span class="attr">icon</span>: link.<span class="property">icon</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        logo,</span><br><span class="line">        <span class="attr">logoUrl</span>: <span class="title function_">url_for</span>(logo),</span><br><span class="line">        <span class="attr">siteUrl</span>: <span class="title function_">url_for</span>(<span class="string">&#x27;/&#x27;</span>),</span><br><span class="line">        <span class="attr">siteTitle</span>: title,</span><br><span class="line">        <span class="attr">siteYear</span>: <span class="title function_">date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&#x27;YYYY&#x27;</span>),</span><br><span class="line">        author,</span><br><span class="line">        links,</span><br><span class="line">        <span class="attr">showVisitorCounter</span>: plugins &amp;&amp; plugins.<span class="property">busuanzi</span> === <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">visitorCounterTitle</span>: <span class="title function_">_p</span>(<span class="string">&#x27;plugin.visitor_count&#x27;</span>, <span class="string">&#x27;&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;0&lt;/span&gt;&#x27;</span>),</span><br><span class="line">        beian<span class="comment">//并且在这里返回出去</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/07/bazU4QMtDp7rJIq.png" alt="该文件中所有的修改"></p><p>完成这些就ok了，<code>hexo clean &amp; hexo s</code>之后，在博客最底部可以看到备案号。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy+selenium爬取智联招聘</title>
      <link href="/posts/scrapy-selenium-zhilian-zhaopin-spider/"/>
      <url>/posts/scrapy-selenium-zhilian-zhaopin-spider/</url>
      
        <content type="html"><![CDATA[<p>这是第三个大四综合实践——数据处理与分析。我们小组打算爬取各个招聘网站进行数据分析。</p><p>我负责其中的爬虫模块，教了两个队友怎么使用scrapy，打算我解决完爬取数据的一些难题之后，剩余的解析就交给他们。</p><p>我觉得解析数据只是苦力活，只要爬取到带有数据的html，剩下的就很轻松了。最后我选择使用selenium，这样就不用分析接口了，两个刚学爬虫的队友也能轻松搞定。</p><p>很快地搞定了前程无忧网和拉勾网之后，我在爬取<a href="https://www.zhaopin.com/">智联招聘网</a>遇到了很多问题。本文将这些问题以及解决方案记录下来，供读者参考。</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>以下链接为我在发现问题和解决问题的过程中参考的资料。</p><ul><li><p><a href="https://www.cnblogs.com/stevin-john/p/4768904.html">INSERT IGNORE 与INSERT INTO的区别：INSERT语句加一个IGNORE可以跳过数据库中已经存在的记录</a></p></li><li><p><a href="https://blog.csdn.net/u013013024/article/details/82683952">爬虫scrapy+selenium带cookie免密码登录状态</a></p></li><li><p><a href="http://www.zzvips.com/article/63609.html">selenium中get_cookies()和add_cookie（）的用法详解</a></p></li><li><p><a href="http://www.zzvips.com/article/63609.html">selenium报错：Invalid cookie domain</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43305880/article/details/102457502">记录-爬取智联招聘</a></p></li><li><p><a href="https://blog.csdn.net/jiduochou963/article/details/88200217">selenium的检测与突破</a></p></li><li><p><a href="https://blog.csdn.net/akuibpt23191/article/details/101129318">selenium 参数设置-window.navigator.webdriver</a></p></li><li><p><a href="https://blog.csdn.net/SpringBears/article/details/105596779">selenium设置了启动配置，但是window.navigator.webdriver的结果依然为true</a></p></li><li><p><a href="https://blog.csdn.net/qq_35866846/article/details/105712147">（新）关于修改window.navigator.webdriver代码失效问题（不必退版本的解决方案）</a></p></li><li><p><a href="https://www.cnblogs.com/littlehappycode/p/11015567.html">scrapy.Request使用meta传递数据，以及deepcopy的使用</a></p></li><li><p><a href="https://blog.csdn.net/zyooooxie/article/details/83780472">1106Selenium web自动化测试思路分享-打开多个窗口，切换句柄</a></p></li><li><p><a href="https://blog.csdn.net/gufenchen/article/details/90274169">解决：出现Message: element not interactable元素不可交互的问题</a></p></li><li><p><a href="https://blog.csdn.net/songlh1234/article/details/100983248">Python selenium错误：ElementNotInteractableException: Message: element not interactable: Element is not</a></p></li><li><p><a href="https://www.cnblogs.com/yp19970/p/12888881.html">Other element would receive the click:解决之一</a>【最终选择的解决方案】</p></li><li><p><a href="https://blog.csdn.net/yinlin330/article/details/82625454">python之selenium调用js(execute_script)</a></p></li></ul><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><p>智联招聘这个网站，如果不登陆，一个职位都不给你显示，所以第一步是登录。</p><h2 id="使用cookies登录"><a href="#使用cookies登录" class="headerlink" title="使用cookies登录"></a>使用cookies登录</h2><p>一开始打算手动登录之后保存cookies到文件（全自动的吃力不讨好，于是弄成半自动的了），然后启动scrapy时从文件里面读取cookies并加载刷新。</p><p>先用下面这个工具模块登录后获取到cookies，保存到文件当中，需要的时候再读取出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">工具模块</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCookies</span>(<span class="params">websiteName</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取cookies，会打开一个浏览器，然后手动登录，会获取登录后的cookies写入cookies.json中</span></span><br><span class="line"><span class="string">    @return 是否成功</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    website_map = &#123;</span><br><span class="line">        <span class="string">&#x27;zhaopin&#x27;</span>: <span class="string">&quot;https://sou.zhaopin.com/?jl=543&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    website_url = website_map.get(websiteName)</span><br><span class="line">    <span class="keyword">if</span> website_url == <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    browser.get(website_url)</span><br><span class="line">    <span class="built_in">input</span>(<span class="string">&#x27;请随便输入点什么代表你已经登录完成：&#x27;</span>)</span><br><span class="line">    dictCookies = browser.get_cookies()</span><br><span class="line">    jsonCookies = json.dumps(dictCookies, sort_keys=<span class="literal">True</span>, indent=<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(jsonCookies)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(websiteName+<span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(jsonCookies)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;获取成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    getCookies(<span class="string">&#x27;zhaopin&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读取cookies的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmploymentDownloaderMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the downloader middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line"></span><br><span class="line">    spider_need_login = [</span><br><span class="line">        <span class="string">&#x27;zhaopin&#x27;</span></span><br><span class="line">    ]  <span class="comment"># 需要登录的爬虫的名字，为了防止影响其他网站的爬虫而存在</span></span><br><span class="line">    isLogin = <span class="literal">False</span>  <span class="comment"># 是否已经登录</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.browser = webdriver.Chrome()</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, websiteName: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        利用cookies登录</span></span><br><span class="line"><span class="string">        @param websiteName:网站名字，目前支持的网站：&#x27;zhaopin&#x27;(智联招聘)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(websiteName+<span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            listCookies = json.loads(f.read())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===============================================cookies===============================&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(listCookies)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===============================================cookies===============================&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> listCookies:</span><br><span class="line">            <span class="variable language_">self</span>.browser.add_cookie(cookie)</span><br><span class="line">        <span class="variable language_">self</span>.isLogin = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="去除selenium特征"><a href="#去除selenium特征" class="headerlink" title="去除selenium特征"></a>去除selenium特征</h2><p>但是即使我读取cookies成功了，页面右上角都显示我用户名了，仍然一直显示加载动画。甚至连“登录之后再搜索，海量职位等你挑！”这一句提示都没有。</p><p>用chrome开发者工具比较手动打开的网页以及selenium打开的网页，发现selenium打开的网页发送给接口<code>https://fe-api.zhaopin.com/c/i/sou</code>的请求并没有收到Response，多试几次之后发现了另一个已经收到Response，但是状态码为400 Bad Request。</p><p><strong>猜测是selenium打开的网页传递的参数会与人工打开的网页有所区别。</strong></p><p>查询资料后，发现是因为selenium打开的网页会有特征变量<code>window.navigator.webdriver</code>（参考：<a href="https://blog.csdn.net/jiduochou963/article/details/88200217">selenium的检测与突破</a>），网站只要检测那个特征变量，就可以判断这次访问是不是selenium打开的，如果这个变量为True，则不加载数据，从而实现反爬虫的目的。看来智联招聘真的是被各种爬虫爬怕了。</p><p>找了两三个方法，修改了selenium的启动选项，都无法修改这个变量，因为他们的方法是针对旧版本的chrome的，不过我在博客的评论下找到了一位老哥，他写了一篇不需要退版本的解决方案。（参考：<a href="https://blog.csdn.net/qq_35866846/article/details/105712147">（新）关于修改window.navigator.webdriver代码失效问题（不必退版本的解决方案）</a>）</p><p>解决方案是：在selenium启动浏览器之前，让它执行js脚本，修改掉那个变量，详细方法见参考链接。</p><p>最后<code>middleware.py</code>里面的核心代码是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmploymentDownloaderMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.browser = webdriver.Chrome()</span><br><span class="line">        <span class="variable language_">self</span>.browser.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">            get: () =&gt; undefined</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> <span class="comment"># 在开启浏览器之前执行脚本去除selenium特征避免被发现是爬虫</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure><h2 id="无奈使用半自动登录"><a href="#无奈使用半自动登录" class="headerlink" title="无奈使用半自动登录"></a>无奈使用半自动登录</h2><p>解决特征变量的问题后，终于不再是无尽的加载动画了，但是读取cookies登录显示“登录之后再搜索，海量职位等你挑！”这样的提示信息，不给数据。</p><p>可能是因为当次的cookies只能当次使用，之后即使没有过期，也会因为sessionid对不上或者别的什么参数对不上而不给数据。</p><p>最后在Middleware获取selenium模拟浏览器网页的源代码之前，加了一个input函数等待我手动在模拟浏览器内登录好了之后再继续执行，方法比较low，但是管用。缺点是每次启动都得登录，有点担心被封号，不过后面频繁爬取时并没有被封过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EmploymentDownloaderMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># Not all methods need to be defined. If a method is not defined,</span></span><br><span class="line">    <span class="comment"># scrapy acts as if the downloader middleware does not modify the</span></span><br><span class="line">    <span class="comment"># passed objects.</span></span><br><span class="line"></span><br><span class="line">    spider_need_login = [</span><br><span class="line">        <span class="string">&#x27;zhaopin&#x27;</span></span><br><span class="line">    ]  <span class="comment"># 需要登录的爬虫的名字，为了防止影响其他网站的爬虫而存在</span></span><br><span class="line">    isLogin = <span class="literal">False</span>  <span class="comment"># 是否已经登录</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.browser = webdriver.Chrome()</span><br><span class="line">        <span class="variable language_">self</span>.browser.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">            get: () =&gt; undefined</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span> <span class="comment"># 在开启浏览器之前执行脚本去除selenium特征避免被发现是爬虫</span></span><br><span class="line">        <span class="variable language_">self</span>.loadTime = <span class="number">3</span>  <span class="comment"># 留给浏览器的加载时间</span></span><br><span class="line">       </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self, websiteName: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        利用cookies登录</span></span><br><span class="line"><span class="string">        @param websiteName:网站名字，目前支持的网站：&#x27;zhaopin&#x27;(智联招聘)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(websiteName+<span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            listCookies = json.loads(f.read())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===============================================cookies===============================&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(listCookies)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===============================================cookies===============================&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> cookie <span class="keyword">in</span> listCookies:</span><br><span class="line">            <span class="variable language_">self</span>.browser.add_cookie(cookie)</span><br><span class="line">        <span class="variable language_">self</span>.isLogin = <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> request.meta.get(<span class="string">&#x27;next_page_css&#x27;</span>) != <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 如果存在，则说明需要翻页</span></span><br><span class="line">            <span class="comment"># 并不下载，因为下载之后又会回到第一页</span></span><br><span class="line">            nextPageBtn = <span class="variable language_">self</span>.browser.find_element_by_css_selector(</span><br><span class="line">                request.meta[<span class="string">&#x27;next_page_css&#x27;</span>])</span><br><span class="line">           nextPageBtn.click()</span><br><span class="line">            time.sleep(<span class="variable language_">self</span>.loadTime)  <span class="comment"># 给浏览器加载数据的时间</span></span><br><span class="line">            page_text = <span class="variable language_">self</span>.browser.page_source</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.browser.get(request.url)</span><br><span class="line">            <span class="keyword">if</span> spider.name <span class="keyword">in</span> <span class="variable language_">self</span>.spider_need_login <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.isLogin:</span><br><span class="line">                <span class="comment"># 如果该爬虫需要登录且未登录</span></span><br><span class="line">                <span class="comment"># self.login(spider.name)</span></span><br><span class="line">                <span class="comment"># self.browser.refresh()  # 刷新</span></span><br><span class="line">                <span class="built_in">input</span>(<span class="string">&#x27;请手动登录，登录好了之后输入1：&#x27;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.isLogin = <span class="literal">True</span></span><br><span class="line">                <span class="comment"># 顺便保存一下cookies，不过后面还是没用到</span></span><br><span class="line">                dictCookies = <span class="variable language_">self</span>.browser.get_cookies()</span><br><span class="line">                jsonCookies = json.dumps(dictCookies, sort_keys=<span class="literal">True</span>, indent=<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(jsonCookies)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(spider.name+<span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(jsonCookies)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;cookies保存成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            time.sleep(<span class="variable language_">self</span>.loadTime)  <span class="comment"># 给浏览器加载数据的时间</span></span><br><span class="line">            <span class="comment"># 获取渲染后的数据</span></span><br><span class="line">            page_text = <span class="variable language_">self</span>.browser.page_source</span><br><span class="line">            <span class="comment"># 篡改响应对象</span></span><br><span class="line">       <span class="keyword">return</span> HtmlResponse(url=<span class="variable language_">self</span>.browser.current_url, body=page_text, encoding=<span class="string">&#x27;utf-8&#x27;</span>, request=request)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/11/22/QKsnSt6DcmGobE9.png" alt="用selenium开启的浏览器也获取到了数据"></p><h1 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h1><p>按照我以前的方式来爬取详情页并没有什么问题，但是问题在于爬取详情页的时候，当前标签页会跳转到详情页，之后就回不去目录页了。</p><h2 id="开启两个标签页"><a href="#开启两个标签页" class="headerlink" title="开启两个标签页"></a>开启两个标签页</h2><p>当爬取完第一页的所有职位数据后，selenium模拟浏览器的页面是停留在最后一个职位的详情页的，无法找到“下一页按钮”，也就无法翻页。如果此时手动跳转回目录页，那么之前翻的页是无法保留的，又回到第一页。</p><p>解决方案：打开两个标签页，如果正在爬取详情页，则切换到第二个标签页来进行爬取，第一个标签页始终是目录页。</p><p>等到详情页爬取完毕，则切换回第一个标签页，翻页并继续解析。</p><p>以下是开启第二个标签页并获取句柄的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EmploymentDownloaderMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    spider_need_login = [</span><br><span class="line">        <span class="string">&#x27;zhaopin&#x27;</span></span><br><span class="line">    ]  <span class="comment"># 需要登录的爬虫的名字</span></span><br><span class="line">    isLogin = <span class="literal">False</span>  <span class="comment"># 是否已经登录</span></span><br><span class="line"></span><br><span class="line">    homePageHandle = <span class="literal">None</span>  <span class="comment"># 主页（即目录）的句柄</span></span><br><span class="line">    subPageHandle = <span class="literal">None</span>  <span class="comment"># 子页面（即详情页）的句柄</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.browser = webdriver.Chrome()</span><br><span class="line">        <span class="variable language_">self</span>.browser.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">            get: () =&gt; undefined</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        &#125;)  <span class="comment"># 在开启浏览器之前执行脚本去除selenium特征避免被发现是爬虫</span></span><br><span class="line">        <span class="variable language_">self</span>.loadTime = <span class="number">3</span>  <span class="comment"># 留给浏览器的加载时间</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.homePageHandle = <span class="variable language_">self</span>.browser.current_window_handle</span><br><span class="line">        js = <span class="string">&#x27;window.open(&quot;https://www.baidu.com/&quot;)&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.browser.execute_script(js)  <span class="comment"># 新建一个窗口</span></span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="variable language_">self</span>.loadTime)  <span class="comment"># 等新窗口创建好</span></span><br><span class="line"></span><br><span class="line">        all_handles = <span class="variable language_">self</span>.browser.window_handles</span><br><span class="line">        <span class="variable language_">self</span>.subPageHandle = all_handles[-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>接着在<code>process_request</code>函数中判断当前request是否为爬取详情页的请求，如果是，那么就切换到第二个标签页，如果不是，那么就回到目录页进行翻页：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line"></span><br><span class="line">       <span class="comment"># 如果meta中存在item，则代表需要爬取详情页，在新的页面打开并爬取</span></span><br><span class="line">       <span class="keyword">if</span> request.meta.get(<span class="string">&#x27;item&#x27;</span>) != <span class="literal">None</span>:</span><br><span class="line">           <span class="variable language_">self</span>.browser.switch_to.window(<span class="variable language_">self</span>.subPageHandle)</span><br><span class="line"></span><br><span class="line">           <span class="variable language_">self</span>.browser.get(request.url)  <span class="comment"># 下载</span></span><br><span class="line">           time.sleep(<span class="variable language_">self</span>.loadTime)</span><br><span class="line">           <span class="comment"># 获取渲染后的数据</span></span><br><span class="line">           page_text = <span class="variable language_">self</span>.browser.page_source</span><br><span class="line"></span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="comment"># 爬取目录页</span></span><br><span class="line"></span><br><span class="line">           <span class="variable language_">self</span>.browser.switch_to.window(<span class="variable language_">self</span>.homePageHandle)</span><br><span class="line"></span><br><span class="line">           time.sleep(<span class="variable language_">self</span>.loadTime)  <span class="comment"># 给浏览器加载数据的时间</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> request.meta.get(<span class="string">&#x27;next_page_css&#x27;</span>) != <span class="literal">None</span>:</span><br><span class="line">               <span class="comment"># 如果存在，则说明需要翻页</span></span><br><span class="line">               <span class="comment"># 并不下载，因为下载之后又会回到第一页</span></span><br><span class="line">               nextPageBtn = <span class="variable language_">self</span>.browser.find_element_by_css_selector(</span><br><span class="line">                   request.meta[<span class="string">&#x27;next_page_css&#x27;</span>])</span><br><span class="line"></span><br><span class="line">               <span class="variable language_">self</span>.browser.execute_script(</span><br><span class="line">                   <span class="string">&quot;arguments[0].click();&quot;</span>, nextPageBtn)</span><br><span class="line">               <span class="comment"># nextPageBtn.click()</span></span><br><span class="line">               time.sleep(<span class="variable language_">self</span>.loadTime)  <span class="comment"># 给浏览器加载数据的时间</span></span><br><span class="line">               page_text = <span class="variable language_">self</span>.browser.page_source</span><br><span class="line">           <span class="keyword">else</span>:</span><br><span class="line">               <span class="variable language_">self</span>.browser.get(request.url)</span><br><span class="line">               <span class="keyword">if</span> spider.name <span class="keyword">in</span> <span class="variable language_">self</span>.spider_need_login <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.isLogin:</span><br><span class="line">                   <span class="comment"># 如果该爬虫需要登录且未登录</span></span><br><span class="line">                   <span class="comment"># self.login(spider.name)</span></span><br><span class="line">                   <span class="comment"># self.browser.refresh()  # 刷新</span></span><br><span class="line">                   <span class="built_in">input</span>(<span class="string">&#x27;请手动登录，登录好了之后输入1：&#x27;</span>)</span><br><span class="line">                   <span class="variable language_">self</span>.isLogin = <span class="literal">True</span></span><br><span class="line">                   <span class="comment"># 顺便保存一下cookies</span></span><br><span class="line">                   dictCookies = <span class="variable language_">self</span>.browser.get_cookies()</span><br><span class="line">                   jsonCookies = json.dumps(</span><br><span class="line">                       dictCookies, sort_keys=<span class="literal">True</span>, indent=<span class="number">2</span>)</span><br><span class="line">                   <span class="built_in">print</span>(jsonCookies)</span><br><span class="line">                   <span class="keyword">with</span> <span class="built_in">open</span>(spider.name+<span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                       f.write(jsonCookies)</span><br><span class="line">                       <span class="built_in">print</span>(<span class="string">&#x27;cookies保存成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">               time.sleep(<span class="variable language_">self</span>.loadTime)  <span class="comment"># 给浏览器加载数据的时间</span></span><br><span class="line">               <span class="comment"># self.browser.implicitly_wait(self.loadTime)</span></span><br><span class="line">               <span class="comment"># 获取渲染后的数据</span></span><br><span class="line">               page_text = <span class="variable language_">self</span>.browser.page_source</span><br><span class="line">               <span class="comment"># 篡改响应对象</span></span><br><span class="line">       <span class="keyword">return</span> HtmlResponse(url=<span class="variable language_">self</span>.browser.current_url, body=page_text, encoding=<span class="string">&#x27;utf-8&#x27;</span>, request=request)</span><br></pre></td></tr></table></figure><h2 id="多线程问题"><a href="#多线程问题" class="headerlink" title="多线程问题"></a>多线程问题</h2><p>默认情况下，scrapy开启多个线程来进行爬取，这就导致上一个问题的解决方案会出现问题——一个线程正在爬取详情页的时候，另一个线程开始切换回目录页进行翻页了。</p><p>解决方法是，在<code>settings.py</code>里面将同时允许的线程数设置为1，也就是单线程运行，反正我对速度没有要求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class="line">CONCURRENT_REQUESTS = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="下一页按钮被遮挡"><a href="#下一页按钮被遮挡" class="headerlink" title="下一页按钮被遮挡"></a>下一页按钮被遮挡</h2><p>翻页时，会出现“下一页按钮”被遮挡而无法点击的情况。</p><p>也就是出现<code>Message: element not interactable</code>元素不可交互的问题，解决方法参考：<a href="https://www.cnblogs.com/yp19970/p/12888881.html">Other element would receive the click:解决之一</a></p><p>将模拟点击的代码改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nextPageBtn = <span class="variable language_">self</span>.browser.find_element_by_css_selector(request.meta[<span class="string">&#x27;next_page_css&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># nextPageBtn.click() # 原本的点击代码</span></span><br><span class="line"><span class="variable language_">self</span>.browser.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>, nextPageBtn) <span class="comment"># 新的模拟点击代码</span></span><br></pre></td></tr></table></figure><p>这里<code>arguments[0]</code>代指后面跟着的第一个参数，也就是<code>nextPageBtn</code>。</p><p>这个方法虽然解决了翻页，但是新的问题又出现了。</p><p><strong>翻页后，数据并没有刷新，虽然显示跳转到了下一页，但是数据仍然是第一页的数据，延长等待时间仍然不行，一看开发者工具，好嘛，request又变红了。</strong></p><p>这个问题我现在也没有解决。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode中python自定义包的模块如何导入其子包模块</title>
      <link href="/posts/python-the-module-of-parentpkg-import-the-module-of-childpkg/"/>
      <url>/posts/python-the-module-of-parentpkg-import-the-module-of-childpkg/</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>如图所示，对于python，有一个自定义包<code>parent</code>，它里面还有一个子包<code>child</code>，当你在<code>parent.module1</code>中<code>import child.module2</code>时，vscode会给你报错，说找不到这个包。</p><p>当你单独运行<code>module1.py</code>的时候，可以正常运行，但是当你在<code>parent</code>包外层的<code>main.py</code>中<code>import parent.module1</code>时，就会报错。</p><span id="more"></span><p><img src="https://i.loli.net/2020/10/11/qRDC5Xm1jI6cSLP.png" alt="vscode中python自定义包的模块如何导入其子包模块"></p><h1 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h1><p>目录结构为：</p><ul><li><p><code>main.py</code></p></li><li><p><code>parent</code></p><ul><li><code>__init__.py</code></li><li><code>module1.py</code></li><li><code>child</code><ul><li><code>__init__.py</code></li><li><code>module2.py</code></li></ul></li></ul></li></ul><p>其中：</p><p><code>main.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">import</span> parent.module1</span><br></pre></td></tr></table></figure><p><code>parent.__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parent.__init__.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;导入了parent包&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>child.__init__.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># child.__init__.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;导入了child包&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>module1.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># module1.py</span></span><br><span class="line"><span class="keyword">import</span> child.module2</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;导入了module1模块&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>module2.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># module2.py</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;导入了module2模块&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h1><p>当你单独运行<code>module1.py</code>的时候，可以正常运行，并输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">导入了child包</span><br><span class="line">导入了module2模块</span><br><span class="line">导入了module1模块</span><br></pre></td></tr></table></figure><p>这是因为vscode此时将<code>module1.py</code>作为相对路径的起点，从而找到了<code>child.module2</code>的位置。</p><p>但是当你在<code>parent</code>包外层的<code>main.py</code>中<code>import parent.module1</code>时，就会报错。</p><p>这是因为vscode此时将<code>main.py</code>作为相对路径的起点，对于<code>main.py</code>来说，它所在目录下是没有<code>child</code>包的，只有<code>parent</code>包，所以找不到，报错。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在<code>parent.__init__.py</code>中添加三行代码，添加完之后如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parent.__init__.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">sys.path.append(os.path.dirname(os.path.realpath(__file__)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;导入了parent包&#x27;</span>)</span><br></pre></td></tr></table></figure><p>python找包会在当前路径和<code>sys.path</code>中去查找，所以可以在导入<code>parent</code>包的时候，将它的路径加入<code>sys.path</code>当中，这样就可以找到<code>parent</code>包的子包了。</p><p>同时，因为是在<code>__init__.py</code>中加的，包内文件就不必每次都将粘贴一次这部分代码。</p><p>其中，<code>os.path.realpath(__file__)</code>获取本文件即<code>parent.__init__.py</code>的真实路径，<code>os.path.dirname()</code>将完整路径中的目录名提取出来，去掉其中的文件名。</p><p>添加后<code>main.py</code>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">导入了parent包</span><br><span class="line">导入了child包</span><br><span class="line">导入了module2模块</span><br><span class="line">导入了module1模块</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记第三次博客切换主题以及主题优化</title>
      <link href="/posts/hexo_blog_switch_theme_3/"/>
      <url>/posts/hexo_blog_switch_theme_3/</url>
      
        <content type="html"><![CDATA[<p>2019 年 2 月 28 日，<a href="https://yxchangingself.xyz/posts/hexo_blog_switch_theme_1/">第一次换主题</a>，从<a href="https://github.com/ShanaMaid/hexo-theme-shana">shana</a>（夏娜）换成了<a href="https://github.com/iissnan/hexo-theme-next">NexT</a>，当时换主题的原因是：虽然二次元主题蛮好看的我挺喜欢，但是由于小众，功能缺乏，而 NexT 作为一个使用人数非常多的主题，功能非常齐全，所以决定换主题。</p><p>2020 年 4 月 5 日，<a href="https://yxchangingself.xyz/posts/hexo_blog_switch_theme_2/">第二次换主题</a>，从NexT换成了<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>，原因是这个主题可以放很多图，并且我需要的功能也都有。</p><p>2020年10月11日，第三次换主题，也就是这次，换成了<a href="https://github.com/ppoffice/hexo-theme-icarus">Icarus</a>（伊卡洛斯）。原因是，Matery的归档页面不能满足我回看历史文章的需求，以及我觉得整个页面太花哨了，封面图片也不是很好弄，所以还是换成图片量中等的Icarus。</p><span id="more"></span><h1 id="换主题的原因"><a href="#换主题的原因" class="headerlink" title="换主题的原因"></a>换主题的原因</h1><p>Matery的归档页面长这样：</p><p><img src="https://i.loli.net/2020/10/11/hP3oHkuXIeW2N1y.png" alt="Matery归档页面"></p><p>虽然有个类似于github的heatmap一样的日历，但是这个日历并不能点击就跳转到那一天，而且由于所有的文章用卡片展示，导致无法概览，想看某个时间写的文章，得往下滑很久甚至翻页，很不方便。我难以统计某个月写了哪些文章。</p><p>因此，Icarus的归档页一下子就吸引了我：</p><p><img src="https://i.loli.net/2020/10/11/dWXwECpg9SGuzZj.png" alt="Icarus归档页面"></p><p>最终决定切换主题。</p><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><p>之前切换主题，先将主题clone到本地theme文件夹，然后再根目录的<code>_config.yml</code>修改主题配置即可，不过这次我遇到了一些问题。</p><p>clone命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus</span><br></pre></td></tr></table></figure><p>在命令行clone比较慢，于是我使用github desktop进行clone，将目录指定为theme&#x2F;icarus，也不知道是什么原因，这样就快多了。</p><p>可是在运行<code>hexo s</code>的时候，却弹出了如下错误：</p><p><img src="https://i.loli.net/2020/10/11/iEmls7ukILOFM2t.png" alt="hexo版本需要更新"></p><p>查看<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/uncategorized/%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97/">官网文档-升级指南</a>，找到了相关的描述。原来是这个主题依赖的hexo版本已经到5了，而我还是4，没有升级。</p><p>解决方法是，运行错误提示中给出的命令安装新版本的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install --save bulma-stylus@0.8.0 hexo@^5.0.2 hexo-log@^2.0.0 hexo-renderer-inferno@^0.1.3 hexo-renderer-stylus@^2.0.0 hexo-util@^2.2.0 hexo-component-inferno@^0.10.1 inferno@^7.3.3 inferno-create-element@^7.3.3</span><br></pre></td></tr></table></figure><p>安装好之后运行<code>hexo clean</code>，再使用<code>hexo s</code>就可以看到本地的主题已经切换了。</p><h1 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h1><p>和之前的主题不同，Icarus的配置文件不是在<code>theme/Icarus</code>下面，而是在博客根目录下的<code>_config.icarus.yml</code>（在运行<code>hexo clean</code>的时候会自动帮你生成这个文件）。</p><p>我在这里只提一些我配置时遇到问题的选项，其余的配置可以查看<a href="https://blog.zhangruipeng.me/hexo-theme-icarus/Configuration/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/">官方的主题配置文档</a></p><h2 id="permalink"><a href="#permalink" class="headerlink" title="permalink"></a>permalink</h2><p>切换了主题之后，我点击文章竟然不是跳转到文章详情，而是下载了一个文件名为文章标题的无后缀名文件，用vscode打开一看，里面是该文章的html代码，这就很奇怪了。</p><p>当我将文章的permalink从Front-matter（Front-matter 是hexo文章文件最上方以 <code>---</code> 分隔的区域，用于进行文章的一些配置）中去掉的时候，就可以跳转到详情页了，与此同时，该文章的链接又变成了中文的文章名字。</p><p>最后找到的解决方案是，安装插件<code>hexo-abbrlink</code>，自动生成永久链接。我一开始还担心这样弄，我以前设置的永久链接不是全都要变？不过后来找到一篇博客说可以在Front-Matter中设置<code>abbrlink</code>字段来手动指定，没有手动指定时才会自动生成。这样一来，我只需要使用vscode的全局替换，将所有的<code>permalink</code>改成<code>abbrlink</code>就可以了。</p><p>具体操作步骤可以参考这一篇文章：<a href="https://www.jianshu.com/p/c7de2ae59975">Hexo-abbrlink生成唯一永久文章链接</a></p><p>第一步，安装此插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>第二步，配置博客根目录下的<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>  <span class="comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">    <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">    <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>第三步，使用vscode全局替换，将<code>permalink</code>替换为<code>abbrlink</code>（注意dismiss不需要替换的地方），这样之前的链接又可以用了，此问题解决。</p><p>也不是完全没有问题，在后面检查时发现有一篇文章被整个删去了，md文件中只剩下abbrlink: 2，幸好我每次更改后都用git commit备份一下。</p><p><img src="https://i.loli.net/2020/10/11/HyYRi4XAjhqnbw6.png" alt="出现意外导致文章被删除"></p><h2 id="toc"><a href="#toc" class="headerlink" title="toc"></a>toc</h2><p>初始目录是在左侧的，并且如果固定了左栏，那么就看不到目录的全貌。所以最后我将其调整为在文章页面只显示toc挂件，而不显示profile挂件。</p><p>设置方法是，在博客根目录下新建一个<code>_config.post.yml</code>文件，这个文件里面的配置针对文章详情页，并且会覆盖全局配置，所以我在这个文件里面这样配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">widgets:</span></span><br><span class="line">  <span class="comment"># Table of contents widget configurations</span></span><br><span class="line">  <span class="bullet">-</span> <span class="comment"># Where should the widget be placed, left sidebar or right sidebar</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">toc</span></span><br><span class="line">    <span class="comment"># Whether to show the index of each heading</span></span><br><span class="line">    <span class="attr">index:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="attr">left:</span></span><br><span class="line">    <span class="attr">sticky:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">right:</span></span><br><span class="line">    <span class="attr">sticky:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也就是说，其他页面是三栏，并且左栏悬浮，不随着向下滑动而移动位置，显示各种挂件；而在文章详情页面，在右侧只显示悬浮目录，而不显示其他挂件，这样阅读体验会好很多。</p><p>除了设置toc挂件之外，还得在每篇文章的Front-Matter中设置<code>toc: true</code>，才能打开悬浮目录，同样使用全局替换来完成。</p><p>用的是vscode的正则表达式替换。查找的内容是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---\ntitle(.*)</span><br></pre></td></tr></table></figure><p>替换的内容是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---\ntitle$1\ntoc: true</span><br></pre></td></tr></table></figure><p>每篇文章的Front-Matter中，title字段都是在第一个，所以查找title，并且在保留title的情况下，在后面添加<code>toc: true</code>。</p><p><img src="https://i.loli.net/2020/10/11/9uRpA5JBLi8gSrN.png" alt="全局替换添加toc字段"></p><h2 id="live2D看板娘"><a href="#live2D看板娘" class="headerlink" title="live2D看板娘"></a>live2D看板娘</h2><p>接着就是恢复萌萌的看板娘了。</p><p>找到了一篇完美的教程，刚好就是讲Icarus如何添加live2D的：<a href="https://www.jianshu.com/p/e2ac348a7d9d">Hexo+Icarus3+live2d给博客添加看板娘</a></p><p>照着这篇教程来做，很轻松就配置好了，感谢博主。</p><p>看板娘正好可以放在右下角。对于文章详情页面，悬浮目录在右侧折叠起来，右下方正好有一大块空地，不会挡住文章内容；对于其他页面，左栏是固定悬浮的，而右栏是正常滑动的，所以不会影响读者查看右侧的标签和分类、近期文章等挂件。</p><p>这个live2D插件默认是在左边的，不过在前一个主题中，我就已经解决了这个问题。转移到这边，只需要调整一下看板娘的z-index，让她在最上方就行了。</p><p>修改<code>live2d-widget</code>文件夹下的<code>waifu.css</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#waifu</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">1000px</span>;</span><br><span class="line">  <span class="comment">/*left: 0;放到右边*/</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">3px</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease-in-out, bottom <span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="comment">/*z-index: 1;防止遮挡*/</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释内是原来的内容。</p><p>除此之外还有一个问题，那就是初始看板娘并不是我喜欢的那个模型了，所以想要将其改回来。</p><p>我在浏览该live2D插件的github仓库时，找到了这样一个issue：<a href="https://github.com/stevenjoezhang/live2d-widget/issues/6">如何把模型替换成自定义模型 #6</a>。</p><blockquote><p>greenhaha: waifu-tip.js 中 初始化模型中modelID modeltexture ID 如何指定成 自定义的模型</p><p>stevenjoezhang（作者大大）:需要自己搭建后端API，参考 <a href="https://github.com/fghrsh/live2d_api">https://github.com/fghrsh/live2d_api</a></p></blockquote><p>我从中得到了信息，打开<code>waifu-tip.js</code>，然后搜索<code>modelID </code>，从而找到了这样一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modelId = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;modelId&quot;</span>),</span><br><span class="line">      modelTexturesId = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;modelTexturesId&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (modelId === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 首次访问加载 指定模型 的 指定材质</span></span><br><span class="line">      modelId = <span class="number">1</span>; <span class="comment">// 模型 ID</span></span><br><span class="line">      modelTexturesId = <span class="number">53</span>; <span class="comment">// 材质 ID</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loadModel</span>(modelId, modelTexturesId);</span><br></pre></td></tr></table></figure><p>可以看到模型的id是储存在<code>localStorage</code>里面的，所以我将看板娘切换成我想要的那个，F12打开开发者工具，打开Application选项卡，查看<code>localStorage</code>里面的modelId，发现是0。接着将上面代码中的初始模型id改为0就可以了。</p><p><img src="https://i.loli.net/2020/10/11/TCsKVoS9N34Mrej.png" alt="修改初始模型"></p><h1 id="文章分类优化"><a href="#文章分类优化" class="headerlink" title="文章分类优化"></a>文章分类优化</h1><p>除了更新博客主题之外，我还重新调整了一下文章分类。</p><h2 id="原本的文章分类"><a href="#原本的文章分类" class="headerlink" title="原本的文章分类"></a>原本的文章分类</h2><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>过程复盘</td><td>记录学习实践一个事物的过程，侧重记录与反思</td></tr><tr><td>知识整理</td><td>针对某一部分知识进行集中整理方便查阅，例如 API、语法、命令等</td></tr><tr><td>解决方案</td><td>针对遇到的某个具体问题寻找解决方案</td></tr><tr><td>算法理解</td><td>针对某个具体算法的理解掌握</td></tr><tr><td>工具使用</td><td>对于框架、软件、网站等工具的使用方法与心得经验，或是简单推荐</td></tr><tr><td>目录索引</td><td>定期将本博客的文章索引起来，或者整理一些有用的参考链接</td></tr><tr><td>日志随笔</td><td>随便写点啥心情，或者年终总结之类的</td></tr></tbody></table><p><strong>过程复盘</strong>和<strong>知识整理</strong>，前者我会尽量将我探索的过程记录下来，夹杂着一些知识点，而后者会将知识点进行简单罗列便于查询。</p><p><strong>解决方案</strong>是针对某个具体的问题编写解决步骤，而<strong>工具使用</strong>则是将使用这个工具的一些常见的问题集中解决。</p><p><strong>日志随笔</strong>里面可能会对近期写的一些博文进行索引，但是是按照时间顺序线性串联；而<strong>目录索引</strong>则是专门索引一个系列的文章。</p><p><strong>算法理解</strong>是针对某个具体的算法进行解析，从而达到学习的目的。</p><h2 id="新的文章分类"><a href="#新的文章分类" class="headerlink" title="新的文章分类"></a>新的文章分类</h2><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>复盘总结</td><td>对过程进行回顾，总结经验，优化流程。</td></tr><tr><td>学习笔记</td><td>知识点总结等都放在这里。</td></tr><tr><td>解决方案</td><td>对某个特定问题的解决办法。</td></tr><tr><td>日志随笔</td><td>随笔，博客更新日志等。</td></tr><tr><td>目录索引</td><td>将本博客的文章定期进行汇总分类。</td></tr></tbody></table><p>分类之间的一些区别：</p><p><strong>复盘总结：</strong>以叙述过程与思路为主，一般含有步骤总结，思路记录（比如：我是如何想到这一步的？），一般不含对知识点的讲解。该分类下是比较抽象的文章</p><p><strong>学习笔记：</strong>以介绍结果与设计为主，长的像教程。可能含有大量代码，一般含有新知识点的总结说明，我在b站上面录了视频的项目对应的博客文章一般也属于这个。该分类下是比较具体的文章。</p><p><strong>解决方案：</strong>以介绍问题及其解决方法为主，比起学习笔记，更适合作为教程。它将复盘总结中的一些经验提取出来，又不像学习笔记一样冗长复杂。</p><p>这个分类也许并不够MECE（不重不漏），不过对我目前的文章来说是够用了。</p><p>调整分类前，“过程复盘”这个分类占了五分之三的内容，而其他分类比较少，比较不平衡，而且分类的标准太模糊，以至于我经常不知道该放到哪里去。</p><p>调整之后，“知识整理”、“算法理解”归入“学习笔记”，“工具使用”归入“解决方案”，减少了分类数量，并且明确了分类标准。按照新标准对文章调整分类，“学习笔记”和“复盘总结”各占二十多篇，不再是“指南针面板”了</p><h1 id="最终效果图"><a href="#最终效果图" class="headerlink" title="最终效果图"></a>最终效果图</h1><p><img src="https://i.loli.net/2020/10/11/kR1tqL7TOxwBodb.png" alt="首页效果图"></p><p><img src="https://i.loli.net/2020/10/11/ug52onJ16RZ7FrW.png" alt="文章页效果图"></p><p><img src="https://i.loli.net/2020/10/11/dWXwECpg9SGuzZj.png" alt="归档页面"></p>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【项目复盘】网络软件开发综合实践</title>
      <link href="/posts/project-review-score-system/"/>
      <url>/posts/project-review-score-system/</url>
      
        <content type="html"><![CDATA[<p>尝试使用规范化的复盘方法来进行复盘总结，本文使用的方法来自：</p><p><a href="https://zhuanlan.zhihu.com/p/225812258">如何做好一次复盘？这是我的经验-少数派</a></p><span id="more"></span><h1 id="一、回顾经历"><a href="#一、回顾经历" class="headerlink" title="一、回顾经历"></a>一、回顾经历</h1><h2 id="1、背景（Situation）"><a href="#1、背景（Situation）" class="headerlink" title="1、背景（Situation）"></a>1、背景（Situation）</h2><p>这是大四第一学期的四大综合实践的第一个，主题是网络软件开发，需要写的项目是“基于 web 的高校教学考试成绩管理系统”。</p><p>与此同时，我需要准备考研，所以虽然经过暑假的毕业实习学习了 SSM 后，我挺想认真来做这些题目，从而将这些学到的技术巩固与提升，但是我并没有太多的时间与精力可以投入其中。再加上并不是非常愉快的以往的课设与毕业实习经历，我决定“跳槽”到另一个小组内。</p><p>老师最终同意了重新分组，我和好友 LeeSin 加入了 S 的小组。S 是一位大佬，在每次的课设检查答辩时都有优异的表现，能够做出各种我们意想不到的优秀功能。</p><p>我一开始想的是，他让我做什么，那我就去做，大佬的任务分配能力应该比我要好，我只需要完成分配给我的任务，就可以去安心复习了。</p><p>不过到了组内后，发现组内原本的六个人，只有 S 和 L 是有产出能力的大佬，其他四人基本上是被带着走的，两个男生暑假就开始实习直到现在还没回来，两个准备考研而并不会花太多时间在这里的女生（这次项目结束已经保研了），而且在之前的项目中做前端的 L 也找到了实习。</p><p>也就是说，如果 L 不是因为疫情而无法出校，而且有我们两个人的加入，那么整个组就只剩下 S 能够产出，太惨了。</p><h2 id="2、任务目标（Task）"><a href="#2、任务目标（Task）" class="headerlink" title="2、任务目标（Task）"></a>2、任务目标（Task）</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>开发基于 web 的高校教学考试成绩管理系统。</p><p>该系统的用户有三类，分别是教师、学生、管理员。</p><p>A. 教师使用该系统进行正考、补考、缓考成绩的录入和查看、录入成绩分析表、申请撤销等活动；</p><p>B. 学生利用该系统查看成绩；</p><p>C. 管理员使用该系统查看并审批教师提交的成绩撤销申请。</p><p>更加详细的需求见下图：</p><p><img src="https://i.loli.net/2020/09/27/G3X1HvEte9y7NOY.png"></p><h3 id="实习阶段"><a href="#实习阶段" class="headerlink" title="实习阶段"></a>实习阶段</h3><p>实习的过程主要分为以下四个阶段：</p><ul><li><p>第一阶段：8 月 31 日~9 月 6 日，进行需求分析，撰写需求分析报告，前端成员学习 React 框架，前端后端搭建本地开发环境以及新建 git 远程仓库。</p></li><li><p>第二阶段：9 月 7 日~9 月 13 日，进行总体设计，划分模块，撰写概要设计文档。</p></li><li><p>第三阶段：9 月 14 日~9 月 20 日，进行编码，对设计的各个模块予以实现。</p></li><li><p>第四阶段：9 月 21 日~9 月 25 日，项目调试以及项目答辩，各小组对项目的完成情况进行汇报，展示与答辩。</p></li></ul><p>每天都需要编写工作日志，记录自己做了什么事情，遇到了什么问题，以及第二天的工作计划。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol><li><p>编写出符合需求的软件</p></li><li><p>进行良好的团队协作</p></li><li><p>进行标准的软件开发流程</p></li><li><p>通过答辩</p></li></ol><h2 id="3、行动（Action）"><a href="#3、行动（Action）" class="headerlink" title="3、行动（Action）"></a>3、行动（Action）</h2><p>最后的技术选型确定为 React 前端框架+SpringBoot 后端框架，分工是我、LeeSin 和 L 做前端，S 一个人做后端供我们三个人。S 说我们是前后端分离开发，他提供后端接口，而我们前端从接口获取数据与提交数据进行操作。</p><p>L 是本组的前端担当，我们来之前就是 S 后端加上 L 前端的组合。</p><p>虽然我提出，数据库设计等后端的活我都能干，但还是给我分配了前端。估计 S 是想 L 带我们两个新人做一做前端，看看我们的能力，同时也不想自己设计后端被我们影响。</p><p>理解，换成我也是会这样做的。在不清楚他人的能力之前，贸然合作并不是个好主意，有可能做出很糟糕的设计。而且做前端应该比后端要轻松一些，我有更多的时间来复习考研。</p><h3 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h3><p>由于没有接触过 Vue 以及 React 之类的前端框架，之前只用过 layui 这样给后端开发者准备的 UI 框架，我的前端知识并不是很充足，LeeSin 就更加如此了，他甚至连 javascript 的一些常用语法都不是太清楚。</p><p>在项目开始的第一天，也就是 8 月 31 日，我就学习了九个小时的 React，并没有看视频，而是跟着官网的示例来学习。自己去学习和理解的效率确实比较低。</p><p>当时我比较关心如何将 React 实现的页面与 Springboot 整合起来，毕竟之前做的项目都是将 layui 直接引入到项目文件夹中，一边写后端代码一边调试前端代码。当我尝试了很久之后，询问 S 应该怎么弄时，他说我们并不需要整合，前后端分离，约定好接口即可。</p><p>之前的项目中，使用 layui 的表格时学习到了数据接口的概念，所以理解起来并不是特别困难，很快就接受了这个事情。</p><p>同时，将 React 和 layui 对比学习之后，我对二者有了不一样的理解，原来两者并不是同一种东西，一个是 JS 框架，主要提供一些“动作”方面的便利。另一个则是 UI 框架，主要提供界面组件，注重外观，不过也会提供一些工具，例如数据表格等。</p><p>也就是说，用了 React 作为基础框架之后，还需要一个 UI 框架来设计界面。我做了错误的一件事情，那就是随便搜索了一下就说“要不使用 Material-UI 吧”，没有认真去筛选该使用哪个框架。</p><p>接下来的几天，我建立了一个码云 git 仓库用于存放前端页面项目，编写了登录页面样例（之所以说是样例是因为他们又重新写了登录组件）、应用栏、导航栏、React 路由、课程信息展示表格、班级信息展示表格、成绩系数编辑组件等组件，一边写一边继续学习。除了学习到 React 和 js 的知识外，也了解了内网穿透、前后端分离是怎么回事，安装了一些好用的工具：postman、React 调试插件等。</p><p>让我有些忧虑的是，S 并没有带领大家做详细的需求分析，将大家召集起来也并没有讨论此事。需求分析可是非常重要的事情，没有进行需求分析，我并不知道我要做成什么样子，而且看样子 S 也并不打算让我们做一个原型出来确定需求。</p><p>在第一周周五下午的时候，需要检查需求分析文档，但是并没有什么可以交的。我在周五上午组内开会的时候，拿着 ipad 来绘制，勉强拉着他们讨论出了一个简单的手绘的原型，如下图：</p><p><img src="https://i.loli.net/2020/09/27/FgoiG4yJnW5MCTu.jpg"><br><img src="https://i.loli.net/2020/09/27/vupU23XRcrWnxOZ.jpg"></p><p>本来以为 L 会给我和 LeeSin 分配任务，但是即使我提出了给我们分配任务的事情，他也并不是很上心的样子截图了我绘制的原型图说随口说让我们做里面的组件，我心里吐槽这不是什么都没说吗，但还是去写了。</p><p>关于第一周的进度：</p><ul><li><p>S 一个人很早就搞定了数据库设计，写好了后端接口，并且用 Swagger 生成了接口文档给我们三人看，使用内网穿透让我们能够在宿舍就访问到他的接口。这操作当时就让我觉得非常厉害，不愧是大佬。</p></li><li><p>L 和 LeeSin 第一周似乎没有做什么事情。说是在学习 React，这我能理解。</p></li><li><p>我新建了 git 仓库（L 和 S 他们之前好像没有用过 git），对新建的前端项目进行管理，用于与 L 和 LeeSin 两人进行协作，后端在我建仓库之前都完成的差不多了那就没有必要新建一个了。</p></li><li><p>我写了几个必然会使用到的组件来作为 React 的练习。</p></li></ul><p>这一周结束的时候，我对这个小组的未来有了一些忧虑，但是并没有什么太大的危机感。而且压力也比以前当组长的时候小了很多。</p><p>毕竟有大佬兜底，无论如何，项目最终都是可以做出来的。</p><p>本周耗费在这上面的时间：45.25h（26.9%）。约每天 6.5 小时，注意这还是周日完全没做事的情况下的平均，如果不算周日，就是每天 7 小时。第一周学习 React 用的时间比较多。</p><h3 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h3><p>因为 MaterialUI 的组件太难写了，官网的文档写得不太好懂，而且资料太少，所以决定前端换一个 UI 框架。可惜的是前一周已经用 MaterialUI 写了那么多组件，好在转换起来也不是完全推翻之前的，学到的知识也都还用得上。</p><p>说起来这个其实是我的错，是我提出使用这个框架的。所以我也没必要抱怨太多，就当练习 React 了。</p><p>第二周进度：</p><ul><li><p>我将之前的组件利用 antd 来改写，周二完成改写</p></li><li><p>学习 React 路由相关知识</p></li><li><p>编写成绩分析表格组件</p></li><li><p>用一个下午帮 LeeSin 理解官网上可编辑表格的代码，让他去完成成绩录入表格，不过他对本项目并不是非常上心，鸽了很久，我把其他组件写完了他还没有写完</p></li><li><p>L 新建了一个新的 git 仓库，并设置好了路由表文件。</p></li></ul><p>至于第二周结束后要检查的概要设计文档啥的，S 又是一个人搞定了然后交了。</p><p>本周耗费在这上面的时间减半：22.75h（13.5%）。约每天 3.25 小时，因为我做得太多，另外两人似乎就打算摸鱼了。</p><h3 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h3><p>我的进度：</p><ul><li><p>整合各个组件</p></li><li><p>编写学生端成绩表组件</p></li><li><p>编写下载成绩单按钮组件</p></li><li><p>编写学生端首页以及路由跳转</p></li></ul><p>L 的进度：</p><ul><li><p>完成登录功能</p></li><li><p>完成整体框架，可以将我们写的组件装进去</p></li></ul><p>Leesin 的进度：</p><p>没啥进度，仍然在写他的第一个组件：成绩录入组件。他主要是在复习考研。对此事我有些意见，我不用考研吗？不帮我分担工作量的话我就没时间复习了。</p><p>本周耗费在这上面的时间：16h（9.5%）：约每天 2.29 小时。</p><h3 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h3><p>组件基本上都写好了，只差集成和修复 bug 了。那一周我们都在学校的咖啡吧内进行编码，轮流去吃饭，提前体验 996。</p><p>本周耗费在这上面的时间：44.5h。</p><h2 id="4、结果（Result）"><a href="#4、结果（Result）" class="headerlink" title="4、结果（Result）"></a>4、结果（Result）</h2><p>S 和 L 将项目打包部署到服务器上，整体来看挺不错的。</p><p>前一天晚上时并没有什么问题，不过答辩时出现了很多问题，导致整个演示非常失败。</p><p>同时我介绍自己的工作时，因为没有提前打草稿，并且因为演示出现了问题而有些慌乱，所以虽然我做了很多的工作，但是并没有表达出来。</p><h1 id="二、评估结果"><a href="#二、评估结果" class="headerlink" title="二、评估结果"></a>二、评估结果</h1><h2 id="将结果与目标进行对比："><a href="#将结果与目标进行对比：" class="headerlink" title="将结果与目标进行对比："></a>将结果与目标进行对比：</h2><h3 id="1-编写出符合需求的软件："><a href="#1-编写出符合需求的软件：" class="headerlink" title="1. 编写出符合需求的软件："></a>1. 编写出符合需求的软件：</h3><p>因为需求分析并不完善，差不多就是乱来，所以直到答辩的时候，仍然有没有实现的需求，甚至老师在答辩时问出来，才想起来还有这个功能。</p><h3 id="2-进行良好的团队协作："><a href="#2-进行良好的团队协作：" class="headerlink" title="2. 进行良好的团队协作："></a>2. 进行良好的团队协作：</h3><p>团队协作一团糟，各人心不在此，不愿意为项目出力，前端另外两人的摸鱼，打击了认真工作的我的积极性，让我认为没有必要投入这么多时间在这上面。</p><p>组长 S 和副组长 L 完全不管任务分配，我写组件写功能完全是自己主动想还有哪些部分没做，然后去写。</p><p>哪怕是我给他们两个分配了任务，他们也不干事情，特别批评 LeeSin，如果不是因为最后一周 S 要求 996，估计他整个项目只写了那一个组件。</p><p>八个人的小组，实际上干活的只有四个人，到最后一周的周四，也就是答辩前一天，组长 S 叫他们过来“对口供”，让他们知道自己“做了”什么工作。其中一人甚至在答辩描述自己工作的时候抢了 LeeSin 的工作。</p><p>这能叫做“团队”？</p><h3 id="3-进行标准的软件开发流程"><a href="#3-进行标准的软件开发流程" class="headerlink" title="3. 进行标准的软件开发流程"></a>3. 进行标准的软件开发流程</h3><p>我们真的是软件工程专业的学生吗？</p><p>需求分析阶段，要不是我主动绘制了一下原型，主动和他们统一了需求，可能所有人连需求都不清楚。</p><p>概要设计和详细设计，到了交文档的时候，组长这才想起来要叫人写这个。我看他一直没说啥，还以为他已经写好了。这个文档似乎也没发小组群里，咱到最后也不知道咱们的设计是怎样的。</p><p>我干脆也不提了，反正那个主要是后端的设计，设计得如何也不会影响前端，我调接口就行。不当组长就是好，我能体会到之前我的组员的感受了。</p><p>负责后端的 S 不和前端商量接口文档，他写完了直接把接口文档给我们。</p><p>接口名是中英文混杂的，最离谱的一个是这样的： <code>/user/findxuyaolurubukaochengjideren</code>，功能是“查找需要录入补考成绩的人”，强迫症看了想打人。</p><p>而且需要前端传的参数的名字都是 <code>tool1</code>， <code>tool2</code>之类的没有具体含义的名称，不同的接口这几个参数的顺序还都不一样，例如接口 1 的 tool1 是课程号，tool2 是教师职工号，功能相似的接口 2 就有可能是 tool1 为教师职工号，tool2 为课程号。</p><p>返回值的标识符命名也非常诡异，比如 <code>status</code>， <code>statuss</code>和 <code>statusss</code>这三个莫名其妙的名字，让人不清楚到底代表什么含义。</p><p>本应该返回相同结构的数据的接口返回的结构截然不同，甚至一个是对象数组，另一个是含有数组属性的对象，好在和他说了之后，他改回来了，否则光是转换数据都很麻烦。</p><p>编码阶段，既然没有人来分配任务，那么谁想到哪个功能还没做就主动去写一下就好了。我一开始知道 L 并不打算当前端的领袖之后，就是这么想的。</p><p>但是 L 和 LeeSin 的表现着实让我有些生气，完成了任务之后不主动想想还有什么自己可以做的任务，而是开始刷 LOL 视频，或者其他的事情。这可是都最后一周了，大家都被 S 叫来聚在一起写代码了，还在摸鱼？</p><p>本来好像没有那么气的，现在回忆起来越想越气。</p><p>测试阶段还好，虽然不是遵循标准的测试方法，但好歹是测试出了大部分错误，并且修复。</p><p>周五答辩，直到周四上午，组长才提出除了百分制的成绩之外，咱们还要加等级制的成绩。对了，确实需求里面有明确提到这一点，不过我想起来好像一开始提出这个需求的时候，S 说的是等级制之后再考虑。</p><h3 id="4-通过答辩"><a href="#4-通过答辩" class="headerlink" title="4. 通过答辩"></a>4. 通过答辩</h3><p>如上文所述，答辩并不成功，出现了很多失误，我自己的个人工作汇报也做得不好，没有把全部的工作都说出来，估计老师在下边听着还觉得我是来划水了，但实际上我做了很多工作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这次项目可以说是失败了，虽然做出了一个能用的项目，甚至还实现了可选的需求，但是并没有满足客户的全部基础需求，并且可选的附加需求也因为演示失误而没有展现出来。</p><p>各种区别于其他组的优势并没有在演示时表现出来，例如咱们组将项目部署到了阿里云服务器上面，例如咱们用的是新框架 React 而不是之前学的 Layui，例如咱们使用了 Git 进行项目管理，例如咱们用了前后端分离的方式进行开发，例如咱们组实现了成绩通知邮件的发送。</p><p>成员的积极性并没有充分调动起来，效率极其低下，互相甩锅，沟通不善。</p><p>项目管理混乱，几乎没有项目管理。</p><p>前端和后端的设计非常糟糕，想到哪里写到哪里，时不时还得重构一下才能写得下去。</p><h1 id="三、分析原因"><a href="#三、分析原因" class="headerlink" title="三、分析原因"></a>三、分析原因</h1><p>这里分析的主客观原因以我为主体，而不是整个小组。</p><h2 id="主观原因"><a href="#主观原因" class="headerlink" title="主观原因"></a>主观原因</h2><ul><li><p>我参与本次项目的积极性并不强，不当组长而是加入别人的小组本身就是有减少工作量的打算。</p></li><li><p>没有重视需求分析。（不过还是比组里其他人要重视一些的）</p></li><li><p>秉持着加入别人的小组就要遵守新小组的规矩的原则，担心与 S、L 起冲突，而很少主动提出自己的看法。</p></li></ul><h2 id="客观原因"><a href="#客观原因" class="headerlink" title="客观原因"></a>客观原因</h2><ul><li><p>客观环境如此，现在大四了，考研的准备考研，找工作的找工作，基本上没有人愿意将心力耗费在这种综合实践上。</p></li><li><p>两位大佬 S 和 L 已经习惯了一个人搞定后端，一个人搞定前端，可能不太适应团队协作。新人的加入会打乱他们的节奏。</p></li></ul><h1 id="四、找到规律"><a href="#四、找到规律" class="headerlink" title="四、找到规律"></a>四、找到规律</h1><ol><li><p>一个软件项目最重要的就是<strong>需求分析</strong></p></li><li><p>表达得不好并不是因为表达能力不行，而是因为没有<strong>提前做准备</strong>，如果本次答辩我提前准备好腹稿，那么即使演示出现了问题，我也不会那么紧张</p></li><li><p>在开始编码之前，一定要明确截止到什么时间要完成哪一个功能或者修复哪一个 bug。大脑记不住太多东西，最好<strong>将目标记录下来</strong>。在本项目前期，我总是想到什么功能就写什么；后期我开始在云笔记软件内添加待办项目，做一个划掉一个，与该项目有关的参考链接（文档、博客等）和相关代码都放在对应的待办事项后，这样写起每天的工作日志也比较方便，效率也提升了。</p></li><li><p>积极与队友进行<strong>沟通</strong>。沟通可以发现队友与你的理解不一致的地方。</p></li></ol><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>以上便是本次综合实践的复盘总结，本文用了我两个下午的时间，效率有些低，光是整理本次项目相关的资料，就用了我很多的时间。主要时间花费在对经历的回顾上。</p><p>下次综合实践应当在每一周做好项目的周总结，这样在最终总结时就能够节约一些时间。下次尽量将复盘的时间压缩到一个小时内。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【毕业实习总结】（2）mybatis框架的基本使用</title>
      <link href="/posts/graduate_internship_2/"/>
      <url>/posts/graduate_internship_2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大三暑假有个毕业实习，是企业的人来我们学校带我们做项目，为期三周。</p><p>前半部分是教我们一些框架的基本使用，后面几天就是组成小组利用前面学习的知识开发一个商城项目。感觉和课设其实没有差的太多。</p><p>学习到的框架有 mybatis、springmvc、spring、springboot、shiro、mybatis-plus，还在一开始学习了如何建立 maven 项目。</p><p>2020 年 7 月 15 日，我们小组完成了答辩。在之前因为要学习框架、做项目，甚至中间夹杂着几场考试，所以抽不出空来写博客，现在结束了，我现在通过 git 提交记录以及幕布学习笔记、工作日报等记录来尝试还原这一次经历以及学习到的技术。</p><p><strong>一开始想的是本系列先整理学习笔记，最后对本次项目进行总结。不过碍于时间不足，可能会直接将以前的旧项目改为 springboot 架构，实习最终完成的商城项目就不进行分析了，项目开源链接：<a href="https://gitee.com/ChangingSelf/SpringBootMall">SpringBootMall</a></strong></p><p>笔者也是刚刚才学习这些东西，所以如果有问题可以给我留言。</p><span id="more"></span><h1 id="仓库链接"><a href="#仓库链接" class="headerlink" title="仓库链接"></a>仓库链接</h1><p>本文的练习项目已在码云开源，链接如下：</p><ul><li><a href="https://gitee.com/ChangingSelf/learnSSM">学习 mybatis 的练习项目</a>，这个链接是本项目首页</li><li><a href="https://gitee.com/ChangingSelf/learnSSM/tree/987490acbb1411ffb102dbdbf50f30e0cf0dbc84/">这个链接会直接跳转到本文所对应的版本</a></li></ul><p>导入方式见本系列的第一篇文章。</p><h1 id="mybatis-框架的基本使用"><a href="#mybatis-框架的基本使用" class="headerlink" title="mybatis 框架的基本使用"></a>mybatis 框架的基本使用</h1><p><a href="https://mybatis.org/mybatis-3/zh/index.html">mybatis 官网文档</a></p><h2 id="什么是-mybatis"><a href="#什么是-mybatis" class="headerlink" title="什么是 mybatis"></a>什么是 mybatis</h2><p>下面是 mybatis 官网的说明：</p><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></blockquote><p>它可以将 sql 语句和业务代码分开，从而方便修改。</p><p>本学期我做的另外几个课设中，sql 语句都是直接写在代码中的，类似于下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加考试信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否添加成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">addExam</span><span class="params">(ExamBean exam)</span><span class="comment">//单个考试添加函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);<span class="comment">//用于日期格式化</span></span><br><span class="line"><span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span>sdf.format(exam.getDate());</span><br><span class="line"><span class="type">String</span> <span class="variable">applyDate</span> <span class="operator">=</span> sdf.format(exam.getApplyDate());</span><br><span class="line"><span class="comment">//添加exam表相关的属性</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> String.format(<span class="string">&quot;insert into &quot;</span></span><br><span class="line">+ <span class="string">&quot;exam(exam_id,term_id,course_id,exam_wl,exam_date,location,period,teacherNeed,exam_status,`comment`,teacher_id,apply_date,refuse_reason)&quot;</span></span><br><span class="line">+ <span class="string">&quot;values(&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;,%d,&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;,%d,&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;);&quot;</span></span><br><span class="line">,exam.getExamNo()</span><br><span class="line">,exam.getTerm()</span><br><span class="line">,exam.getCourseNo()</span><br><span class="line">,exam.getWorkload()</span><br><span class="line">,date</span><br><span class="line">,exam.getLocation()</span><br><span class="line">,exam.getTime()</span><br><span class="line">,exam.getNeed()</span><br><span class="line">,exam.getStatus()</span><br><span class="line">,exam.getComment()</span><br><span class="line">,exam.getApplierNo()</span><br><span class="line">,applyDate</span><br><span class="line">,exam.getRefuseReason()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> databaseBean.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(!success) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加考试-班级表的记录</span></span><br><span class="line">String[] classNoList = exam.getClassNo();</span><br><span class="line"><span class="keyword">if</span>(classNoList!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(String classNo :classNoList) &#123;</span><br><span class="line">sql = String.format(<span class="string">&quot;insert into examclasses(exam_id,class_id)&quot;</span></span><br><span class="line">+ <span class="string">&quot;values(&#x27;%s&#x27;,&#x27;%s&#x27;);&quot;</span></span><br><span class="line">, exam.getExamNo(),classNo);</span><br><span class="line">success = databaseBean.executeUpdate(sql);</span><br><span class="line"><span class="keyword">if</span>(!success) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加监考记录</span></span><br><span class="line">InvigilatorBean[] invigilatorList = exam.getInvigilator();</span><br><span class="line"><span class="keyword">if</span>(invigilatorList!=<span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isMain</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(InvigilatorBean invigilator:invigilatorList) &#123;</span><br><span class="line">success = InvigilatorBean.arrange(exam.getExamNo(), invigilator.getStaffNo(), isMain);</span><br><span class="line">isMain=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(!success) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是考务管理系统的 ExamBean 类中的内容（jsp+servlet+javabean 的架构，将业务逻辑写在了 javabean 中），可以看到，它需要手动进行日期的转换、多表查询的 sql 语句的拼接，而且 sql 语句是直接写在代码里面的，如果需要改动 sql 语句，会非常麻烦。</p><p>想要连接数据库，还需要自己写一个 DatabaseBean 来将数据库的用户名、密码、驱动名写在里面，提供获取数据库连接的类方法。</p><p>而使用了 mybatis 之后，sql 语句写在专门的 xml 文件当中，代码和 sql 语句分开，更方便管理。<u>下文会展示如何简单地使用它，不作深入讲解（哈哈，因为更深的我也还不会）。</u></p><h2 id="配置-mybatis"><a href="#配置-mybatis" class="headerlink" title="配置 mybatis"></a>配置 mybatis</h2><h3 id="添加-mybatis-依赖"><a href="#添加-mybatis-依赖" class="headerlink" title="添加 mybatis 依赖"></a>添加 mybatis 依赖</h3><p>前往<a href="https://mvnrepository.com/">maven 中央仓库</a>的官网，搜索 mybatis，选择版本，并将其依赖的配置代码添加到<code>pom.xml</code>中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>TestMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里就是新添加的依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--和servlet相关的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个才是mybatis的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里就是新添加的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件保存后，等待 eclipse 把这个依赖自动下载到本地仓库，就可以使用 mybatis 了。</p><h3 id="新建-mybatis-配置文件"><a href="#新建-mybatis-配置文件" class="headerlink" title="新建 mybatis 配置文件"></a>新建 mybatis 配置文件</h3><p>在工程的<code>src/main/resources</code>目录下新建一个 xml 文件<code>mybatis-config.xml</code>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库相关配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指定sql映射文件位置，此文件现在还没有创建，见下文--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mapper/StudentMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>里面的驱动名（mysql5 以后的驱动名变了，请注意。本例中的 mysql 是 5.1 版本的）、url、用户名和密码都改成自己的。</p><p>在同目录下新建一个文件夹<code>mapper</code>，用于存放 SQL 映射文件。</p><h2 id="增删改查举例"><a href="#增删改查举例" class="headerlink" title="增删改查举例"></a>增删改查举例</h2><p>以教务管理系统的学生信息的增删改查为例。本地 mysql 的<code>test</code>数据库中的<code>student</code>表中存放着学生信息，<code>grade</code>表中存放着班级信息。</p><p><strong><u>为了便于讲解，本例中的代码和上文给出的码云仓库的代码可能会有所不同。</u></strong></p><h3 id="目录结构一览"><a href="#目录结构一览" class="headerlink" title="目录结构一览"></a>目录结构一览</h3><ul><li>src&#x2F;main&#x2F;java<ul><li>com.test<ul><li>bean<ul><li>Student.java：用于存储学生信息的 javabean</li></ul></li><li>utils<ul><li>MybatisUtils.java：用于获取 SqlSession 的工具类</li></ul></li><li>dao<ul><li>StudentMapper.java：用于处理对学生信息的</li></ul></li></ul></li></ul></li><li>src&#x2F;main&#x2F;resource<ul><li>mapper<ul><li>StudentMapper.xml：SQL 映射文件，SQL 语句写在这里</li></ul></li><li>mybatis-config.xml：mybatis 配置文件</li></ul></li></ul><h3 id="新建包"><a href="#新建包" class="headerlink" title="新建包"></a>新建包</h3><h4 id="com-test-bean"><a href="#com-test-bean" class="headerlink" title="com.test.bean"></a>com.test.bean</h4><p>在你自己的工程包下（这里以<code>com.test</code>为例），新建一个<code>bean</code>包，存放的就是 javabean，用于将数据库的数据封装为类。</p><p>在其中新建一个学生 javabean，名为<code>Student</code>，其属性与数据库的学生信息表的字段一一对应（比如表中的<code>sname</code>字段对应 javabean 的<code>sname</code>属性）。</p><h4 id="com-test-utils"><a href="#com-test-utils" class="headerlink" title="com.test.utils"></a>com.test.utils</h4><p>utils 包存放一些工具类或者说是公共类。在此包下新建<code>MybatisUtils</code>类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 憧憬少</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisUtils</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">Reader reader;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = Resources.getResourceAsReader(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line">factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> factory.openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(SqlSession sqlSession)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(sqlSession!=<span class="literal">null</span>)&#123;</span><br><span class="line">sqlSession.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里涉及到 mybatis 如何进行 sql 映射，来看看官网文档是怎么说的：</p><blockquote><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的。</p><p>SqlSessionFactory 的实例可以通过 SqlSessionFactoryBuilder 获得。</p><p>而 SqlSessionFactoryBuilder 则可以从 XML 配置文件或一个预先配置的 Configuration 实例来构建出 SqlSessionFactory 实例。</p></blockquote><p>这个类在静态块里面读取了我们刚刚写的配置文件，并将其传给<code>SqlSessionFactoryBuilder </code>以创建<code>SqlSessionFactory </code>对象。</p><p>这个类的主要作用就是读取 mybatis 配置文件，并提供获取<code>SqlSession</code>对象的静态方法。我们可以使用<code>SqlSession</code>对象的方法，来使用 sql 映射文件中的 sql 语句。</p><h4 id="com-test-dao"><a href="#com-test-dao" class="headerlink" title="com.test.dao"></a>com.test.dao</h4><p>再新建一个名为<code>dao</code>的包，它的含义为 DAO(Data Access Object)数据访问对象，它是这个项目的数据访问层，业务代码通过它对数据库进行访问，有了这一层抽象，业务逻辑和数据访问就分开了。</p><p><code>dao</code>包中新建一个<code>StudentMapper</code>类，它用来和 SQL 映射文件产生联系。它的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bean.Student;</span><br><span class="line"><span class="keyword">import</span> com.utils.MybatisUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Student student)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">flag</span>  <span class="operator">=</span> session.insert(<span class="string">&quot;saveStudent&quot;</span>,student);</span><br><span class="line">session.commit();</span><br><span class="line">MybatisUtils.close(session);</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Student student)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">flag</span>  <span class="operator">=</span> session.update(<span class="string">&quot;updateStudent&quot;</span>,student);</span><br><span class="line">session.commit();</span><br><span class="line">MybatisUtils.close(session);</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> MybatisUtils.getSqlSession();</span><br><span class="line"><span class="type">int</span> <span class="variable">flag</span>  <span class="operator">=</span> session.delete(<span class="string">&quot;deleteStudent&quot;</span>,id);</span><br><span class="line">session.commit();</span><br><span class="line">MybatisUtils.close(session);</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，这里面调用了<code>SqlSession</code>对象的三个方法<code>insert</code>、<code>update</code>和<code>delete</code>，并且第一个参数是一个字符串，第二个参数就是操作的对象，操作对象中打包了用于增删改数据库的参数。</p><p>由于查询相比增删改要复杂一些，所以先写增删改的内容，等会儿再加上查询的代码。</p><p>操作完成后，使用 commit 方法进行事务提交，并关闭 SqlSession 对象。</p><p>那么第一个参数是什么呢？是 SQL 映射文件里面的 sql 语句的标识，接下来来看看 sql 映射文件吧~</p><h3 id="新建-sql-映射文件"><a href="#新建-sql-映射文件" class="headerlink" title="新建 sql 映射文件"></a>新建 sql 映射文件</h3><p>在刚刚新建的<code>mapper</code>文件夹中新建一个 xml 文件<code>StudentMapper.xml</code>，大体框架如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.test.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，mapper 标签的<code>namespace</code>的属性值为与此文件绑定的映射类的包括类名在内的包路径，eclipse 按住 ctrl+左键可以跳转到对应的类（如果没有跳转说明可能是拼写错误）</p><p>在这里编写 sql 语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">  PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.dao.StudentMapper&quot;</span>&gt;</span><br><span class="line">&lt;insert id=<span class="string">&quot;saveStudent&quot;</span>&gt;</span><br><span class="line">insert into <span class="title function_">student</span><span class="params">(sname)</span></span><br><span class="line">values(#&#123;sname&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br><span class="line">&lt;update id=<span class="string">&quot;updateStudent&quot;</span>&gt;</span><br><span class="line">update student</span><br><span class="line">set sname=#&#123;sname&#125;</span><br><span class="line">where sid=#&#123;sid&#125;</span><br><span class="line">&lt;/update&gt;</span><br><span class="line">&lt;delete id=<span class="string">&quot;deleteStudent&quot;</span>&gt;</span><br><span class="line">delete from student</span><br><span class="line">where sid=#&#123;sid&#125;</span><br><span class="line">&lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>其中，标签对应的是 sql 语句所进行的操作，id 则是上文中调用<code>SqlSession</code>对象的方法时所传入的第一个字符串参数，在 sql 语句中夹杂着这样的内容：<code>#&#123;sname&#125;</code>，它在映射后会作为一个占位符，类似 JDBC 的预编译。mybatis 会将传入的第二个 Object 参数的属性设置进去。</p><p>增改操作传入的都是<code>Student</code>对象，这个对象的属性就包含<code>sname</code>。</p><p>这就是增删改操作，可以新建一个测试类来测试一下</p><h3 id="测试用建表语句"><a href="#测试用建表语句" class="headerlink" title="测试用建表语句"></a>测试用建表语句</h3><p>为了简单起见，删除了一些字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test;</span><br><span class="line"></span><br><span class="line">USE test;</span><br><span class="line"></span><br><span class="line"># 删除表</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> grade;</span><br><span class="line"></span><br><span class="line"># 创建班级表</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> grade</span><br><span class="line">(</span><br><span class="line">gid <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">primary</span> key,</span><br><span class="line">gname <span class="type">char</span>(<span class="number">30</span>),</span><br><span class="line">deleted <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span># 删除标记</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 创建学生信息表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student</span><br><span class="line">(</span><br><span class="line">sid <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">primary</span> key,</span><br><span class="line">snum <span class="type">char</span>(<span class="number">30</span>),# 学号</span><br><span class="line">    sname <span class="type">char</span>(<span class="number">30</span>),# 姓名</span><br><span class="line">deleted <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,# 删除标记</span><br><span class="line">gid <span class="type">INT</span>,</span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(gid) <span class="keyword">REFERENCES</span> grade(gid)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade(gname)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;软件工程六班&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;软件工程七班&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span></span><br><span class="line"><span class="keyword">into</span> student(snum,sname,gid)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;2017901006&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;2017901007&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;2017901008&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="string">&#x27;2017901009&#x27;</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="string">&#x27;2017901026&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增删改测试"><a href="#增删改测试" class="headerlink" title="增删改测试"></a>增删改测试</h3><p>示例测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"><span class="keyword">import</span> com.bean.Student;</span><br><span class="line"><span class="keyword">import</span> com.dao.StudentMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStudentCRUD</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">student.setSname(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="type">int</span> flag=<span class="number">0</span>;</span><br><span class="line">flag = StudentMapper.insert(student);</span><br><span class="line"><span class="comment">//flag = StudentMapper.update(student);</span></span><br><span class="line"><span class="comment">//flag = StudentMapper.delete(student.getId());</span></span><br><span class="line"></span><br><span class="line">System.out.println(flag);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果插入成功，那么可以看到控制台输出了 1，这是影响的行数。如果是 0，那么就是插入失败，看一下报错信息，检查一下数据库用户名和密码是否正确，检查一下 javabean 和数据库字段对应情况</p><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><p>再创建一个班级信息的 bean，字段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bean;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Grade</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer gid;<span class="comment">//班级主键</span></span><br><span class="line"><span class="keyword">private</span> String gname;<span class="comment">//班级</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();<span class="comment">//学生列表</span></span><br><span class="line">    <span class="comment">//省略setter和getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer sid;</span><br><span class="line"><span class="keyword">private</span> String sname;</span><br><span class="line"><span class="keyword">private</span> Grade grade;<span class="comment">//学生所属的班级</span></span><br><span class="line">    <span class="comment">//省略setter和getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的代码都是在<code>StudentMapper.xml</code>中写的。</p><h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4><p>最简单的方式是单表查询，也就是仅仅查询一个表中的字段，不涉及另一个表。</p><p>以下的 sql 映射可以实现单表查询，不过有一定的限制，那就是查询结果中的字段名必须和 resultType 所指定的 javabean 的属性名一一对应，比如说数据库表中的字段名为<code>sname</code>，那么<code>com.bean.Student</code>这个 javabean 中的字段也必须有一个<code>sname</code>，否则会报错。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略增删改语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.bean.Student&quot;</span> &gt;</span></span><br><span class="line">select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="结果集映射"><a href="#结果集映射" class="headerlink" title="结果集映射"></a>结果集映射</h4><p>如果数据库表字段名和 javabean 的属性名不一样，那么可以使用结果集映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略增删改语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentMapper&quot;</span> &gt;</span></span><br><span class="line">select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.bean.Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ID&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;Sname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>select</code>标签中的<code>resultMap</code>属性指定所使用的<code>resultMap</code>标签（结果集标签），<code>resultMap</code>标签由<code>id</code>属性所指定。</p><p>结果集标签中嵌套了<code>id</code>标签和<code>result</code>标签，前者指定结果集中的主键，而后者则是其他普通类型的属性，它们的<code>property</code>属性对应 javabean 的属性名，<code>column</code>对应数据库表的列名也就是字段名。</p><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><p>如果要实现多表查询，那么就必须使用上述的结果集映射了。多表查询即涉及到多个表的字段的查询，需要进行连接操作。</p><p>在本例中，学生表中有一个班级字段，指明学生属于哪个班级。在查询学生的班级名时，需要连接学生表和班级表。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.StudentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略增删改语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;StudentMapper&quot;</span> &gt;</span></span><br><span class="line">select s.*,g.* from student s left join grade g on s.gid= g.gid</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.bean.Student&quot;</span> <span class="attr">id</span>=<span class="string">&quot;StudentMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;grade&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.bean.Grade&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;gid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里多了一个<code>association</code>标签，它用于把结果集中的其他表的字段映射到本 javabean 的字段，本例中就是将查询结果中的<code>gid</code>和<code>gname</code>字段映射到<code>Student</code>类的<code>grade</code>对象的对应属性中。</p><h4 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h4><p>除了表的字段和类的属性的一一映射之外，有时还需要进行一对多的映射。</p><p>比如班级类中有一个列表，想要将所有属于该班级的学生都加入到这个列表当中，那么可以按照上文的方式新建对应的<code>GradeMapper</code>类和<code>GradeMapper.xml</code>，在映射文件中这样写：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.dao.GradeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentListById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;GradeMapper&quot;</span>&gt;</span></span><br><span class="line">select grade.*,student.* from grade left join student</span><br><span class="line">on grade.gid=student.gid</span><br><span class="line">where grade.gid=#&#123;gid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">&quot;com.bean.Grade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;GradeMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;gid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gid&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gname&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;list&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.bean.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sname&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用的是<code>collection</code>标签，它的<code>ofType</code>属性是集合类中所装元素的类型，其他的和上面差不多</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【毕业实习总结】（1）maven环境配置</title>
      <link href="/posts/graduate_internship_1/"/>
      <url>/posts/graduate_internship_1/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大三暑假有个毕业实习，是企业的人来我们学校带我们做项目，为期三周。</p><p>前半部分是教我们一些框架的基本使用，后面几天就是组成小组利用前面学习的知识开发一个商城项目。感觉和课设其实没有差的太多。</p><p>学习到的框架有 mybatis、springmvc、spring、springboot、shiro、mybatis-plus，还在一开始学习了如何建立 maven 项目。</p><p>2020 年 7 月 15 日，我们小组完成了答辩。在之前因为要学习框架、做项目，甚至中间夹杂着几场考试，所以抽不出空来写博客，现在结束了，我现在通过 git 提交记录以及幕布学习笔记、工作日报等记录来尝试还原这一次经历以及学习到的技术。</p><p>本系列将会先整理学习笔记，最后对本次项目进行总结。</p><p>笔者也是刚刚才学习这些东西，所以如果有问题可以给我留言。</p><span id="more"></span><h1 id="maven-环境配置"><a href="#maven-环境配置" class="headerlink" title="maven 环境配置"></a>maven 环境配置</h1><p>本项目是在 eclipse 下开发的 maven 项目，所以首先需要配置 maven 环境。</p><h2 id="什么是-maven"><a href="#什么是-maven" class="headerlink" title="什么是 maven"></a>什么是 maven</h2><p>首先，什么是 maven？下面是来自<a href="https://www.runoob.com/maven/maven-tutorial.html">菜鸟教程</a>的说明：</p><blockquote><p>Maven 翻译为”专家”、”内行”，是 Apache 下的一个纯 Java 开发的开源项目。基于项目对象模型（缩写：POM）概念，Maven 利用一个中央信息片断能管理一个项目的构建、报告和文档等步骤。</p><p>Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。</p><p>Maven 也可被用于构建和管理各种项目，例如 C#，Ruby，Scala 和其他语言编写的项目。Maven 曾是 Jakarta 项目的子项目，现为由 Apache 软件基金会主持的独立 Apache 项目。</p><p>——Maven 教程|菜鸟教程</p></blockquote><p>我的理解是，maven 是一个可以帮助我们管理第三方的 jar 包的工具。</p><p>当我们在编写项目的时候，除了标准库之外，总会用到第三方依赖，比如说 fastjson、mysql 的驱动等。</p><p>在之前几次课设中，如果想要添加 jar，就需要先去官网找这个 jar 包，下载后将其添加到 WEB-INF 目录下的 lib 文件夹，再将其添加到<code>Build Path</code>中。</p><p>而在 maven 项目中，只需要在它的配置文件<code>pom.xml</code>中添加对应的依赖的配置即可，maven 会自动将你要的 jar 包从 maven 远程库下载到本地仓库，接着你就可以在项目中使用它了，如果本地仓库内已经有这个版本的 jar 了，就不需要重复下载了，省去了很多麻烦。</p><p>除了省去了自己下载和导入的麻烦，还可以方便团队协作。只需要一个<code>pom.xml</code>配置文件，就可以快速统一团队内部使用的依赖的版本。</p><p>maven 还有一些其他的功能，不过本项目中，我们只用到依赖管理。</p><h2 id="安装-maven"><a href="#安装-maven" class="headerlink" title="安装 maven"></a>安装 maven</h2><p>首先需要去<a href="http://maven.apache.org/download.cgi">官网</a>下载 maven（先检查你电脑上有没有 jdk）。下载到的文件的文件名大概是这样的：<code>apache-maven-3.6.3-bin.zip</code>，将其解压之后，放在非中文目录下，我是放在了 D 盘根目录下。</p><p>接着将<code>D:\apache-maven-3.6.3\bin</code>，也就是你解压目录下的 bin 目录的路径配置到环境变量<code>Path</code>当中。在命令行中输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mvn -v</span></span><br></pre></td></tr></table></figure><p>如果成功，那么就安装完毕。</p><h2 id="配置-maven-本地仓库"><a href="#配置-maven-本地仓库" class="headerlink" title="配置 maven 本地仓库"></a>配置 maven 本地仓库</h2><p>接着找个地方建个文件夹作为你的本地 maven 仓库，它用来存放你项目中用到的依赖 jar 包。</p><p>打开安装目录下的 conf 目录（本例中为<code>D:\apache-maven-3.6.3\conf</code>）下的<code>settings.xml</code>文件，找到这么一段注释：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br></pre></td></tr></table></figure><p>将其中的<code> &lt;localRepository&gt;</code>标签解除注释并将内容配置为你刚刚创建的本地仓库文件夹。我的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p>windows 下<strong>注意将复制的路径的反斜杠改为正斜杠。</strong></p><h2 id="配置-maven-的阿里云镜像"><a href="#配置-maven-的阿里云镜像" class="headerlink" title="配置 maven 的阿里云镜像"></a>配置 maven 的阿里云镜像</h2><p>maven 远程库在国外，国内访问比较慢，你可以设置为国内的镜像从而加速下载。</p><p>还是刚刚那个配置文件，找到<code>&lt;mirrors&gt;</code>标签，在网上搜索 maven 镜像，配置好之后如下(本例使用阿里云镜像)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">   | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">   | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">   | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">    &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">    &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">    &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">    &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">  &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置-eclipse"><a href="#配置-eclipse" class="headerlink" title="配置 eclipse"></a>配置 eclipse</h2><p>打开 eclipse，打开菜单【windows】-&gt;【preferences】，左边搜索框中搜索 maven，选择<code>Installations</code>选项，点击<code>Add</code>按钮，将你的 maven 安装目录添加进去（选择目录后直接点完成），添加后记得勾选新出现的行。下图为未添加时：</p><p><img src="https://s1.ax1x.com/2020/07/18/U2esRP.png" alt="在eclipse中配置maven"></p><p>这个选项这样就配置好了。</p><p>接着配置下方的<code>User Setting</code>选项，将此页的<code>User Settings</code>框内配置为刚刚的<code>settings.xml</code>配置文件的路径，如果下方的<code>Local Repository</code>出现的是你刚刚设置的 maven 本地仓库的路径，那么你就配置成功了。点击<code>Apply and Close</code>关闭此窗口即可。</p><p><img src="https://s1.ax1x.com/2020/07/18/U2miLD.md.png" alt="U2miLD.md.png"></p><h2 id="在-eclipse-中新建-maven-项目"><a href="#在-eclipse-中新建-maven-项目" class="headerlink" title="在 eclipse 中新建 maven 项目"></a>在 eclipse 中新建 maven 项目</h2><p>eclipse 菜单【file】-&gt;【new】-&gt;【project】，搜索 maven project，点下一步。</p><p>勾选<code>Create a simple project</code>，然后下一步。各个选项及其说明如图，这里的选项并不是太重要，后面可以在<code>pom.xml</code>里面改。</p><p><img src="https://s1.ax1x.com/2020/07/18/U2mW6K.png" alt="在eclipse中新建maven项目"></p><p>点击完成，你就新建了一个 maven 工程，不过有个问题，那就是新建的工程上面有一个红叉，这说明项目还有些问题。这是因为缺少<code>web.xml</code>这个文件。</p><p>你可以再新建一个<code>Dynamic Web Project</code>，注意在新建的时候勾选生成<code>web.xml</code>的选项，然后将<code>WEB-INF</code>这个目录包括下面的<code>web.xml</code>文件都复制到 maven 项目的<code>src/main/webapp</code>下，这时红叉应该就会消失了。</p><h2 id="eclipse-导入-maven-项目"><a href="#eclipse-导入-maven-项目" class="headerlink" title="eclipse 导入 maven 项目"></a>eclipse 导入 maven 项目</h2><p>下面是一个供练习导入的项目，它是当时在学习 mybatis 等框架时我放在码云上的，链接如下：</p><ul><li><a href="https://gitee.com/ChangingSelf/learnSSM">练习项目</a></li></ul><p>由于我设置了忽略工程文件，所以 clone 下来之后还需要进行一系列操作才能导入到 eclipse。步骤如下：</p><p>首先确定你已经按照上文配置好 maven 环境。</p><p>接着在 eclipse 菜单【file】-&gt;【import】，搜索<code>project from git</code>这个选项，选择<code>Clone Url</code>，将仓库 clone 到本地，这部分不详细配图说明了。</p><p>clone 下来之后，会有三个选项（为了演示方便我就随便放在桌面了，大家不要学，我之后会删除的）</p><p><img src="https://s1.ax1x.com/2020/07/18/U2KI7F.png" alt="maven项目导入方式"></p><p>选择图中第三个选项<code>Import as general project</code>，它会为你的项目生成一个新的 project 文件，但是按照这种方式导入进来，它只是一个普通的 eclipse 工程，并不是 maven 工程，这个怎么办呢？</p><p>我们这一步仅仅是为了让它生成一个<code>.project</code>工程文件，所以现在可以在 eclipse 的工作空间视图中将这个工程给删除，但是要注意，千万不要勾选<code>delete project content from disk</code>这个选项（它会将你的工程从磁盘上删除），我们要的仅仅是将它从 eclipse 的工作空间中删除。</p><p>然后 eclipse 菜单【file】-&gt;【import】，搜索 maven，选择<code>Existing Maven Project</code>，将刚刚的工程导入进来就可以了。有了之前生成的<code>.project</code>文件以及我仓库里面本来就有的<code>pom.xml</code>配置文件，eclipse 就能够知道这是一个 eclipse 的 maven 项目，从而导入进来。</p><p>导入进来会有红叉，这是因为依赖还没下载好，你等它下载。如果下载好了还是有红叉，就打开项目属性，然后找到<code>project facets</code>这个选项，把你的 java 版本调整成你的对应版本就行了。</p><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><p>以添加 mysql 驱动 jar 为例。</p><p>前往<a href="https://mvnrepository.com/">maven 中央仓库</a>的官网，搜索 mysql，选择版本，并将其依赖的配置代码添加到<code>pom.xml</code>中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>TestMaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里就是新添加的依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里就是新添加的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件保存后，等待 eclipse 把这个依赖自动下载到本地仓库，就可以使用它了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自我管理系统】任务管理系统v200423</title>
      <link href="/posts/self-management-task-manage-v200423/"/>
      <url>/posts/self-management-task-manage-v200423/</url>
      
        <content type="html"><![CDATA[<p>梳理我现有的任务管理系统，以做出改进。</p><p>目前这个系统我并没有非常严格地在执行，因为没有养成这个习惯，但是我能够感受到它是有用的。</p><span id="more"></span><h1 id="目的（系统需求）"><a href="#目的（系统需求）" class="headerlink" title="目的（系统需求）"></a>目的（系统需求）</h1><p>建立并运行了这个系统后：</p><ul><li>当我得到一个任务的时候，我不会忘记这个任务或者遗失它的相关资料</li><li>能够让我明确地知道什么时候应该做什么事情，不会将时间浪费在迷茫上</li><li>当我要来执行一个任务的时候，我能够迅速地找到它的相关资料，不会将时间浪费在找资料上面</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>活页本</li><li>充足的方格活页纸</li><li>活页本隔页</li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>参照子弹笔记的<code>集子</code>的概念。原本我使用的是子弹笔记，后来移植到活页本上了。</p><h2 id="月集子"><a href="#月集子" class="headerlink" title="月集子"></a>月集子</h2><p>使用一张活页纸</p><ul><li>上个月的目标完成情况</li><li>上个月的总结，以无序列表的形式列举一下自己干了啥，附加自己对上个月的一段话概括描述</li><li>本月的目标：可以动态添加，但是添加到本部分的内容一定要明确、具体</li></ul><h2 id="周集子"><a href="#周集子" class="headerlink" title="周集子"></a>周集子</h2><p>一周使用一张活页纸</p><ul><li>上周的目标完成情况</li><li>上周的总结，以无序列表的形式列举一下自己干了啥，附加自己对上周的一段话概括描述</li><li>本周的目标：可以动态添加，但是添加到本部分的内容一定要明确、具体。如果全部完成，可以从月集子中选取目标加到这里</li></ul><h2 id="日集子"><a href="#日集子" class="headerlink" title="日集子"></a>日集子</h2><p>一周的内容按照顺序写，一般来说是七天用两张活页纸</p><ul><li>今天要做的任务：参考子弹笔记的记号系统</li></ul><p>任务结构（均写在一行）：</p><ul><li>分类：比如说“数学作业”，总之是一眼就能看出来是啥任务就行</li><li>任务内容：尽可能精简</li><li>截止时间</li></ul><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h2><ul><li>触发条件：被分配了任务时。比如，老师在网课直播中口头提到了作业。</li><li>动作：<ul><li>由其截止时间判断任务级别是日级别、周级别还是月级别，添加到对应的集子</li><li>记录<ul><li>记录载体优先级：活页本，电子产品，大脑。优先级越低的载体在条件满足时尽量将记录整理到优先级高的载体。</li></ul></li></ul></li></ul><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><ul><li>触发条件：任务条目过多</li><li>动作：<ul><li>在空白纸页处按照重要紧急度分类，誊抄一遍任务</li></ul></li></ul><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><ul><li>触发条件：集子周期结束时</li><li>动作：<ul><li>手机 APP 扫描，发送到电脑，按照<code>电脑文件管理系统</code>来进行归档</li><li>丢弃上一个周期已归档的活页纸</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【自我管理系统】电脑文件管理系统v200417</title>
      <link href="/posts/self-management-file-manage-v200417/"/>
      <url>/posts/self-management-file-manage-v200417/</url>
      
        <content type="html"><![CDATA[<p>以此文梳理我的电脑文件管理系统，由于是我的文件管理系统，所以很多个性化的设置，读者建立自己的系统时可改为自己的。</p><span id="more"></span><h1 id="目的（系统需求）"><a href="#目的（系统需求）" class="headerlink" title="目的（系统需求）"></a>目的（系统需求）</h1><ul><li>当我产生或者获得一个新的文件时，知道存放到哪里</li><li>当我想要找到某个我需要的文件时，能够迅速找到</li><li>当我的电脑遗失或者重装时，重要的文件不丢失，能够迅速恢复</li><li>让我能够舒适地使用电脑</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>腾讯电脑管家桌面助手独立版：用到它的桌面收纳格、文件夹映射（减少查找层级）</li><li>坚果云：用到云同步功能</li><li>Listary：快速搜索打开文件夹和软件，可以用 everything 代替</li></ul><h1 id="环境配置（数据结构）"><a href="#环境配置（数据结构）" class="headerlink" title="环境配置（数据结构）"></a>环境配置（数据结构）</h1><p>磁盘分为三个分区：</p><ul><li>C 盘：系统盘。100G。</li><li>D 盘：软件盘。自定义安装时改个盘符即可</li><li>F 盘：文件盘。分配最大的空间。<u>用腾讯桌面整理将其映射到桌面</u></li></ul><p>F 盘下建立子文件夹：</p><ul><li>Archive：存放我的作业等项目文件的存档。<u>使用坚果云同步</u>。</li><li>Blog：存放个人博客源文件</li><li>Buffer：缓冲区，用于存放正在进行的项目的文件。固定到快速访问，并<u>用腾讯桌面整理将其映射到桌面</u></li><li>MyNotebook：存放 Vnote 笔记本。<u>使用坚果云同步</u></li><li>Resource：存放资源，包括课件、软件以及其他各种学习资源<ul><li>Software</li></ul></li><li>UserFolder：用户文件夹（图片、下载、音乐、文档、视频等）移动到这文件夹，避免占用系统盘空间。<ul><li><strong>图片文件夹</strong>（<code>F:\UserFolder\Pictures</code>）下新建以下文件夹（因为暂时没有拍照存相片的习惯，所以没有相册文件夹）<ul><li>Wallpaper：存放壁纸图片。桌面右键菜单【个性化】-&gt;左侧菜单【背景】-&gt;【背景】选项选择“幻灯片放映”，将本文件夹设置为相册。</li><li>Temp：临时图片存放处。用于存放暂时保存的图片，默认此处的图片都是可以删除的，哪天想起来了就可以全选删除。</li><li>Useful：存放有用的图片，比如证件照片等。</li><li>Icon：图标包。图标可在<a href="https://www.flaticon.com/">Flaticon</a>这个网站免费下载，用于装饰文件夹。</li></ul></li><li>将<strong>下载文件夹</strong>（<code>F:\UserFolder\download</code>）（作为收集箱文件夹）<u>使用腾讯桌面整理映射到桌面</u>，便于随时打开、观察它是否存在未处理的文件以及将文件拖入。</li><li><strong>视频文件夹</strong>（<code>F:\UserFolder\Videos</code>）新建 Bilibili 文件夹，存放自己做的 B 站视频。</li></ul></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>移动时注意先建立对应文件夹（如新建 download 文件夹），再将其路径指定为此文件夹，避免出现将整个 F 盘指定为用户文件夹的情况。</p><p>如果出现上述问题，可通过以下方案解决，它来自此<a href="https://zhidao.baidu.com/question/266780916556253685.html">百度知道链接</a></p><blockquote><p>可以在注册表中修改<br>win+R 输入“regedit”<br>找到\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders<br>找数值为属 F:\ 的 修改了就行</p></blockquote><h1 id="标准流程（数据操作）"><a href="#标准流程（数据操作）" class="headerlink" title="标准流程（数据操作）"></a>标准流程（数据操作）</h1><h2 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h2><p>由于文件大多数来自网络下载，将用户文件夹中的“download”文件夹设置为<strong>收集箱</strong>。相比于之前单独新建一个收集箱文件夹，省去了从 download 文件夹移动到收集箱的过程。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>根据文件类型进行分类</p><ul><li>自己新建的工程文件：在 Buffer 文件夹中找到对应的项目文件夹（或者新建）放入。</li><li>下载的软件<ul><li>安装版：放入<code>Resource\Software\Installer</code></li><li>免安装版：放入<code>Resource\Software\Portable</code></li></ul></li><li>图片<ul><li>壁纸：放入<code>Pictures\WallPaper</code>文件夹</li><li>临时截图：放入<code>Pictures\Temp</code>文件夹</li><li>有用处的图片：放入<code>Pictures\Useful</code>文件夹</li><li>图标包：放入<code>Pictures\Icon</code>文件夹</li></ul></li><li>课件与讲义、笔记：放入 Buffer 文件夹中对应的课程文件夹</li></ul><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><p>归档还是挺重要的，以前做过的东西可能还要用到。例如近期，软件质量保证与测试这门课程需要使用上上个学期的软件工程导论的第四次上机作业<code>4_软工导论实验四透镜质量检测190618.rar</code>的代码和报告来进行测试，我就很快找到了。</p><p>当完成一个项目（比如课设、上机作业、校内校外活动例如某个比赛）后，将用到的资料打包为一个压缩包，只保留能够还原此项目的必要资料，例如编译生成的 exe 之类的都删除。</p><p>压缩包命名为<code>[大学学期号_][科目名称]&lt;项目名称&gt;&lt;六位数归档日期&gt;</code>，其中尖括号必选，方括号可选例如：<code>5_计算机图形学隐面算法及光照模型191129.rar</code>代表：大学第五学期（大三第一学期）做的隐面算法及光照模型项目，它在 2019 年 11 月 29 日归档。</p><p>这个归档日期并不代表它做完的日期，而是我在将其打包成压缩包并放入 Archive 文件夹的日期，或者是我根据文件的最后更新时间推测出的项目完成时间。因为我在形成这个归档系统之前，并没有记录完成时间的意识。</p><p>打包好之后，将其放入 Archive 文件夹对应的年份文件夹中。若是有多个类似的项目文件（比如同一个课程的课设和上机），就新建一个文件夹将它们放在一起，但是内部不再新建新的层级的文件夹。</p><p>此时，Archive 文件夹中的一个示意结构如下：</p><ul><li>Archive<ul><li>0000：用于存放未整理好的归档文件，这是我之前重构 Archive 文件夹时留下的，我觉得没有必要删除，就留着了。</li><li>2017：存放 2017 年的项目文件<ul><li>vb：2017 年写的 vb 项目的文件夹<ul><li><code>是英雄就下一百层171125.rar</code>：其实完成时间还要更早，但是最后更新日期是这个所以就用了它</li><li>……</li></ul></li><li><code>1_第八届创业先锋挑战赛171011.rar</code></li><li>……</li></ul></li><li>2018：<ul><li>……</li></ul></li><li>2019：<ul><li>5_计算机辅助设计：同一科目的项目文件开一个文件夹存放<ul><li><code>5_CAD复习笔记191210.rar</code></li><li><code>5_CAD三类自由曲线191129.rar</code></li><li><code>5_CAD旋转的三角形191129.rar</code></li><li><code>5_CAD折线路径191129.rar</code></li></ul></li><li><code>明日方舟代理指挥190721.rar</code>：不是学校作业的就不需要学期号了</li><li>……</li></ul></li></ul></li></ul><p>Archive 文件夹使用云同步，重装系统后它是最快恢复的部分，这让我真正意识到建立一个完善的系统是多么重要。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li>双击 ctrl 使用 Listary 或者使用 everything 查找项目名称</li><li>或者进入对应功能的文件夹手动查找，按照上面的方式设置，查找层级一般不会超过三层（因为还有桌面映射）</li></ul><h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><p>根据 F 盘中文件夹中数据的重要程度来执行不同的策略。</p><p>本系统中最为重要的文件是<code>Archive</code>中的文件，因为这里面都是我自己积累下来的自己完成的代码以及各种资料，它们是不可恢复的。</p><p>其次是存放着日记的<code>MyNotebook</code>文件夹，虽然不可恢复但是对我来说只要不泄露就行，删日记这种事情我以前没少干。</p><p>它们都使用了坚果云同步，以及定期移动硬盘备份。</p><p>接着是<code>Blog</code>文件夹，它存放着我个人博客的 hexo 源代码。我使用 git 来对它进行管理，注意这个 git 库和它用于部署的 git 库不一样，这个是用于管理源代码而不是发布的内容（public 文件夹）的。每发布一篇博文，或者修改一次配置，就 commit 一次。将其 push 到 github 的私有库，并通过码云的仓库导入功能同步过来，这样就轻松有了两份备份，而且自带历史版本管理。</p><p><code>Buffer</code>文件夹不进行备份，借此让我在项目结束后尽快归档，避免数据丢失。</p><p>最不重要的是<code>Resource</code>文件夹，里面存放的资源（软件安装包、课件、各种电子书）都是可以再次获取的，并不包含我的心血在其中。基本上不需要备份。偶尔一些比较难以获取的（比如下载速度贼慢的）会备份到百度云盘（莫得选择，坚果云的流量不能浪费）上。</p><p><code>UserFolder\Video\Bilibili</code>：在每次录制并上传一个新的视频后，将其资料归档到这个文件夹，因为视频压缩后也很大，所以使用百度云盘备份。备份时机在每次录制并上传一个新的视频后。</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>站点引导</title>
      <link href="/posts/blog-catalogue/"/>
      <url>/posts/blog-catalogue/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是本博客站点的文章目录索引，如果你想在本站逛一逛，可以从这里开始。</p><p>如果想要搜索特定内容，请结合标签、分类和站内搜索功能。部分博客有对应的 B 站视频，以及 github 库，详见各自文章的开头传送门。</p><p>此目录并非包含本站所有文章，比如日志总结之类的不一定会放到目录。</p><p>如果觉得本站访问速度慢，可以在【友情链接】中找到<a href="https://changingself.gitee.io/">托管在 gitee 的本站链接</a>，速度会快很多</p><span id="more"></span><h1 id="这个博客的内容"><a href="#这个博客的内容" class="headerlink" title="这个博客的内容"></a>这个博客的内容</h1><p>以下是我的博客内容的简单分类，根据我前一次搭建博客的经验所得。</p><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>过程复盘</td><td>记录学习实践一个事物的过程，侧重记录与反思</td></tr><tr><td>知识整理</td><td>针对某一部分知识进行集中整理方便查阅，例如 API、语法、命令等</td></tr><tr><td>解决方案</td><td>针对遇到的某个具体问题寻找解决方案</td></tr><tr><td>算法理解</td><td>针对某个具体算法的理解掌握</td></tr><tr><td>工具使用</td><td>对于框架、软件、网站等工具的使用方法与心得经验，或是简单推荐</td></tr><tr><td>目录索引</td><td>定期将本博客的文章索引起来，或者整理一些有用的参考链接</td></tr><tr><td>日志随笔</td><td>随便写点啥心情，或者年终总结之类的</td></tr></tbody></table><p>这个分类肯定会有交叉，没办法完全将它们分开，也没必要。每个分类虽然有交叉，但是也有自己的侧重。</p><p>比如<strong>过程复盘</strong>和<strong>知识整理</strong>，前者我会尽量将我探索的过程记录下来，夹杂着一些知识点，而后者会将知识点进行简单罗列便于查询。</p><p><strong>解决方案</strong>是针对某个具体的问题编写解决步骤，而<strong>工具使用</strong>则是将使用这个工具的一些常见的问题集中解决。</p><p><strong>日志随笔</strong>里面可能会对近期写的一些博文进行索引，但是是按照时间顺序线性串联；而<strong>目录索引</strong>则是专门索引一个系列的文章。</p><p><strong>算法理解</strong>是针对某个具体的算法进行解析，从而达到学习的目的。</p><h1 id="python-爬虫"><a href="#python-爬虫" class="headerlink" title="python 爬虫"></a>python 爬虫</h1><ul><li><a href="http://yxchangingself.xyz/posts/python_spider_note1simple_spider/">python 爬虫学习笔记 1 简易爬虫</a>：我的第一篇爬虫博客（2019-02-08），讲了一个爬取小说的简单爬虫</li><li><a href="http://yxchangingself.xyz/posts/python_spider_note2login_and_database/">python 爬虫学习笔记 2 模拟登录与数据库</a></li><li><a href="http://yxchangingself.xyz/posts/python_spider_note3class_spider/">python 爬虫学习笔记 3 封装爬虫类</a></li><li><a href="http://yxchangingself.xyz/posts/python_spider_note4optimization_of_the_login_function/">python 爬虫学习笔记 4 模拟登录函数的优化</a></li><li><a href="http://yxchangingself.xyz/posts/python_spider_note5optimization_of_the_spider_class/">python 爬虫学习笔记 5 爬虫类结构优化</a></li></ul><hr><ul><li><a href="http://yxchangingself.xyz/posts/Scrapy_spider_bilibiliRank/">练习利用 Scrapy 爬取 b 站排行榜</a>：开始学 python 的 Scrapy 框架了，参考书是崔庆才的《python3 网络爬虫开发实战》。跟着教程敲完之后，又试着按照一样的逻辑去爬取了 B 站排行榜的数据。</li><li><a href="http://yxchangingself.xyz/posts/portal_login_encrypt/">学校信息门户模拟登录之密码加密</a>：以前写的爬虫无法登录到学校的信息门户上去了，因为门户的新 JS 代码将表单的密码先加密了一次，再将其与别的表单数据 POST 过去。使用的是 AES 加密的 CBC 模式。当时我对密码学知识还没有太多了解，所以如果有不太对的地方欢迎留言</li><li><a href="http://yxchangingself.xyz/posts/portal_login/">学校信息门户模拟登录</a>：将登陆我的学校信息门户的部分专门封装成一个模块，需要的时候导入。</li><li><a href="http://yxchangingself.xyz/posts/wechat_offical_account_spider_1_get_article_urls/">爬取微信公众号文章 1 获取文章链接</a>：通过已有的微信公众号个人订阅号来获取某个公众号的所有文章链接。缺点是需要手动登录并将 cookies 复制过来。</li><li><a href="http://yxchangingself.xyz/posts/wechat_offical_account_spider_2_fail_to_get_html/">爬取微信公众号文章 2 获取页面失败</a>：其实没有获取失败，只是因为用的控制台 print 的字符有数量限制，没显示完全导致误会。</li><li><a href="http://yxchangingself.xyz/posts/Scrapy_spider_1/">Scrapy 爬虫框架（1）一个简单的可用的爬虫</a>：为了做一个疫情新闻爬虫而复习 Scrapy</li></ul><hr><ul><li><a href="http://yxchangingself.xyz/posts/python_spider_parser_beautifulsoup/">python 爬虫解析库 BeautifulSoup 速查</a></li></ul><h1 id="课设或上机作业思路分享"><a href="#课设或上机作业思路分享" class="headerlink" title="课设或上机作业思路分享"></a>课设或上机作业思路分享</h1><ul><li><a href="http://yxchangingself.xyz/posts/simple_inverted_index/">简易倒排索引</a>：智能信息检索作业</li><li><a href="http://yxchangingself.xyz/posts/java_game_FightFieldFrame/">java 基于 AWT 的对战小游戏</a>：java 课设，主要内容在<a href="https://www.bilibili.com/video/av54526303/">B 站的视频</a>说明</li><li><a href="http://yxchangingself.xyz/posts/MFC_RGB_demonstration/">MFC 习题|RGB 颜色模型演示程序</a>：计算机图形学的某个选做课后习题</li><li><a href="http://yxchangingself.xyz/posts/IMS_base_on_LAN/">【课设总结】基于 LAN 的即时通信软件</a>：python 的 tkinter 程序，计算机网络的课设。</li><li><a href="http://yxchangingself.xyz/posts/python_des_gui/">【作业总结】python 写的 DES 替代算法的 gui 小工具</a>：信息安全上机作业</li><li><a href="http://yxchangingself.xyz/posts/sound-card-data-acquisition/">【作业总结】声卡数据采集及处理</a>：计算机网络测控</li><li><a href="http://yxchangingself.xyz/posts/java_simple_studentInfoSystem/">【编程练习】java 简易学生管理系统</a>：数据库基础上机练习</li></ul><h1 id="出于兴趣弄的"><a href="#出于兴趣弄的" class="headerlink" title="出于兴趣弄的"></a>出于兴趣弄的</h1><ul><li><p><a href="http://yxchangingself.xyz/posts/Africanights_simu_hr_1/">【编程练习】明日非舟抽卡模拟器（1）按照概率抽取干员星级</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/Africanights_simu_hr_2/">【编程练习】明日非舟抽卡模拟器（2）xml 文件解析</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/cpp_student_info_management_system1/">c++学生信息管理系统（一）</a>：不是作业，是几个学期后想要试试看写原本的项目</p></li><li><p><a href="http://yxchangingself.xyz/posts/hexo_diary/">hexo 日记本</a>：用 hexo 搭建一个本地的日记本（现在并没有在用了，因为新建和预览都比较麻烦）</p></li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li><p><a href="http://yxchangingself.xyz/posts/python_relative_path/">python 相对路径是相对于哪里</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/python_read_ini_No_section/">python 读取 ini 文件失败的原因</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/MFC_get_input_by_Dialog/">MFC 用对话框获取输入</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/git_amend_commited_info/">更改 git 仓库已经 commit 的用户名和邮箱信息</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/update_old_hexo_blog_after_build_new_hexo_blog/">建新 hexo 博客后继续更新旧 hexo 博客的方法</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/win10_share_folder/">WIN10 共享文件夹</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/notepadpp_file_association/">notepad++添加文件关联</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记第二次博客切换主题以及主题优化</title>
      <link href="/posts/hexo_blog_switch_theme_2/"/>
      <url>/posts/hexo_blog_switch_theme_2/</url>
      
        <content type="html"><![CDATA[<p>2019 年 2 月 28 日的时候第一次换了主题，从从<a href="https://github.com/ShanaMaid/hexo-theme-shana">shana</a>（夏娜）换成了<a href="https://github.com/iissnan/hexo-theme-next">NexT</a>，当时换主题的原因是：虽然二次元主题蛮好看的我挺喜欢，但是不实用，功能缺乏，而 NexT 作为一个使用人数非常多的主题，功能非常齐全，所以决定换主题。</p><p>2020 年 4 月 5 日，也就是今天，我花了一个上午的时间将个人博客的主题换成闪烁之狐的<a href="https://github.com/blinkfox/hexo-theme-matery">Matery</a>主题，既美观功能又丰富。</p><span id="more"></span><p><img src="https://i.loli.net/2020/04/05/I6UPO1TAuyEGqrk.png" alt="效果图"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery">Matery 主题</a></li><li><a href="https://blog.csdn.net/qq_39610915/article/details/90679768">Hexo 博客优化：在 Next 主题中设置进阶版 Live2D 看板娘————拒绝踩坑！！！！</a></li><li><a href="https://github.com/stevenjoezhang/live2d-widget">进阶版 Live2D 的 github 库</a></li></ul><h1 id="换主题"><a href="#换主题" class="headerlink" title="换主题"></a>换主题</h1><p>切换的方法和其他主题没有什么差别，下载或者 clone 主题到 hexo 文件夹的 theme 目录下，再在根目录的配置文件中切换即可。重点说一下我遇到的问题。</p><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p>用 Next 主题的时候，我添加了搜索插件，可以进行站内搜索，但是切换了主题之后，却不可以用了。虽然这个主题的右上角自带搜索按钮。</p><p>README 里面关于这一点是这样说的：</p><blockquote><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br></pre></td></tr></table></figure></blockquote><p>需要安装这么一个插件，可是我已经安装了不是吗？切换主题前还可以用的呀！</p><p>我去看了一下主题作者的博客以及也使用这个主题的朋友的博客，他们的站内搜索是可以用的。</p><p>后来才发现，next 主题里面安装的插件是<code>hexo-generator-searchdb</code>而不是<code>hexo-generator-search</code>，末尾差了两个字母……</p><p>这两个主题支持的插件不一样，但是名字相似，而且配置部分里面都有上述的内容，所以很容易掉坑里。</p><p>把原本的搜索插件删除了就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> uninstall hexo-generator-searchdb</span><br></pre></td></tr></table></figure><h1 id="升级-live2d-看板娘"><a href="#升级-live2d-看板娘" class="headerlink" title="升级 live2d 看板娘"></a>升级 live2d 看板娘</h1><p>原本使用的 live2d 插件是<code>hexo-helper-live2d</code>，模型是<code>koharu</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>之前就得知有进阶版的 live2D，不过一直没去弄，这次趁着切换主题，顺便将她升级一下。</p><p>这方面资料不太多，只搜到这么一篇教程：<a href="https://blog.csdn.net/qq_39610915/article/details/90679768">Hexo 博客优化：在 Next 主题中设置进阶版 Live2D 看板娘————拒绝踩坑！！！！</a></p><p>这篇教程教的是如何在 Next 主题下设置，改成 Matery 主题的也可以。<strong>以下步骤相同的部分直接引用自原教程</strong></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><blockquote><p>下载<a href="https://github.com/stevenjoezhang/live2d-widget">大神项目</a>，解压到本地博客目录的 themes&#x2F;next&#x2F;source 下，修改 autoload.js 文件，将其中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path =</span><br><span class="line">  <span class="string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d/&quot;</span>;</span><br></pre></td></tr></table></figure></blockquote><p>我这个比较新的版本的<code>autoload.js</code>里面开头就是这两句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：live2d_path 参数应使用绝对路径</span></span><br><span class="line"><span class="keyword">const</span> live2d_path =</span><br><span class="line">  <span class="string">&quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;</span>;</span><br><span class="line"><span class="comment">//const live2d_path = &quot;/live2d-widget/&quot;;</span></span><br></pre></td></tr></table></figure><p>可以直接将第二句注释打开，第一句注释上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：live2d_path 参数应使用绝对路径</span></span><br><span class="line"><span class="comment">//const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget/&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里第二句赋值的内容需要修改为你放在 source 目录下的文件夹的名字。</p><p>比如我从 github 上面 clone 下来名字是<code>live2d-widget-master</code>，如果你不改文件夹名字，将其移动到<code>themes/next/source</code>下后，你需要将<code>themes/next/source/live2d-widget-master/autoload.js</code>这个文件开头声明的那个常量改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">&quot;/live2d-widget-master/&quot;</span>;</span><br></pre></td></tr></table></figure><p>即 source 目录下的 live2d 文件夹的名字。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><blockquote><p>在&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_layout.swing 中,<body>标签中新增如下内容，########为你自己的 github 账号：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://########.github.io/live2d/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>标签中新增如下内容：一定一定要加上依赖！！！！！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></blockquote><p>我用的这个主题里面没有<code>layout/_layout.swing</code>这个文件，但是有<code>layout/layout.ejs</code>文件，其实是一样的，都说明了主题的布局</p><p>文件里面大致长这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&lt;%= config.language %&gt;&quot;</span>&gt;</span></span><br><span class="line">  &lt;%- partial(&#x27;_partial/head&#x27;) %&gt;</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要加的三条语句--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://ChangingSelf.github.io/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 其他的东西省略 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，目前在本地用<code>hexo s</code>预览是看不到的，因为这一句：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://&lt;你的用户名&gt;.github.io/&lt;你放在source目录下的文件夹名&gt;/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要引用你部署在 github 仓库里面的 js 文件，但是你现在还没有部署上去，你需要先部署到 github 才能在本地预览，或者将这个绝对链接改为相对链接，这个比较复杂，还是用现在这种方法比较好。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><blockquote><p>在<strong>主题配置文件_config.yml</strong> 中,新增如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。</p><p>最终效果如图：</p><p><img src="https://img-blog.csdnimg.cn/20190602135515459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjEwOTE1,size_16,color_FFFFFF,t_70"></p></blockquote><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>我照着这个作者的教程走就搞定了。</p><p>不过还有个问题，那就是看板娘是放在左边的，有点挡正文，右边目录处倒是有一块很适合放看板娘的空白。</p><p>这个问题在她的 github 仓库的 issue 里面找到了<a href="https://github.com/stevenjoezhang/live2d-widget/issues/28">答案</a></p><p>可以在刚刚的<code>\themes\matery\source\live2d-widget</code>目录下面的<code>waifu.css</code>设置她的位置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#waifu</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">1000px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>; <span class="comment">/*这个就是设置左右的*/</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">3px</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease-in-out, bottom <span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改成下面这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#waifu</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">1000px</span>;</span><br><span class="line">  <span class="comment">/*left: 0;*/</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">3px</span>);</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.3s</span> ease-in-out, bottom <span class="number">3s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以了。</p><p>关于这个 left 和 right 选项的具体数值设置方式如下（vscode 给我提示的）：</p><blockquote><p>Specifies how far an absolutely positioned box’s right margin edge is offset to the left of the right edge of the box’s ‘containing block’.</p><p>Syntax: <length> | <percentage> | auto</p></blockquote><p>也就是说可以是长度、百分比、自动，这三种模式，一开始的<code>left:0</code>其实是百分比的形式。后面调整的<code>right:100px</code>表示看板娘距离右边界 100 像素（防止点不到互动按钮）</p><p>而要修改将其关掉后让看板娘重新显示的条条的样式，则需要修改下面这个：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#waifu-toggle</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fa0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">66px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="comment">/*right: 0;*/</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">2px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">transition</span>: margin-left <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">writing-mode</span>: vertical-rl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我还是继续将它放在左边，不过将它挪出来了一点，免得我点不到。</p><p>说实话这个看板娘超可爱！</p><h1 id="换图床"><a href="#换图床" class="headerlink" title="换图床"></a>换图床</h1><p>这个主题对图片的需求量大了很多，再继续用 github 图床的话担心速度慢显示效果不好。所以选择了其他图床。</p><p>最后选择了 SM.MS 图床，它是免费且无需注册就可以上传图片，这种图床缺点就是不太放心，不过这个也算是一个大图床，不用太担心它挂掉。大不了重要的图片再上传到 github 图床。</p><p>PicGo 也支持 SMMS 图床，所以图床工具也有了。</p><p>最好在 PicGo 的插件商店下载一个叫做<code>smms-user</code>的插件，再注册一个 SMMS 的用户获取 API 口令填进去，这样上传上去的内容自己还能找得到，还可以删除。</p>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业总结】python写的DES替代算法的gui小工具</title>
      <link href="/posts/3043391445/"/>
      <url>/posts/3043391445/</url>
      
        <content type="html"><![CDATA[<p>信息安全的上机作业：实现 DES 替代算法，不限语言，可以调库</p><p><a href="https://github.com/ChangingSelf/DES">github 库传送门</a></p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200402080056.png" alt="完成图"></p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://blog.csdn.net/whatday/article/details/97423901">python3 bytes 与 hex 字符串互转</a></p></li><li><p><a href="https://www.it610.com/article/1223283792861564928.htm">对于 Python 中的字节串 bytes 和字符串以及转义字符的新的认识</a></p></li><li><p><a href="https://www.jianshu.com/p/66551c2b6b91">python 常用的十进制、16 进制、字符串、字节串之间的转换</a></p></li><li><p><a href="https://blog.csdn.net/ahilll/article/details/81531587">Python GUI 之 tkinter 窗口视窗教程大集合（看这篇就够了）</a></p></li></ul><h1 id="pyDes-库"><a href="#pyDes-库" class="headerlink" title="pyDes 库"></a>pyDes 库</h1><p>使用 python 来写最简单，安装一个 pyDes 库即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pip</span> install pyDes</span><br></pre></td></tr></table></figure><p>我采用的是默认的 ECB（Electronic CodeBook 电码本模式）。下面介绍的 API 也都是用最简单的版本。</p><p>首先传入密钥创建一个 des 对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;Ts%uN#w4&#x27;</span>  <span class="comment"># 密钥需要8个字符，即64bit</span></span><br><span class="line">des = pyDes.des(key)</span><br></pre></td></tr></table></figure><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两种填充方式</span></span><br><span class="line">des.encrypt(plain_text,pad=<span class="string">&#x27; &#x27;</span>,padmode=pyDes.PAD_NORMAL)  <span class="comment"># 如果用默认模式，需要设置pad参数</span></span><br><span class="line"></span><br><span class="line">des.encrypt(plain_text,padmode=pyDes.PAD_PKCS5)  <span class="comment"># plain_text是明文,padmode是填充模式</span></span><br></pre></td></tr></table></figure><p>如果只传入明文，就需要注意明文的长度问题；</p><p>在<code>PAD_NORMAL</code>模式下设置 pad 参数的话，就代表使用 pad 的字符来填充明文不够长度的部分；</p><p>在<code>PAD_PKCS5</code>模式下不能设置 pad 参数。一般用这个比较好。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">des.decrypt(cipher_text)</span><br></pre></td></tr></table></figure><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><h2 id="MyDes-类"><a href="#MyDes-类" class="headerlink" title="MyDes 类"></a>MyDes 类</h2><p>先写一个 MyDes 类将原本的 pyDes.des 类封装一下。这样可以加一些自己的方法，而且不用担心会不小心覆盖掉原来的方法。</p><p>一开始写的类方法：</p><ul><li>构造方法</li><li>加密：传入明文 bytes，返回密文 bytes</li><li>解密：传入密文 bytes，返回明文 bytes</li><li>随机生成密钥：随机生成 8 个字符的字符串</li></ul><p>后来加上的类方法：</p><ul><li>将字节串转换为十六进制字符串</li><li>将十六进制字符串转换为字节串</li></ul><h2 id="MyDesGui-类"><a href="#MyDesGui-类" class="headerlink" title="MyDesGui 类"></a>MyDesGui 类</h2><p>再写一个 MyDesGui 类，专门用于图形界面显示。<strong>不过现在回过头来看，它还负责了本来应该由 MyDes 类负责的逻辑，这是一个需要改进的地方</strong></p><p>图形界面相关类方法：</p><ul><li>构造方法</li><li>初始化控件</li><li>显示密文：传入密文 bytes，在控件上显示密文</li><li>显示明文：传入明文 bytes，在控件上显示明文</li></ul><p>以下类方法本来应该放在 MyDes 类里面实现，在这里面只是简单地调用 MyDes 的类方法的，但是现在是直接在这里面实现对应的算法，需要改进</p><ul><li>des 加密</li><li>des 解密</li><li>二重 des 加密</li><li>二重 des 解密</li><li>三重两密 des 加密</li><li>三重两密 des 解密</li><li>三重三密 des 加密</li><li>三重三密 des 解密</li></ul><h2 id="二重-Des-算法"><a href="#二重-Des-算法" class="headerlink" title="二重 Des 算法"></a>二重 Des 算法</h2><p>一开始的 DES 加密解密搞定了之后，二重 DES，三重 DES 就比较简单了。</p><p>设 C 为密文，P 为明文，E_k 为以 k 为密钥的 DES 加密，D_k 为以 k 为密钥的 DES 解密。</p><p>二重 DES 的加密：C &#x3D; E_k2(E_k1(P))</p><p>二重 DES 的解密：P &#x3D; D_k1(D_k2(C))</p><h2 id="三重两密-Des-算法"><a href="#三重两密-Des-算法" class="headerlink" title="三重两密 Des 算法"></a>三重两密 Des 算法</h2><p>加密：C &#x3D; E_k1(D_k2(E_k1(P)))</p><p>解密：P &#x3D; D_k1(E_k2(D_k1(C)))</p><h2 id="三重三密-Des-算法"><a href="#三重三密-Des-算法" class="headerlink" title="三重三密 Des 算法"></a>三重三密 Des 算法</h2><p>加密：C &#x3D; E_k3(D_k2(E_k1(P)))</p><p>解密：P &#x3D; D_k1(E_k2(D_k3(C)))</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="bytes-和字符串之间的转换“损耗”"><a href="#bytes-和字符串之间的转换“损耗”" class="headerlink" title="bytes 和字符串之间的转换“损耗”"></a>bytes 和字符串之间的转换“损耗”</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>pyDes 库的加密解密的输入输出都是 bytes 类型的字节串，要如何将其正确地显示在编辑框上，以及从编辑框上读取呢？</p><p>可能你会说，python 将 bytes 转换成 str 不是很简单吗？</p><p>str 转换成 bytes：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text_b = text.encode()  <span class="comment"># 如果出现问题，encode里面可以加上errors=&#x27;ignore&#x27;参数</span></span><br></pre></td></tr></table></figure><p>bytes 转换成 str：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text = text_b.decode()  <span class="comment"># 如果出现问题，decode里面可以加上errors=&#x27;ignore&#x27;参数</span></span><br></pre></td></tr></table></figure><p>没错，确实很简单，但是这种方式有一个问题，转换的过程中可能会有一些“损耗”。</p><p>比如下面这段代码，预期结果是输出两个字节串，一个密文字节串，一个明文字节串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line">plain_text = <span class="string">&#x27;你好世界helloworld&#x27;</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;Ts%uN#w4&#x27;</span>  <span class="comment"># 密钥需要8个字符，即64bit</span></span><br><span class="line">des = pyDes.des(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取明文字符串plain_text</span></span><br><span class="line">plain_text_b = plain_text.encode()</span><br><span class="line">cipher_text_b = des.encrypt(plain_text_b,padmode=pyDes.PAD_PKCS5)</span><br><span class="line"><span class="built_in">print</span>(cipher_text_b)</span><br><span class="line"><span class="comment"># 转换为字符串以显示在编辑框</span></span><br><span class="line">cipher_text = cipher_text_b.decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取密文字符串</span></span><br><span class="line"></span><br><span class="line">cipher_text_b = cipher_text.encode()</span><br><span class="line">plain_text_b = des.decrypt(cipher_text_b)</span><br><span class="line"><span class="built_in">print</span>(plain_text_b)</span><br></pre></td></tr></table></figure><p>但是实际上的输出是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80$-\xd1\x07\x1e=k+\xac\x00\xb4\xbb\x19\xa6\xf6\xd7\x8f\x91\x86\xa0\x9e.\x05&#x27;</span><br><span class="line">24</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">UnicodeDecodeError                        Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-1-c98230c2df1e&gt; in &lt;module&gt;</span><br><span class="line">     11 print(len(cipher_text_b))</span><br><span class="line">     12 # 转换为字符串以显示在编辑框</span><br><span class="line">---&gt; 13 cipher_text = cipher_text_b.decode()</span><br><span class="line">     14</span><br><span class="line">     15 # 从编辑框获取密文字符串</span><br><span class="line"></span><br><span class="line">UnicodeDecodeError: &#x27;utf-8&#x27; codec can&#x27;t decode byte 0x80 in position 0: invalid start byte</span><br></pre></td></tr></table></figure><p>这是因为，<strong>加密后的字节串是不符合 utf-8 的编码格式的</strong>。我一开始想加个 ignore 选项忽略过去：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line">plain_text = <span class="string">&#x27;你好世界helloworld&#x27;</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;Ts%uN#w4&#x27;</span>  <span class="comment"># 密钥需要8个字符，即64bit</span></span><br><span class="line">des = pyDes.des(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取明文字符串plain_text</span></span><br><span class="line">plain_text_b = plain_text.encode()</span><br><span class="line">cipher_text_b = des.encrypt(plain_text_b,padmode=pyDes.PAD_PKCS5)</span><br><span class="line"><span class="built_in">print</span>(cipher_text_b)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(cipher_text_b))</span><br><span class="line"><span class="comment"># 转换为字符串以显示在编辑框</span></span><br><span class="line">cipher_text = cipher_text_b.decode(errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取密文字符串</span></span><br><span class="line"></span><br><span class="line">cipher_text_b = cipher_text.encode()</span><br><span class="line">plain_text_b = des.decrypt(cipher_text_b)</span><br><span class="line"><span class="built_in">print</span>(plain_text_b)</span><br><span class="line"><span class="built_in">print</span>(plain_text_b.decode())</span><br></pre></td></tr></table></figure><p>输出就会变成下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\x80$-\xd1\x07\x1e=k+\xac\x00\xb4\xbb\x19\xa6\xf6\xd7\x8f\x91\x86\xa0\x9e.\x05&#x27;</span><br><span class="line">24</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-2-63175c965c0a&gt; in &lt;module&gt;</span><br><span class="line">     16</span><br><span class="line">     17 cipher_text_b = cipher_text.encode()</span><br><span class="line">---&gt; 18 plain_text_b = des.decrypt(cipher_text_b)</span><br><span class="line">     19 print(plain_text_b)</span><br><span class="line">     20 print(plain_text_b.decode())</span><br><span class="line"></span><br><span class="line">c:\python38\lib\site-packages\pyDes.py in decrypt(self, data, pad, padmode)</span><br><span class="line">    677                 if pad is not None:</span><br><span class="line">    678                         pad = self._guardAgainstUnicode(pad)</span><br><span class="line">--&gt; 679                 data = self.crypt(data, des.DECRYPT)</span><br><span class="line">    680                 return self._unpadData(data, pad, padmode)</span><br><span class="line">    681</span><br><span class="line"></span><br><span class="line">c:\python38\lib\site-packages\pyDes.py in crypt(self, data, crypt_type)</span><br><span class="line">    570                 if len(data) % self.block_size != 0:</span><br><span class="line">    571                         if crypt_type == des.DECRYPT: # Decryption must work on 8 byte blocks</span><br><span class="line">--&gt; 572                                 raise ValueError(&quot;Invalid data length, data must be a multiple of &quot; + str(self.block_size) + &quot; bytes\n.&quot;)</span><br><span class="line">    573                         if not self.getPadding():</span><br><span class="line">    574                                 raise ValueError(&quot;Invalid data length, data must be a multiple of &quot; + str(self.block_size) + &quot; bytes\n. Try setting the optional padding character&quot;)</span><br><span class="line"></span><br><span class="line">ValueError: Invalid data length, data must be a multiple of 8 bytes</span><br><span class="line">.</span><br></pre></td></tr></table></figure><p>转换是成功了，但是解密时失败了，因为<strong>在转码时忽略了一些字节，导致长度对不上了。</strong></p><p>我在写代码的时候遇到的就是这个问题，当局者迷，想不到是哪里出现了错误，单步调试发现是中间出现了“损耗”。在写本文总结的时候，才发现问题所在。可见总结复盘是多么重要，不写总结的话，这段调试时间就白费了。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>换一种方式将字节串转换为字符串，也就是不让字节串转换为每个字节对应的字符组成的字符串，而是直接将其编码显示出来，比如显示成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\xe4\xbd\xa0\xe5\xa5\xbd\xe4\xb8\x96\xe7\x95\x8chelloworld&#x27;</span><br></pre></td></tr></table></figure><p>而不是将其直接显示成对应字符的形式，即 print 函数的显示效果。</p><p>不过这种方式仍然不能解决从字符串转换为字节串的问题。</p><p>最后在一个博客（<a href="https://blog.csdn.net/whatday/article/details/97423901">传送门</a>）里面找到了比较好用的转换函数，也比较容易看懂：</p><p>十六进制字符串转 bytes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">hex string to bytes</span></span><br><span class="line"><span class="string">eg:</span></span><br><span class="line"><span class="string">&#x27;01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF&#x27;</span></span><br><span class="line"><span class="string">b&#x27;\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hexStringTobytes</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">str</span>.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>.fromhex(<span class="built_in">str</span>)</span><br><span class="line">    <span class="comment"># return a2b_hex(str)</span></span><br></pre></td></tr></table></figure><p>bytes 转十六进制字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">bytes to hex string</span></span><br><span class="line"><span class="string">eg:</span></span><br><span class="line"><span class="string">b&#x27;\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef&#x27;</span></span><br><span class="line"><span class="string">&#x27;01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytesToHexString</span>(<span class="params">bs</span>):</span><br><span class="line">    <span class="comment"># hex_str = &#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># for item in bs:</span></span><br><span class="line">    <span class="comment">#     hex_str += str(hex(item))[2:].zfill(2).upper() + &quot; &quot;</span></span><br><span class="line">    <span class="comment"># return hex_str</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;%02X &#x27;</span> % b <span class="keyword">for</span> b <span class="keyword">in</span> bs])</span><br></pre></td></tr></table></figure><p>这个博主采用了空格分隔的十六进制字符串，非常好地解决了我的需求，转换时不会损耗，显示在编辑框时也不会乱码。</p><h2 id="解密后填充字符仍然存在"><a href="#解密后填充字符仍然存在" class="headerlink" title="解密后填充字符仍然存在"></a>解密后填充字符仍然存在</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"></span><br><span class="line">plain_text = <span class="string">&#x27;你好世界helloworld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;Ts%uN#w4&#x27;</span>  <span class="comment"># 密钥需要8个字符，即64bit</span></span><br><span class="line">des = pyDes.des(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取明文字符串plain_text</span></span><br><span class="line">plain_text_b = plain_text.encode()</span><br><span class="line">cipher_text_b = des.encrypt(plain_text_b,padmode=pyDes.PAD_PKCS5)</span><br><span class="line"><span class="comment"># 转换为字符串以显示在编辑框</span></span><br><span class="line">cipher_text = bytesToHexString(cipher_text_b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取密文字符串</span></span><br><span class="line"></span><br><span class="line">cipher_text_b = hexStringTobytes(cipher_text)</span><br><span class="line">plain_text_b = des.decrypt(cipher_text_b)</span><br><span class="line"><span class="built_in">print</span>(plain_text_b.decode())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你好世界helloworld</span><br><span class="line">你好世界helloworld</span><br></pre></td></tr></table></figure><p>在解密后的输出结果中会出现几个乱码，后面这几个乱码是因为加密时进行了填充，而解密时没有去掉。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>我采用的是将填充字符换成空格，然后在显示的时候用 strip 去掉空白。但是刚刚发现还有更好的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyDes</span><br><span class="line"></span><br><span class="line">plain_text = <span class="string">&#x27;你好世界helloworld&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(plain_text)</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;Ts%uN#w4&#x27;</span>  <span class="comment"># 密钥需要8个字符，即64bit</span></span><br><span class="line">des = pyDes.des(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取明文字符串plain_text</span></span><br><span class="line">plain_text_b = plain_text.encode()</span><br><span class="line">cipher_text_b = des.encrypt(plain_text_b,padmode=pyDes.PAD_PKCS5)</span><br><span class="line"><span class="comment"># 转换为字符串以显示在编辑框</span></span><br><span class="line">cipher_text = bytesToHexString(cipher_text_b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从编辑框获取密文字符串</span></span><br><span class="line"></span><br><span class="line">cipher_text_b = hexStringTobytes(cipher_text)</span><br><span class="line">plain_text_b = des.decrypt(cipher_text_b,padmode=pyDes.PAD_PKCS5) <span class="comment"># 这里也添加填充选项</span></span><br><span class="line"><span class="built_in">print</span>(plain_text_b.decode())</span><br></pre></td></tr></table></figure><p>直接在解密时也添加相同的填充选项就行了。</p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h2><p>启动一个窗口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p>创建标签框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">des_LF = tk.LabelFrame(<span class="variable language_">self</span>.root, text=<span class="string">&#x27;DES&#x27;</span>)</span><br><span class="line">des_LF.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>创建标签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tk.Label(des_LF, text=<span class="string">&#x27;明文&#x27;</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>创建编辑框并与变量双向绑定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plain_text_var = tk.StringVar()  <span class="comment"># 明文</span></span><br><span class="line">tk.Entry(des_LF,textvariable=<span class="variable language_">self</span>.plain_text_var).grid(row=<span class="number">0</span>,column=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>创建按钮并与响应函数绑定，其中用到了 lambda 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tk.Button(des_LF,text=<span class="string">&#x27;DES加密&#x27;</span>,</span><br><span class="line">                  command=<span class="keyword">lambda</span>:<span class="variable language_">self</span>.encrypt(<span class="variable language_">self</span>.key_var.get(),isShow=<span class="literal">True</span>)</span><br><span class="line">                  ).grid(row=<span class="number">0</span>,column=<span class="number">2</span>,stick=tk.W+tk.E)</span><br></pre></td></tr></table></figure><p>显示对话框：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter.messagebox <span class="keyword">as</span> tkm</span><br><span class="line">tkm.showwarning(<span class="string">&#x27;注意&#x27;</span>,<span class="string">&#x27;密钥长度必须为8个字符，即64bit&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自我管理系统】归档文件</title>
      <link href="/posts/self-management-archive/"/>
      <url>/posts/self-management-archive/</url>
      
        <content type="html"><![CDATA[<p>记录 2020 年第 12 周的文件归档</p><span id="more"></span><p><img src="https://i.loli.net/2020/04/05/kYWwGKu5RSsItbJ.jpg" alt="我现在的桌面"></p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>3 月 13 日也就是上周五晚上，我重装了一次系统，将电脑上存的各种乱七八糟的资料备份到移动硬盘后清空所有磁盘，借此机会整理一下混乱的电脑。</p><p>在这次之前，我没有系统性地整理过整个电脑的文件，偶尔整理也只是对部分文件进行分类，并没有制定出文件产生和保存的合适规则（规则还是有的，就是比较混乱）</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>首先，我无法抽出一整天的时间专门用于整理电脑文件，从以前的经验来看这样效果也不好，不能一次性将所有事情都想到，于是我将整理时间设置为一周。</p><p>我现在的磁盘分区状况：系统 C 盘，软件 D 盘，文件 F 盘。C、D 盘都在固态硬盘上以加快速度，F 盘在 1T 的机械硬盘上面。</p><p>按照我以前的做法，首先 F 盘作为我的资料盘，所有的个人资料都放在这个盘中，包括“视频”、“文档”等用户文件夹，这在上周五装系统手动备份文件时带来了很多好处，我只需要将 F 盘中的东西全部带走就好，不需要理会其他盘。这次也是这么做。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>由于整理工作需要持续几天，所以我在 F 盘下面建了一个文件夹叫做“Inbox”，用于存放所有我需要整理的文件，第一天的状况大致如下：</p><p>F：</p><ul><li>Inbox<ul><li>我所有的文件夹，由于我也不记得，就不列出来了</li></ul></li></ul><h2 id="整理-Archive-文件夹"><a href="#整理-Archive-文件夹" class="headerlink" title="整理 Archive 文件夹"></a>整理 Archive 文件夹</h2><p>首先需要整理我的 Archive（归档）文件夹，这个文件夹在重装之前是用于存放我所有以及完成的项目文件的，大致分为学业相关以及编程相关两大类，下面细分为很多小类，很多重叠，举例如下：</p><ul><li>Archive<ul><li>college_archive<ul><li>各种比赛</li><li>专业课<ul><li>xx 课<ul><li>xx 课课设 190627.zip</li><li>xx 课实验 190514.zip</li></ul></li><li>xy 课</li></ul></li><li>成就</li><li>杂项</li></ul></li><li>develop_archive<ul><li>cpp</li><li>java</li><li>python</li><li>asm</li><li>web</li><li>vb</li></ul></li></ul></li></ul><p>按照以前的规则，其中每个项目的相关文件都被打包成压缩文件，并起名为“科目+名称+归档日期”，这为我进一步进行整理归类提供了便利。</p><p>由于存储这些项目文件就是为了以后在想找的时候方便查找，我打算不再按照内容进行细分，而是主要按照时间顺序来进行分类。</p><p>划分到月太细，于是按照年份来划分。首先建立一个文件夹名为“0000”，充当一个“Inbox”的作用，将所有文件抽出来放进去。随后建立“2017”、“2018”、“2019”、“2020”四个文件夹，按照文件名中的归档日期归类。</p><p>有一些项目文件是同一个科目的，比如 java 面向对象实验和 java 面向对象课设，那么就在年份文件夹中建立一个新的科目文件夹存放同类文件。一个科目只有一个文件那种就放在年份文件夹根目录下不用动。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200322204635.png" alt="2019年文件夹示例"></p><p>这样分类好了之后，和以前一样，用坚果云将 Archive 设置为同步文件夹，由于只是移动文件的位置，没有消耗上传流量。</p><p>需要查找某个文件时，使用 Listary 进行查找即可，或者手动进入文件夹查找，由于是按照时间分类，不用担心按照内容分类时找不到具体分类，节约了归档时间。</p><h2 id="删除-Develop-文件夹"><a href="#删除-Develop-文件夹" class="headerlink" title="删除 Develop 文件夹"></a>删除 Develop 文件夹</h2><p>重装之前，我在 F 盘下设立了一个名为”Develop”的文件夹，用于存放所有编程项目，按照编程语言来分类，在彻底不更新编程项目后，将其打包并放入 Archive 文件夹。</p><p>当时分类也很细，大致是这样的：</p><ul><li>Develop<ul><li>cpp_develop<ul><li>cpp_test：临时文件夹，里面的文件都可以删</li><li>cpp_example:用于学习某个知识点的，别人的项目</li><li>cpp_exercise:用于练习的项目</li><li>cpp_project：课设、实验啥的都放在这里</li><li>cpp_archive.lnk：指向 Archive 文件夹对应文件夹的快捷方式（建立后基本没用过）</li></ul></li><li>java_develop</li><li>asm_develop</li><li>web_develop</li><li>vb_develop</li><li>python_develop</li><li>test</li></ul></li></ul><p>其他的文件夹里面都是类似的情况，大量冗余的文件夹，很少用到。</p><p>我这样做了很久之后，发现这种做法会导致 Develop 文件夹中的项目文件夹不断累积（当时懒得归档后面忘记归档），而且要找到自己正在写的项目非常麻烦。一个治标不治本的方法是，建立一个 Buffer 文件夹，用于存放正在写的项目的文件夹的快捷方式。</p><p>这次干脆取消这个 Develop 文件夹，将正在写的项目都放在 Buffer 文件夹中，以及不再写的项目写完即打包归档，如果累积着不归档，Buffer 将会越来越满，使得我不会忘记归档。而且不按照编程语言分类，免得出现大量冗余文件夹，不便于管理。</p><h2 id="整理-Resource-文件夹"><a href="#整理-Resource-文件夹" class="headerlink" title="整理 Resource 文件夹"></a>整理 Resource 文件夹</h2><p>Resource 文件夹是我的资源文件夹，里面放的都是囤积的各种学习资料，比如 c#电子书、日语视频、软件安装包等（基本没看过，但是好歹是以前得到的资源，删了浪费啊）</p><p>按照用途分为几类：</p><ul><li>软件安装包<ul><li>便携安装包：可以装在 U 盘里面的免安装轻便实用小工具，比如 everthing</li><li>其他安装包</li></ul></li><li>图标包</li><li>囤积的学习资源：其他所有的资源，懒得分类了，分了也没用，反正只是囤着</li></ul><h2 id="整理-bilibili-文件夹"><a href="#整理-bilibili-文件夹" class="headerlink" title="整理 bilibili 文件夹"></a>整理 bilibili 文件夹</h2><p>作为一名 UP 主，自然有一个存放自己成品视频的文件夹。</p><p>有了 Archive 文件夹的经验，也是取消了按照内容分类，改为按照年份来分类。</p><p>整理视频的时候挺感慨的，居然已经录了那么多视频了，还是在已经丢失了很多视频原文件的情况下。</p><p>由于视频一般都是几百 M 几百 M 的，自然全部需要压缩。我用到的是小丸工具箱，这东西太好用了，压缩率贼高，1G 的东西能给你压成几十 M，而且画质没啥影响。</p><p>压缩后仍然很大，不能放进 Archive 文件夹用坚果云来同步，坚果云每个月的上传流量是 1G。这个时候就可以用到百度云盘了。</p><p>百度云盘同步功能要会员了，所以就把 2018 年和 2019 年的文件夹直接上传上去，反正也不会往里面加文件了。</p><h2 id="整理私人文件"><a href="#整理私人文件" class="headerlink" title="整理私人文件"></a>整理私人文件</h2><p>还有一些私人文件，比如日记、视频、照片、自己中二时期写的小说等，具有一定的隐私性。上一次整理的时候我一直没有好好地分类，只是丢在一个名为”私人文件夹”的文件夹内，一直保存在本地。</p><p>我一直不敢将这些隐私的东西放到云端，甚至买了一个移动硬盘专门备份。</p><p>这次重装后，意识到这些东西必须备份到云端，否则不安全。并且对于坚果云还是比较信任的，所有将私人文件夹同步到坚果云。</p><p>当然，不是直接备份。而是重新开始使用 VNote（当初开始用 Typora 之后就因为颜值问题换了它，但是后来发现还是 VNote 好用）来管理我的日记。并将文件同步到坚果云。绝佳配合。</p><p>不过视频、照片等还没处理好，不太信任百度云。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在我的磁盘结构大致如下：C 盘系统盘，D 盘软件盘，F 盘为我的资料盘和工作盘。</p><p>F 盘里面有如下几个文件夹：</p><ul><li>Archive：按照年份分类的已经完成的项目的归档文件。最为重要，因为都是我努力的成果。坚果云同步。</li><li>Inbox：收集箱，用 DropIt 快速收集文件到 Inbox 中，有空的时候再将其处理分类，目前通过腾讯桌面管家独立版将其从 F 盘根目录映射到桌面，以便快速收集以及处理。最不重要，应当保持本文件夹经常为空。</li><li>Buffer：存放正在进行的项目的相关文件，完成后立即进行打包归档，或者放入 Inbox 稍后处理。中等重要。</li><li>Blog：存放 hexo 博客源代码，放在 F 盘根目录方便快速查找。不太重要，且丢失后可找回，在 github 私有库托管</li><li>MyNotebook：VNote 笔记本文件夹。重要，里面有日记，可以删除但是不能给别人看到。</li><li>UserFolder：用户文件夹，例如：视频、音乐、下载、图片、文档等系统用户文件夹被我移动到 F 盘下。Bilibili 文件夹放在视频文件夹中</li><li>Resource：资源文件夹，我囤积的资源。不太重要，因为不咋用。</li><li>System backup：系统备份</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记第二次重装系统</title>
      <link href="/posts/Reinstall_win10/"/>
      <url>/posts/Reinstall_win10/</url>
      
        <content type="html"><![CDATA[<p>折腾了三个多小时终于把 win10 重装好了，这是我第二次自己装系统。</p><p>本文记录了我这次重装系统的过程，以及一些从中学到的新知识，供参考。</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.bilibili.com/video/av77344372">【装机教程】超详细 WIN10 系统安装教程，官方 ISO 直装与 PE 两种方法</a></li><li><a href="https://github.com/chennnnny/good-use-software/wiki/">定制 chocolatey 安装路径</a></li></ul><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>第一次重装用的是一键装机的软件做的 U 盘，捆绑了一大堆东西，而且装完还是什么都不明白，啥也没学到，装的还是阉割版的企业版（不确定是不是，因为我现在装好专业版后发现功能似乎比原来多）</p><p>这一次重装的起因是：我弟将家里的台式机从 win7 升级到 win10。他在 b 站找到了一个讲得非常详细的<a href="https://www.bilibili.com/video/av77344372">装系统教程</a>，并且成功自己装好了系统。</p><p>我也看了一下那个教程，光是看完视频我就觉得收获颇多，比第一次自己动手装系统学到的还多。学到了 pe 是什么，以及装系统的一些原理。</p><p>当时我就给自己以前买的 16gU 盘里面装了一个 pe，并尝试从 U 盘启动以打开 pe。不同于第一次，这一次我对里面的东西都有了一些了解，不是完全抓瞎，开始研究里面每个东西是干啥的。非常有成就感。</p><p>玩了一下 pe 之后就退了回到 win10，虽然也有安装包，不过我还是不敢轻易装，还是怕自己吧电脑折腾坏了，等到下次做好准备再说。</p><p>这周五我觉得就是合适的时机了，晚上九点钟将系统先用 dism++备份好，在幕布（可以在网页端登录）列好需要重新安装的软件，准备开始了。</p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>在操作开始之前，我先总结一下有关的概念</p><h2 id="什么是-PE-系统"><a href="#什么是-PE-系统" class="headerlink" title="什么是 PE 系统"></a>什么是 PE 系统</h2><p>下面来自百度百科：</p><blockquote><p>Windows Preinstallation Environment（Windows PE），Windows 预安装环境，是带有有限服务的最小 Win32 子系统，基于以保护模式运行的 Windows XP Professional 及以上内核。它包括运行 Windows 安装程序及脚本、连接网络共享、自动化基本过程以及执行硬件验证所需的最小功能。</p></blockquote><p>简单来说，PE 就是一个小型的 windows 系统，去掉了一切不必要的功能，将体积缩小到能够装进 U 盘里面运行（当然并不是在 U 盘里面直接运行）。</p><p>电脑可以选择从哪个磁盘来启动，如果你插上了 U 盘，也可以选择从 U 盘启动，从而启动 U 盘中存放的 PE 系统。</p><h2 id="两种安装方式"><a href="#两种安装方式" class="headerlink" title="两种安装方式"></a>两种安装方式</h2><p>如同参考视频里面说的，你可以用官方镜像来安装，也可以用 PE 系统来辅助安装。</p><p>第一种方法就是到微软官网去，用官网的启动 U 盘制作器把你的 U 盘制作成启动 U 盘，这样你从 U 盘启动电脑之后，就会自动进入安装程序。</p><p>第二种方法是下载系统的 ISO 镜像文件（其实就是一个比较特别的压缩包），并在 U 盘里面安装 PE 系统，把 ISO 文件放进 U 盘。从 U 盘启动时，首先进入 PE 系统，在这里可以对现有的磁盘进行操作，你可以用 PE 里面自带的分区工具来提前分区，然后装载放在 U 盘的 ISO 文件，进行安装。</p><p>详细的内容看参考视频，UP 主讲得非常非常好！</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>开始安装之后把系统盘清了准备安装结果出现错误，我开始慌了。</p><p>退出安装回到 pe 桌面，在家里找出以前买的移动硬盘，把文件啥的给拷进去（之前认为装系统只清系统盘就够了，但现在的情况似乎要全部清掉，不管怎样先备份），同时使用 pe 里面的 dism++来尝试恢复之前的备份。</p><p>使用 PE 系统安装的好处就体现出来了，如果我用的是第一种方法，那么一旦主系统被删了，那么我就没办法补救了，连进去拷贝数据都做不到。</p><p>也许是我使用方式不对，系统并没有恢复，拔掉 U 盘后无法进入系统。那就只好继续装了。</p><p>由于我以及备份好了数据，所以将分区全部清掉，重新分区。</p><p>我现在有一块 1T 的机械硬盘和自己加装的 256g 的固态硬盘。</p><p>固态硬盘两个区：</p><ul><li>系统 C 盘</li><li>加速区 S 盘</li></ul><p>机械硬盘四个区</p><ul><li>虚拟机 Z 盘（未装 SSD 前的 C 盘，后来被我用来放 virtualbox 的虚拟磁盘）</li><li>文件 F 盘</li><li>软件 D 盘</li><li>娱乐 E 盘。</li></ul><p>分区确实挺多的，足足六个分区，而其中还有功能重复的盘。根据我现在的使用情况，我分成了三个分区：系统 C 盘，软件 D 盘，文件 F 盘。</p><p>F 盘是我之前最常用的盘，正因为之前把所有资料都放在这里，备份起来非常方便。</p><p>之后就很顺利的照着视频完成了安装。</p><h2 id="chocolatey-重装软件"><a href="#chocolatey-重装软件" class="headerlink" title="chocolatey 重装软件"></a>chocolatey 重装软件</h2><p>重装软件我使用的是 chocolatey，这个是我最近找到的一个工具，它是一个 windows 包管理工具，类似于 Linux 上面的 apt，不用关心它从哪里下载，安装到哪里，有哪些依赖，一个命令搞定安装。</p><p>如果你不想让它默认安装在 C 盘，那么你得先在环境变量里面添加一个变量<code>ChocolateyInstall</code>，值为你指定的它的安装路径。</p><p>如果你不想让它将下载的软件放在 C 盘，那么你也得添加一个环境变量<code>ChocolateyToolsLocation</code>，值为你指定的工具安装路径。</p><p>然后去它的<a href="https://www.chocolatey.org/install">官网</a>下载它。（如果先安装再修改环境变量会出现一系列问题，别问我怎么知道的）</p><p>下载它的方式是：复制官网给出的下载命令，以管理员身份打开 powershell，运行这条安装命令，它就会自动安装到你之前指定的位置。</p><p>在 cmd 或者 powershell 输入以下命令以确认安装成功：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$choco</span> -?</span><br></pre></td></tr></table></figure><p>常用指令：</p><p>列出&#x2F;查询软件包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$choco</span> list 软件包名</span><br><span class="line"><span class="variable">$choco</span> search 软件包名</span><br></pre></td></tr></table></figure><p>查询本地已安装的软件包（-lo 就是 local 的缩写）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$choco</span> list <span class="literal">-lo</span></span><br></pre></td></tr></table></figure><p>安装某个软件包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$choco</span> install 软件包名</span><br></pre></td></tr></table></figure><p>卸载某个软件包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$choco</span> uninstall 软件包名</span><br></pre></td></tr></table></figure><p>升级某个软件</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$choco</span> upgrade 软件包名</span><br></pre></td></tr></table></figure><p>更多的命令可以去官网的<a href="https://www.chocolatey.org/docs">文档</a>查看，具体有哪些包可以去<a href="https://www.chocolatey.org/packages">这里</a>查看</p><h3 id="我用-chocolatey-安装的软件"><a href="#我用-chocolatey-安装的软件" class="headerlink" title="我用 chocolatey 安装的软件"></a>我用 chocolatey 安装的软件</h3><p>比如我要安装 chrome，可以用这个命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$choco</span> install googlechrome</span><br></pre></td></tr></table></figure><p>下面列出我下载的软件：</p><ul><li><p>chrome：谷歌浏览器</p></li><li><p>git</p><ul><li>choco install git.install</li></ul></li><li><p>cmder：很好用的终端，可以代替系统自带的 cmd 和 powershell 来用</p><ul><li>choco install cmder</li></ul></li><li><p>potplayer：很好用的视频播放器</p><ul><li>choco install potplayer</li></ul></li><li><p>wechat：微信</p><ul><li>choco install wechat</li></ul></li><li><p>github-desktop</p><ul><li>choco install github-desktop</li></ul></li><li><p>vscode</p><ul><li>choco install vscode</li></ul></li><li><p>eclipse</p><ul><li>choco install eclipse</li></ul></li><li><p>jdk8</p><ul><li>choco install jdk8</li></ul></li><li><p>python</p><ul><li>choco install python</li></ul></li><li><p>steam</p></li><li><p>wps-office-free</p><p>英文版的</p><ul><li>由于无法使用之前的账号登录就换成中国版了</li></ul></li><li><p>winrar</p></li><li><p>putty</p></li><li><p>anki</p></li><li><p>obs</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业总结】声卡数据采集及处理</title>
      <link href="/posts/sound-card-data-acquisition/"/>
      <url>/posts/sound-card-data-acquisition/</url>
      
        <content type="html"><![CDATA[<p>这学期开了网络化测控课，第二周开头就布置了一个相当有难度的作业：</p><p>以小组为单位，写一个声卡数据采集程序，功能要求：</p><ol><li>以曲线形式显示波形；</li><li>利用数字滤波器对数据进行平滑滤波；</li><li>对声音信号进行 FFT 变化，计算信号的主频。</li></ol><p>对于缺乏很多前置知识的我们专业的学生来说，这确实非常有难度。</p><p>到编写本文的时候，已经进行了三天，基本功能编写完成，还需要进一步优化，<del>为了能够偷懒，</del>为了让队员能够更加了解本次项目，以及我自己能够从中学到东西，撰写本文如下。</p><p>本文并不专业，作者本身不是控制专业，所以出现错误在所难免，<strong>本文不是教程，仅仅是一次作业的记录复盘，不能保证正确性。</strong></p><p><a href="https://gitee.com/ChangingSelf/sound-card-data-acquisition">码云仓库开源链接</a></p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://shanewfx.github.io/blog/2013/08/14/caprure-audio-on-windows/">Windows 上的音频采集技术</a>：采集过程整体流程说明</li><li><a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/wasapi">About WASAPI</a>：音频 API 官方文档</li><li><a href="https://blog.csdn.net/FunnyWhiteCat/article/details/88676119">使用 WASAPI 捕获声卡音频</a>：对官方文档示例代码的改写</li><li><a href="https://www.jianshu.com/p/968f684ecd83">WASAPI 01 采集默认设备的音频</a>：对 API 分段解析的一篇博文</li><li><a href="https://www.bilibili.com/video/av91971619">如何对时域声音信号进行 FFT 变换</a>：一个 B 站的视频，蛮不错的，比较清晰，不过没讲 FFT 原理，我从中知道了 FFT 的输入输出分别应该是什么。</li><li><a href="https://www.bilibili.com/video/av45626580/">【算法讲堂】【电子科技大学】【ACM】快速傅里叶变换（FFT）</a>：也是 B 站视频，代码主要参考的是这个，不过是递归版本的。但是好理解</li><li><a href="https://blog.csdn.net/enjoy_pascal/article/details/81478582">简单易懂的 FFT</a></li><li><a href="https://blog.csdn.net/u011327754/article/details/80001123">【信号处理】信号处理中的 FFT 后的意义及常用处理方法</a></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>还是得写啊，我先确认一下小组成员的配置。</p><p>小组总共四个人，<a href="https://github.com/ChangingSelf">我</a>、<a href="https://github.com/EndlessPeak">leesin</a>、<a href="https://github.com/MikoSamey">咸鱼米</a>、<a href="https://gitee.com/jane_white">简白</a>。</p><p>我只和咸鱼米一起写过代码，大致了解她的水平。</p><p>预估编程能力：我 &gt; leesin &gt; 咸鱼米 &gt; 简白；</p><p>对 git 了解程度： 我 ≈ leesin &gt; 咸鱼米 &gt; 简白；</p><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>简白没有带电脑，无法参与编程；</p><p>咸鱼米的电脑非常卡顿，存储空间也非常小，上学期写课设的时候，她甚至是把 eclipse 放在 U 盘里面打开的，不指望她能用 vs。</p><p>leesin 的电脑应该和我相当，目前没有出现过啥问题。</p><p>我的电脑以及网络应该是小组里面最好的，游戏本外加非常快的网络，看网课从来只有老师那边卡（说起这个就想起网络测控老师那边卡成壁纸的网速）</p><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><p>首先应该会用到 windows 的 API，用 C++比较好，组员们最熟悉的也是它（大概吧），而且课设是做个小车，曾经接触过单片机编程，知道是需要用 C 来编程的，java、python 啥的别想用，所以最终选了 C++。</p><p>这次除了这上面的作业外，还有一个略简单的作业，PID 控制程序，这个就用 VC++6.0 来写了，照顾一下没有 vs 的咸鱼米，正好我也在学校机房写习惯了它。</p><p>但是写完 PID 之后，发现声卡数据采集程序要是拿 VC++6.0 来写，未知原因跑不通，加上调试起来确实没有 vs 方便，就决定这个项目还是用 vs 吧。</p><p>IDE 决定是 vs，接着是协作方式的问题，果断 git，平台的话，还是用国内的码云吧，毕竟要考虑网速问题。</p><p>在码云上建立了私有仓库，用 master-develop 分支结构。</p><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><h2 id="周二-2020-03-03"><a href="#周二-2020-03-03" class="headerlink" title="周二-2020-03-03"></a>周二-2020-03-03</h2><p>初步了解组员情况，分析题目要求。</p><p>在码云建立私有库，并邀请组员加入。PID 项目初始化。</p><h2 id="周三-2020-03-04"><a href="#周三-2020-03-04" class="headerlink" title="周三-2020-03-04"></a>周三-2020-03-04</h2><p>了解了一下 PID 算法，然后交给 leesin 和咸鱼米去整了。</p><p>真正的难点在于声卡数据采集和处理这个项目。我们都对此非常不了解。</p><h3 id="声卡数据采集"><a href="#声卡数据采集" class="headerlink" title="声卡数据采集"></a>声卡数据采集</h3><p>首先，需要采集声音信息。</p><p>该如何采集？我当时想到的是，应该是有 API 可以调用的，但是并没有查到那种讲解 API 的博客，能找到的只有官方文档：<a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/wasapi">About WASAPI</a>。</p><p>在本次项目之前，我是不太喜欢读文档的，因为有很多讲解得很详细的博客，没理由去自己啃文档啊，而且一般那种时候我都是处于课设周，需要查询大量资料，没有时间去看英文文档，除非遇到看博客解决不了的问题。</p><p>这次只能看了，当然，还是得配合翻译插件（chrome 刚装彩云小译没几天就用上了，中英对照效果还不错）。</p><blockquote><p>The Windows Audio Session API (WASAPI) enables client applications to manage the flow of audio data between the application and an <a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/audio-endpoint-devices">audio endpoint device</a>.</p><p>Windows 音频会话 API (WASAPI)使客户端应用程序能够管理应用程序和音频端点设备之间的音频数据流。</p><p>Header files Audioclient.h and Audiopolicy.h define the WASAPI interfaces.</p><p>头文件 Audioclient.h 和 audiopolis. h 定义了 WASAPI 接口。</p></blockquote><p>懂了，想用这个 API 得先包含两个头文件，<code>Audioclient.h</code>和<code>Audiopolicy.h</code>，不过在 vc++6.0 我编译不了，说没有这俩文件，但是 vs 可以，所以后来统一用了 vs。</p><p>接着看后面的说明，照着做但是不行。</p><p>比如，让我调用<code>IMMDevice::Activate</code>这个方法，写上去却找不到这个方法，说是<code>::</code>前面得是命名空间或者类。后来折腾了很久才发现，原来<code>IMMDevice</code>不是命名空间而是类名啊！</p><p>然而我还是不太清楚如何弄出来它说的那些客户端，各种参数太多了，不知道传啥。好在后面终于找到了一些有用的资料。</p><p>对于采集数据的流程和原理不是很明白，但是通过读文档以及后来找到的一些博客互相配合着理解，总算对整个流程有了一个大致的了解。</p><p>流程分为以下几步（<a href="http://shanewfx.github.io/blog/2013/08/14/caprure-audio-on-windows/">Windows 上的音频采集技术</a>：采集过程整体流程说明）：</p><blockquote><ul><li>创建多媒体设备枚举器(IMMDeviceEnumerator)</li><li>通过多媒体设备枚举器获取声卡接口(IMMDevice)</li><li>通过声卡接口获取声卡客户端接口(IAudioClient)</li><li>通过声卡客户端接口(IAudioClient)可获取声卡输出的音频参数、初始化声卡、获取声卡输出缓冲区的大小、开启&#x2F;停止对声卡输出的采集</li><li>通过声卡采集客户端接口(IAudioCaptureClient)可获取采集的声卡输出数据，并对内部缓冲区进行控制</li></ul></blockquote><hr><p>由于用到的函数太多了，就只给出函数官方文档链接，以及在代码中做出简单的注释。注释内容大部分为机翻。</p><p>为了清晰，没有加入错误处理的代码。</p><p>下面的示例代码解析自官方的示例程序<a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/capturing-a-stream">Capturing a Stream</a>，会有一些改动。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>最开始，得使用<code>CoInitialize</code>函数来在当前线程上初始化 COM 库（<a href="https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-coinitialize">CoInitialize 函数</a>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CoInitialize</span>(<span class="literal">NULL</span>);<span class="comment">//初始化com库</span></span><br></pre></td></tr></table></figure><p>采集结束后，记得关闭</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CoUninitialize</span>();</span><br></pre></td></tr></table></figure><h4 id="创建多媒体设备枚举器"><a href="#创建多媒体设备枚举器" class="headerlink" title="创建多媒体设备枚举器"></a>创建多媒体设备枚举器</h4><p>定义一些常量</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> CLSID CLSID_MMDeviceEnumerator = __uuidof(MMDeviceEnumerator);</span><br><span class="line"><span class="type">const</span> IID IID_IMMDeviceEnumerator = __uuidof(IMMDeviceEnumerator);</span><br><span class="line"><span class="type">const</span> IID IID_IAudioClient = __uuidof(IAudioClient);</span><br><span class="line"><span class="type">const</span> IID IID_IAudioCaptureClient = __uuidof(IAudioCaptureClient);</span><br></pre></td></tr></table></figure><p>这些常量是这些类的 UUID，总之就是用来标识这些类的。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance">Cocreateinstance 函数</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建多媒体设备枚举器</span></span><br><span class="line">IMMDeviceEnumerator *pEnumerator = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">CoCreateInstance</span>(</span><br><span class="line">CLSID_MMDeviceEnumerator, <span class="comment">//创建与指定 CLSID (Class ID，即类标识符)关联的类的单个未初始化对象。</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//如果为 NULL，则表示该对象不是作为聚合的一部分创建的</span></span><br><span class="line">CLSCTX_ALL,<span class="comment">//管理新创建对象的代码将在其中运行的上下文。 这些值取自枚举 CLSCTX</span></span><br><span class="line">        IID_IMMDeviceEnumerator,<span class="comment">//对用于与对象通信的接口标识符的引用</span></span><br><span class="line">(<span class="type">void</span>**)&amp;pEnumerator);<span class="comment">//接收 riid 请求的接口指针的指针变量的地址。 成功返回后，* ppv 包含请求的接口指针。 失败时，* ppv 包含 NULL。</span></span><br></pre></td></tr></table></figure><h4 id="获取声卡接口"><a href="#获取声卡接口" class="headerlink" title="获取声卡接口"></a>获取声卡接口</h4><p>使用刚刚获取的枚举器来获取默认音频端点设备。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/mmdeviceapi/nf-mmdeviceapi-immdeviceenumerator-getdefaultaudioendpoint">IMMDeviceEnumerator::GetDefaultAudioEndpoint 方法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取声卡接口</span></span><br><span class="line">IMMDevice *pDevice = <span class="literal">NULL</span>;<span class="comment">//声卡接口</span></span><br><span class="line">pEnumerator-&gt;<span class="built_in">GetDefaultAudioEndpoint</span>(</span><br><span class="line">eCapture,<span class="comment">//端点设备的数据流方向。 调用方应该将此参数设置为以下两个 EDataFlow 枚举值之一:eRender,eCapture,前者渲染，后者捕获</span></span><br><span class="line">        eConsole,<span class="comment">//端点设备的角色。 调用者应该将这个参数设置为以下 ERole 枚举值之一:eConsole,eMultimedia,eCommunications</span></span><br><span class="line">        &amp;pDevice);<span class="comment">//指向一个指针变量，该方法将默认音频端点设备的端点对象的 immmdevice 接口的地址写入该指针变量</span></span><br></pre></td></tr></table></figure><h4 id="设置默认音频格式"><a href="#设置默认音频格式" class="headerlink" title="设置默认音频格式"></a>设置默认音频格式</h4><p>这里用的是使用最小音频格式，也可以手动设置自己的音频格式。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/mmeapi/ns-mmeapi-waveformatex">WAVEFORMATEX 结构体</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取音频格式</span></span><br><span class="line">WAVEFORMATEX *pwfx = <span class="literal">NULL</span>;</span><br><span class="line">pAudioClient-&gt;<span class="built_in">GetMixFormat</span>(&amp;pwfx);</span><br></pre></td></tr></table></figure><h4 id="获取声卡客户端"><a href="#获取声卡客户端" class="headerlink" title="获取声卡客户端"></a>获取声卡客户端</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/mmdeviceapi/nf-mmdeviceapi-immdevice-activate">IMMDevice::Activate 方法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过声卡接口获取声卡客户端接口</span></span><br><span class="line">IAudioClient *pAudioClient = <span class="literal">NULL</span>;</span><br><span class="line">pDevice-&gt;<span class="built_in">Activate</span>(IID_IAudioClient, CLSCTX_ALL, <span class="literal">NULL</span>, (<span class="type">void</span>**)&amp;pAudioClient);</span><br></pre></td></tr></table></figure><h4 id="初始化声卡客户端"><a href="#初始化声卡客户端" class="headerlink" title="初始化声卡客户端"></a>初始化声卡客户端</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/audioclient/nf-audioclient-iaudioclient-initialize">IAudioClient::Initialize 方法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">REFERENCE_TIME hnsRequestedDuration = REFTIMES_PER_SEC; <span class="comment">//采样持续时间，单位100纳秒</span></span><br><span class="line">pAudioClient-&gt;<span class="built_in">Initialize</span>(</span><br><span class="line">AUDCLNT_SHAREMODE_SHARED,<span class="comment">//与其他设备共享音频端点设备</span></span><br><span class="line"><span class="number">0</span>,<span class="comment">//选项</span></span><br><span class="line">hnsRequestedDuration,<span class="comment">//以时间值表示的缓冲区容量</span></span><br><span class="line"><span class="number">0</span>,<span class="comment">//设备周期，共享模式下设为0</span></span><br><span class="line">pwfx,<span class="comment">//音频格式</span></span><br><span class="line"><span class="literal">NULL</span><span class="comment">//指向session的GUID的指针，设置为NULL表示打开一个新session</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><code>REFTIMES_PER_SEC</code>是一个宏，作为参考时间单位。100 纳秒 &#x3D; 1e-7 秒，即这个宏定义的值。也就是说，上面的代码是采样 1 秒的意思。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// REFERENCE_TIME time units per second and per millisecond</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REFTIMES_PER_SEC  10000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REFTIMES_PER_MILLISEC  10000</span></span><br></pre></td></tr></table></figure><h4 id="获取捕获客户端"><a href="#获取捕获客户端" class="headerlink" title="获取捕获客户端"></a>获取捕获客户端</h4><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudioclient-getservice">IAudioClient::GetService 方法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取捕获客户端</span></span><br><span class="line">IAudioCaptureClient *pCaptureClient = <span class="literal">NULL</span>;</span><br><span class="line">hr = pAudioClient-&gt;<span class="built_in">GetService</span>(</span><br><span class="line">        IID_IAudioCaptureClient, <span class="comment">//客户端接口ID</span></span><br><span class="line">        (<span class="type">void</span>**)&amp;pCaptureClient);</span><br></pre></td></tr></table></figure><h4 id="启动音频流"><a href="#启动音频流" class="headerlink" title="启动音频流"></a>启动音频流</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/audioclient/nf-audioclient-iaudioclient-start">IAudioClient::Start</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动音频流</span></span><br><span class="line">m_pAudioClient-&gt;<span class="built_in">Start</span>();</span><br></pre></td></tr></table></figure><h4 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a>采集数据</h4><p>启动音频流之后，就可以开始捕获数据了，音频流有一个缓冲区</p><p>流程如下：</p><ul><li>从缓冲区获取下一个数据包</li><li>处理数据包</li><li>释放缓冲区</li><li>获取下一个数据包大小，循环直到缓冲区为空</li></ul><p>获取数据包大小，以确定流中是否有数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UINT32 packetLength = <span class="number">0</span>;<span class="comment">//数据包长度</span></span><br><span class="line">BYTE *pData = <span class="literal">NULL</span>;<span class="comment">//数据包首地址</span></span><br><span class="line">UINT32 numFramesAvailable;<span class="comment">//数据包中可用的音频帧数</span></span><br><span class="line">DWORD flags;<span class="comment">//缓冲区状态标志</span></span><br><span class="line">vector&lt;BYTE&gt; recorder;<span class="comment">//用于存储数据</span></span><br><span class="line"></span><br><span class="line">pCaptureClient-&gt;<span class="built_in">GetNextPacketSize</span>(&amp;packetLength);<span class="comment">//获取下一个数据包的大小</span></span><br></pre></td></tr></table></figure><p>处理其中的数据。</p><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudiocaptureclient-releasebuffer">IAudioCaptureClient::ReleaseBuffer</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudiocaptureclient-getnextpacketsize">IAudioCaptureClient::GetNextPacketSize</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudiocaptureclient-getbuffer">IAudioCaptureClient::GetBuffer</a></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (packetLength != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取缓冲区中的数据</span></span><br><span class="line">pCaptureClient-&gt;<span class="built_in">GetBuffer</span>(</span><br><span class="line">&amp;pData,<span class="comment">//数据包指针变量的地址</span></span><br><span class="line">&amp;numFramesAvailable, <span class="comment">//数据包中可用的音频帧数</span></span><br><span class="line">&amp;flags, <span class="comment">//缓冲区状态标志</span></span><br><span class="line"><span class="literal">NULL</span>,</span><br><span class="line"><span class="literal">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否静音</span></span><br><span class="line"><span class="keyword">if</span> (flags &amp; AUDCLNT_BUFFERFLAGS_SILENT)</span><br><span class="line">&#123;</span><br><span class="line">pData = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dataSize = numFramesAvailable * <span class="number">4</span>;<span class="comment">//可用帧数*4=BYTE数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//采集数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; dataSize; i++)</span><br><span class="line">&#123;</span><br><span class="line">BYTE tem = pData[i];</span><br><span class="line">recorder.<span class="built_in">push_back</span>(pData[i]);<span class="comment">//添加进自己实现准备好的数据数组中</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放缓冲区</span></span><br><span class="line">pCaptureClient-&gt;<span class="built_in">ReleaseBuffer</span>(numFramesAvailable);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取下一个数据包大小</span></span><br><span class="line">pCaptureClient-&gt;<span class="built_in">GetNextPacketSize</span>(&amp;packetLength);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，由于缓冲区会不断地进来数据，你可以加一个判断，读取了多少个数据包后退出循环，否则会无限循环。</p><h4 id="关闭音频流"><a href="#关闭音频流" class="headerlink" title="关闭音频流"></a>关闭音频流</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pAudioClient-&gt;<span class="built_in">Stop</span>();</span><br></pre></td></tr></table></figure><h4 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; recorder.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, recorder[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200308165600.png" alt="输出效果图"></p><p>周三大概做到这里</p><h2 id="周四-2020-03-05"><a href="#周四-2020-03-05" class="headerlink" title="周四-2020-03-05"></a>周四-2020-03-05</h2><p>周四主要将波形曲线画出来。</p><h3 id="绘制波形"><a href="#绘制波形" class="headerlink" title="绘制波形"></a>绘制波形</h3><p>创建了一个 MFC 项目，并新建了一个类，主要是将上面说到的代码简单封装了一下，没有用到的暂时不显示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CRecorder.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dshow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winerror.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mmdeviceapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Functiondiscoverykeys_devpkey.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Audioclient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Audiopolicy.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;complex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// REFERENCE_TIME time units per second and per millisecond</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REFTIMES_PER_SEC  10000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REFTIMES_PER_MILLISEC  10000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXIT_ON_ERROR(hres)  \</span></span><br><span class="line"><span class="meta">              <span class="keyword">if</span> (FAILED(hres)) &#123; goto Exit; &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SAFE_RELEASE(punk)  \</span></span><br><span class="line"><span class="meta">              <span class="keyword">if</span> ((punk) != NULL)  \</span></span><br><span class="line"><span class="meta">                &#123; (punk)-&gt;Release(); (punk) = NULL; &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CRecorder</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">vector&lt;BYTE&gt; m_recorder;<span class="comment">//数据记录器</span></span><br><span class="line">IAudioClient *m_pAudioClient;<span class="comment">//声卡客户端</span></span><br><span class="line">IAudioCaptureClient *m_pCaptureClient;<span class="comment">//捕获流客户端</span></span><br><span class="line">WAVEFORMATEX *m_pwfx;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CRecorder</span>();</span><br><span class="line">    <span class="comment">//手动提取出来的代码</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">refreshRecorder</span><span class="params">()</span></span>;<span class="comment">//刷新采样数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">onError</span><span class="params">(HRESULT hres)</span></span>;<span class="comment">//错误处理（也没咋用，懒得写那么多错误处理）</span></span><br><span class="line"></span><br><span class="line"><span class="function">HRESULT <span class="title">RecordAudioStream</span><span class="params">()</span></span>;<span class="comment">//整块的示例代码，用于测试，现在不使用</span></span><br><span class="line"></span><br><span class="line">~<span class="built_in">CRecorder</span>();</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">drawWaveform</span><span class="params">(CDC* pDC, CRect rect,vector&lt;BYTE&gt; output)</span></span>;<span class="comment">//绘制图像</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现部分和上面差不多就不赘述了。</p><p>主要是绘制方面。</p><p>第三个参数<code>vector&lt;BYTE&gt; output</code>是为了后面的滤波所准备的，是由 leesin 提出的改进</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">CRecorder::drawWaveform</span><span class="params">(CDC* pDC,CRect rect,vector&lt;BYTE&gt; output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//RecordAudioStream();</span></span><br><span class="line"><span class="type">int</span> height = rect.<span class="built_in">Height</span>();</span><br><span class="line"><span class="type">int</span> width = rect.<span class="built_in">Width</span>();</span><br><span class="line"><span class="type">int</span> x_coefficient = <span class="number">5</span>;</span><br><span class="line"><span class="comment">//int a = dataStart;</span></span><br><span class="line">pDC -&gt; <span class="built_in">MoveTo</span>( <span class="number">0</span>, output[dataStart] );</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = dataStart; i &lt; output.<span class="built_in">size</span>() &amp;&amp; (i-dataStart<span class="number">+1</span>)*x_coefficient &lt;= width; i++)</span><br><span class="line">&#123;</span><br><span class="line">pDC-&gt;<span class="built_in">LineTo</span>((i-dataStart<span class="number">+1</span>) * x_coefficient, output[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对话框类中获取 pDC</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CsoundcarddataacquisitionDlg::drawWaveform</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_pPanel = <span class="built_in">GetDlgItem</span>(IDC_PANEL);<span class="comment">//获得静态窗口对象指针</span></span><br><span class="line"><span class="comment">//清屏</span></span><br><span class="line">m_pPanel-&gt;<span class="built_in">ShowWindow</span>(FALSE);<span class="comment">//偷懒用的方法</span></span><br><span class="line">m_pPanel-&gt;<span class="built_in">ShowWindow</span>(TRUE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取控件区域</span></span><br><span class="line">CRect rect;</span><br><span class="line">m_pPanel-&gt;<span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取控件画笔</span></span><br><span class="line">CDC* pDC = m_pPanel-&gt;<span class="built_in">GetDC</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制原始采样数据</span></span><br><span class="line">m_pPanel-&gt;<span class="built_in">UpdateWindow</span>();</span><br><span class="line"><span class="comment">//m_recorder.RecordAudioStream();</span></span><br><span class="line">m_recorder.<span class="built_in">refreshRecorder</span>();</span><br><span class="line">m_recorder.<span class="built_in">drawWaveform</span>(pDC, rect,m_recorder.<span class="built_in">NoFiltering</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;BYTE&gt; <span class="title">CRecorder::NoFiltering</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_recorder;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200308173908.png" alt="第一次显示的图"></p><h3 id="滤波算法"><a href="#滤波算法" class="headerlink" title="滤波算法"></a>滤波算法</h3><p>老师给了个 txt，里面就是各种滤波算法，我也没啥精力去研究了，就交给 leesin 了，他完成得很不错，就是刚刚上面说的设计就是他整的。不过一开始用的算法效果不太好，让他继续研究。此时咸鱼米在弄 vc6.0 的 PID 那个项目，因为她没有 vs。</p><h2 id="周五周六-2020-03-06-07"><a href="#周五周六-2020-03-06-07" class="headerlink" title="周五周六-2020-03-06~07"></a>周五周六-2020-03-06~07</h2><p>这两天都在学习那个 FFT 快速傅里叶变换</p><h3 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h3><p>参考各方资料写出来这个递归版本的（迭代版本的看不懂），参考链接见本文开头。</p><ul><li>输入：多项式系数表示法的系数，值为时域下的幅值</li><li>输出：多项式点值表示法的点（以复数表示），其模为频域下的幅值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*FFT</span></span><br><span class="line"><span class="comment">传入的复数数组里面都是实数，含义是多项式系数表示法的系数，值为时域幅值</span></span><br><span class="line"><span class="comment">系数数组长度得是2的整数次方</span></span><br><span class="line"><span class="comment">返回值的模为频谱幅值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">vector&lt;complex&lt;<span class="type">double</span>&gt;&gt; CRecorder::<span class="built_in">FFT</span>(vector&lt;complex&lt;<span class="type">double</span>&gt;&gt; A)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> PI = <span class="number">3.141592651</span>;</span><br><span class="line"><span class="type">int</span> len = A.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">1</span>) <span class="keyword">return</span> A;<span class="comment">//递归结束条件</span></span><br><span class="line">vector&lt;complex&lt;<span class="type">double</span>&gt;&gt; A1, A2;<span class="comment">//A(x) = A1(x^2) + x * A2(x^2)</span></span><br><span class="line"><span class="comment">//将系数分类</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">A<span class="number">1.</span><span class="built_in">push_back</span>(A[i]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">A<span class="number">2.</span><span class="built_in">push_back</span>(A[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A1 = <span class="built_in">FFT</span>(A1);</span><br><span class="line">A2 = <span class="built_in">FFT</span>(A2);</span><br><span class="line"></span><br><span class="line"><span class="function">complex&lt;<span class="type">double</span>&gt; <span class="title">Wn</span><span class="params">(cos(<span class="number">2.0</span>*PI / len), sin(<span class="number">2.0</span>*PI / len))</span></span>;<span class="comment">//len等分点的角度增量</span></span><br><span class="line"><span class="function">complex&lt;<span class="type">double</span>&gt; <span class="title">W</span><span class="params">(<span class="number">1.0</span>, <span class="number">0.0</span>)</span></span>;<span class="comment">//用于遍历复平面单位圆上的len个等分点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i * <span class="number">2</span> &lt; len; i++, W *= Wn)</span><br><span class="line">&#123;</span><br><span class="line">A[i] = A1[i] + W * A2[i];</span><br><span class="line">A[i + len / <span class="number">2</span>] = A1[i] - W * A2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成之后的效果是下面这样的：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200308174022.png"></p><p>上图的坐标都是没有变换的，还是以左上角为原点。</p><h2 id="发现重装系统前写的东西都没了"><a href="#发现重装系统前写的东西都没了" class="headerlink" title="发现重装系统前写的东西都没了"></a>发现重装系统前写的东西都没了</h2><p>啊啊啊啊啊啊！后面那么一大段就这样没了！不太想补了。</p><p>其实核心部分也基本上说完了，剩下的就是坐标转化以及动态采样了，读者们可以移步本项目的<a href="https://gitee.com/ChangingSelf/sound-card-data-acquisition">码云仓库</a>查看代码。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编程练习】java简易学生管理系统</title>
      <link href="/posts/java_simple_studentInfoSystem/"/>
      <url>/posts/java_simple_studentInfoSystem/</url>
      
        <content type="html"><![CDATA[<p>上周一个数据库作业，用文件读写的方式来实现学生信息的读写，从而与数据库编程的方式进行对比。</p><p>在这个练习中，我主要是打算熟悉一下 java 的文件操作，因为我发现我学了 java 之后基本没有写过文件读写。</p><p>本文主要总结一下本练习用到的一些知识点，方便下次使用。</p><p><a href="https://github.com/ChangingSelf/fileio-exercises">本文对应的 github 库</a></p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/kaml8/p/9853595.html">java 输入和输出函数</a></li><li><a href="https://www.cnblogs.com/oneboi/articles/8615331.html">java 文件和文件夹的创建</a></li><li><a href="https://zhuanlan.zhihu.com/p/87560794">Java I&#x2F;O 包 读写文件</a>：有关各种文件流、Reader 和 Writer 之间关系的解释</li><li><a href="https://blog.csdn.net/ai_bao_zi/article/details/81097898">java 基础知识之 FileInputStream 流</a></li><li><a href="https://www.cnblogs.com/ywzbky/p/10697414.html">JAVA 中字符流详解</a></li><li><a href="https://www.jianshu.com/p/ec76c4394a00">Java 实现文件随机读写-RandomAccessFile</a></li><li><a href="https://zhuanlan.zhihu.com/p/68598753">流-文件操作（1）-Java 高级知识（4）</a>：讲了流的原理和分类</li><li><a href="https://zhuanlan.zhihu.com/p/98911542">Java 语言的输入与输出与文件处理</a>：常用文件处理类的 API 列表</li><li><a href="https://cloud.tencent.com/developer/ask/48910">如何检查 Java 字符串并不是所有空白？</a></li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li>1.建两个文本文件</li><li>2.插入学生信息</li><li>3.查询学生对应的奖励</li><li>4.增删改信息</li></ul><h2 id="文件-1-学生基本信息"><a href="#文件-1-学生基本信息" class="headerlink" title="文件 1 学生基本信息"></a>文件 1 学生基本信息</h2><table><thead><tr><th>学号</th><th>姓名</th><th>性别</th><th>年龄</th><th>专业</th><th>位置</th><th>长度</th></tr></thead><tbody><tr><td>2017901006</td><td>杨啸</td><td>男</td><td>21</td><td>软件工程</td><td>0</td><td>30</td></tr><tr><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td></tr></tbody></table><ul><li>位置：奖励文件内对应的位置</li><li>长度：奖励文件内对应的奖励字段的长度</li></ul><h2 id="文件-2-奖励"><a href="#文件-2-奖励" class="headerlink" title="文件 2 奖励"></a>文件 2 奖励</h2><p>记录学生获得的奖励</p><table><thead><tr><th align="center">奖励</th></tr></thead><tbody><tr><td align="center">2011 校奖学金，2012 国家奖学金</td></tr><tr><td align="center">2012 校优秀学生</td></tr></tbody></table><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ul><li>model 包<ul><li>Gender 枚举类：枚举值为“男”和“女”</li><li>StudentInfo 类：作为学生信息结点，存储学生信息的六个字段。后来写着写着觉得这个类名太长了，不该加 Info 后缀的，写起来怪怪的。</li><li>StudentInfoSystem 类：用于实现整个系统的逻辑功能，包括录入信息，查找信息，保存数据，读取数据等。</li></ul></li><li>view 包<ul><li>ConsoleMenu 类：控制台菜单类，作为与用户交互的界面。</li></ul></li></ul><h1 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h1><h2 id="Gender-枚举类"><a href="#Gender-枚举类" class="headerlink" title="Gender 枚举类"></a>Gender 枚举类</h2><p>在录入学生性别的时候，会涉及到输入什么的问题，输入 0 或 1？输入“男”或“女”？如果用整数或者字符串都可能会产生非法数据，导致一些问题，这些问题在很久以前我拿 C++写的时候就遇到过一些。</p><p>最好的方式不是用布尔类型这种二值类型，而是使用枚举类型，因为有可能用到别的值，比如 UNSET（未设置）。</p><p>在这次练习之前，我会的 java 枚举大概是下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">MALE,</span><br><span class="line">FAMALE</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如同 C++枚举一样列出枚举值，然后当成常量一样使用。</p><p>后面变成了这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Gender.java</span></span><br><span class="line"><span class="keyword">package</span> model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line">MALE(<span class="string">&quot;男&quot;</span>),</span><br><span class="line">FAMALE(<span class="string">&quot;女&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String m_genderString;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Gender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">m_genderString = gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getGenderString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> m_genderString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据字符串的值返回对应的枚举值</span></span><br><span class="line"><span class="comment"> * TODO：应该可以优化成不用手动写switch的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> genderString</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回字符串对应的枚举值，找不到则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Gender <span class="title function_">newGender</span><span class="params">(String genderString)</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (genderString) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;男&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> Gender.MALE;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;女&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> Gender.FAMALE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>百度了几篇博客之后（当时没收藏，找不到了），知道了枚举类一点点原理。</p><p>拿上面这个代码举例：写<code>MALE(&quot;男&quot;)</code>其实像是为 Gender 类的构造方法传入一个值为“男”的字符串，而默认的构造方法是没有参数的，所以你需要写一个以字符串为参数的构造方法。</p><p>为了保留下这个传入的字符串，需要定义一个字符串类型的属性；为了获取它，再定义一个 getter。</p><p>这样做的目的是，在输出学生性别时，可以调用性别属性的<code>getGenderString()</code>方法获取对应的字符串。</p><p>最下面那个<code>newGender()</code>方法则是在录入学生性别时使用。</p><h2 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h2><p>java 中的 File 类是对文件的抽象，它可以是文件，也可以是目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName);</span><br><span class="line"><span class="keyword">if</span>(!dir.isDirectory()) <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//如果传入的不是目录字符串，则返回</span></span><br></pre></td></tr></table></figure><p>它拥有的方法主要是用于检测文件的信息的，比如它是文件还是目录，是否存在，绝对路径是什么等等，它不能直接读写文件（创建倒是可以）。</p><p>读写文件得需要其他类，这一部分的类太多了，我找了挺久才找到合适的类。</p><h2 id="FileOutputStream-类"><a href="#FileOutputStream-类" class="headerlink" title="FileOutputStream 类"></a>FileOutputStream 类</h2><p>首先是保存数据到文件中。用到了这个类，它是文件输出流，以字节流的形式输出到文件。意思就是给他传入的参数是字节数组而不是字符串。不过字符串转字节数组非常简单，用字符串的<code>getBytes()</code>就好。</p><p>打开文件输出流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName);</span><br><span class="line"><span class="keyword">if</span>(!dir.isDirectory()) <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//如果传入的不是目录字符串，则返回</span></span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">infoFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName + <span class="string">&quot;/StudentInfoList.csv&quot;</span>);<span class="comment">//学生信息文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!infoFile.exists()) infoFile.createNewFile();</span><br><span class="line"></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">infoFOS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(infoFile);</span><br></pre></td></tr></table></figure><p>随后拼接好学生信息的字符串，转换为字节数组，传入即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span>[] infoBuf = studentInfoString.getBytes();</span><br><span class="line">infoFOS.write(infoBuf);<span class="comment">//写入文件</span></span><br></pre></td></tr></table></figure><p>最后记得 close</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">infoFOS.close();</span><br></pre></td></tr></table></figure><h2 id="FileReader-类和-BufferedReader-类"><a href="#FileReader-类和-BufferedReader-类" class="headerlink" title="FileReader 类和 BufferedReader 类"></a>FileReader 类和 BufferedReader 类</h2><p>一行一个学生信息，所以读取时打算直接 readline，需要<code>BufferedReader</code>类，进而需要<code>FileReader</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(infoFile));<span class="comment">//打开缓冲字符流</span></span><br><span class="line"><span class="type">String</span> <span class="variable">tmpString</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span>((tmpString = bufReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为基本信息文件中保存的是奖励在奖励文件中的位置与长度，所以在读取时需要设置文件指针。</p><p>这个需要用到<code>RandomAccessFile</code>类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(rewardFile, <span class="string">&quot;r&quot;</span>);<span class="comment">//打开随机读写</span></span><br></pre></td></tr></table></figure><p>设置文件指针到指定位置，读取对应长度的字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从Reward文件中读取奖励信息</span></span><br><span class="line">randomAccessFile.seek(position);</span><br><span class="line"><span class="type">byte</span>[] tmpBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">randomAccessFile.read(tmpBytes,<span class="number">0</span>, rewardLen);<span class="comment">//读取指定长度的奖励信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">rewardString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(tmpBytes);</span><br></pre></td></tr></table></figure><p>写到这里我还遇到了一个问题，就是读取到字符串后，无法判断字符串是否为空，如果用<code>rewardString.equals(&quot;&quot;)</code>或者&#96;&#96;rewardString.isEmpty()&#96;，发现字符串的长度是和我设置的缓冲区大小有关的。虽然全部是空白，但是并不为空字符串。用长度判断也不行。</p><p>后来找到了一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">rewardString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(tmpBytes).trim();<span class="comment">//转换为字符串</span></span><br></pre></td></tr></table></figure><p><code>trim()</code>可以去掉首尾空白，那么 1024 长度的空字符串就会变成 0 长度的普通的空字符串，就可以用刚刚的方式来判断学生是否有奖励了。</p><h2 id="录入学生信息"><a href="#录入学生信息" class="headerlink" title="录入学生信息"></a>录入学生信息</h2><p>java 的控制台输入我也是没弄过，这次就来试试。</p><p>会了之后发现蛮简单的。创建一个<code>Scanner</code>对象，传入源输入流，要从控制台输入，所以输入流设置为<code>System.in</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure><p>需要读取一行数据，可以使用<code>next()</code>或者<code>nextLine()</code>方法，区别详情见百度</p><p>录入普通字符串搞定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;请输入学生的学号&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">studentId</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入学生的姓名&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> scanner.nextLine();</span><br></pre></td></tr></table></figure><p>录入性别则需要判断合法性（其实上面的学号，姓名也需要判断合法性，不过不是本次练习的核心，就没弄了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">genderString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">Gender</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入学生的性别,输入\&quot;男\&quot; 或者\&quot;女\&quot;&quot;</span>);</span><br><span class="line">genderString = scanner.nextLine();</span><br><span class="line">gender =  Gender.newGender(genderString);</span><br><span class="line">&#125;<span class="keyword">while</span>(gender == <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>这里用了一个 do-while 循环，如果输入的不是枚举类里面有的值，就要求再次输入。</p><p>接着是年龄，年龄是一个正整数，需要<code>nextInt()</code>来获取整数，如果输入的不是整数，就会抛出异常。处理完这个异常之后继续要求输入，直到输入正确的年龄为止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;请输入学生的年龄&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">age = scanner.nextInt();</span><br><span class="line"><span class="keyword">if</span>(age&lt;=<span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;年龄必须是正数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;年龄必须是整数&quot;</span>);</span><br><span class="line">scanner.next();<span class="comment">//清空错误数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在输入完整数类型的年龄后，需要输入字符串类型的专业了，这里会遇到和 C++输入一样的情况，那就是你还没输入就当你输入了，最后得到的是空字符串。这是因为在输入整数后按下回车键确定时，这个换行符还留存在输入缓冲区，下一个<code>nextLine()</code>将其当成了结束标志，从而结束字符串的输入。所以需要清空一下缓冲区，清空方式就是读取一个值并丢弃：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scanner.nextLine();<span class="comment">//清除缓冲区空行</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入学生的专业&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">major</span> <span class="operator">=</span> scanner.nextLine();</span><br></pre></td></tr></table></figure><p>最后是录入学生的奖励，这个部分加深了我对“String 的相等比较不能用<code>==</code>而要用<code>equals()</code>”的知识点的印象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;请输入学生的专业&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">major</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;请输入学生的奖励，每输入完一项换行，输入\&quot;done\&quot;结束输入&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">rewardString</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Vector&lt;String&gt; reward = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">rewardString = scanner.nextLine();</span><br><span class="line"><span class="keyword">if</span>(!rewardString.equalsIgnoreCase(<span class="string">&quot;done&quot;</span>)) reward.add(rewardString);</span><br><span class="line">&#125; <span class="keyword">while</span> (!rewardString.equalsIgnoreCase(<span class="string">&quot;done&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><h2 id="保存数据到文件"><a href="#保存数据到文件" class="headerlink" title="保存数据到文件"></a>保存数据到文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存到文件中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pathName 数据文件所在的路径字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 保存的记录数，如果出错返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">saveData</span><span class="params">(String pathName)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName);</span><br><span class="line"><span class="keyword">if</span>(!dir.isDirectory()) <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//如果传入的不是目录字符串，则返回</span></span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">infoFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName + <span class="string">&quot;/StudentInfoList.csv&quot;</span>);<span class="comment">//学生信息文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">rewardFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName + <span class="string">&quot;/Rewards.csv&quot;</span>);<span class="comment">//学生奖励文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!infoFile.exists()) infoFile.createNewFile();</span><br><span class="line"><span class="keyword">if</span>(!rewardFile.exists()) rewardFile.createNewFile();</span><br><span class="line"></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">infoFOS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(infoFile);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">rewardFOS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(rewardFile);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">curPosition</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//“奖励”文件指针当前位置</span></span><br><span class="line"><span class="keyword">for</span>(StudentInfo studentInfo:m_studentInfoList) &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">studentInfoString</span> <span class="operator">=</span> String.format(<span class="string">&quot;%s,%s,%s,%d,%s,&quot;</span>,</span><br><span class="line">studentInfo.getStudentId(),</span><br><span class="line">studentInfo.getName(),</span><br><span class="line">studentInfo.getGender().getGenderString(),</span><br><span class="line">studentInfo.getAge(),</span><br><span class="line">studentInfo.getMajor()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">rewardString</span> <span class="operator">=</span> String.join(<span class="string">&quot;,&quot;</span>, studentInfo.getReward());<span class="comment">//拼接奖励字符串</span></span><br><span class="line"><span class="keyword">if</span>(!rewardString.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//奖励字符串不为空，则添加换行符</span></span><br><span class="line">rewardString += <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] rewardBuf = rewardString.getBytes();<span class="comment">//转换为字节数组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">studentInfoString += String.format(<span class="string">&quot;%s,%s\n&quot;</span>, curPosition,rewardBuf.length);</span><br><span class="line">curPosition += rewardBuf.length;<span class="comment">//计算下一个位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span>[] infoBuf = studentInfoString.getBytes();</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文件</span></span><br><span class="line">infoFOS.write(infoBuf);</span><br><span class="line">rewardFOS.write(rewardBuf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;成功保存%d条记录到以下文件中：\n[%s]\n[%s]\n&quot;</span>,</span><br><span class="line">m_studentInfoList.size(),</span><br><span class="line">infoFile.getCanonicalPath(),</span><br><span class="line">rewardFile.getCanonicalPath()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">rewardFOS.close();</span><br><span class="line">infoFOS.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> m_studentInfoList.size();</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="从文件中加载数据"><a href="#从文件中加载数据" class="headerlink" title="从文件中加载数据"></a>从文件中加载数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从文件中加载</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pathName 数据文件所在的路径字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> clearFlag 是否清空内存中原有数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 读取的记录数，如果出错返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadData</span><span class="params">(String pathName,<span class="type">boolean</span> clearFlag)</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(clearFlag) m_studentInfoList.clear();</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName);</span><br><span class="line"><span class="keyword">if</span>(!dir.isDirectory()) <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//如果传入的不是目录字符串，则返回</span></span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">infoFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName + <span class="string">&quot;/StudentInfoList.csv&quot;</span>);<span class="comment">//学生信息文件</span></span><br><span class="line"><span class="type">File</span> <span class="variable">rewardFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pathName + <span class="string">&quot;/Rewards.csv&quot;</span>);<span class="comment">//学生奖励文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(infoFile));<span class="comment">//打开缓冲字符流</span></span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(rewardFile, <span class="string">&quot;r&quot;</span>);<span class="comment">//打开随机读写</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">tmpString</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((tmpString = bufReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按行读取</span></span><br><span class="line">String[] infoStrings = tmpString.split(<span class="string">&quot;,&quot;</span>);<span class="comment">//按照分隔符分割</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(infoStrings.length != <span class="number">7</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//如果字段数对不上，说明文件格式有问题</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从StudentInfo文件中读取学生信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">studentId</span> <span class="operator">=</span> infoStrings[<span class="number">0</span>];</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> infoStrings[<span class="number">1</span>];</span><br><span class="line"><span class="type">Gender</span> <span class="variable">gender</span> <span class="operator">=</span> Gender.newGender(infoStrings[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span>(gender == <span class="literal">null</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(infoStrings[<span class="number">3</span>]);</span><br><span class="line"><span class="type">String</span> <span class="variable">major</span> <span class="operator">=</span> infoStrings[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> <span class="variable">position</span> <span class="operator">=</span> Long.parseLong(infoStrings[<span class="number">5</span>]);</span><br><span class="line"><span class="type">int</span> <span class="variable">rewardLen</span> <span class="operator">=</span> Integer.parseInt(infoStrings[<span class="number">6</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//从Reward文件中读取奖励信息</span></span><br><span class="line">randomAccessFile.seek(position);</span><br><span class="line"><span class="type">byte</span>[] tmpBytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">randomAccessFile.read(tmpBytes,<span class="number">0</span>, rewardLen);<span class="comment">//读取指定长度的奖励信息</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">rewardString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(tmpBytes).trim();<span class="comment">//转换为字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vector&lt;String&gt; rewardList = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!rewardString.isEmpty()) &#123;</span><br><span class="line"><span class="comment">//如果奖励不为空则添加</span></span><br><span class="line">rewardList = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;String&gt;();</span><br><span class="line">String[] rewardArr = rewardString.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(String reward : rewardArr) &#123;</span><br><span class="line">rewardList.add(reward);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">StudentInfo</span> <span class="variable">newStudentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentInfo</span>(studentId, name, gender, age, major, rewardList);</span><br><span class="line"></span><br><span class="line">m_studentInfoList.add(newStudentInfo);</span><br><span class="line">counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bufReader.close();</span><br><span class="line">randomAccessFile.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> counter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫框架（1）一个简单的可用的爬虫</title>
      <link href="/posts/Scrapy_spider_1/"/>
      <url>/posts/Scrapy_spider_1/</url>
      
        <content type="html"><![CDATA[<p>很久没写爬虫了，又重新开始使用 scrapy，之前学习的内容基本上都忘了，重新复习一遍，发现对它的理解又加深了一些。</p><p>本文将初级知识点简单梳理，实现了一个 HelloWorld 级别的 Scrapy 爬虫。</p><p>本文适用于 Scrapy 1.6.0，结合了自己的理解，可能理解有错误，欢迎在下面评论区指出。</p><p><strong>不包含安装教程。</strong></p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://baike.baidu.com/item/scrapy/7914913?fr=aladdin">Scrapy-百度百科</a></li><li><a href="https://zhuanlan.zhihu.com/p/96082022">Python 爬虫-scrapy 介绍及使用</a></li><li><a href="http://www.scrapyd.cn/doc/">Scrapy 中文网</a></li><li><a href="http://lab.scrapyd.cn/">Scrapy 中文网的爬虫实验室</a></li><li>xpath 教程：<ul><li><a href="https://zhuanlan.zhihu.com/p/29436838">学爬虫利器 XPath,看这一篇就够了</a>：这个是结合代码来讲解的</li><li><a href="https://zhuanlan.zhihu.com/p/65177112">Python 神技能：六张表 搞定 Xpath 语法</a>：这个是列出语法表的</li></ul></li><li><a href="https://www.jianshu.com/p/4e5aaf317f95">VScode Python no module 的解决方法</a></li><li><a href="https://www.cnblogs.com/yrxns/p/7930177.html">Python 中获得当前目录和上级目录</a></li></ul><h1 id="Scrapy-是啥"><a href="#Scrapy-是啥" class="headerlink" title="Scrapy 是啥"></a>Scrapy 是啥</h1><p>先看看<a href="https://baike.baidu.com/item/scrapy/7914913?fr=aladdin">Scrapy-百度百科</a>的解释：</p><blockquote><p>Scrapy 是一个为爬取网站数据、提取结构性数据而设计的应用程序框架，它可以应用在广泛领域：Scrapy 常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。</p></blockquote><p>它是一个<strong>框架</strong>，帮你解决写爬虫的过程中遇到的一些问题，简化你写爬虫的过程。对于一些简单的爬虫，你不需要自己来写重复的代码，它将重复的代码都隐藏起来，你只需要写一些与你需要爬取的网站相关的东西就可以了。</p><p>例如，爬虫需要发送请求和获取响应，scrapy 有个专门的调度器来帮你解决这个问题，你不需要自己来调度，你只需要使用它的下载器传给你的响应对象 Response 来进行解析即可，解析好的数据你也可以打包成它的一个名为 Item 的类的对象中，更方便地进行处理。方便很多。</p><h1 id="Scrapy-的组成"><a href="#Scrapy-的组成" class="headerlink" title="Scrapy 的组成"></a>Scrapy 的组成</h1><p>下面这个图片来自于<a href="https://zhuanlan.zhihu.com/p/96082022">Python 爬虫-scrapy 介绍及使用</a></p><p><img src="https://pic4.zhimg.com/80/v2-5e7ceadeb3ddd9de9436008322aee147_hd.jpg" alt="借用知乎找来的图片"></p><ul><li><strong>调度器（Scheduler）</strong>选择合适的时机发送 Request（请求）给下载器；</li><li><strong>下载器（Downloader）</strong>处理 Request（响应），即发送请求并获取响应 Response，将 Response 传给爬虫；</li><li><strong>爬虫（Spider）</strong>主要做两类事情：<ol><li>提取当前 Response 中的数据，打包成 Item（或者是 dict），将它们发送给管道</li><li>获取 Response 中下一个 Request 的 url（比如你第一个 Response 爬取的是目录页，那么就是获取目录项对应的 url）从而构造下一个 Request，再将这个 Request 发送给调度器</li></ol></li><li><strong>管道（Item Pipeline）</strong>处理 Item 中的数据</li><li><strong>中间件（Middleware）</strong>分为下载中间件和爬虫中间件，用来在传送 Request 和 Response 过程中做一些额外的处理</li><li><strong>引擎（Engine）</strong>用于将以上模块都连接起来，其他模块都直接与引擎交互，数据等由引擎进行转发</li></ul><p>一般我们需要编写的，就是爬虫和管道，也就是解析数据和处理数据。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先在命令行创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scrapy</span> startproject 项目名称</span><br></pre></td></tr></table></figure><p>会生成一个以你项目名称命名的文件夹，里面就是你的项目文件</p><p><img src="https://pic2.zhimg.com/80/v2-24923a6533dde878d8e61b2da8104831_hd.jpg" alt="再次借用一下知乎那篇文章的图片"></p><h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scrapy</span> genspider 爬虫名 爬取的域名</span><br></pre></td></tr></table></figure><p>它的作用是在 spider 目录下按照模板创建一个以你爬虫为名的 py 文件，当然你也可以手动创建，只要你的文件符合 scrapy 的要求就行，最好用命令。</p><p>记得先切换到你项目目录。</p><h2 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h2><p>我要练习爬取的是<a href="http://www.scrapyd.cn/doc/">Scrapy 中文网</a>提供的<a href="http://lab.scrapyd.cn/">爬虫实验室</a></p><p>爬虫命名为 lab，创建好的初始爬虫文件<code>lab.py</code>是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LabSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;lab&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;lab.scrapyd.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://lab.scrapyd.cn&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>name</strong>：爬虫名</li><li><strong>allowed_domains</strong>：允许访问的域名，<strong>注意是域名，而不是要爬取的 url，别写成<a href="http://lab.scrapyd.cn之类的/">http://lab.scrapyd.cn之类的</a></strong></li><li><strong>start_urls</strong>：初始 url</li><li>parse(self,response)：解析函数，传入的参数就是 Response 响应，你可以用这个引用来获取网页内容，从而进行处理</li></ul><h3 id="运行过程理解"><a href="#运行过程理解" class="headerlink" title="运行过程理解"></a>运行过程理解</h3><p>按照我的理解，当启动这个爬虫时：</p><ul><li>scrapy 会将 start_urls 这个列表里面的 url 都生成对应的 Request 发给<strong>调度器</strong></li><li>然后调度器将 Request 通过引擎转发给<strong>下载器</strong></li><li>下载器再将下载好的 Response 发给<strong>引擎</strong>，引擎调用该爬虫的 parse 方法，将这个 Response 传入作为参数</li><li>引擎获取 parse 的返回值<ul><li>如果是 Request（即新的请求），就发送给<strong>调度器</strong></li><li>如果是 item 或者 dict，就发送给<strong>管道</strong></li></ul></li><li>当调度器中没有新的 Request 了，scrapy 停止。</li></ul><h3 id="调试解析"><a href="#调试解析" class="headerlink" title="调试解析"></a>调试解析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scrapy</span> shell 你要爬取的url</span><br></pre></td></tr></table></figure><p>此处，我要爬取的就是<code>http://lab.scrapyd.cn</code>。</p><p>这个命令可以打开交互式调试命令行，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scrapy</span> shell http://lab.scrapyd.cn</span><br><span class="line"><span class="comment">#……省略一大堆日志信息</span></span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x0000017F01C9A748&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET http://lab.scrapyd.cn&gt;</span><br><span class="line">[s]   response   &lt;200 http://lab.scrapyd.cn&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x0000017F031BCBE0&gt;</span><br><span class="line">[s]   spider     &lt;LabSpider <span class="string">&#x27;lab&#x27;</span> at 0x17f034c2da0&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   fetch(url[, redirect=True]) Fetch URL and update <span class="built_in">local</span> objects (by default, redirects are followed)</span><br><span class="line">[s]   fetch(req)                  Fetch a scrapy.Request and update <span class="built_in">local</span> objects</span><br><span class="line">[s]   shelp()           Shell <span class="built_in">help</span> (<span class="built_in">print</span> this <span class="built_in">help</span>)</span><br><span class="line">[s]   view(response)    View response <span class="keyword">in</span> a browser</span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure><p>scrapy 这时已经将 response 给你了，你可以使用这些命令来进行调试。</p><p>没错，就是给 parse 函数传的那个 response 参数。</p><p>你可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In[1]:response.text</span><br></pre></td></tr></table></figure><p>来获取得到的 html 字符串，以确定是否成功获取到自己想要的网页。</p><p>先去那个网站按 f12 查看一下它的元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-mb-12 col-8&quot;</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span> <span class="attr">role</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quote post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>看官，此页面只为爬虫练习使用，都是残卷，若喜欢可以去找点高清版！&lt;/span</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      &gt;</span>作者：<span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;author&quot;</span>&gt;</span>中国传世名画<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://lab.scrapyd.cn/archives/57.html&quot;</span>&gt;</span>【详情】<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">      标签：</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://lab.scrapyd.cn/tag/%E8%89%BA%E6%9C%AF/&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>艺术&lt;/a</span><br><span class="line">      &gt;，<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://lab.scrapyd.cn/tag/%E5%90%8D%E7%94%BB/&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>名画&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;quote post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>下面每一幅都是上亿？你造几？<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span></span></span><br><span class="line"><span class="tag">      &gt;</span>作者：<span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">&quot;author&quot;</span>&gt;</span>天价世界名画<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://lab.scrapyd.cn/archives/55.html&quot;</span>&gt;</span>【详情】<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">      标签：</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://lab.scrapyd.cn/tag/%E8%89%BA%E6%9C%AF/&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>艺术&lt;/a</span><br><span class="line">      &gt;，<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;tag&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://lab.scrapyd.cn/tag/%E5%90%8D%E7%94%BB/&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span>名画&lt;/a</span><br><span class="line">      &gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要获取到的，是以下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;看官，此页面只为爬虫练习使用，都是残卷，若喜欢可以去找点高清版！&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>: [<span class="string">&#x27;艺术&#x27;</span>, <span class="string">&#x27;名画&#x27;</span>]&#125;,</span><br><span class="line"> &#123;<span class="string">&#x27;text&#x27;</span>: <span class="string">&#x27;下面每一幅都是上亿？你造几？&#x27;</span>, <span class="string">&#x27;tag&#x27;</span>: [<span class="string">&#x27;艺术&#x27;</span>, <span class="string">&#x27;名画&#x27;</span>]&#125;, ]</span><br></pre></td></tr></table></figure><p>这个 response 拥有几种解析方法，你可以使用 xpath，也可以用 css。</p><p>xpath 教程：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/29436838">学爬虫利器 XPath,看这一篇就够了</a>：这个是结合代码来讲解的</li><li><a href="https://zhuanlan.zhihu.com/p/65177112">Python 神技能：六张表 搞定 Xpath 语法</a>：这个是列出语法表的</li></ul><p>比如使用 xpath：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: response.xpath(<span class="string">&#x27;//div[contains(@class,&quot;quote&quot;)]&#x27;</span>)</span><br><span class="line">Out[<span class="number">2</span>]:</span><br><span class="line">[&lt;Selector xpath=<span class="string">&#x27;//div[contains(@class,&quot;quote&quot;)]&#x27;</span> data=<span class="string">&#x27;&lt;div class=&quot;quote post&quot;&gt;\n\t        &lt;span &#x27;</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">&#x27;//div[contains(@class,&quot;quote&quot;)]&#x27;</span> data=<span class="string">&#x27;&lt;div class=&quot;quote post&quot;&gt;\n\t        &lt;span &#x27;</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">&#x27;//div[contains(@class,&quot;quote&quot;)]&#x27;</span> data=<span class="string">&#x27;&lt;div class=&quot;quote post&quot;&gt;\n\t        &lt;span &#x27;</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">&#x27;//div[contains(@class,&quot;quote&quot;)]&#x27;</span> data=<span class="string">&#x27;&lt;div class=&quot;quote post&quot;&gt;\n\t        &lt;span &#x27;</span>&gt;,</span><br><span class="line"> &lt;Selector xpath=<span class="string">&#x27;//div[contains(@class,&quot;quote&quot;)]&#x27;</span> data=<span class="string">&#x27;&lt;div class=&quot;quote post&quot;&gt;\n\t        &lt;span &#x27;</span>&gt;]</span><br></pre></td></tr></table></figure><p>返回的将是 Selector 的列表，Selector 的具体用法也不在本文范围内。</p><p>其实<code>response.xpath()</code>只是方便使用，它调用了<code>response.selector.xpath()</code>，也就是说 xpath 和 css 实际上是 Selector 的方法。说这个的原因在于告诉你，对于这个列表里面每一个 Selector，你都可以使用同样的方法来进行解析。</p><p>接着你就可以利用这个调试 shell 来调整你的 xpath 字符串或者 css 字符串了。</p><h3 id="编写-Item-域"><a href="#编写-Item-域" class="headerlink" title="编写 Item 域"></a>编写 Item 域</h3><p>items.py 里面有着你可以用的 item 类，根据你确定需要获取的字段（Field）来给它添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define here the models for your scraped items</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># See documentation in:</span></span><br><span class="line"><span class="comment"># https://doc.scrapy.org/en/latest/topics/items.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TutorialItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    text = scrapy.Field()</span><br><span class="line">    tag = scrapy.Field()</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="解析代码"><a href="#解析代码" class="headerlink" title="解析代码"></a>解析代码</h3><p>我用的是 css 选择器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LabSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;lab&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;lab.scrapyd.cn&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://lab.scrapyd.cn&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        quotes= response.css(<span class="string">&#x27;div.quote&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> quotes:</span><br><span class="line">            item = items.TutorialItem()</span><br><span class="line">            text = quote.css(<span class="string">&#x27;.text::text&#x27;</span>)</span><br><span class="line">            tag = quote.css(<span class="string">&#x27;.tag::text&#x27;</span>)</span><br><span class="line">            item[<span class="string">&#x27;text&#x27;</span>] = text.get()</span><br><span class="line">            item[<span class="string">&#x27;tag&#x27;</span>] = tag.getall()</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="开始爬取"><a href="#开始爬取" class="headerlink" title="开始爬取"></a>开始爬取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scrapy</span> crawl 需要启动的爬虫名 -o 输出文件名（比如test.json）</span><br></pre></td></tr></table></figure><p>scrapy 会自动将得到的 item 保存到输出文件</p><h2 id="解决导入-items-模块的问题"><a href="#解决导入-items-模块的问题" class="headerlink" title="解决导入 items 模块的问题"></a>解决导入 items 模块的问题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = os.path.dirname(__file__)</span><br><span class="line">parent_path = os.path.dirname(path)</span><br><span class="line">sys.path.append(parent_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> items</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编程练习】明日非舟抽卡模拟器（2）xml文件解析</title>
      <link href="/posts/Africanights_simu_hr_2/"/>
      <url>/posts/Africanights_simu_hr_2/</url>
      
        <content type="html"><![CDATA[<p>为了修改与添加方便，将干员的信息放在简历类 Resume 中，简历信息使用 xml 文件存储，在启动时加载进来。</p><p><a href="https://github.com/ChangingSelf/Africanights">本项目连载 github 库地址</a></p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://zhuanlan.zhihu.com/p/66284713">细说 java 解析 XML 文档的常用方法（含实例）-知乎</a></p></li><li><p><a href="https://blog.csdn.net/ooppookid/article/details/51704792">Java 千百问_02 基本使用（010）_java、javax、sun、org 包有什么区别</a></p></li><li><p><a href="https://www.w3cschool.cn/java/java-dom-intro.html">Java DOM 简介-w3cSchool</a></p></li></ul><h1 id="解析-xml-文件"><a href="#解析-xml-文件" class="headerlink" title="解析 xml 文件"></a>解析 xml 文件</h1><p>需要 import 进来的内容如下，jdk1.8 全部自带，不需要额外下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br></pre></td></tr></table></figure><h2 id="获取文档对象"><a href="#获取文档对象" class="headerlink" title="获取文档对象"></a>获取文档对象</h2><p>解析方式如下：</p><ul><li>首先获取一个工厂类（<code>DocumentBuilderFactory</code>）实例，使用了单例模式所以得用<code>newInstance()</code>来获取全局对象</li><li>再用获得的工厂对象来创建文档解析器（<code>DocumentBuilder</code>）</li><li>最后才能够利用文档解析器来解析文档（<code>Document</code>）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;Melantha.xml&quot;</span>;</span><br><span class="line"><span class="comment">//解析xml文件</span></span><br><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line"><span class="type">DocumentBuilder</span> <span class="variable">db</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> db.parse(path);</span><br></pre></td></tr></table></figure><p>这里<code>DocumentBuilder</code>对象的<code>parse()</code>方法可以直接传入 String 类型的字符串文件路径，也可以传入文件对象，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;Melantha.xml&quot;</span>;</span><br><span class="line">File f=<span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line"><span class="comment">//解析xml文件</span></span><br><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line"><span class="type">DocumentBuilder</span> <span class="variable">db</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> db.parse(f);</span><br></pre></td></tr></table></figure><h2 id="DOM-方式获取文档数据"><a href="#DOM-方式获取文档数据" class="headerlink" title="DOM 方式获取文档数据"></a>DOM 方式获取文档数据</h2><p>此处引用自：<a href="https://www.w3cschool.cn/java/java-dom-intro.html">Java DOM 简介-w3cSchool</a></p><blockquote><p>例如，我们有以下 xml 结构:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">yourTag</span>&gt;</span>This is an <span class="tag">&lt;<span class="name">bold</span>&gt;</span>important<span class="tag">&lt;/<span class="name">bold</span>&gt;</span> test.<span class="tag">&lt;/<span class="name">yourTag</span>&gt;</span></span><br></pre></td></tr></table></figure><p>DOM 节点的层级如下，其中每行代表一个节点:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ELEMENT: yourTag</span><br><span class="line">   + TEXT: This is an</span><br><span class="line">   + ELEMENT: bold</span><br><span class="line">     + TEXT: important</span><br><span class="line">   + TEXT: test.</span><br></pre></td></tr></table></figure><p><code>yourTag </code>元素包含文本，后跟一个子元素，后跟另外的文本。</p><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>为了支持混合内容，DOM 节点非常简单。标签元素的“内容”标识它是的节点的类型。</p><p>例如，<yourTag> 节点内容是元素<code> yourTag</code>的名称。</p><p>DOM 节点 API 定义<code> nodeValue()</code>，<code> nodeType()</code>和<code> nodeName()</code>方法。</p><p>对于元素节点<code>&lt; yourTag&gt; </code>nodeName()返回 yourTag，而 nodeValue()返回 null。</p><p>对于文本节点<code> + TEXT:这是一个</code>nodeName()返回#text，nodeValue()返回“This is an”。</p></blockquote><p>虽然这里写的用<code>nodeValue()</code>，但现在用的是<code>getValue()</code>这样子的方法。</p><h1 id="载入单份-xml-文件示例代码"><a href="#载入单份-xml-文件示例代码" class="headerlink" title="载入单份 xml 文件示例代码"></a>载入单份 xml 文件示例代码</h1><p>需要解析的 xml 文件的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resume</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>玫兰莎<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">star</span>&gt;</span>3<span class="tag">&lt;/<span class="name">star</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">chat</span>&gt;</span>......玫兰莎。从现在起，我的利刃将为您所用。<span class="tag">&lt;/<span class="name">chat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">portrayal</span>&gt;</span>image/Melantha.jpg<span class="tag">&lt;/<span class="name">portrayal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resume</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 载入简历对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> path 简历文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 简历对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Resume <span class="title function_">loadResume</span><span class="params">(String path)</span> &#123;</span><br><span class="line"><span class="type">Resume</span> <span class="variable">resume</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//解析xml文件</span></span><br><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span> DocumentBuilderFactory.newInstance();</span><br><span class="line"><span class="type">DocumentBuilder</span> <span class="variable">db</span> <span class="operator">=</span> dbf.newDocumentBuilder();</span><br><span class="line"><span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> db.parse(path);</span><br><span class="line"></span><br><span class="line">String nameString= doc.getElementsByTagName(<span class="string">&quot;name&quot;</span>).item(<span class="number">0</span>).getFirstChild().getNodeValue();</span><br><span class="line">String starString= doc.getElementsByTagName(<span class="string">&quot;star&quot;</span>).item(<span class="number">0</span>).getFirstChild().getNodeValue();</span><br><span class="line"><span class="type">int</span> <span class="variable">starInt</span> <span class="operator">=</span> Integer.valueOf(starString);</span><br><span class="line">String chatString= doc.getElementsByTagName(<span class="string">&quot;chat&quot;</span>).item(<span class="number">0</span>).getFirstChild().getNodeValue();</span><br><span class="line">String portrayalString= doc.getElementsByTagName(<span class="string">&quot;portrayal&quot;</span>).item(<span class="number">0</span>).getFirstChild().getNodeValue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resume = <span class="keyword">new</span> <span class="title class_">Resume</span>(nameString, starInt, chatString, portrayalString);</span><br><span class="line">resume.show();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resume;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建新hexo博客后继续更新旧hexo博客的方法</title>
      <link href="/posts/update_old_hexo_blog_after_build_new_hexo_blog/"/>
      <url>/posts/update_old_hexo_blog_after_build_new_hexo_blog/</url>
      
        <content type="html"><![CDATA[<p>我创建了一个新的 github 账号 ChangingSelf（憧憬少）来搭建新的博客，旧的博客搭建在旧账号 HaneChiri（羽尘）上，原本的博客已经有一些人知道了，所以我用这个方式来将以前的访客带到我的新博客来。</p><p>问题在于，为了部署新博客，我将原本的 ssh 密钥对文件删掉了，重新生成了新的 ssh，现在想要部署旧博客就会出现类似下面的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Permission to HaneChiri/HaneChiri.github.io.git denied to ChangingSelf.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights                             `</span><br></pre></td></tr></table></figure><p>大意是我没有权限，也就是 ssh 没有配好。</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.csdn.net/skylin19840101/article/details/98616205">github 支持多个账号</a></li><li><a href="https://www.cnblogs.com/yanglang/p/9563496.html">SSH-keygen 用法</a></li><li><a href="https://www.awaimai.com/2200.html">git 配置多个 SSH-key</a></li><li><a href="https://blog.csdn.net/hao495430759/article/details/80673568">git 配置多个 SSH-key-多图易理解版</a></li><li><a href="https://www.centos.bz/2018/06/%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAssh%E5%AF%86%E9%92%A5%E5%AF%B9%E5%B9%B6%E4%B8%94%E6%B0%B8%E4%B9%85%E5%A4%9Assh%E7%AE%A1%E7%90%86/">配置多个 ssh 密钥对并且永久多 ssh 管理</a></li><li><a href="https://blog.csdn.net/weixin_34377919/article/details/91857803">是否必须每次添加 ssh-add</a></li><li><a href="https://baike.baidu.com/item/SSH/10407">ssh 百度百科</a></li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="目前状况"><a href="#目前状况" class="headerlink" title="目前状况"></a>目前状况</h2><p>操作系统是 win10（找到的资料很多 linux 的，不过没关系，有 git-bash）</p><p>github 上有两个账号，一个旧账号（HaneChiri），一个新账号（ChangingSelf）。本地有两个 hexo 博客源代码文件夹，分别对应两个账号上搭建的博客。</p><p>本地<code>C:\Users\Administrator\.ssh</code>文件夹内有：</p><ul><li>id_rsa.pub：公钥文件，已添加到 ChangingSelf 账号的 ssh-key</li><li>id_rsa：私钥文件</li><li>known_hosts</li></ul><p>现在在 ChangingSelf 博客文件夹内使用<code>hexo d</code>部署博客，可以部署到对应账号的仓库，而在 HaneChiri 博客文件夹内部署博客，则权限不足。</p><p>（现在回想起来也许直接将现在新的公钥添加到旧账号中就搞定了呀，搞那么麻烦 QAQ，等写完这篇文再试试这个方法）</p><h2 id="过程复盘"><a href="#过程复盘" class="headerlink" title="过程复盘"></a>过程复盘</h2><h3 id="生成新密钥对"><a href="#生成新密钥对" class="headerlink" title="生成新密钥对"></a>生成新密钥对</h3><p>先来看看<a href="https://baike.baidu.com/item/SSH/10407">百度百科</a>关于 SSH（安全外壳协议）的介绍：</p><blockquote><p>从客户端来看，SSH 提供两种级别的安全验证。</p><p><strong>第一种级别（基于口令的安全验证）</strong></p><p>只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。</p><p><strong>第二种级别（基于密匙的安全验证）</strong></p><p>需要依靠<a href="https://baike.baidu.com/item/%E5%AF%86%E5%8C%99">密匙</a>，也就是你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到 SSH 服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务器就用公用密匙加密“质询”（challenge）并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。</p><p>用这种方式，你必须知道自己密匙的<a href="https://baike.baidu.com/item/%E5%8F%A3%E4%BB%A4">口令</a>。但是，与第一种级别相比，第二种级别不需要在网络上传送口令。</p><p>第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要 10 秒 [2] 。</p></blockquote><p>我们现在弄的就是第二种，基于密钥的安全验证。本地创建一个密钥对，将公钥放在 github 服务器上，本地保留私钥。</p><p>首先，打开 git-bash，生成新的 ssh 密钥对：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">ssh-keygen -t rsa -C <span class="string">&quot;youremail@xxx.com&quot;</span> -f keyfileName</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>生成的密钥类型，默认 rsa</td></tr><tr><td>-C</td><td>注释文字，应该不会影响密钥内容，这里设置成邮箱</td></tr><tr><td>-f</td><td>指定密钥文件名，默认为 id_rsa</td></tr></tbody></table><p>由于.ssh 目录下已经存在默认文件名的密钥，所以换一个名字。我想要生成旧账号 HaneChiri 的密钥，所以文件名就起名为<code>id_rsa_hanechiri</code>，当然，这个并无影响。</p><p>最后会生成两个文件，.pub 后缀的是公钥，另一个是私钥。</p><h3 id="添加公钥到-github-账号"><a href="#添加公钥到-github-账号" class="headerlink" title="添加公钥到 github 账号"></a>添加公钥到 github 账号</h3><p>在网页右上角账号设置中找到 SSH key，添加公钥文件的内容即可，添加过程很简单，不详细叙述。</p><p>添加完毕后再次部署 HaneChiri 的博客，发现仍然是这个错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Permission to HaneChiri/HaneChiri.github.io.git denied to ChangingSelf.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line">Please make sure you have the correct access rights</span><br></pre></td></tr></table></figure><p>也对，现在有两个密钥对，可能是配对错误了。</p><p>仔细看错误内容，HaneChiri 库拒绝了用户 ChangingSelf 的访问，也就是说，用的是 HaneChiri 的公钥，与新账号 ChangingSelf 的私钥，难怪无法配对了。因此我们需要改变私钥的选择。</p><h3 id="改变使用的私钥"><a href="#改变使用的私钥" class="headerlink" title="改变使用的私钥"></a>改变使用的私钥</h3><p>我查到的参考博客里面基本上都说要使用<code>ssh-add</code>命令来将私钥添加管理，不过我后来发现，这个添加并不是永久保存，而是添加到 ssh-agent 的高速缓存中，我打开另一个 git-bash 的时候就不行了（参考：<a href="https://blog.csdn.net/weixin_34377919/article/details/91857803">是否必须每次添加 ssh-add</a>）</p><h4 id="临时性保存"><a href="#临时性保存" class="headerlink" title="临时性保存"></a>临时性保存</h4><p>打开 ssh-agent 服务，即输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-agent bash</span><br></pre></td></tr></table></figure><p>然后添加私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-add C:/Users/Administrator/.ssh/id_rsa_hanechiri</span><br></pre></td></tr></table></figure><p>这里的地址是需要使用的私钥文件的绝对地址。</p><p>可以通过-l 选项查看所有已经添加的私钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-add -l</span><br></pre></td></tr></table></figure><p>使用-D 选项清空私钥列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-add -D</span><br></pre></td></tr></table></figure><p>接着在这个 git-bash 里面来操作就行了（如果退出就得再弄一次），此时用<code>hexo d</code>命令部署，就部署成功了。</p><h4 id="永久性保存"><a href="#永久性保存" class="headerlink" title="永久性保存"></a>永久性保存</h4><p>需要永久保存私钥的选择，则需要一个配置文件 config，这个文件长这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile C:/Users/Administrator/.ssh/id_rsa_hanechiri</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User HaneChiri</span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>Host</td><td>网站别名，最好和 HostName 一致</td></tr><tr><td>HostName</td><td>网站域名</td></tr><tr><td>IdentityFile</td><td>私钥文件的绝对路径</td></tr><tr><td>PreferredAuthentications</td><td>验证方式，填 publickey 就是公钥验证</td></tr><tr><td>User</td><td>用户名</td></tr></tbody></table><p>可以配置多个网站，每个网站都有上面这些字段。在你使用 ssh 访问这个文件内存在的某个网站时，ssh 就会拿这个文件里面指定的私钥来进行验证。</p><p>在.ssh 目录下找，如果存在这个名为<code>config</code>的文件，就打开来编辑，没有的话就新建一个。</p><p>配置好文件之后，打开 git-bash 再使用<code>hexo d</code>就搞定部署了。</p><p>由于我只是需要临时将博客地址转移的公告发上旧博客，使用临时的方法就好了。（不过我是先用了 config 文件的方法，写本文时才尝试临时性的方法，成功了）</p><h1 id="最后做个试验"><a href="#最后做个试验" class="headerlink" title="最后做个试验"></a>最后做个试验</h1><p>最后再来试试我写本文时，对 ssh 更加了解之后，才想到的简便方法：直接把新账号 ChangingSelf 的公钥添加到旧账号的 ssh-key 中。</p><p>结果给我显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Key is already in use</span><br></pre></td></tr></table></figure><p>果然没这么简单。找解决方法，也就是上文我写的那些。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编程练习】明日非舟抽卡模拟器（1）按照概率抽取干员星级</title>
      <link href="/posts/Africanights_simu_hr_1/"/>
      <url>/posts/Africanights_simu_hr_1/</url>
      
        <content type="html"><![CDATA[<p>好友封掣写了一个<a href="https://github.com/lollipopnougat/arknights">明日方舟模拟寻访</a>，于是也想做一个来作为 java 的练手，这学期写课设的时候就体现出我平时写代码写太少了。</p><p>当然，经过这学期末的编码轰炸，我现在可不敢像以前一样没有计划地直接开始，先想好它的架构，随后再开始编写，并留下系列博文记录，供以后参考。</p><p><a href="https://github.com/ChangingSelf/Africanights">本项目连载 github 库地址</a></p><span id="more"></span><h1 id="目前已经构思的架构"><a href="#目前已经构思的架构" class="headerlink" title="目前已经构思的架构"></a>目前已经构思的架构</h1><ul><li>主包<ul><li>视图包 view</li><li>模型包 model<ul><li>简历类 Resume：用于存储干员的信息，比如名字，星级，立绘路径等</li><li>人事资源类 HumanResourse：用于存储合成玉以及其他抽卡资源数目<ul><li>属性<ul><li>合成玉数目</li><li>卡池</li></ul></li><li>方法<ul><li>单抽</li><li>十连</li></ul></li></ul></li><li>卡池类 Pool<ul><li>属性<ul><li>星级出率：一维数组，下标对应星级，值为对应出率</li><li>简历池：二维数组，一维下标对应星级，二维下标动态，值为干员引用</li></ul></li><li>方法<ul><li>载入简历 loadResume(String fileName)<br>从文件中读取出简历，并加入简历池</li><li>抽出下一份简历 recruit()<br>先抽取星级，再从对应的星级池中抽取简历</li><li>抽取星级 randomStar()<br>生成 1~100 的随机整数，根据星级出率确定每个星级的区间，判断随机数落在哪个区间，从而确定星级</li><li>抽取对应星级的简历 randomResume(int star)<br>从简历池中随机抽取下标，并返回下标对应的干员引用</li></ul></li></ul></li></ul></li></ul></li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>根据卡池的出率抽取星级。</p><p>干员的星级分为一星到六星，每个星级的概率不一定相同。</p><p>这个目标的要点在于，如何给予六个星级不同的抽取概率。</p><hr><p><strong>方法一</strong>是创建一个 100 个元素的数组，根据不同星级各自的概率分配不同的元素数量。比如，三星有 45%概率被抽出，那么就将 45 个元素赋值为“3”，六星有 2%的概率，那么就将 2 个元素赋值为“6”。最后抽取下标来获取星级。</p><p>不过我没有采取这种方式，这种方式有点暴力。这个例子里面还好，是 100 个整数，假如是 100 个开销比较大的对象，或者概率精确到了很多位小数，那么就不太合适了。</p><hr><p><strong>方法二</strong>是对每个星级划分一个区间，概率决定了区间的长度，在总区间内随机一个数，然后判断落在哪个星级区间。我用的是这个方法。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 卡池类</span></span><br><span class="line"><span class="comment"> * 负责存储卡池概率信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> africanights.model;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pool</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">double</span>[] m_starProbability = <span class="keyword">new</span> <span class="title class_">double</span>[] &#123;</span><br><span class="line"><span class="number">0.00</span>,<span class="number">0.00</span>,<span class="number">0.00</span>,<span class="comment">//1,2星</span></span><br><span class="line"><span class="number">0.40</span>,<span class="number">0.50</span>,<span class="comment">//3,4星</span></span><br><span class="line"><span class="number">0.08</span>,<span class="number">0.02</span><span class="comment">//5,6星</span></span><br><span class="line">&#125;;<span class="comment">//星级出率，下标1~6对应星级，0暂时闲置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据星级概率抽取出一个星级，取值为1~6</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 干员星级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">randomStar</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">star</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//返回值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">randomInt</span> <span class="operator">=</span> random.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">//产生[1,100]之间的随机数</span></span><br><span class="line"><span class="comment">//判断星级区间</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 每一个星级根据概率大小占据[1,100]区间不同长度的区间，</span></span><br><span class="line"><span class="comment"> * 判断随机数落在哪个区间，就是抽取到了哪个星级</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> lowerInt=<span class="number">1</span>;<span class="comment">//边界整数，用于给星级区域定界</span></span><br><span class="line"><span class="type">int</span> upperInt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;m_starProbability.length;i++) &#123;</span><br><span class="line">lowerInt = upperInt;<span class="comment">//上一个星级的上界变为这个星级的下界</span></span><br><span class="line"><span class="type">int</span> <span class="variable">areaLength</span> <span class="operator">=</span> (<span class="type">int</span>)Math.round(m_starProbability[i] * <span class="number">100</span>);</span><br><span class="line">upperInt += areaLength;</span><br><span class="line"><span class="keyword">if</span>(lowerInt &lt;= randomInt &amp;&amp; randomInt &lt; upperInt) &#123;</span><br><span class="line"><span class="comment">//如果随机数落在[lowerInt,upperInt)区间</span></span><br><span class="line">star = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单独处理抽到100的情况</span></span><br><span class="line"><span class="comment">//抽到100则为最高星级</span></span><br><span class="line"><span class="keyword">if</span>(randomInt == <span class="number">100</span>) <span class="keyword">return</span> m_starProbability.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> star;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//测试randomStar()</span></span><br><span class="line"><span class="type">Pool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pool</span>();</span><br><span class="line"><span class="type">int</span>[] counter=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">star</span> <span class="operator">=</span> pool.randomStar();<span class="comment">//测试randomStar()</span></span><br><span class="line">System.out.format(<span class="string">&quot;%d\n&quot;</span>,star);</span><br><span class="line">counter[star]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++) &#123;</span><br><span class="line">System.out.format(<span class="string">&quot;抽到%d星%d个\n&quot;</span>,i,counter[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试randomStar()*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改git仓库已经commit的用户名和邮箱信息</title>
      <link href="/posts/git_amend_commited_info/"/>
      <url>/posts/git_amend_commited_info/</url>
      
        <content type="html"><![CDATA[<p>换了一个 github 账号，想把以前的仓库 push 到新的账号上，但是 commit 的用户名和邮箱信息还是以前的，想修改成新的用户信息。</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://msd.misuland.com/pd/3223833238703179904">图文详解如何修改 git 已提交记录的邮箱？</a> ：关于如何使用<code>git rebase -i</code>来修改 commit 的信息</p></li><li><p><a href="https://www.jianshu.com/p/72717f1a1e90">github 修改 commit 的用户名和邮箱</a> ： 这里面讲得很全面，所有方法都讲到了</p></li><li><p><a href="https://help.github.com/en/github/using-git/changing-author-info">git 更改作者信息</a> ：git 官方教程，使用脚本</p></li></ul><h1 id="最终采纳的方法"><a href="#最终采纳的方法" class="headerlink" title="最终采纳的方法"></a>最终采纳的方法</h1><p>使用<code>git rebase</code>成功修改了一条，但是一条条改比较麻烦。</p><p>最终使用了官方提供的脚本（怪不得那么多教程的脚本代码都长一样，原来是官方的），修改前面三个变量即可，详情见上面的官方教程的参考链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">OLD_EMAIL=&quot;your-old-email@example.com&quot;</span></span><br><span class="line"><span class="string">CORRECT_NAME=&quot;Your Correct Name&quot;</span></span><br><span class="line"><span class="string">CORRECT_EMAIL=&quot;your-correct-email@example.com&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">&#x27;</span> --tag-name-filter <span class="built_in">cat</span> -- --branches --tags</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课设总结】基于LAN的即时通信软件</title>
      <link href="/posts/IMS_base_on_LAN/"/>
      <url>/posts/IMS_base_on_LAN/</url>
      
        <content type="html"><![CDATA[<p>本学期开了计算机网络课程，期末的课程设计我选了这个题目——基于 LAN 的即时通讯软件，题目就只有这么短，剩下的全部自己发挥，不限平台不限语言。</p><p>由于以前自学过 c++网络编程，写了个简易的聊天室（bug 百出），所有刚开始也想用 c++来写，新建了 MFC 项目正在画界面的时候，才想起今时不同往日，我会的语言不止 c++了，还有 java 和 python。最后决定用 python，虽说 java 写的可能以后会更好扩展更好维护一些，但是 python 写起来应该会更加轻松（个人看法）。</p><p>本文基于我当时写的课设报告，在之后可能会将其中学到的知识整理成其他的博文，并在此文中列出。</p><p>b 站视频已上传：<a href="https://www.bilibili.com/video/av83477871/">【课设思路分享】基于 LAN 的即时通讯软件</a></p><p>对应 github 库传送门：<a href="https://github.com/ChangingSelf/simuqq">simuqq</a></p><p>比较长，配合侧边栏目录食用。</p><span id="more"></span><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>程序分为服务端和客户端两部分，服务端无图形界面，客户端具有登录界面、主界面以及聊天窗口界面总共三个图形界面。</p><p>先开启服务端程序，再打开客户端程序。</p><p>客户端的初始界面是登陆界面，在这个界面可以输入用户名、密码，具有“登录”和“注册”两个按钮。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102154415.png" alt="客户端登录界面"></p><p>在输入用户名和密码登录之后，会跳转到主页面。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102200520.png" alt="开了三个客户端登录之后的效果"></p><p>主页面显示账号个人信息，以及当前在线的其他账号的用户名。用户可以双击选择当前在线的其他账号打开聊天窗口进行聊天。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102201641.png" alt="打开聊天窗口进行聊天"></p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102201905.png" alt="回复对方"></p><p>其中一人断开连接之后：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102202345.png" alt="断开连接之后"></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>操作系统</th><th>windows10</th></tr></thead><tbody><tr><td>编辑器（没影响）</td><td>visual studio code</td></tr><tr><td>解释器</td><td>python3.7.0</td></tr></tbody></table><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>画个用例图先：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102151916.png" alt="用例图"></p><p>客户端的用例有注册、登录、连接到服务端、查看在线的其他客户端以及选择聊天对象。</p><p>其中，选择聊天对象进行聊天需要先查看当前有哪些客户端在线，而在这之前需要登录。</p><h1 id="代码文件结构"><a href="#代码文件结构" class="headerlink" title="代码文件结构"></a>代码文件结构</h1><ul><li>client.py：客户端业务逻辑代码</li><li>server.py：服务端代码</li><li>gui<ul><li>home_page.py：登录后跳转到的主页面</li><li>login_dlg.py：登录界面</li><li>chat_dlg.py：聊天界面</li></ul></li><li>account_database.json：用于存放注册账号数据的数据文件</li><li>utility.py：存放一些自己写的工具函数</li></ul><h1 id="概要设计及对应代码"><a href="#概要设计及对应代码" class="headerlink" title="概要设计及对应代码"></a>概要设计及对应代码</h1><p>为了方便阅读，就将代码部分与设计部分放在一起。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102154630.png" alt="类图"></p><h3 id="界面类"><a href="#界面类" class="headerlink" title="界面类"></a>界面类</h3><p>图形界面使用的是 python 自带的 tkinter 模块。对每个界面，单独编写一个类，放在单独的模块中，存放在代码根目录下的 gui 文件夹内。而业务逻辑另外编写 client 类和 server 类。</p><p>令界面与业务逻辑结合的方式是，在 client 类中初始化界面时，将自身的处理函数作为回调函数传入界面类中，从而使界面的组件与回调函数绑定。</p><h3 id="登录界面代码示例"><a href="#登录界面代码示例" class="headerlink" title="登录界面代码示例"></a>登录界面代码示例</h3><p>因为界面不是重点，故仅放出登录界面代码，其他两个界面类类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">登录模块login_dlg.py</span></span><br><span class="line"><span class="string">展示登录窗口并实现登录功能</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> gui.chat_dlg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginDlg</span>(tk.Frame):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, loginCallback, regCallback, master=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(master=master)</span><br><span class="line">        <span class="variable language_">self</span>.master = master</span><br><span class="line">        <span class="variable language_">self</span>.geometry()</span><br><span class="line">        <span class="comment"># 设置按钮回调函数</span></span><br><span class="line">        <span class="variable language_">self</span>.loginCallback = loginCallback</span><br><span class="line">        <span class="variable language_">self</span>.regCallback = regCallback</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        <span class="variable language_">self</span>.userName = tk.StringVar()  <span class="comment"># 与文本框双向绑定</span></span><br><span class="line">        <span class="variable language_">self</span>.password = tk.StringVar()</span><br><span class="line">        <span class="comment"># self.pack()</span></span><br><span class="line">        <span class="comment"># self.grid(row=0,column=0)</span></span><br><span class="line">        <span class="variable language_">self</span>.createWidgets()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createWidgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 登录框架=============</span></span><br><span class="line">        loginLF = tk.LabelFrame(<span class="variable language_">self</span>, text=<span class="string">&#x27;登录&#x27;</span>)</span><br><span class="line">        loginLF.grid(row=<span class="number">0</span>, column=<span class="number">0</span>, sticky=tk.E+tk.W)</span><br><span class="line">        <span class="variable language_">self</span>.loginLF = loginLF  <span class="comment"># 这里需要将它保存为属性，否则这个函数结束后会出问题</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 用户名</span></span><br><span class="line">        <span class="variable language_">self</span>.userNameLab = tk.Label(loginLF, text=<span class="string">&#x27;用户名&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.userNameLab.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.userNameEntry = tk.Entry(loginLF, textvariable=<span class="variable language_">self</span>.userName)</span><br><span class="line">        <span class="variable language_">self</span>.userNameEntry.grid(row=<span class="number">0</span>, column=<span class="number">1</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 密码框</span></span><br><span class="line">        <span class="variable language_">self</span>.passwdLab = tk.Label(loginLF, text=<span class="string">&#x27;密码&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.passwdLab.grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.passwdEntry = tk.Entry(</span><br><span class="line">            loginLF, show=<span class="string">&#x27;*&#x27;</span>, textvariable=<span class="variable language_">self</span>.password)</span><br><span class="line">        <span class="variable language_">self</span>.passwdEntry.grid(row=<span class="number">1</span>, column=<span class="number">1</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登录按钮</span></span><br><span class="line">        <span class="variable language_">self</span>.loginBtn = tk.Button(</span><br><span class="line">            loginLF, text=<span class="string">&#x27;登录&#x27;</span>, command=<span class="variable language_">self</span>.loginCallback)</span><br><span class="line">        <span class="variable language_">self</span>.loginBtn.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 注册按钮</span></span><br><span class="line">        <span class="variable language_">self</span>.signupBtn = tk.Button(</span><br><span class="line">            loginLF, text=<span class="string">&#x27;注册&#x27;</span>, command=<span class="variable language_">self</span>.regCallback)</span><br><span class="line">        <span class="variable language_">self</span>.signupBtn.grid(row=<span class="number">2</span>, column=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.userName.get())</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.password.get())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">geometry</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.master.geometry(<span class="string">&#x27;300x100&#x27;</span>)<span class="comment">#用于调整窗口大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">pass</span><span class="comment">#用于在本模块内测试用的函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    window = tk.Tk()</span><br><span class="line">    loginDlg = LoginDlg(test2, test2, window)</span><br><span class="line">    loginDlg.mainloop()</span><br></pre></td></tr></table></figure><h3 id="客户端类-Client"><a href="#客户端类-Client" class="headerlink" title="客户端类 Client"></a>客户端类 Client</h3><p>客户端掌握着界面对象的引用，在初始化它们时，将自身的处理函数传入给它们，以便在触发界面事件时调用。</p><p>客户端主要提供了以下方法：</p><table><thead><tr><th>方法</th><th>简介</th></tr></thead><tbody><tr><td>connect</td><td>连接到服务器</td></tr><tr><td>login</td><td>登录，需要调用 connect，由服务端进行合法性检测</td></tr><tr><td>register</td><td>注册，为了简化而直接由客户端写入文件</td></tr><tr><td>send</td><td>构造消息并发送给服务端</td></tr><tr><td>recv</td><td>接收消息并解析</td></tr></tbody></table><p>为了客户端与服务端交流的便利，我自定义了消息格式，所以发送时需要封装，接收时需要解析，下文会讲。</p><h3 id="服务端类-Server"><a href="#服务端类-Server" class="headerlink" title="服务端类 Server"></a>服务端类 Server</h3><p>服务端没有界面（做了就做不完了），负责接收连接以及转发客户端之间的聊天消息。ip 以及端口是固定的。</p><h2 id="数据文件格式"><a href="#数据文件格式" class="headerlink" title="数据文件格式"></a>数据文件格式</h2><p>已经注册的账号信息使用 json 文件保存（即<code>account_database.json</code>），保存格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;用户名1&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密码1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;registerTime&quot;</span><span class="punctuation">:</span> 注册时间<span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;用户名2&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密码2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;registerTime&quot;</span><span class="punctuation">:</span> 注册时间<span class="number">2</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>使用用户名作为键，每个用户对应一个密码以及一个注册时间。</p><h2 id="自定义消息"><a href="#自定义消息" class="headerlink" title="自定义消息"></a>自定义消息</h2><p><strong>（这个是我自己规定的服务端和客户端之间交换信息的格式）</strong></p><p>客户端不直接与另一个客户端通信，而是通过服务端转发。</p><p>客户端与服务端之间发送规定格式的 json 字符串来交流，此字符串以下称之为“消息”，聊天的文字称作“聊天消息”。此格式解析出来是 python 的一个字典，也就是 json 里面的对象，可以方便地使用键值对来找到需要的字段值。字段如下（不是所有的字段都同时被设置）：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>当前消息类型（必选）</td></tr><tr><td>userName</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>errStr</td><td>错误字符串</td></tr><tr><td>infoStr</td><td>信息字符串</td></tr><tr><td>message</td><td>聊天消息</td></tr><tr><td>data</td><td>传递的数据</td></tr></tbody></table><p>其中 type 字段的值以及对应的必选字段如下：</p><ul><li>登录 login：必须设置 userName 和 password，用于客户端发送登录请求以及服务端发送确认；</li><li>数据刷新 data：必须设置 data，且为字典，用于服务端给客户端发送更新后的当前在线列表；</li><li>聊天消息 msg: 必须设置 message 和 userName，用于客户端向另一个客户端发送聊天消息时使用，其中 message 是聊天消息的内容。当源客户端向服务端发送此消息时，userName 是目的客户端的用户名，服务端接收到消息之后，将 userName 改为源客户端的用户名，然后转发消息给目的客户端；</li><li>提示 info: 必须设置 infoStr，发送提示信息</li><li>错误 err:必须设置 errStr，发送错误信息</li></ul><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>注册时客户端读取数据文件并检查注册信息合法性，用户名不可重复，密码可以重复，用户名和密码都是字符串。</p><p>当注册信息合法，就组装 json 字符串，并写入数据文件。</p><p><strong>注意：这里本来应该是客户端将注册信息发送给服务端，然后服务端修改数据文件的，但是我为了防止自己写不完，就简化了这个流程</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#...</span></span><br><span class="line"><span class="keyword">import</span> utility<span class="comment">#只强调一下这个是自定义模块</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">register</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        注册</span></span><br><span class="line"><span class="string">        在填写了用户名和密码之后，如果信息合法，则将信息写入数据文件</span></span><br><span class="line"><span class="string">        :return: 注册成功返回0,失败返回-1</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 从登录对话框获取信息</span></span><br><span class="line">        userName = <span class="variable language_">self</span>.gui[<span class="string">&#x27;loginDlg&#x27;</span>].userName.get()</span><br><span class="line">        password = <span class="variable language_">self</span>.gui[<span class="string">&#x27;loginDlg&#x27;</span>].password.get()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查合法性</span></span><br><span class="line">        <span class="keyword">if</span> userName == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            utility.showerror(<span class="string">&#x27;用户名不能为空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> password == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            utility.showerror(<span class="string">&#x27;密码不能为空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.dataFile, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">            <span class="comment"># 使用a+方式打开，防止文件内容被覆盖</span></span><br><span class="line">            fp.seek(<span class="number">0</span>)  <span class="comment"># 调整指针到开头</span></span><br><span class="line">            accountStr = fp.read()</span><br><span class="line">            <span class="keyword">if</span> accountStr == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="comment"># 如果文件内没有内容，即刚刚创建</span></span><br><span class="line">                accountData = &#123;&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 否则读取文件内容</span></span><br><span class="line">                fp.seek(<span class="number">0</span>)</span><br><span class="line">                accountData = json.loads(accountStr)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> userName <span class="keyword">in</span> accountData.keys():</span><br><span class="line">                utility.showerror(<span class="string">&#x27;该用户名已经被注册&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 写入数据文件</span></span><br><span class="line">            accountData.update(&#123;</span><br><span class="line">                userName: &#123;</span><br><span class="line">                    <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">                    <span class="string">&#x27;registerTime&#x27;</span>: time.time()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            utility.showinfo(<span class="string">&#x27;注册成功！&#x27;</span>)</span><br><span class="line">            fp.seek(<span class="number">0</span>)</span><br><span class="line">            fp.truncate()  <span class="comment"># 只保留从开头到当前位置，其余删除#当前位置为开头，故为全部删除</span></span><br><span class="line">            json.dump(accountData, fp, indent=<span class="number">4</span>, separators=(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;:&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>这一部分的要点在于，文件中存储的是 json 字符串，不能简单地添加到文件末尾，而是需要将数据先读取出来，添加完数据后，再将整个文件覆盖。</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>客户端首先尝试连接服务端，如果成功再进行下一步。</p><h3 id="请求登录"><a href="#请求登录" class="headerlink" title="请求登录"></a>请求登录</h3><p>客户端向服务端发送登录请求消息，并等待服务端的确认消息。</p><p><strong>登录请求消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>login</td></tr><tr><td>userName</td><td>用户名输入框中的值</td></tr><tr><td>password</td><td>密码输入框中的值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">sendLoginData</span>(<span class="params">self, userName: <span class="built_in">str</span>, password: <span class="built_in">str</span></span>):</span><br><span class="line">       <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">       发送登录数据</span></span><br><span class="line"><span class="string">       &#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="comment"># 构造并发送消息</span></span><br><span class="line">       accountData = &#123;</span><br><span class="line">           <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;userName&#x27;</span>: userName,</span><br><span class="line">           <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line">       &#125;</span><br><span class="line">       accountStr = utility.dumpJson(accountData)</span><br><span class="line">       <span class="variable language_">self</span>.send(accountStr)</span><br></pre></td></tr></table></figure><p>服务端收到登录请求消息之后，检查账号信息的合法性。会向客户端回复两种消息，错误消息或者登录确认消息。</p><h3 id="处理登录请求"><a href="#处理登录请求" class="headerlink" title="处理登录请求"></a>处理登录请求</h3><h4 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h4><p>如果账号信息错误，服务端向此客户端发送错误消息，并断开与它的连接。错误消息包含以下字段：</p><p><strong>err 消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>err</td></tr><tr><td>errStr</td><td>错误信息</td></tr></tbody></table><p>客户端收到此错误消息后，显示警告对话框，并重置 socket。</p><h4 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h4><p>若服务端检测到账号信息无误，则向此客户端发送确认消息，并将它的 socket、地址以及登录时间加入到在线列表中，并向其他在线的客户端发送数据刷新消息（见下文）。</p><p><strong>登录确认消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>login</td></tr><tr><td>userName</td><td>置为空字符串</td></tr><tr><td>password</td><td>置为空字符串</td></tr><tr><td>infoStr</td><td>可选，登录成功提示</td></tr><tr><td>data</td><td>设置为当前在线账户列表</td></tr></tbody></table><p>这是服务端处理登录请求的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">acceptLogin</span>(<span class="params">self, cliSock, cliAddr</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        接受已连接的客户端的登录请求</span></span><br><span class="line"><span class="string">        :return: 登录成功返回0，失败返回-1</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 获取客户端提交的账号密码，客户端以json字符串的形式发送过来</span></span><br><span class="line">        loginStr = cliSock.recv(<span class="variable language_">self</span>.bufsize).decode()</span><br><span class="line">        loginDict = utility.loadJson(loginStr)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查登录消息是否正确</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> utility.isCorrectMsg(loginDict):</span><br><span class="line">            errStr = <span class="string">&#x27;数据有误，请重新连接&#x27;</span></span><br><span class="line">            <span class="variable language_">self</span>.closeLink(cliSock, errStr)  <span class="comment"># 关闭连接</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查账号</span></span><br><span class="line">        cliUserName = loginDict[<span class="string">&#x27;userName&#x27;</span>]</span><br><span class="line">        cliPassword = loginDict[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        res = <span class="variable language_">self</span>.checkAccount(cliUserName, cliPassword)</span><br><span class="line">        <span class="keyword">if</span> res == -<span class="number">1</span>:</span><br><span class="line">            errStr = <span class="string">&#x27;账号不存在&#x27;</span></span><br><span class="line">            <span class="variable language_">self</span>.closeLink(cliSock, errStr)  <span class="comment"># 关闭连接</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> res == -<span class="number">2</span>:</span><br><span class="line">            errStr = <span class="string">&#x27;密码错误&#x27;</span></span><br><span class="line">            <span class="variable language_">self</span>.closeLink(cliSock, errStr)  <span class="comment"># 关闭连接</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.info(<span class="string">&#x27;用户[userName=&#123;&#125;]登录成功&#x27;</span>.<span class="built_in">format</span>(cliUserName))</span><br><span class="line">            <span class="comment"># 将新用户加入在线列表</span></span><br><span class="line">            <span class="variable language_">self</span>.onlineClients.update(&#123;</span><br><span class="line">                cliUserName: &#123;</span><br><span class="line">                    <span class="string">&#x27;socket&#x27;</span>: cliSock,  <span class="comment"># 客户端socket</span></span><br><span class="line">                    <span class="string">&#x27;address&#x27;</span>: cliAddr,  <span class="comment"># 客户端地址</span></span><br><span class="line">                    <span class="string">&#x27;loginTime&#x27;</span>: time.time()  <span class="comment"># 登录时间</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment"># 登录成功，向该客户端发送确认消息</span></span><br><span class="line">            <span class="variable language_">self</span>.sendLoginAck(cliSock)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sendLoginAck</span>(<span class="params">self, cliSock</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        登录成功之后向客户端发送确认消息以及当前在线客户端列表</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        curOnline = <span class="variable language_">self</span>.getCurOnline()  <span class="comment"># 获取当前在线列表</span></span><br><span class="line"></span><br><span class="line">        msgDict = &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;infoStr&#x27;</span>: <span class="string">&#x27;登录成功！&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: curOnline,</span><br><span class="line">            <span class="string">&#x27;userName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.send(cliSock, **msgDict)</span><br></pre></td></tr></table></figure><h3 id="等待确认"><a href="#等待确认" class="headerlink" title="等待确认"></a>等待确认</h3><p>发送了登录请求消息之后，客户端会等待服务端发来的登录确认消息或者错误消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recvLoginAck</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        等待服务端传回确认</span></span><br><span class="line"><span class="string">        :return: 成功返回0，失败返回-1</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        res = <span class="variable language_">self</span>.recv()</span><br><span class="line">        res = utility.loadJson(res)</span><br><span class="line">        <span class="comment"># 检查消息合法性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> utility.isCorrectMsg(res):</span><br><span class="line">            <span class="variable language_">self</span>.resetSock()</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> res[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;err&#x27;</span>:</span><br><span class="line">            <span class="comment"># 如果收到的是服务端的错误消息</span></span><br><span class="line">            utility.showerror(res[<span class="string">&#x27;errStr&#x27;</span>])</span><br><span class="line">            <span class="variable language_">self</span>.resetSock()  <span class="comment"># 重启socket</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> res[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;login&#x27;</span>:</span><br><span class="line">            <span class="comment"># 登录成功，输出信息</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;infoStr&#x27;</span> <span class="keyword">in</span> res.keys():</span><br><span class="line">                utility.showinfo(res[<span class="string">&#x27;infoStr&#x27;</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                utility.showinfo(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;data&#x27;</span> <span class="keyword">in</span> res.keys():</span><br><span class="line">                <span class="variable language_">self</span>.contactList = res[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;curOnline&#x27;</span>]</span><br><span class="line">                <span class="variable language_">self</span>.gui[<span class="string">&#x27;homePage&#x27;</span>].refreshList(<span class="variable language_">self</span>.contactList)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                contactList = &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果不是err消息也不是确认消息，则登录失败</span></span><br><span class="line">            <span class="variable language_">self</span>.resetSock()</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="客户端登录代码"><a href="#客户端登录代码" class="headerlink" title="客户端登录代码"></a>客户端登录代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        登录</span></span><br><span class="line"><span class="string">        :return: 登录成功返回0，失败返回-1</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 从登录对话框获取信息</span></span><br><span class="line">        userName = <span class="variable language_">self</span>.gui[<span class="string">&#x27;loginDlg&#x27;</span>].userName.get()</span><br><span class="line">        password = <span class="variable language_">self</span>.gui[<span class="string">&#x27;loginDlg&#x27;</span>].password.get()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检查合法性</span></span><br><span class="line">        <span class="keyword">if</span> userName == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            utility.showerror(<span class="string">&#x27;用户名不能为空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> password == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            utility.showerror(<span class="string">&#x27;密码不能为空&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果连接成功，向服务器发送信息</span></span><br><span class="line">        res = <span class="variable language_">self</span>.connect()</span><br><span class="line">        <span class="keyword">if</span> res != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 构造并发送消息</span></span><br><span class="line">        <span class="variable language_">self</span>.sendLoginData(userName, password)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果发送信息成功，且账号信息正确，则弹出好友列表页面</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 等待服务端的确认信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.recvLoginAck() == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 跳转到主页面</span></span><br><span class="line">            <span class="variable language_">self</span>.userName = userName</span><br><span class="line">            <span class="variable language_">self</span>.gotoHomePage()</span><br><span class="line">            <span class="comment"># 开启接收消息线程</span></span><br><span class="line">            <span class="variable language_">self</span>.recvThread = threading.Thread(target=<span class="variable language_">self</span>.recvLoop)</span><br><span class="line">            <span class="variable language_">self</span>.recvThread.setDaemon(<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.recvThread.start()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>登录的流程如下图所示：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102173045.png" alt="客户端登录-活动图"></p><h2 id="客户端界面跳转"><a href="#客户端界面跳转" class="headerlink" title="客户端界面跳转"></a>客户端界面跳转</h2><p>登录成功后，会从登陆界面跳转到主页面。</p><p>原理是将登录界面隐藏，再显示主界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gotoHomePage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        跳转到主页面</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="variable language_">self</span>.gui.keys():</span><br><span class="line">            <span class="variable language_">self</span>.gui[page].grid_forget()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.window.title(<span class="string">&#x27;SimuQQ主页面&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.gui[<span class="string">&#x27;homePage&#x27;</span>].grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.gui[<span class="string">&#x27;homePage&#x27;</span>].userName.<span class="built_in">set</span>(<span class="variable language_">self</span>.userName)</span><br><span class="line">        <span class="variable language_">self</span>.gui[<span class="string">&#x27;homePage&#x27;</span>].geometry()</span><br></pre></td></tr></table></figure><p>打开聊天窗口：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openChatWindow</span>(<span class="params">self, userName</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        打开聊天窗口</span></span><br><span class="line"><span class="string">        :param userName: 聊天对象的用户名</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.chatWith = userName  <span class="comment"># 设置聊天对象</span></span><br><span class="line">        <span class="variable language_">self</span>.gui[<span class="string">&#x27;chatDlg&#x27;</span>].grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.chatWindow.title(<span class="string">&#x27;[&#123;&#125;]向[&#123;&#125;]发起的聊天&#x27;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.userName, userName))</span><br><span class="line">        <span class="variable language_">self</span>.chatWindow.deiconify()</span><br><span class="line">        <span class="comment"># self.chatWindow.mainloop()</span></span><br></pre></td></tr></table></figure><h2 id="发送聊天消息"><a href="#发送聊天消息" class="headerlink" title="发送聊天消息"></a>发送聊天消息</h2><p>用户在客户端的在线列表中双击选择一个在线客户端，会打开对选择对象的聊天窗口。</p><p>用户在输入框中输入聊天消息并点击发送按钮后，客户端将会构建并发送 msg 消息给服务端，该消息的内容如下：</p><p><strong>msg 消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>msg</td></tr><tr><td>message</td><td>需要发送给聊天对象的聊天消息</td></tr><tr><td>userName</td><td>聊天对象的用户名</td></tr></tbody></table><p>服务端在收到客户端的 msg 消息后，将 userName 字段修改为发送端的用户名，并转发给目的端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendChatMsg</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        发送聊天消息</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 获取聊天窗口的输入框内文字</span></span><br><span class="line">        chatMsg = <span class="variable language_">self</span>.gui[<span class="string">&#x27;chatDlg&#x27;</span>].getInputContent()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构造消息</span></span><br><span class="line">        msgDict = &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;userName&#x27;</span>: <span class="variable language_">self</span>.chatWith,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: chatMsg</span><br><span class="line">        &#125;</span><br><span class="line">        msgStr = utility.dumpJson(msgDict)</span><br><span class="line">        <span class="comment"># 发送消息</span></span><br><span class="line">        <span class="variable language_">self</span>.send(msgStr)</span><br><span class="line">        <span class="comment"># 同时在自己这边显示自己说的话</span></span><br><span class="line">        <span class="comment"># 构建输出内容</span></span><br><span class="line">        outputContent = <span class="string">&#x27;[&#123;&#125;]&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            <span class="variable language_">self</span>.userName, time.strftime(<span class="string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>), chatMsg)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.gui[<span class="string">&#x27;chatDlg&#x27;</span>].addOutputContent(outputContent)</span><br><span class="line">        <span class="comment"># 清空输入框</span></span><br><span class="line">        <span class="variable language_">self</span>.gui[<span class="string">&#x27;chatDlg&#x27;</span>].clearInputContent()</span><br></pre></td></tr></table></figure><h2 id="客户端消息处理"><a href="#客户端消息处理" class="headerlink" title="客户端消息处理"></a>客户端消息处理</h2><p>客户端在登录成功后，开启消息接收线程，它的线程体是一个无限循环，并将其置为守护线程（Deamon Thread），在所有前台线程结束之后，消息接收线程也随之结束。</p><p>在没有注意到这一点前，我调试了这个 bug 很久——关闭窗口会无响应，后来才知道不是 tkinter 的问题，而是我开的这个线程没有随之关闭。</p><p>客户端主要会收到两种消息，数据刷新消息和聊天消息。同样的，这里本来还应该处理 err 消息以及 info 消息的，担心做不完就简化了。</p><h3 id="数据刷新消息"><a href="#数据刷新消息" class="headerlink" title="数据刷新消息"></a>数据刷新消息</h3><p>在服务端接收一个新的连接时，或是服务端检测到一个旧有连接断开时，会向当前在线的客户端发送一个数据刷新消息，该消息包含以下字段：</p><p><strong>data 消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>data</td></tr><tr><td>data</td><td>当前在线账号的用户名的列表</td></tr></tbody></table><p>客户端收到此消息时，调用界面类的对应方法刷新主页面的在线列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Client</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recvLoop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        接收消息的循环</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            msgStr = <span class="variable language_">self</span>.recv()</span><br><span class="line">            msgDict = utility.loadJson(msgStr)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> utility.isCorrectMsg(msgDict):</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 如果消息不正确，忽略这个消息</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> msgDict[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;data&#x27;</span>:</span><br><span class="line">                <span class="comment"># 如果接收到数据刷新消息</span></span><br><span class="line">                <span class="variable language_">self</span>.contactList = msgDict[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;curOnline&#x27;</span>]</span><br><span class="line">                <span class="variable language_">self</span>.gui[<span class="string">&#x27;homePage&#x27;</span>].refreshList(<span class="variable language_">self</span>.contactList)</span><br><span class="line">            <span class="keyword">if</span> msgDict[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;msg&#x27;</span>:</span><br><span class="line">                <span class="comment"># 如果接收到聊天消息</span></span><br><span class="line">                <span class="variable language_">self</span>.openChatWindow(msgDict[<span class="string">&#x27;userName&#x27;</span>])</span><br><span class="line">                <span class="comment"># 构建输出内容</span></span><br><span class="line">                outputContent = <span class="string">&#x27;[&#123;&#125;]&#123;&#125;\n&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                    msgDict[<span class="string">&#x27;userName&#x27;</span>], time.strftime(<span class="string">&#x27;%Y/%m/%d %H:%M:%S&#x27;</span>), msgDict[<span class="string">&#x27;message&#x27;</span>])</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">self</span>.gui[<span class="string">&#x27;chatDlg&#x27;</span>].addOutputContent(outputContent)</span><br></pre></td></tr></table></figure><h2 id="服务端消息处理"><a href="#服务端消息处理" class="headerlink" title="服务端消息处理"></a>服务端消息处理</h2><p>接下来是比较核心的部分。</p><p>在编写客户端时，为了专注于客户端的编写，对于服务端，我采用的是比较简单的无限循环：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">acceptLoop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        接受连接的线程循环</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        刚开始的时候测试客户端用的，</span></span><br><span class="line"><span class="string">        客户端的登录测试完毕之后，将其中的代码提取出来封成另一个函数acceptLogin()，</span></span><br><span class="line"><span class="string">        供selectLoop使用</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            logging.info(<span class="string">&#x27;正在等待新的连接&#x27;</span>)</span><br><span class="line">            <span class="comment"># 接受新的连接请求</span></span><br><span class="line">            cliSock, cliAddr = <span class="variable language_">self</span>.serSock.accept()</span><br><span class="line">            <span class="variable language_">self</span>.acceptLogin(cliSock, cliAddr)</span><br></pre></td></tr></table></figure><p>客户端大致成型之后，我开始编写服务端的这一部分。</p><p>我想起来之前在编写 c++聊天室的时候，用到了一个事件模型，可以解决以上线程循环遇到的问题。</p><p>上面这个写法会出现的问题，以前我就遇到过。</p><p>如果服务端想要监听多个客户端发送过来的聊天消息，第一种方法是遍历每个客户端，recv 每个客户端（将客户端 socket 改成非阻塞的就行）；第二种方法是为每个客户端建立单独的接收消息线程。</p><p>这两个方案其实都不太好。后来我找到了一个叫做事件选择模型的东西（<code>WSAEventSelect</code>），解决了一部分问题，当时知识还是太浅薄，不能完全理解那东西，所以还是写出了一堆 bug。</p><p>现在回想起来，python 里面应该也有类似的东西吧？我就记着个 select 了，一搜，还真是叫做 select。</p><p>找到可用的资料好像并不太多，其中一个对我很有用的文章的链接是这个：<a href="https://www.jianshu.com/p/e26594304e11">python Select 模块简单使用</a></p><p>后来翻了一下文档，找到了关于 select 的英文原版<a href="https://docs.python.org/3.7/library/select.html#select.select">简介</a></p><p><strong>我简单描述一下我在这个项目里面是如何使用 select 模型的：</strong></p><p>设置三个需要处理消息的队列，分别存放所有的 socket（包括服务端 socket 和客户端 socket）、用于存放存在待处理消息的 socket 的等待队列、需要检查错误的 socket 的队列。</p><p>select 函数接收上述三个队列，并在阻塞 timeout 时间后返回三个队列，分别是可读取队列、可写入队列和错误队列。</p><p>可读取队列中的 socket 是已经接收到消息的 socket，即接收缓冲区中存在消息，需要处理。如果是服务端 socket，表明有新的客户端连接请求到达，对连接请求进行处理；如果是客户端 socket，表明有已经连接的客户端发送消息过来，先将它们放入对应的消息队列中，并将它们加入到第二个监听队列即等待消息处理的队列。</p><p>可写入队列中的 socket 是从等待消息处理的队列中选择出目前能够接受消息、即接收缓冲区可用的 socket。遍历这个队列，对其中的 socket 进行消息处理，处理完毕后删除它的消息队列，以及将它移出等待队列。</p><p>错误队列存放从需要检查错误的 socket 队列中选择出的出错的 socket，在本项目中将需要检查设置为存放所有 socket 的队列，即检查所有的 socket。遍历此队列，将错误的 socket 移除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Server</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">selectLoop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        使用select函数来进行处理的循环</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        readList = [<span class="variable language_">self</span>.serSock]</span><br><span class="line">        writeList = []</span><br><span class="line">        message_dict = &#123;&#125;  <span class="comment"># 存储消息用的字典，键为socket，值为消息列表</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        logging.info(<span class="string">&#x27;服务器已经启动，正在等待客户端的连接&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            logging.debug(<span class="string">&#x27;循环数：&#x27;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="comment"># select函数阻塞timeout时间，从参数的三个列表中，选择出此时可读取、可写入、出现错误的元素返回</span></span><br><span class="line">            readableList, writableList, exceptionList = select.select(</span><br><span class="line">                readList, writeList, readList, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 1. 遍历当前可读取的socket</span></span><br><span class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> readableList:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> sock <span class="keyword">is</span> <span class="variable language_">self</span>.serSock:</span><br><span class="line">                    <span class="comment"># 如果是服务端socket，那么就是有客户端来连接了</span></span><br><span class="line">                    cliSock, cliAddr = sock.accept()</span><br><span class="line">                    <span class="keyword">if</span> <span class="variable language_">self</span>.acceptLogin(cliSock, cliAddr) == <span class="number">0</span>:</span><br><span class="line">                        <span class="comment"># 如果登录成功</span></span><br><span class="line">                        readList.append(cliSock)  <span class="comment"># 将新的客户端socket加入监听列表</span></span><br><span class="line">                        message_dict[cliSock] = []  <span class="comment"># 为新的socket创建消息列表</span></span><br><span class="line">                        <span class="variable language_">self</span>.refreshCurOnline()  <span class="comment"># 给所有在线客户端刷新在线信息</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 已连接的用户发送消息过来</span></span><br><span class="line">                    <span class="comment"># 接收一下</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        data = sock.recv(<span class="variable language_">self</span>.bufsize)</span><br><span class="line">                    <span class="keyword">except</span>:</span><br><span class="line">                        <span class="comment"># 如果收到空数据，代表客户端已经断开连接</span></span><br><span class="line">                        readList.remove(sock)</span><br><span class="line">                        <span class="keyword">del</span> message_dict[sock]  <span class="comment"># 删除对应的消息队列</span></span><br><span class="line"></span><br><span class="line">                        logging.info(<span class="string">&#x27;客户端[userName=&#123;&#125;]断开了连接&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                            <span class="variable language_">self</span>.getUserNameBySock(sock)))</span><br><span class="line">                        <span class="variable language_">self</span>.closeLink(sock)</span><br><span class="line">                    <span class="keyword">else</span>:  <span class="comment"># 如果没有出现异常，再检查是否收到空数据</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                            <span class="comment"># 如果收到空数据，代表客户端已经断开连接</span></span><br><span class="line">                            readList.remove(sock)</span><br><span class="line">                            <span class="keyword">del</span> message_dict[sock]  <span class="comment"># 删除对应的消息队列</span></span><br><span class="line">                            <span class="variable language_">self</span>.closeLink(sock)</span><br><span class="line">                            <span class="built_in">print</span>(<span class="string">&#x27;客户端[&#123;&#125;]断开了连接&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">                                <span class="variable language_">self</span>.getUserNameBySock(sock)))</span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="comment"># 收到老用户的消息</span></span><br><span class="line">                            dataStr = data.decode()</span><br><span class="line">                            <span class="comment"># 将消息加入对应的消息队列</span></span><br><span class="line">                            message_dict[sock].append(dataStr)</span><br><span class="line">                            writeList.append(sock)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 2.处理待回复的消息</span></span><br><span class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> writableList:</span><br><span class="line">                <span class="keyword">while</span> <span class="built_in">len</span>(message_dict[sock]) &gt; <span class="number">0</span>:</span><br><span class="line">                    dataStr = message_dict[sock][<span class="number">0</span>]  <span class="comment"># 取出消息队列中第一个消息</span></span><br><span class="line">                    <span class="keyword">del</span> message_dict[sock][<span class="number">0</span>]</span><br><span class="line">                    <span class="variable language_">self</span>.addressMsg(sock, dataStr)  <span class="comment"># 处理消息</span></span><br><span class="line">                    <span class="comment"># 测试代码：测试消息处理是否可用</span></span><br><span class="line">                    <span class="comment"># sock.sendall((&#x27;echo:&#x27;+dataStr).encode())</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 将消息队列中所有消息处理完毕，则将它从待回复队列中删除</span></span><br><span class="line">                writeList.remove(sock)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 3.处理出错的socket</span></span><br><span class="line">            <span class="keyword">for</span> sock <span class="keyword">in</span> exceptionList:</span><br><span class="line">                readList.remove(sock)</span><br></pre></td></tr></table></figure><p>待我更加理解这个东西，可能会回来补充完善这个部分。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上便是我的计算机网络课设的核心思路以及核心代码了，其他未列出的方法，读者看方法名字大致也能猜到它们的作用，就不浪费篇幅去说了。</p><p>本文耗费 5 个小时完成（结合课设报告）。</p><p>如有错漏欢迎在下方评论区指出。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> internet </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类说明</title>
      <link href="/posts/categories_description/"/>
      <url>/posts/categories_description/</url>
      
        <content type="html"><![CDATA[<p>为了对文章进行更好的管理，需要提前确定好文章的分类。将本博客内的文章分为以下七类：</p><ul><li>过程复盘</li><li>知识整理</li><li>解决方案</li><li>算法理解</li><li>工具使用</li><li>目录索引</li><li>日志随笔</li></ul><span id="more"></span><p>分类定好了基本就不变了：</p><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>过程复盘</td><td>记录学习实践一个事物的过程，侧重记录与反思</td></tr><tr><td>知识整理</td><td>针对某一部分知识进行集中整理方便查阅，例如 API、语法、命令等</td></tr><tr><td>解决方案</td><td>针对遇到的某个具体问题寻找解决方案</td></tr><tr><td>算法理解</td><td>针对某个具体算法的理解掌握</td></tr><tr><td>工具使用</td><td>对于框架、软件、网站等工具的使用方法与心得经验，或是简单推荐</td></tr><tr><td>目录索引</td><td>定期将本博客的文章索引起来，或者整理一些有用的参考链接</td></tr><tr><td>日志随笔</td><td>随便写点啥心情，或者年终总结之类的</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/hello_world/"/>
      <url>/posts/hello_world/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是憧憬少。</p><span id="more"></span><p>这是用 hexo 搭建的第二个博客，由于想改一个名字，又担心会影响到很多东西，于是就新搭建了一个，原本的博客仍然保留，链接在此：<a href="https://hanechiri.github.io/">羽尘的个人博客-尘世未解</a></p><p>其实和以前的几乎是一样的，只是改了用户名，以及域名。这可能是中二病带来的对帅气名字的执着吧！</p><p>现在是 2019 年 12 月 30 日，大三第一学期末，现在的我，比之前会了更多的东西，也认识到了文字输出对于学习的重要性，所以我会花更多时间在写博客总结上（也许吧）。</p><p>测试代码块</p><figure class="highlight python"><figcaption><span>test.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MFC习题|RGB颜色模型演示程序</title>
      <link href="/posts/MFC_RGB_demonstration/"/>
      <url>/posts/MFC_RGB_demonstration/</url>
      
        <content type="html"><![CDATA[<p>习题来源：《计算机图形学基础教程》孔令德（第二版）</p><p>用 mfc 基于对话框的编程，实现下图的 RGB 颜色模型演示程序。点击颜色按钮能将“颜色及代码”这个组框中的静态文本框变成对应的颜色，调色板按钮可以调出自带的颜色选择对话框。滚动条和旁边的编辑框都可以调整颜色。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190914121959.png"></p><span id="more"></span><p>设计对话框过程不详述，直接开始代码和思路介绍。<strong>参考链接见文末。</strong></p><h1 id="改变演示块颜色"><a href="#改变演示块颜色" class="headerlink" title="改变演示块颜色"></a>改变演示块颜色</h1><p>我在这里将用于演示颜色的静态文本框称为演示块，对应的 ID 为<code>IDC_COLOR_BOX</code>。</p><p>查找了很久关于“如何修改控件颜色”的资料。</p><p>改变控件颜色需要在对话框类的<code>OnCltColor()</code>成员函数里面写对应代码。要生成这个方法，需要添加<code>WM_CTLCOLOR</code>这个消息的响应函数，在<code>Class View</code>的对话框类上右键可以找到<code>Add Windows Message Handler</code>，在这里添加就可以了。</p><p>生成的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HBRUSH <span class="title">CComputerGraphcisExercise2Dlg::OnCtlColor</span><span class="params">(CDC* pDC, CWnd* pWnd, UINT nCtlColor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HBRUSH hbr = CDialog::<span class="built_in">OnCtlColor</span>(pDC, pWnd, nCtlColor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Change any attributes of the DC here</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Return a different brush if the default is not desired</span></span><br><span class="line"><span class="keyword">return</span> hbr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数会在每个控件被重绘时调用，所以将改变控件颜色的代码放在这里就行了。</p><p>参数<code>pWnd</code>可以用来识别现在是哪个控件正在被重绘。</p><p>它的返回值是用于填充控件的画刷。</p><p>可以先判断是哪个控件正在被重绘，当演示块被重绘时，将它的颜色调整为自己设置的颜色。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">HBRUSH <span class="title">CComputerGraphcisExercise2Dlg::OnCtlColor</span><span class="params">(CDC* pDC, CWnd* pWnd, UINT nCtlColor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HBRUSH hbr = CDialog::<span class="built_in">OnCtlColor</span>(pDC, pWnd, nCtlColor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Change any attributes of the DC here</span></span><br><span class="line"><span class="keyword">if</span>(pWnd-&gt;<span class="built_in">GetDlgCtrlID</span>() == IDC_COLOR_BOX)<span class="comment">//判断控件</span></span><br><span class="line">&#123;</span><br><span class="line">hbr=<span class="built_in">CreateSolidBrush</span>(m_color);<span class="comment">//调整颜色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Return a different brush if the default is not desired</span></span><br><span class="line"><span class="keyword">return</span> hbr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的<code>m_color</code>是一个对话框类的<code>protected</code>变量，我把它和自动生成的<code>m_hIcon</code>放在了一起。</p><p><strong>注意：如果这个变量被设置为<code>public</code>，就会在运行时产生错误，原因未知。</strong></p><p>此变量在对话框类的初始化函数<code>OnInitDialog()</code>内初始化。</p><p><strong>有了以上代码之后，想要改变演示块的颜色，只需要改变<code>m_color</code>的值并刷新对话框（例如使用<code>Invalidate()</code>）就可以了。</strong></p><h1 id="显示颜色代码"><a href="#显示颜色代码" class="headerlink" title="显示颜色代码"></a>显示颜色代码</h1><p>在演示块下面有一个静态文本框用于显示当前颜色的十六进制代码，例如“#ffffff”。</p><p>由于颜色每次都是在对话框刷新的时候被改变的，可以将这个功能写在<code>OnPaint()</code>内。获取方式也不难，看代码基本能看懂，不赘述。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphcisExercise2Dlg::OnPaint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//其他代码</span></span><br><span class="line"><span class="comment">//获取颜色代码</span></span><br><span class="line"></span><br><span class="line">CStatic *color_code = (CStatic*)<span class="built_in">GetDlgItem</span>(IDC_COLOR_CODE);</span><br><span class="line">CString color;</span><br><span class="line">color.<span class="built_in">Format</span>(<span class="string">&quot;#%02x%02x%02x&quot;</span>,<span class="built_in">GetRValue</span>(m_color),<span class="built_in">GetGValue</span>(m_color),<span class="built_in">GetBValue</span>(m_color));</span><br><span class="line">color_code -&gt;<span class="built_in">SetWindowText</span>(color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现颜色按钮"><a href="#实现颜色按钮" class="headerlink" title="实现颜色按钮"></a>实现颜色按钮</h1><p>双击每个颜色按钮，添加它们的响应事件，例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphcisExercise2Dlg::OnButtonRed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your control notification handler code here</span></span><br><span class="line">m_color = <span class="built_in">RGB</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">Invalidate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调整它们的颜色，并进行刷新重绘。</p><p>至于调色板按钮，需要使用 mfc 内置的颜色对话框<code>CColorDlg</code>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphcisExercise2Dlg::OnButtonPalette</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your control notification handler code here</span></span><br><span class="line">CColorDialog palette;</span><br><span class="line"><span class="type">int</span> nResponse = palette.<span class="built_in">DoModal</span>();</span><br><span class="line"><span class="keyword">if</span>(nResponse == IDOK)</span><br><span class="line">&#123;</span><br><span class="line">m_color = palette.<span class="built_in">GetColor</span>();<span class="comment">//获取调色板的颜色</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Invalidate</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="实现滚动条"><a href="#实现滚动条" class="headerlink" title="实现滚动条"></a>实现滚动条</h1><h2 id="初始化滚动条"><a href="#初始化滚动条" class="headerlink" title="初始化滚动条"></a>初始化滚动条</h2><p>首先需要在对话框的<code>OnInitDialog()</code>方法内，新增初始化滚动条范围值的代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">CComputerGraphcisExercise2Dlg::OnInitDialog</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//其它代码</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">CScrollBar *scroll=(CScrollBar*)<span class="built_in">GetDlgItem</span>(IDC_SCROLLBAR_R);</span><br><span class="line"></span><br><span class="line">scroll-&gt;<span class="built_in">SetScrollRange</span>(<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">scroll = (CScrollBar*)<span class="built_in">GetDlgItem</span>(IDC_SCROLLBAR_G);</span><br><span class="line"></span><br><span class="line">scroll-&gt;<span class="built_in">SetScrollRange</span>(<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">scroll = (CScrollBar*)<span class="built_in">GetDlgItem</span>(IDC_SCROLLBAR_B);</span><br><span class="line">scroll-&gt;<span class="built_in">SetScrollRange</span>(<span class="number">0</span>,<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> TRUE;  <span class="comment">// return TRUE  unless you set the focus to a control</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码初始化了三个滚动条控件，首先用<code>GetDlgItem()</code>来获取 ID 对应的控件对象的指针，然后调用<code>SetScrollRange()</code>来设定其范围为 0~255。</p><h2 id="响应滚动条事件"><a href="#响应滚动条事件" class="headerlink" title="响应滚动条事件"></a>响应滚动条事件</h2><p>滚动条的响应事件不像按钮一样是每个按钮分开的，而是分为水平滚动条事件响应函数，和垂直滚动条响应函数。</p><p>在<code>Class View</code>里对对话框类右键，在右键菜单中找到<code>Add Windows Message Handler</code>，添加<code>WM_HSCROLL</code>消息的响应函数（如果是垂直滚动条，应该是<code>WM_VSCROLL</code>消息）。</p><p>生成的响应函数是这样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphcisExercise2Dlg::OnHScroll</span><span class="params">(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your message handler code here and/or call default</span></span><br><span class="line">CDialog::<span class="built_in">OnHScroll</span>(nSBCode, nPos, pScrollBar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没看文档，不过参数大概意思可能是：</p><ul><li>nSBCode：滚动条响应的消息类型</li><li>nPos：滚动条改变状态之后的值</li><li>pScrollBar：指向被改变状态的滚动条控件的指针</li></ul><p>滚动条拖动的代码需要自己写，在实现功能之前，你即使用鼠标拖动滑块，滑块也会回到原来的位置。</p><p>在这个响应函数里面，我只让滚动条改变对应的编辑框对应的数值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphcisExercise2Dlg::OnHScroll</span><span class="params">(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your message handler code here and/or call default</span></span><br><span class="line"></span><br><span class="line">CDialog::<span class="built_in">OnHScroll</span>(nSBCode, nPos, pScrollBar);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> pos = pScrollBar-&gt;<span class="built_in">GetScrollPos</span>();<span class="comment">//获取当前位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(nSBCode)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> SB_THUMBPOSITION:<span class="comment">//被拖动</span></span><br><span class="line">pos = nPos;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//其实这里还可以写别的事件响应，丰富功能</span></span><br><span class="line">&#125;</span><br><span class="line">pScrollBar-&gt;<span class="built_in">SetScrollPos</span>(pos);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置与滚动条对应的编辑框的数值</span></span><br><span class="line"><span class="keyword">switch</span>(pScrollBar-&gt;<span class="built_in">GetDlgCtrlID</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> IDC_SCROLLBAR_R:</span><br><span class="line"><span class="built_in">SetDlgItemInt</span>(IDC_EDIT_R,pos);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IDC_SCROLLBAR_G:</span><br><span class="line"><span class="built_in">SetDlgItemInt</span>(IDC_EDIT_G,pos);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> IDC_SCROLLBAR_B:</span><br><span class="line"><span class="built_in">SetDlgItemInt</span>(IDC_EDIT_B,pos);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="响应编辑框变化事件"><a href="#响应编辑框变化事件" class="headerlink" title="响应编辑框变化事件"></a>响应编辑框变化事件</h2><p>现在已经可以滑动滚动条来修改编辑框内的值了，但演示块的颜色还不会改变，我把这个功能写在编辑框里面了，这样，可以顺便实现“在编辑框内修改值来修改颜色”的功能。</p><p>这是其中一个编辑框的响应函数代码，其他两个类似，要说的内容都写在注释里面了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphcisExercise2Dlg::OnChangeEditR</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> If this is a RICHEDIT control, the control will not</span></span><br><span class="line"><span class="comment">// send this notification unless you override the CDialog::OnInitDialog()</span></span><br><span class="line"><span class="comment">// function and call CRichEditCtrl().SetEventMask()</span></span><br><span class="line"><span class="comment">// with the ENM_CHANGE flag ORed into the mask.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your control notification handler code here</span></span><br><span class="line"><span class="built_in">UpdateData</span>();<span class="comment">//更新数据，将数据从控件上同步到绑定的变量</span></span><br><span class="line"><span class="type">int</span> pos = <span class="built_in">atoi</span>(m_R_value.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line">((CScrollBar*)<span class="built_in">GetDlgItem</span>(IDC_SCROLLBAR_R))-&gt;<span class="built_in">SetScrollPos</span>(pos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据滚动条位置设置当前颜色值</span></span><br><span class="line"><span class="type">int</span> R=<span class="number">0</span>,G=<span class="number">0</span>,B=<span class="number">0</span>;</span><br><span class="line">R=((CScrollBar*)<span class="built_in">GetDlgItem</span>(IDC_SCROLLBAR_R))-&gt;<span class="built_in">GetScrollPos</span>();</span><br><span class="line">G=((CScrollBar*)<span class="built_in">GetDlgItem</span>(IDC_SCROLLBAR_G))-&gt;<span class="built_in">GetScrollPos</span>();</span><br><span class="line">B=((CScrollBar*)<span class="built_in">GetDlgItem</span>(IDC_SCROLLBAR_B))-&gt;<span class="built_in">GetScrollPos</span>();</span><br><span class="line">m_color = <span class="built_in">RGB</span>(R,G,B);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了防止整个对话框闪烁，只刷新演示块</span></span><br><span class="line">CRect rect;</span><br><span class="line">((CStatic*)<span class="built_in">GetDlgItem</span>(IDC_COLOR_BOX))-&gt;<span class="built_in">GetWindowRect</span>(&amp;rect);</span><br><span class="line"><span class="built_in">ScreenToClient</span>(&amp;rect);<span class="comment">//转换为对话框上的客户坐标</span></span><br><span class="line"><span class="built_in">InvalidateRect</span>(rect);<span class="comment">//只刷新控件位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成这一步之后，已经能够实现使用滚动条或者编辑框来改变颜色了，但是当你在点击颜色按钮时，虽然颜色改变了，但是滚动条的位置和编辑框的值不会随之改变。</p><p>因此还需要一步：</p><h2 id="滚动条随颜色而变化位置"><a href="#滚动条随颜色而变化位置" class="headerlink" title="滚动条随颜色而变化位置"></a>滚动条随颜色而变化位置</h2><p>这个对话框内只有颜色按钮能够改变颜色，所以简单地在所有颜色按钮的代码内添加改变位置的代码即可。</p><p>而改变滚动条的位置只需要改变对应的编辑框的数值就可以了。</p><p>于是颜色按钮代码变成了这样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphcisExercise2Dlg::OnButtonRed</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your control notification handler code here</span></span><br><span class="line">m_color = <span class="built_in">RGB</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整滚动条位置</span></span><br><span class="line"><span class="type">int</span> R=<span class="number">0</span>,G=<span class="number">0</span>,B=<span class="number">0</span>;</span><br><span class="line">R=<span class="built_in">GetRValue</span>(m_color);</span><br><span class="line">G=<span class="built_in">GetGValue</span>(m_color);</span><br><span class="line">B=<span class="built_in">GetBValue</span>(m_color);</span><br><span class="line"><span class="built_in">SetDlgItemInt</span>(IDC_EDIT_R,R);</span><br><span class="line"><span class="built_in">SetDlgItemInt</span>(IDC_EDIT_G,G);</span><br><span class="line"><span class="built_in">SetDlgItemInt</span>(IDC_EDIT_B,B);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invalidate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="部分用到的-MFC-函数或宏的简介"><a href="#部分用到的-MFC-函数或宏的简介" class="headerlink" title="部分用到的 MFC 函数或宏的简介"></a>部分用到的 MFC 函数或宏的简介</h1><p>详情见百度</p><ul><li><code>GetRValue()</code>，<code>GetGValue()</code>，<code>GetBValue()</code>，分别用于获取颜色值的 RGB 三个通道的值</li><li><code>SetDlgItemInt()</code>，可以将值送入 ID 对应的控件</li><li><code>GetDlgItem()</code>，通过 ID 来获取指向控件的指针，记得转换指针类型</li><li><code>Invalidate()</code>，使客户区无效化，引起重绘</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://www.jizhuomi.com/software/191.html">VS2010&#x2F;MFC 编程入门之二十六（常用控件：滚动条控件 Scroll Bar）-鸡啄米</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MFC用对话框获取输入</title>
      <link href="/posts/MFC_get_input_by_Dialog/"/>
      <url>/posts/MFC_get_input_by_Dialog/</url>
      
        <content type="html"><![CDATA[<p>在 MFC 调用对话框读入数据，并在客户区输出。</p><p>这是《计算机图形学基础教程》的一个习题：</p><blockquote><p>使用 MFC 设计一个长方形类 CRectangle，调用对话框读入长方形的长度和宽度，在客户区输出长方形的周长和面积。</p></blockquote><p>这个书上并没有教怎么用对话框读取输入，我在这之前也完全没接触过 MFC 的对话框。弄了两小时，终于把这道题做出来了。以此文记录一下</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://www.docin.com/p-242469989.html">MFC 调用输入对话框并返回输入信息</a></li><li><a href="https://www.sogou.com/link?url=DSOYnZeCC_owkDvmYG0gMz-JrNZwwuWK8exNhhiXPsEIKMrTb1L7Tc88xhL_moz5C1NeXNQ2BY9d-4ud3wkh5slk12zu172c4pCyk2vXyzKM7-ZhrzgWRu8yqGHnU-QomKwJVMAaAqOt5pUc3zy0dg..">MFC 对话框和常用教程</a></li></ul><h1 id="设计对话框"><a href="#设计对话框" class="headerlink" title="设计对话框"></a>设计对话框</h1><p>找了一下，MFC 似乎没有像 python 那样的<code>input()</code>或者像是 VB 里面的<code>inputBox()</code>之类的函数，所以得自己先设计对话框。</p><p>首先打开<code>Resource View</code>，在<code>Dialog</code>处右键菜单插入新的对话框。</p><p>接着就是放控件以及给控件命名了。这个比较简单，就不详细说了。</p><p>我设计的对话框有两个<code>Edit</code>控件，一个是<code>IDC_LENGTH</code>，用于输入长方形的长，一个是<code>IDC_WIDTH</code>，用于输入长方形的宽。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910194014.png"></p><h1 id="新建对话框类"><a href="#新建对话框类" class="headerlink" title="新建对话框类"></a>新建对话框类</h1><p>在设计好的对话框上右键菜单打开类向导，也就是<code>classWizard</code>，会弹出一个对话框如下图：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910194429.png"></p><p>大致意思是：检测到有个新建的对话框资源，你可能想要为它创建一个类，要创建吗？</p><p>点确定创建一个对应的类。</p><p>如果没有弹出这个对话框，你也可以在类向导右上角的<code>Add Class</code>按钮来创建一个 MFC 里面的类，把基类调整成<code>CDialog</code>，<code>Dialog ID</code>设置成你刚刚设计的对话框 ID 就可以了。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910195108.png"></p><p>（其实命名最好在后面加个<code>Dlg</code>后缀以表示这是对话框，但是我懒得改了）</p><h1 id="添加关联变量"><a href="#添加关联变量" class="headerlink" title="添加关联变量"></a>添加关联变量</h1><p>在类向导里面选择第二个选项卡，也就是<code>Member Bariables</code>成员变量选项卡。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910195436.png"></p><p>这里面列出了对话框上控件的 ID，这些 ID 可以在设计对话框的时候指定。</p><p>选中用于输入数据的控件，然后点击<code>Add Variable</code>添加对话框类的成员变量。改变量名字，其他选项默认即可。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910200353.png"></p><p>这个操作与你直接在类代码中添加的区别是，这个操作会建立起控件和这个成员变量的关联关系。这个关联关系体现在自定义对话框类的<code>DoDataExchange()</code>这个成员函数内：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInputRectangle::DoDataExchange</span><span class="params">(CDataExchange* pDX)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CDialog::<span class="built_in">DoDataExchange</span>(pDX);</span><br><span class="line"><span class="comment">//&#123;&#123;AFX_DATA_MAP(CInputRectangle)</span></span><br><span class="line"><span class="built_in">DDX_Text</span>(pDX, IDC_LENGTH, m_edLength);<span class="comment">//添加关联变量之前，这里是没有这两行的</span></span><br><span class="line"><span class="built_in">DDX_Text</span>(pDX, IDC_WIDTH, m_edWidth);</span><br><span class="line"><span class="comment">//&#125;&#125;AFX_DATA_MAP</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调用对话框"><a href="#调用对话框" class="headerlink" title="调用对话框"></a>调用对话框</h1><p>如图，我打算使用菜单来调用对话框输入矩形长和宽。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910201233.png"></p><p>添加菜单的过程不详细说。</p><p>直接跳到菜单的响应函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphicsExerciseView::OnHomework2_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your command handler code here</span></span><br><span class="line"></span><br><span class="line">CInputRectangleDlg inputDlg;</span><br><span class="line"><span class="type">int</span> nResponse = inputDlg.<span class="built_in">DoModal</span>();</span><br><span class="line">    <span class="keyword">if</span>(nResponse==IDOK)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//这里获取输入并在客户区输出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在文件开头 include 对话框类的头文件，声明对象，并调用对话框对象的<code>DoModal()</code>方法。</p><p>这个方法在对话框关闭之后，才会返回一个值，对应关闭对话框的动作，这里我用<code>nResponse</code>这个 int 变量接收返回值。</p><p>接着判断返回值，如果是点击确定按钮关闭对话框，那么获取对话框的输入，并且在客户区输出。</p><h2 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h2><p>绑定对话框上两个编辑框的变量分别为：<code>m_edWidth</code>和<code>m_edLength</code>。默认情况下，它们是 CString 类型的，因此需要进行类型转换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> width=<span class="built_in">atoi</span>(inputDlg.m_edWidth.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line"><span class="type">int</span> height=<span class="built_in">atoi</span>(inputDlg.m_edLength.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>对上面两行代码的说明：</p><ul><li>两个关联变量是<code>public</code>的，因此可以直接访问。</li><li>CString 的<code>GetBuffer()</code>成员函数返回对应的字符数组类型的字符串</li><li>atoi（ASCII to integer）把字符串转换成整型数</li></ul><h2 id="进行输出"><a href="#进行输出" class="headerlink" title="进行输出"></a>进行输出</h2><p>获取设备上下文，并调整坐标系：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CDC *pDC=<span class="built_in">GetDC</span>();<span class="comment">//获取设备上下文</span></span><br><span class="line"></span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line">pDC-&gt;<span class="built_in">SetMapMode</span>(MM_ANISOTROPIC);</span><br><span class="line">pDC-&gt;<span class="built_in">SetWindowExt</span>(rect.<span class="built_in">Width</span>(),rect.<span class="built_in">Height</span>());</span><br><span class="line">pDC-&gt;<span class="built_in">SetViewportExt</span>(rect.<span class="built_in">Width</span>(),-rect.<span class="built_in">Height</span>());</span><br><span class="line">pDC-&gt;<span class="built_in">SetViewportOrg</span>(rect.<span class="built_in">Width</span>()/<span class="number">2</span>,rect.<span class="built_in">Height</span>()/<span class="number">2</span>);</span><br><span class="line">rect.<span class="built_in">OffsetRect</span>(-rect.<span class="built_in">Width</span>()/<span class="number">2</span>,-rect.<span class="built_in">Height</span>()/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">pDC-&gt;<span class="built_in">Rectangle</span>(rect);<span class="comment">//清空屏幕</span></span><br></pre></td></tr></table></figure><p>输出数据，并释放设备上下文：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">CRectangle <span class="title">crect</span><span class="params">(width,height)</span></span>;</span><br><span class="line"></span><br><span class="line">CString perimeter_text,area_text;</span><br><span class="line">perimeter_text.<span class="built_in">Format</span>(<span class="string">&quot;长方形的周长为：%.2f&quot;</span>,crect.<span class="built_in">perimeter</span>());</span><br><span class="line">area_text.<span class="built_in">Format</span>(<span class="string">&quot;长方形的面积为：%.2f&quot;</span>,crect.<span class="built_in">area</span>());</span><br><span class="line"></span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>,<span class="number">0</span>,perimeter_text);</span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>,<span class="number">20</span>,area_text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);<span class="comment">//释放设备上下文</span></span><br></pre></td></tr></table></figure><p>这样就完成了</p><h2 id="菜单代码概览"><a href="#菜单代码概览" class="headerlink" title="菜单代码概览"></a>菜单代码概览</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CComputerGraphicsExerciseView::OnHomework2_2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add your command handler code here</span></span><br><span class="line"></span><br><span class="line">CInputRectangleDlg inputDlg;</span><br><span class="line"><span class="type">int</span> nResponse = inputDlg.<span class="built_in">DoModal</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(nResponse==IDOK)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">CDC *pDC=<span class="built_in">GetDC</span>();</span><br><span class="line"></span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line">pDC-&gt;<span class="built_in">SetMapMode</span>(MM_ANISOTROPIC);</span><br><span class="line">pDC-&gt;<span class="built_in">SetWindowExt</span>(rect.<span class="built_in">Width</span>(),rect.<span class="built_in">Height</span>());</span><br><span class="line">pDC-&gt;<span class="built_in">SetViewportExt</span>(rect.<span class="built_in">Width</span>(),-rect.<span class="built_in">Height</span>());</span><br><span class="line">pDC-&gt;<span class="built_in">SetViewportOrg</span>(rect.<span class="built_in">Width</span>()/<span class="number">2</span>,rect.<span class="built_in">Height</span>()/<span class="number">2</span>);</span><br><span class="line">rect.<span class="built_in">OffsetRect</span>(-rect.<span class="built_in">Width</span>()/<span class="number">2</span>,-rect.<span class="built_in">Height</span>()/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">pDC-&gt;<span class="built_in">Rectangle</span>(rect);<span class="comment">//清空屏幕</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> width=<span class="built_in">atoi</span>(inputDlg.m_edWidth.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line"><span class="type">int</span> height=<span class="built_in">atoi</span>(inputDlg.m_edLength.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line"><span class="function">CRectangle <span class="title">crect</span><span class="params">(width,height)</span></span>;</span><br><span class="line"></span><br><span class="line">CString perimeter_text,area_text;</span><br><span class="line">perimeter_text.<span class="built_in">Format</span>(<span class="string">&quot;长方形的周长为：%.2f&quot;</span>,crect.<span class="built_in">perimeter</span>());</span><br><span class="line">area_text.<span class="built_in">Format</span>(<span class="string">&quot;长方形的面积为：%.2f&quot;</span>,crect.<span class="built_in">area</span>());</span><br><span class="line"></span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>,<span class="number">0</span>,perimeter_text);</span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">0</span>,<span class="number">20</span>,area_text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h1><p>一开始我以为需要编写对话框的<code>ok</code>按钮的响应事件，写成了下面这样，试了一下不行，不知道为什么：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CInputRectangleDlg::OnOK</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Add extra validation here</span></span><br><span class="line"></span><br><span class="line">CDialog::<span class="built_in">OnOK</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">UpdateData</span>();<span class="comment">//用于将数据从对话框同步到成员变量中</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> width=<span class="built_in">atoi</span>( m_edWidth.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line"><span class="type">int</span> height=<span class="built_in">atoi</span>( m_edLength.<span class="built_in">GetBuffer</span>(<span class="number">0</span>));</span><br><span class="line"><span class="function">CRectangle <span class="title">crect</span><span class="params">(width,height)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CDC *pDC=<span class="built_in">GetDC</span>();</span><br><span class="line"></span><br><span class="line">CRect rect;</span><br><span class="line"><span class="built_in">GetClientRect</span>(&amp;rect);</span><br><span class="line">pDC-&gt;<span class="built_in">SetMapMode</span>(MM_ANISOTROPIC);</span><br><span class="line">pDC-&gt;<span class="built_in">SetWindowExt</span>(rect.<span class="built_in">Width</span>(),rect.<span class="built_in">Height</span>());</span><br><span class="line">pDC-&gt;<span class="built_in">SetViewportExt</span>(rect.<span class="built_in">Width</span>(),-rect.<span class="built_in">Height</span>());</span><br><span class="line">pDC-&gt;<span class="built_in">SetViewportOrg</span>(rect.<span class="built_in">Width</span>()/<span class="number">2</span>,rect.<span class="built_in">Height</span>()/<span class="number">2</span>);</span><br><span class="line">rect.<span class="built_in">OffsetRect</span>(-rect.<span class="built_in">Width</span>()/<span class="number">2</span>,-rect.<span class="built_in">Height</span>()/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">pDC-&gt;<span class="built_in">Rectangle</span>(rect);<span class="comment">//清空屏幕</span></span><br><span class="line"></span><br><span class="line">CString perimeter_text,area_text;</span><br><span class="line">perimeter_text.<span class="built_in">Format</span>(<span class="string">&quot;长方形的周长为：%.2f&quot;</span>,crect.<span class="built_in">perimeter</span>());</span><br><span class="line">area_text.<span class="built_in">Format</span>(<span class="string">&quot;长方形的面积为：%.2f&quot;</span>,crect.<span class="built_in">area</span>());</span><br><span class="line"></span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">100</span>,<span class="number">100</span>,perimeter_text);</span><br><span class="line">pDC-&gt;<span class="built_in">TextOut</span>(<span class="number">100</span>,<span class="number">300</span>,area_text);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ReleaseDC</span>(pDC);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫解析库BeautifulSoup速查</title>
      <link href="/posts/python_spider_parser_beautifulsoup/"/>
      <url>/posts/python_spider_parser_beautifulsoup/</url>
      
        <content type="html"><![CDATA[<p>为了方便使用，将 BeautifulSoup 库常用的接口进行总结。</p><p>总结内容来源：《python3 网络爬虫开发实战》崔庆才</p><span id="more"></span><h2 id="导入与解析"><a href="#导入与解析" class="headerlink" title="导入与解析"></a>导入与解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> Beat</span><br><span class="line">soup = BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h2><h3 id="提取属性"><a href="#提取属性" class="headerlink" title="提取属性"></a>提取属性</h3><p>获取到的是第一个标签</p><ul><li><code>soup.title.string</code>:获取 title 标签的文本内容</li><li><code>soup.title.name</code>:获取节点名称“title”</li><li><code>soup.p.attrs</code>:获取节点属性字典</li><li><code>soup.p.attrs[&#39;class&#39;]</code>或者<code>soup.p[&#39;class&#39;]</code>:获取节点属性</li></ul><h3 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h3><h4 id="子孙"><a href="#子孙" class="headerlink" title="子孙"></a>子孙</h4><ul><li><code>soup.p.contents</code>:获取直接子节点列表</li><li><code>soup.p.children</code>：获取直接子节点生成器</li><li><code>soup.p.descendants</code>：获取所有子孙节点生成器</li></ul><h4 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a>祖先</h4><ul><li><code>soup.p.parent</code>：获取直接父节点</li><li><code>soup.p.parents</code>：获取所有祖先节点生成器</li></ul><h4 id="兄弟"><a href="#兄弟" class="headerlink" title="兄弟"></a>兄弟</h4><ul><li><code>soup.a.next_sibling</code>：获取下一个兄弟节点</li><li><code>soup.a.previous_sibling</code>：获取上一个兄弟节点</li><li><code>soup.a.next_siblings</code>：获取后面所有兄弟节点列表</li><li><code>soup.a.previous_siblings</code>：获取前面所有兄弟节点列表</li></ul><h2 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h2><h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_all(<span class="variable language_">self</span>, name=<span class="literal">None</span>, attrs=&#123;&#125;, recursive=<span class="literal">True</span>, text=<span class="literal">None</span>,limit=<span class="literal">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>用法：</p><ul><li><code>soup.find_all(name=&#39;ul&#39;)</code>：获取所有 ul 节点组成的列表</li><li><code>soup.find_all(attrs=&#123;&#39;id&#39;:&#39;list&#39;&#125;)</code>：获取 id 为 list 的节点</li><li>常用参数如 id 和 class 可以直接传入，如：<code>soup.find_all(id = &#39;list&#39;)</code>或<code>soup.find_all(class_=&#39;element&#39;)</code></li><li><code>soup.find_all(text=re.compile(&#39;link&#39;))</code>可以匹配文本，也可以用正则表达式对象</li></ul><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>返回第一个匹配的元素，和 find_all 用法差不多</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>find_parents()</code>,<code>find_parent()</code></li><li><code>find_next_siblings()</code>,<code>find_next_sibling()</code></li><li><code>find_previous_siblings()</code>,<code>find_previous_sibling()</code></li><li><code>find_all_next()</code>,<code>find_next()</code>返回节点后符合条件的节点</li><li><code>find_all_previous()</code>,<code>find_previous()</code></li></ul><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p><code>soup.select(&#39;CSS选择器&#39;)</code>：返回列表</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年暑假总结</title>
      <link href="/posts/2019_summer_holidays_summary/"/>
      <url>/posts/2019_summer_holidays_summary/</url>
      
        <content type="html"><![CDATA[<p>这个暑假大致是 7 月 7 日（到家时间）至 8 月 24 日，已经过了 6 周左右。</p><p>如果是以前的假期，肯定是不记得自己做过什么了，但是这次每周做了一次周总结，因此可以对照着周总结来进行假期总结。应该是头一次有参考地记录下自己的整个假期了。</p><span id="more"></span><h1 id="做了什么事情"><a href="#做了什么事情" class="headerlink" title="做了什么事情"></a>做了什么事情</h1><h2 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h2><p>最主要做的事情是考驾照的科目二，每天都去练一个上午或者一个下午。</p><p>认识了几个同一个高中的同学，并且和陌生人打交道没有那么困难了。</p><h2 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h2><p>代码分享群里面有个人问我要不要参与 b 站的暑假爆肝活动，在 7 月 28 日之前投稿 4 个视频。我想要奖励里面的一个月大会员，于是就参加了。</p><p>7 月 13 日投了一个:<a href="https://www.bilibili.com/video/av58951308/">“如何像项目一样整理和管理你的个人电脑文件”</a>，分享了一下我自己不久前开始使用的整理电脑文件的方式，而且特地利用“网易见外”这个网站来试着加上字幕。比起分享代码思路，这种视频受众更加广一些。</p><p>通过自动上字幕，我发现自己讲解的时候语气词和停顿还蛮多的，需要多锻炼表达能力。</p><p>学习 python，利用 python 写了一个脚本，用来自动帮我的明日方舟的关卡点“开始游戏”按钮，灵感来自一个用机械装置做“物理外挂”的视频。录制了一个演示视频：<a href="https://www.bilibili.com/video/av60038926/">“明日方舟代理指挥“代理指挥”的代理指挥”</a></p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190821160011.png" alt="运行示意图"></p><p>后来没什么想做的视频主题，就没有继续做了。</p><p>到了八月，买了一个板绘用的数位板，开始学习板绘作为平时的兴趣。八月录制了三个临摹过程的视频，感觉不错。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190821160255.png"></p><h2 id="个人博客-github"><a href="#个人博客-github" class="headerlink" title="个人博客 &amp; github"></a>个人博客 &amp; github</h2><h3 id="python-爬虫"><a href="#python-爬虫" class="headerlink" title="python 爬虫"></a>python 爬虫</h3><p>使我开始更加积极地更新博客的事件是，我终于在 7 月 15 日解决了信息门户的登录密码加密问题。</p><p>将以前存放在有道云笔记里面的分析过程重新整理了一下写成博文：<a href="https://yxchangingself.xyz/posts/portal_login_encrypt/">“学校信息门户模拟登录之密码加密”</a></p><p>再利用这个加密模块，很快写出了模拟登录信息门户的 python 自定义包：<a href="https://yxchangingself.xyz/posts/portal_login/">“学校信息门户模拟登录”</a></p><p>没想到这个自定义包竟然获得了<a href="https://lollipopnougat.github.io/Crepeblog/"><strong>封掣</strong></a>大佬的 pull request（也就是他参与了这个项目，贡献了一部分代码）！这可是我第一次获得 pull request！兴奋之情可想而知，我当时就想继续写点什么出来。</p><p>不过<a href="https://github.com/HaneChiri/chd_portal_login">这个项目</a>发展空间并没有太多，最多输出 cookies 文件给别的程序或者脚本用。在写好了文档，增加了成绩查询，学习了如何将其打包成 exe 文件，又学习了如何 release 一个版本之后，就没有什么可以扩展的地方了。</p><p>在这个过程中，除了上面说到的那些，我还开始使用 github 的 issue 来记录待办事项和 bug，等到有空的时候去修复。</p><p><strong>在 github 上面终于有了一个像样的项目了，这让我很高兴。</strong></p><p>我又开始把之前写的信息门户爬虫给整理了一下，整理到了一个 github 仓库当中：<a href="https://github.com/HaneChiri/chd_spider">“chd_spider”</a></p><p>在这个成绩的激励下，我开始尝试做之前领取的任务：爬取微信公众号，确实有<a href="https://yxchangingself.xyz/posts/wechat_offical_account_spider_1_get_article_urls/">成功的部分</a>，不过目前<a href="https://yxchangingself.xyz/posts/wechat_offical_account_spider_2_fail_to_get_html/">卡关了</a></p><h3 id="博客主题优化"><a href="#博客主题优化" class="headerlink" title="博客主题优化"></a>博客主题优化</h3><p>给博客增加了几个功能：</p><ul><li>RSS 简易信息聚合</li><li>valine 评论</li></ul><p>hexo 的 Next 主题挺方便的，将所有东西都准备好了，增加这些功能挺容易的。</p><h4 id="RSS-简易信息聚合"><a href="#RSS-简易信息聚合" class="headerlink" title="RSS 简易信息聚合"></a>RSS 简易信息聚合</h4><p>在设计自我管理系统中的信息输入子系统时，了解到<a href="https://baike.baidu.com/item/rss/24470?fr=aladdin">RSS</a>这个概念。</p><blockquote><p>RSS(Really Simple Syndication)是一种描述和同步网站内容的格式，是使用最广泛的 XML 应用。RSS 搭建了信息迅速传播的一个技术平台，使得每个人都成为潜在的信息提供者。发布一个 RSS 文件后，这个 RSS Feed 中包含的信息就能直接被其他站点调用，而且由于这些数据都是标准的 XML 格式，所以也能在其他的终端和服务中使用，是一种描述和同步网站内容的格式。</p><p>就本质而言，RSS 和 Atom 是一种信息聚合的技术，都是为了提供一种更为方便、高效的互联网信息的发布和共享，用更少的时间分享更多的信息。同时 RSS 和 Atom 又是实现信息聚合的两种不同规范</p><p>（来自百度百科）</p></blockquote><p>以我的理解，RSS 的 Feed 其实就是一个将网站的内容格式化的 XML 文件，也就是一个“地图”，按照一定的标准标注了特定内容，RSS 阅读器其实就是一个爬虫软件。将 RSS Feed 给 RSS 阅读器之后，阅读器爬虫按照这份“地图”，解析出需要爬取的链接，然后获取文章内容，再展现给用户。</p><p>弄懂了原理之后，我帮我的博客也加了一个 RSS 插件，在部署博客的同时生成 RSS Feed（<a href="https://hanechiri.github.io/atom.xml">我博客的 RSS Feed</a>），这样别人使用 RSS 阅读器就可以“订阅”我的博客，在我的博客更新的时候可以第一时间看到。</p><p>在电脑上我下了一个 RSS 阅读器<a href="http://irreader.fatecore.com/">irreader</a>，订阅了几个朋友的博客。除此之外，这个阅读器还能订阅没有 Feed 的链接，我猜原理是根据你选择的几个链接来自动生成一个 Feed 来进行订阅，甚至能订阅 B 站 up 的视频以及贴吧的帖子，还是挺好用的。</p><h3 id="valine-评论"><a href="#valine-评论" class="headerlink" title="valine 评论"></a>valine 评论</h3><p>和阅读量计数用了同一个 leancloud 应用，效果挺不错：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190821164256.png"></p><p>但遗憾的是，leancloud 在经过上个月的域名封禁事件之后，又是实名注册又是绑定备案域名的，十月一号之后就得找别的办法来弄评论和点击数了。</p><h1 id="半途而废的事情"><a href="#半途而废的事情" class="headerlink" title="半途而废的事情"></a>半途而废的事情</h1><ul><li>暑假开始的运动目标没有完成，意志力随着身体素质的变差越来越弱</li><li>跟着廖雪峰 python 教程写代码的目标没有完成</li><li>利用 time meter 记录时间</li><li>每天在 anki 录入 30 个单词</li><li>晚上十一点睡</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一封邀请函</title>
      <link href="/posts/invitation/"/>
      <url>/posts/invitation/</url>
      
        <content type="html"><![CDATA[<p>如果你是从外部链接来到这个页面，那么你也许是获得了进入一个自我管理群的邀请函。</p><p>你可以阅读下面的介绍，以确定要不要加入这个群。</p><p>建议在电脑上查看，有侧边栏目录方便跳转。</p><p><strong>无论是否选择加入此群，都请不要将此链接随意传播。</strong></p><span id="more"></span><h1 id="群简介"><a href="#群简介" class="headerlink" title="群简介"></a>群简介</h1><p>这是一个 QQ 群，于 2019 年 4 月 26 日创建。</p><p>是为了营造一个良好的学习氛围，提供一个外在监督环境建立的。</p><p>在建立之初，我并没有想好这是一个什么样的群，只是想聚集一些小伙伴一起学习。后来，这个群慢慢地发展起来，变成了一个有着<strong>打卡系统</strong>和<strong>反思系统</strong>的群。</p><ul><li><strong>打卡系统：</strong>本群的打卡系统利用了 QQ 群的群相册。如果你有想要打卡的项目，可以在登记了信息之后创建群相册用于打卡，由管理员以及全体群成员监督，<strong>超过一定天数未打卡，就会删除对应的相册，并扣除一定的积分</strong>。而达到一定天数可以将相册归档，获得与持续天数正相关的积分。</li><li><strong>反思系统：</strong>作为本群成员，需要每周周日总结一下本周的收获，并以文字的形式发到群内。如果没有收获，也需要在群里说明（例如说：“本周无总结”）。<strong>没有声明本周没有总结且未总结的</strong>，扣除一定的积分，在下一周周日结算之前补回，则取消扣分。正常总结会获得一定量的积分。</li><li><strong>积分系统：</strong>进群之后初始积分为 0，若<strong>积分为负数且在下一周周日结算之前仍然为负数</strong>，则会强制离开群聊。</li><li><strong>邀请系统：</strong>本群采用邀请制，每个月最多邀请一个愿意遵守群规则的人入群。如果没有这样的人选，这个月就不邀请，宁缺毋滥。</li><li><strong>文件系统：</strong>为了方便学习交流，如果需要上传文件，请将文件上传到对应的文件夹，并使得看文件名就知道这个文件的作用，多版本文件请用 6 位数日期+修改次数的后缀</li><li><strong>群活动：</strong>群内会不定期地进行一些活动，自愿参与。</li></ul><p>简单来说，想要留在这个群里面，最简单的方式是只需要在每周日发一条“本周无总结”，维持积分不为负。</p><p>而在这个基础上，你可以选择群里面提供的规则来进行自我提升、自我管理，也可以向管理员提出自己的规则提案、活动提案。</p><p><strong>本群提供的是一种氛围，一种监督环境，至于能否从中获得提升，还需要看你自己。</strong></p><p>详细内容见下：</p><h2 id="打卡系统"><a href="#打卡系统" class="headerlink" title="打卡系统"></a>打卡系统</h2><p>由一个.xlsx 文件（即电子表格文件）来实现。下图为示意图，点击可放大。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190818105321.png"></p><h3 id="创建打卡相册"><a href="#创建打卡相册" class="headerlink" title="创建打卡相册"></a>创建打卡相册</h3><p>创建打卡相册需要以下步骤：</p><ol><li>在群文件内下载“打卡相册登记表 xxxxxx-x.xlsx”文件</li><li>在其中根据工作表“打卡相册字段描述”内的说明，在工作表“打卡相册登记表”内填写好对应的信息</li><li>将文件名修改为“打卡相册登记表+6 位数日期+任意分隔符+这一天第几次修改”，<br>如：“打卡相册登记表 190617_1“代表 2019 年 6 月 17 日的第一次修改。并将文件上传</li><li>在群相册创建自己的打卡相册，开始打卡</li></ol><h3 id="打卡相册规则"><a href="#打卡相册规则" class="headerlink" title="打卡相册规则"></a>打卡相册规则</h3><p>下面只列出比较重要的几个规则，具体的积分计算规则见<a href="https://yxchangingself.xyz/posts/excel_clock_in_album/">这里</a></p><ul><li>相册状态：正在进行、放弃、失败、归档</li><li>如果<strong>连续三天</strong>未打卡，管理员就删除相册，并在登记表内将相册状态设置为“失败”。</li><li><strong>不创建打卡不扣分，创建打卡而未坚持下来会扣分。没有请假制度，创建打卡前请考虑好</strong></li><li>对于有期限的相册，比如打卡目标是“两周读完《xxx》”，那么在结束日期时，可以将其状态设置为“归档”。相册资源回收（删除或改作他用），避免资源闲置。若<strong>持续时间大于等于一百天</strong>，则可以选择保留相册。（可以给其他群员作榜样）</li><li>对于没有期限的相册，比如“每天背单词”，那么在<strong>创建时间满三十天</strong>后就可以选择“归档”（三十天应该够养成一个小习惯了），删除规则同上一条。</li><li>相册删除后，相册记录还会保留在登记表里面，是<strong>公开的</strong>哦。</li></ul><h2 id="反思系统"><a href="#反思系统" class="headerlink" title="反思系统"></a>反思系统</h2><p>其登记表与打卡相册登记表使用同一个工作簿。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190818111657.png"></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>在群文件内复习自己学习内容</li><li>看到别人学习了自己却没有而产生激励效果。</li><li>保持群内一定的活跃度，去除不活跃成员</li><li>作为群内一个基本的群活动，强化学习氛围</li></ol><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li>每周日，每个人在群聊天发一个周总结，内容是自己这周学习了什么，没有限制，只是给大家一个自我反省的机会。</li><li>如果没有可以写的东西，那么也在群里面报备，方式为在群聊天中说：“本周无总结”或者别的能表明这一事实的话。别有压力，只是回复一句话的功夫。</li><li>无论总结多少，只要总结了，都会获得一定量的积分。</li><li>如果周日那一天状态不好或者很忙，可以在群里@管理员，告知推迟时间（不可超过下周周日），只要在报备的时间之前补了总结，也可以获得总结积分。</li><li>如果没有报备也没有在截止之前发周总结，可以在下一周总结之前补。如果没有补，则会扣除一定的积分。</li><li>每周所有成员的周总结将会被管理员整理到一个文件中，发到群内，即<strong>周总结是公开的</strong>，方便你随时查看自己的周总结以及自己下周的目标。</li><li>尽量使用 markdown 语法，方便管理员整理。如果你不了解什么是 markdown，那么就只需要在你的总结前面加上一行“## 你的昵称”即可。如果你想要学习 markdown，可以参考我在 b 站发的<a href="https://www.bilibili.com/video/av56611630/">这个视频</a>。本篇文章就是使用 markdown 语法来书写的。</li></ul><h3 id="总结示例"><a href="#总结示例" class="headerlink" title="总结示例"></a>总结示例</h3><p>内容没有限制，想写什么都可以，不限字数，但是最起码的格式是，在总结前面加上“## 你的昵称”</p><p>以下内容仅供参考，可以根据自己的喜好来增加或删除模块。</p><h4 id="简易总结示例"><a href="#简易总结示例" class="headerlink" title="简易总结示例"></a>简易总结示例</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 憧憬少</span></span><br><span class="line"></span><br><span class="line">本周没做什么事情</span><br></pre></td></tr></table></figure><h4 id="详细总结示例"><a href="#详细总结示例" class="headerlink" title="详细总结示例"></a>详细总结示例</h4><p>摘自“周总结 week5”，使用了 markdown 语法，可以在群文件的“周报”文件夹中找到它，看一下 markdown 的渲染效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 憧憬少</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 本周做了什么</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 驾校练完了右侧倒车入库，开始学习左侧</span><br><span class="line"><span class="bullet">-</span> （周一）完成信息门户密码加密模块并上传 github 和[<span class="string">编写博客</span>](<span class="link">https://yxchangingself.xyz/posts/portal_login_encrypt/#more</span>)</span><br><span class="line"><span class="bullet">-</span> （周三）完成信息门户模拟登录模块并上传[<span class="string">github</span>](<span class="link">https://github.com/HaneChiri/CHD_portal_login</span>)和[<span class="string">编写博客</span>](<span class="link">https://yxchangingself.xyz/posts/portal_login/#more</span>)</span><br><span class="line"><span class="bullet">-</span> 驾校排队练车的时候无聊，开始使用墨者写作 APP 来重新开始以前放弃的小说并在群里连载</span><br><span class="line"><span class="bullet">-</span> （周六）写了一个 python 脚本用于自动启动明日方舟的代理指挥，学习了<span class="code">`pyautogui`</span>库。</span><br><span class="line"><span class="bullet">-</span> （周日）发布上述脚本的[<span class="string">介绍视频</span>](<span class="link">https://www.bilibili.com/video/av60038926/</span>)以及上传脚本和打包的 exe 到[<span class="string">github</span>](<span class="link">https://github.com/HaneChiri/arknights_assist</span>)</span><br><span class="line"></span><br><span class="line"><span class="section">### 本周的目标有没有达到</span></span><br><span class="line"></span><br><span class="line">【目标链编号，每完成一个目标，生成下一个目标，编号增加，未完成则归零】</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [x] 【1】一周四次运动</span><br><span class="line"><span class="bullet">-</span> [x] 【0】一周三次，每天写代码半小时</span><br><span class="line"></span><br><span class="line"><span class="section">### 下周的目标</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> [ ] 【2】一周四次运动，包括不限于跑步，散步等</span><br><span class="line"><span class="bullet">-</span> [ ] 【1】一周三次，每天写代码半小时</span><br><span class="line"><span class="bullet">-</span> [ ] 【0】每天利用 time meter 记录时间开销</span><br><span class="line"></span><br><span class="line"><span class="section">### 概括这一周</span></span><br><span class="line"></span><br><span class="line">分数：85%</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 在驾校遇到了同一个高中的同学（虽然不是一个班不认识）</span><br><span class="line"><span class="bullet">-</span> 做了挺多事情</span><br></pre></td></tr></table></figure><h2 id="群活动"><a href="#群活动" class="headerlink" title="群活动"></a>群活动</h2><p>可以在群内向管理员提出群活动的建议。</p><p>目前已经举行过的群活动：</p><h3 id="1-学期总结"><a href="#1-学期总结" class="headerlink" title="#1 学期总结"></a>#1 学期总结</h3><p>【活动】学期总结<br>【编号】#1（也就是第一次活动）<br>【时间】2019-6-21~2019-7-10<br>【内容】本学期已经告一段落，学科的内容是否考完试就忘得差不多了呢？为了避免这一学期白学，各位学研都市居民可以在活动时间内在群文件的群活动作品提交文件夹内提交自己的学期总结。<br>形式不限，可以是手写总结拍照，可以是知识框架思维导图，可以是笔记文件，可以是录音讲解等。<br>【存档】活动结束之后，会将群文件中提交的总结统一打包，保存到群活动文件夹中，群活动提交文件夹会被清空。<br>【排名】活动结束之后，会进行作品投票，票数最多的参与者可以获得奖励<br>【奖励】目前我能想到的奖励就只有 30 天自定义专属头衔了</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬取微信公众号文章2获取页面失败</title>
      <link href="/posts/wechat_offical_account_spider_2_fail_to_get_html/"/>
      <url>/posts/wechat_offical_account_spider_2_fail_to_get_html/</url>
      
        <content type="html"><![CDATA[<p>虽然获取到了微信公众号文章的链接，但没法获取到包含文章内容的 html。</p><p>花了一个小时来研究怎么获取页面，最后还是失败了。</p><span id="more"></span><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><p>首先按照一般思路，使用 requests 库来获取页面，但是获取到的却是不含有文章内容的一堆 js 代码和 css 代码，以及少量的没有内容的 html。</p><p>去查看 Ajax 请求，有 4 个请求，其中三个都是没有文章内容的 json，而第一个请求也是最可疑的一个，无法预览。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190811153654.png"></p><p>第一个请求的接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/mp/appmsgreport?action=page_time&amp;__biz=MzAwNjA3Nzg0MA==&amp;uin=&amp;key=&amp;pass_ticket=&amp;wxtoken=777&amp;devicetype=&amp;clientversion=&amp;appmsg_token=&amp;x5=0&amp;f=json</span><br></pre></td></tr></table></figure><p>这是以 POST 方式访问的接口，下面一大堆的 Form data，<strong>这其中甚至还有文章的标题！</strong></p><p>也就是说在访问这个接口之前，就已经得知了文章的内容了吗？</p><h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><p>我觉得模拟请求太过于复杂，于是尝试使用 selenium 来获取。</p><p>但是得到的内容和上文说的一样，并没有什么不同。非常奇怪。加了 60 秒的延时让它充分渲染也没用，问题不在这里。</p><h1 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h1><p>后来输出到文件才发现，内容并没有少，确确实实地获取到了文章内容，但是由于 print 出来的字符数有限制，无法在控制台显示完，才导致我以为获取失败。当个教训吧。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年年中总结</title>
      <link href="/posts/2019_semi-annual_summary/"/>
      <url>/posts/2019_semi-annual_summary/</url>
      
        <content type="html"><![CDATA[<p>要一个人在家一周，有些孤独，有些茫然，想起来写总结。</p><p>不太清楚总结怎么写，就和以前一样，把过去的东西列出来看看吧，帮助自己回顾一番。</p><p>这是 2019 上半年的总结，也是大二第二学期的学期总结。</p><span id="more"></span><h1 id="过去做了什么事情"><a href="#过去做了什么事情" class="headerlink" title="过去做了什么事情"></a>过去做了什么事情</h1><p>翻了一下 qq 空间动态以及别的一些痕迹，大概了解了一下我自己在 2019 年上半年干了些什么事情。</p><h2 id="输出平台"><a href="#输出平台" class="headerlink" title="输出平台"></a>输出平台</h2><p>上半年我主要在三个平台上输出一些东西：</p><ul><li>个人博客</li><li>bilibili</li><li>github</li></ul><h3 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h3><p>2019 年 2 月 6 日，我在 github 上部署了<a href="https://hanechiri.github.io/">我的个人博客</a>，并记录下了<a href="https://yxchangingself.xyz/posts/hexo_deploy_log/">过程</a>（不算教程啦，更像是日记）</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190810204859.png"></p><p>到今天（2019 年 8 月 10 日）为止，已经有 29 篇博文了。标签中占的比例比较大的是“python”和“spider”，2 月份之后除了 5 月没有 python 文之外，其他月份都有至少 2 篇的博文关于 python，因为觉得 python 写起来很舒服，比起 c++和 java 的严格语法，python 更容易写出东西来。自从 2 月份的寒假开始学习 python 爬虫之后，就时不时地更新相关的博文。</p><p>有了个人博客之后，我就彻底抛弃了原本的微信公众号。</p><p>在个人博客里面写东西有一种更加快乐的感觉。一步一步了解 Hexo 博客搭建的原理，一步一步改进博客功能，添加右下角的 live2D 人物，安装图片插件，添加基于 leancloud 的评论和阅读次数统计……这些让我有种掌控感。</p><h3 id="Hexo-日记本"><a href="#Hexo-日记本" class="headerlink" title="Hexo 日记本"></a>Hexo 日记本</h3><p>搭建了 Hexo 个人博客之后，又新建了一个博客作为日记本，把以前写的电子版日记存在里面，不部署到服务器，只留存在我电脑上，主要是想利用它好看的渲染效果和各种插件来丰富日记本。</p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>下图是我目前的 github 资料页：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190810205614.png"></p><p>从 contributions 日历可以看到，2018 年还只是零星的几个 commits，2019 年的 commits 就增加了好多。</p><p>主要有两个原因。</p><p>第一个原因，是我部署了个人博客之后，写博客以及频繁调试博客提供了 commits 数。不过这只是次要原因。</p><p>第二个原因，是我真正开始把 git 当成生产工具了，这才是主要原因。</p><p>我大概是在 2018 年 4 月 15 日创建了 github 账号，2018 年下半年的时间并没有去管 github 账号，因为那时候还不知道怎么用 github，觉得得把 git 命令行给用熟了才能去玩这个网站。但是这就形成了一个不算太高但是我不想跨的门槛，而且我觉得平时我也用不到这么高级的东西，于是就没去学了。</p><p>一次偶然的机会，我看到了社团里面一个大佬——<a href="https://lollipopnougat.github.io/Crepeblog/">封掣</a>是如何使用 github-desktop（github 官方的 GUI 桌面软件）来管理自己的代码，终于明白，管它那么多高大上的命令干什么，一个工具，能够解决人的问题就行。于是我开始用起有 GUI 的 git 软件了（现在用的就是 github-desktop），把它当成存档软件，写课设的时候，写完一个功能就存一个档，写错了就回档。</p><h3 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h3><p>从创作中心的日历来看，今天是我成为 up 主的 464 天。2018 年 5 月 4 日，我投稿了第一个视频。</p><p>到今天，已经陆陆续续投稿了 26 个视频。主要的主题是分享代码思路。</p><p>然而总是有人只要代码不要思路，这让我很是苦恼，详情可以看<a href="https://www.bilibili.com/read/cv2926690">这个</a></p><p>现在前往代码分享群的通道基本已经关闭，只有少数几个视频下面的群号我没有删除，避免伸手党直接进来。一到期末，需要课程设计的时候，我的视频播放量就会增加，我算是明白怎么回事了。</p><p>想要解决“代码分享和代码抄袭的矛盾”，我有一个初步的想法，就是在视频里面先介绍思路，声明视频主要分享思路，不提供源代码，如果是伸手党，估计就直接走了找别的代码，同时也能够让真正想学的人学到思路。</p><p>不过还有一个问题，我做的视频的主题注定我每个视频的观众很少有重叠。我并不像教程 up 主一样，针对某个固定主题来出视频，而是更加注重于巩固自己学到的知识，分享只是顺带的。这也不是太大的问题。</p><h2 id="组织团队"><a href="#组织团队" class="headerlink" title="组织团队"></a>组织团队</h2><h3 id="网络安全协会"><a href="#网络安全协会" class="headerlink" title="网络安全协会"></a>网络安全协会</h3><p>虽然加了这个社团，但是感觉自己很难进入网络安全这个领域。</p><h3 id="易班工作站"><a href="#易班工作站" class="headerlink" title="易班工作站"></a>易班工作站</h3><p>大概 2019 年 3 月的时候，偶然看到易班工作站的群里面发了一个通知，说是辅导员有个技术讲座。当时我只是一个普普通通的社团成员，想去就去，那时候正好没什么事情，就去了。没想到会对我影响这么大。</p><p>我当时只是过去凑个热闹，没想到这是工作站的技术组的又一次纳新。</p><hr><p>以前的技术组纳新我也有去，那时候是大一，啥也不懂，连 html 都不会，然后就让我们自学来制作一个留言板。</p><p>自学诶！</p><p>刚开始自学 html 的时候，感觉这个难度我能 hold 住，没问题，可以进去！</p><p>但是学到后面我连需要用什么东西，需要学什么都不知道，很长一段时间没有进展，想放弃了。可能是因为很多同学也是如此，辅导员无奈之下，给大家简单演示了一下怎么用 easyPHP 来写，然后又放着我们去自学。</p><p>其实有问题确实可以问他，但是我对和辅导员打交道这件事情有些畏惧。一个自闭的人。</p><p>然后越学越自闭，最后放弃。</p><p>和我一起参加纳新的老朱则坚持了下来，加入了技术组。挺羡慕的，也明白自己不够强大，不够努力。</p><hr><p>这次我是大二，在课堂上和课外学了更多的东西，以前没写成功的留言板也写了一下，以及一个注册登录系统，录了个视频发 b 站（<a href="https://www.bilibili.com/video/av30714748/">传送门</a>）。</p><p>成功完成写一个爬虫的挑战，也因此入了 python 的坑。</p><h3 id="打卡学习群"><a href="#打卡学习群" class="headerlink" title="打卡学习群"></a>打卡学习群</h3><p>2019 年 4 月 26 日，一时心血来潮，建了一个学习群。</p><p>我给这个群制定了一些规则，比如：每月最多邀请一人进群，每周做个周总结，可以申请群相册来打卡等。</p><p>现在过去差不多四个月了，从刚开始的三个人到现在的五个人。还是有按照我的预期来发展的。</p><p>我认为能顺利发展的主要因素是邀请制进群，人多了就不好管了，人少就容易遵守规则。</p><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>在 2018 年 6 月 30 日，也就是大一的暑假快要开始的时候，我在 QQ 空间建了一个打卡相册，名字叫做《到 6 月 30 日要有 300 张》，一年 365 天，运动 300 天。</p><p>到 2019 年 6 月 30 日结算时，共有 218 张截图打卡，虽然没有达成目标，但是进度也差不多三分之二，比较满意。</p><p>开学之后打算开始新的打卡。</p><h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><h2 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h2><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><p>在我建的打卡学习群里，有人建了一个写小说的打卡相册，这让我又开始想要写小说了。</p><p>我曾经写过网络小说，在起点中文网上面发过，但是写的很烂，挤出二十几章就没了。</p><p>不过他把我的兴趣又勾起来了。不要像以前那样，一打算写就把全部的精力都耗费在上面，而是合理分配时间精力</p><h3 id="板绘"><a href="#板绘" class="headerlink" title="板绘"></a>板绘</h3><p>2019 年 7 月 29 日，我网购的数位板到了。这是我第一块数位板。</p><p>上一次想要买数位板时，我对自己说，得把手绘的习惯稳定下来之后才准买，不能买了不用。</p><p>我以前有一定的手绘基础，一般是临摹，偶尔会画几幅原创的画（比较丑啦）。很久没画，没时间，也没有那份兴趣。</p><p>打卡群里面唯一的妹子会板绘，有一次在上课之前我坐她旁边看到她在用数位板画画，是个大触。她在群里也新建了一个打卡相册，是一个画画相册。</p><p>这一次是快要过 20 岁生日了，我想买一个自己真正喜欢的生日礼物。犹豫了很久，终于下定决心买了。在知乎上查推荐品牌型号，在 b 站上看推荐视频，买到了一块两百多的数位板。</p><p>买完之后我还是很担心自己会不会把它扔在一边吃灰，安慰自己说老弟的高达和假面骑士模型比我这个贵多了，我买个这个来玩没啥的。</p><p>没想到板绘真的挺好玩的，到货当天我就临摹了一个 menhera 酱表情图，录了一个视频发在 b 站，挺有成就感的。</p><p>今天（2019 年 8 月 11 日）晚上还打算试试直播临摹，昨天探过绘画直播间了，也是有人看这种的。</p><h2 id="人际交往"><a href="#人际交往" class="headerlink" title="人际交往"></a>人际交往</h2><p>这个暑假在驾校学科目二，多了很多和别人交流的机会，和陌生人聊天也没有那么困难了。</p><h2 id="健康状况"><a href="#健康状况" class="headerlink" title="健康状况"></a>健康状况</h2><p>健康状况不容乐观。</p><p>现在喝任何一种饮料都和喝咖啡一样兴奋，抵抗力越来越差，肚子也越来越胖了，成为了一个肥宅。</p><p>所适应的刺激水平越来越高，控制不住自己玩手机，玩电脑（主要是看 b 站）。</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬取微信公众号文章1获取文章链接</title>
      <link href="/posts/wechat_offical_account_spider_1_get_article_urls/"/>
      <url>/posts/wechat_offical_account_spider_1_get_article_urls/</url>
      
        <content type="html"><![CDATA[<p>爬取微信公众号的文章，之前一直觉得应该很难，我搞不定，但是尝试了一下发现，其实这和之前爬取的网站没有太大的区别。</p><p>本文记录了 2019 年 8 月 7 日爬取某一特定微信公众号的所有文章链接的方式，读者请注意时效性。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>需要一个可登录的微信公众号。本文采用的方法是使用微信公众号内部的搜索来搜索文章。</li><li>由于登录部分很复杂，我还没搞懂，本文直接手动获取 cookies 来登录。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/wnma3mz/article/details/78570580">记一次微信公众号爬虫的经历-CSDN</a></p><h1 id="如何手动获取"><a href="#如何手动获取" class="headerlink" title="如何手动获取"></a>如何手动获取</h1><p>在登录后的微信公众平台的【素材管理】页面，点击【新建图文素材】，在新出现的编辑页面内，找到用于插入别的文章引用的，【超链接】图标。接着就会出现下图的窗口，输入需要获取的公众号查找即可。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190807143111.png"></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>打开 F12 开发者工具，搜索到公众号之后，查看 Ajax 请求</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190807143627.png"></p><p>换页的时候会再次发出 Ajax 请求，多换几页，查看它们的参数的规律。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190807144157.png"></p><p>通过观察，知道了接口是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mp.weixin.qq.com/cgi-bin/appmsg</span><br></pre></td></tr></table></figure><p>在访问这个接口时，需要在后面带上参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>:<span class="string">&#x27;271444813&#x27;</span>, <span class="comment">#在同一次登录不变，在首页源代码里面可以获取</span></span><br><span class="line">    <span class="string">&#x27;lang&#x27;</span>:<span class="string">&#x27;zh_CN&#x27;</span>, <span class="comment"># 不变</span></span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;json&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">    <span class="string">&#x27;ajax&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">    <span class="string">&#x27;random&#x27;</span>: <span class="built_in">str</span>(random.random()),<span class="comment"># 随机数</span></span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;list_ex&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">    <span class="string">&#x27;begin&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="comment"># 代表页数，每翻一页就会+5，但是每一页的文章数不一定为5篇</span></span><br><span class="line">    <span class="string">&#x27;count&#x27;</span>:<span class="string">&#x27;5&#x27;</span>, <span class="comment"># 应该是每一次获取的文章篇数</span></span><br><span class="line">    <span class="string">&#x27;query&#x27;</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">    <span class="string">&#x27;fakeid&#x27;</span>:<span class="string">&#x27;MzAwNjA3Nzg0MA==&#x27;</span>,<span class="comment"># 文章所在的公众号的id</span></span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;9&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="获取步骤"><a href="#获取步骤" class="headerlink" title="获取步骤"></a>获取步骤</h1><ol><li>登录微信公众平台</li><li>手动在开发者工具中获取 cookies 字符串</li><li>带好参数访问 Ajax 接口，获取到所需要的 json 数据</li></ol><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookiejar_from_str</span>(<span class="params">cookies_str</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    将cookies字符串转换为cookiejar</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    cookies=<span class="built_in">dict</span>([item.split(<span class="string">&#x27;=&#x27;</span>,<span class="number">1</span>) <span class="keyword">for</span> item <span class="keyword">in</span> cookies_str.split(<span class="string">&#x27;;&#x27;</span>)])</span><br><span class="line">    <span class="built_in">print</span>(cookies)</span><br><span class="line">    cookies=requests.utils.cookiejar_from_dict(cookies)</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># cookies字符串</span></span><br><span class="line">    cookies_str=<span class="string">&#x27;&#x27;&#x27;openid2ticket_okSCe0vbk_v5067L-AuViT1wrkEg=ARU37unMfUwam3yNHXFcw5CMFvTHMvmBnjjS8A8=</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.strip() <span class="comment"># 这里我手动截去了大部分cookies字符串，明白意思即可</span></span><br><span class="line">    <span class="comment"># headers</span></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3722.400 QQBrowser/10.5.3738.400&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cookies = cookiejar_from_str(cookies_str)</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>:<span class="string">&#x27;271444813&#x27;</span>, <span class="comment">#在同一次登录不变，在首页源代码里面可以获取</span></span><br><span class="line">        <span class="string">&#x27;lang&#x27;</span>:<span class="string">&#x27;zh_CN&#x27;</span>, <span class="comment"># 不变</span></span><br><span class="line">        <span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;json&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">        <span class="string">&#x27;ajax&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">        <span class="string">&#x27;random&#x27;</span>: <span class="built_in">str</span>(random.random()),<span class="comment"># 随机数</span></span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;list_ex&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">        <span class="string">&#x27;begin&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="comment"># 代表页数，每翻一页就会+5，但是每一页的文章数不一定为5篇</span></span><br><span class="line">        <span class="string">&#x27;count&#x27;</span>:<span class="string">&#x27;5&#x27;</span>, <span class="comment"># 应该是每一次获取的文章篇数</span></span><br><span class="line">        <span class="string">&#x27;query&#x27;</span>:<span class="string">&#x27;&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">        <span class="string">&#x27;fakeid&#x27;</span>:<span class="string">&#x27;MzAwNjA3Nzg0MA==&#x27;</span>,<span class="comment"># 文章所在的公众号的id</span></span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>:<span class="string">&#x27;9&#x27;</span>,<span class="comment"># 不变</span></span><br><span class="line">    &#125;</span><br><span class="line">    url=<span class="string">&#x27;https://mp.weixin.qq.com/cgi-bin/appmsg&#x27;</span></span><br><span class="line">    response_json = requests.get(url, cookies=cookies,headers=headers, params=data).json()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> response_json[<span class="string">&quot;app_msg_list&quot;</span>]:</span><br><span class="line">        <span class="comment"># 获取url</span></span><br><span class="line">        <span class="built_in">print</span>(item[<span class="string">&#x27;link&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易密码生成器</title>
      <link href="/posts/simple_password_generater/"/>
      <url>/posts/simple_password_generater/</url>
      
        <content type="html"><![CDATA[<p>为了管理自己平时各种各样的账号密码，我使用了一个加密了的 xlsx 文件来记录，同时使用了密码生成规则。为了方便生成密码，使用 python 写了一个小工具。</p><p><strong>由于代码比较简单，因此不做过多说明，仅做记录。</strong></p><span id="more"></span><h1 id="密码生成规则"><a href="#密码生成规则" class="headerlink" title="密码生成规则"></a>密码生成规则</h1><p>对于一些比较重要的账号，比如 QQ，密码采用随机字符串，再记住，这样的字符串是没有规律的。</p><p>对于一些不太重要的账号，就使用对应的网站变量进行偏移。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> clipboard</span><br></pre></td></tr></table></figure><h2 id="生成随机密码"><a href="#生成随机密码" class="headerlink" title="生成随机密码"></a>生成随机密码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random</span>(<span class="params">length, alphabeta=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    生成指定长度的随机密码</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    length = <span class="built_in">int</span>(length)</span><br><span class="line">    <span class="keyword">if</span> alphabeta == <span class="literal">None</span>:</span><br><span class="line">        alphabeta = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>  <span class="comment"># 字母表</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length):</span><br><span class="line">        password += random.choice(alphabeta)</span><br><span class="line">    <span class="keyword">return</span> password</span><br></pre></td></tr></table></figure><h2 id="生成偏移密码"><a href="#生成偏移密码" class="headerlink" title="生成偏移密码"></a>生成偏移密码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_offset</span>(<span class="params">raw_password, offset, alphabeta=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    将原始密码进行偏移</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    offset = <span class="built_in">int</span>(offset)</span><br><span class="line">    <span class="keyword">if</span> alphabeta == <span class="literal">None</span>:</span><br><span class="line">        alphabeta = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>  <span class="comment"># 字母表</span></span><br><span class="line">    password = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> raw_password:</span><br><span class="line">        index = alphabeta.index(character)  <span class="comment"># 获取原本的索引</span></span><br><span class="line">        new_index = (index+offset) % <span class="built_in">len</span>(alphabeta)  <span class="comment"># 获取偏移后的索引</span></span><br><span class="line">        password += alphabeta[new_index]</span><br><span class="line">    <span class="keyword">return</span> password</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;q退出&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;random 生成随机密码&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;offset 生成偏移密码&#x27;</span>)</span><br><span class="line">    cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> cmd != <span class="string">&#x27;q&#x27;</span> <span class="keyword">and</span> cmd != <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">        password = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">&#x27;random&#x27;</span>:</span><br><span class="line">            length = <span class="built_in">input</span>(<span class="string">&#x27;请输入密码长度：&#x27;</span>)</span><br><span class="line">            password = generate_random(length)</span><br><span class="line">            clipboard.copy(password)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;密码已复制到剪切板:\n&#x27;</span>,password)</span><br><span class="line">        <span class="keyword">elif</span> cmd == <span class="string">&#x27;offset&#x27;</span>:</span><br><span class="line">            raw_password = <span class="built_in">input</span>(<span class="string">&#x27;请输入原始密码：&#x27;</span>)</span><br><span class="line">            offset = <span class="built_in">input</span>(<span class="string">&#x27;请输入偏移量：&#x27;</span>)</span><br><span class="line">            password = generate_offset(raw_password, offset)</span><br><span class="line">            clipboard.copy(password)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;密码已复制到剪切板:\n&#x27;</span>,password)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;请输入正确的指令&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;q退出&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;random 生成随机密码&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;offset 生成偏移密码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        cmd = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校信息门户模拟登录</title>
      <link href="/posts/portal_login/"/>
      <url>/posts/portal_login/</url>
      
        <content type="html"><![CDATA[<p>将登陆学校信息门户的部分专门封装成一个模块，需要的时候导入。</p><span id="more"></span><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://github.com/HaneChiri/CHD_portal_login">本文代码的 github 链接</a></p><h1 id="获取登录所需表单数据"><a href="#获取登录所需表单数据" class="headerlink" title="获取登录所需表单数据"></a>获取登录所需表单数据</h1><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718144535.png"></p><p>从图中看到的，和在登录页面源代码中查找的，需要的表单数据如下：</p><ul><li>username：用户名，也就是信息门户账号</li><li>password：是经过加密之后的密码</li><li>lt：是一个每次请求都会变化的表单隐藏域值</li><li>dllt：固定表单隐藏域值</li><li>execution：固定表单隐藏域值</li><li>_eventId：固定表单隐藏域值</li><li>rmShown：固定表单隐藏域值</li></ul><p>除了需要表单数据之外，还需要在登录页面源代码中获取密钥，详情见：<a href="https://yxchangingself.xyz/posts/portal_login_encrypt/#more">学校信息门户模拟登录之密码加密</a></p><p>使用<code>BeautifulSoup</code>来获取这些数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> portal_login.encrypt <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_login_data</span>(<span class="params">login_url,headers</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    长安大学登录表单数据解析</span></span><br><span class="line"><span class="string">    :param login_url: 登录页面的url</span></span><br><span class="line"><span class="string">    :return (登录信息字典,获取时得到的cookies)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    username=<span class="built_in">input</span>(<span class="string">&#x27;input username:&#x27;</span>)</span><br><span class="line">    password=<span class="built_in">input</span>(<span class="string">&#x27;input password:&#x27;</span>)</span><br><span class="line">    username.strip()</span><br><span class="line">    password.strip()<span class="comment">#去除头尾空格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取登录所需表单数据</span></span><br><span class="line">    response=requests.get(login_url,headers=headers)</span><br><span class="line">    html=response.text</span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment">#获取密钥来加密密码</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;var\s*?pwdDefaultEncryptSalt\s*?=\s*?&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">    key = pattern.findall(html)[<span class="number">0</span>]</span><br><span class="line">    password=encrypt_aes(password,key)</span><br><span class="line"></span><br><span class="line">    lt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    dllt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    _eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    login_data=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: password,</span><br><span class="line">        <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">        <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">        <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">        <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">        <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (login_data,response.cookies)</span><br></pre></td></tr></table></figure><p>要注意的是，获取完数据之后，需要将 response 的 cookies 留下来，因为不同 cookies 对应的登录数据也不一样（比如说每次打开页面都不一样的密钥和 lt）</p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><h2 id="登录过程分析"><a href="#登录过程分析" class="headerlink" title="登录过程分析"></a>登录过程分析</h2><p>在登录页面输入账号密码，F12 打开开发者工具，<code>Network</code>勾选<code>Preserve log</code>，点击登录，然后就会出现下图场景：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720115959.png"></p><p>找到从登陆页面出去的第一个响应，可以发现这个响应的状态码是 302，代表“重定向”。在<code>Response Headers</code>里面可以找到<code>Location</code>这个键，它指示的是重定向的地址。</p><p>这个响应的含义大概是“服务器告诉浏览器带着给它的 cookies 去访问<code>Location</code>指示的 url”</p><p>在刷出来的一大堆响应中继续寻找，找到下一个地址：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720121006.png"></p><p>从图中可以看到，目的地址已经是门户的主页 url 了，继续跳转：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720121212.png"></p><p>随便打开一个登陆才能查看的页面，查看它的 cookie，发现浏览器带着这几个 cookies 来访问这个页面，也就是说，我们需要获取到这几个 cookies，才能登录成功：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720121401.png"></p><h2 id="处理跳转"><a href="#处理跳转" class="headerlink" title="处理跳转"></a>处理跳转</h2><p>默认情况下，requests 的<code>post()</code>方法是得到跳转后最终页面的响应，也就是说，登录成功就返回门户主页的响应，登录失败就返回跳转之后回到的登录页面的响应。</p><p>需要设置一个参数，来阻止它进行跳转：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response=requests.post(login_url,headers=headers,data=data,cookies=cookies,allow_redirects=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow_redirects=<span class="literal">False</span></span><br></pre></td></tr></table></figure><p>不允许跳转，第一次请求得到什么响应就返回什么响应。</p><p>每一次跳转，我们需要做的工作如下：</p><ol><li>将现有的 cookies 与新获取的 cookies 合并</li><li>找到下一个重定向地址，带上 cookies，再一次请求</li></ol><p>实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">response=requests.post(login_url,headers=headers,data=data,cookies=cookies,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">while</span> response.status_code == <span class="number">302</span>:<span class="comment">#如果响应状态是“重定向”</span></span><br><span class="line">    <span class="comment">#合并新获取到的cookies</span></span><br><span class="line">    cookies=join_cookies(cookies,response.cookies)</span><br><span class="line">    <span class="comment">#获取下一个需要跳转的url</span></span><br><span class="line">    next_station=response.headers[<span class="string">&#x27;Location&#x27;</span>]</span><br><span class="line">    response=requests.post(next_station,headers=headers,cookies=cookies,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">cookies=join_cookies(cookies,response.cookies)</span><br></pre></td></tr></table></figure><p>其中<code>join_cookies()</code>的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">join_cookies</span>(<span class="params">cookies1,cookies2</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    将cookies1和cookies2合并</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    cookies=<span class="built_in">dict</span>(cookies1,**cookies2)</span><br><span class="line">    cookies=requests.utils.cookiejar_from_dict(cookies)</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br></pre></td></tr></table></figure><h2 id="登录函数总览"><a href="#登录函数总览" class="headerlink" title="登录函数总览"></a>登录函数总览</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">login_url,headers,check_url=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    登录到CHD信息门户</span></span><br><span class="line"><span class="string">    :param login_url: 登录页面的url</span></span><br><span class="line"><span class="string">    :param headers: 使用的headers</span></span><br><span class="line"><span class="string">    :param check_url: 用于检查的url，尝试请求此页面并核对是否能请求到</span></span><br><span class="line"><span class="string">    :return: 已登录的cookies</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    data,cookies=get_login_data(login_url,headers)<span class="comment">#获取登录数据</span></span><br><span class="line"></span><br><span class="line">    response=requests.post(login_url,headers=headers,data=data,cookies=cookies,allow_redirects=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">while</span> response.status_code == <span class="number">302</span>:<span class="comment">#如果响应状态是“重定向”</span></span><br><span class="line">        <span class="comment">#合并新获取到的cookies</span></span><br><span class="line">        cookies=join_cookies(cookies,response.cookies)</span><br><span class="line">        <span class="comment">#获取下一个需要跳转的url</span></span><br><span class="line">        next_station=response.headers[<span class="string">&#x27;Location&#x27;</span>]</span><br><span class="line">        response=requests.post(next_station,headers=headers,cookies=cookies,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    cookies=join_cookies(cookies,response.cookies)</span><br><span class="line">    <span class="comment">#登录检查</span></span><br><span class="line">    <span class="keyword">if</span> check_url != <span class="literal">None</span>:</span><br><span class="line">        response = requests.get(check_url,headers=headers,cookies=cookies)</span><br><span class="line">        <span class="keyword">if</span> response.url==check_url:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> cookies</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校信息门户模拟登录之密码加密</title>
      <link href="/posts/3903089268/"/>
      <url>/posts/3903089268/</url>
      
        <content type="html"><![CDATA[<p>以前写的爬虫无法登录到学校的信息门户上去了，因为门户的新 JS 代码将表单的密码先加密了一次，再将其与别的表单数据 POST 过去。使用的是 AES 加密的 CBC 模式。</p><p>本文前半部分是我的 python 组长<strong>雁横</strong>给组员们讲解的信息门户的密码加密思路，然后由我总结成文，后半部分是我自己写的加密代码实现，使用 python 的<code>PyCryptodome</code>库来进行加密。</p><span id="more"></span><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/mojita/p/5769350.html">浏览器开发者工具基本使用教程-博客园</a></li><li><a href="https://blog.csdn.net/xc_zhou/article/details/80952155">Python 运行 js 代码</a></li><li><a href="https://www.cnblogs.com/xiao-apple36/p/8744408.html">python 加密与解密（大致介绍了加密解密算法）-博客园</a></li><li><a href="https://www.jianshu.com/p/4ba20afacce2">常见加密方式与 python 实现-简书</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/cipher.html#">PyCryptodome 库的官方文档</a></li><li><a href="https://www.runoob.com/python/att-string-encode.html">python encode 方法-菜鸟教程</a></li></ul><hr><p><a href="https://github.com/HaneChiri/CHD_portal_login/blob/master/portal_login/encrypt.py">本文代码的 github 链接</a></p><hr><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>登录之后查看原本提交表单的部分可以发现，密码由明文传输改成密文传输了。于是原本只需要 POST 账号和密码的明文就行，现在需要多经过一步——加密。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718144535.png"></p><p>起码咱们学校还是有考虑安全问题嘛！OVO</p><h1 id="分析加密过程"><a href="#分析加密过程" class="headerlink" title="分析加密过程"></a>分析加密过程</h1><p>因为登录到主页的时候已经是加密好的密码，所以加密工作应该是在登录页面就进行的。</p><p>所以回到<a href="http://ids.chd.edu.cn/authserver/login?service=http://portal.chd.edu.cn/index.portal">登录页面</a>刷新一下，筛选 javascript 文件（因为 js 文件是用于动作的）</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718160057.png"></p><p>在这几个 js 文件中找找有没有线索，然后在其中一个 js 文件中找到了一个密码加密函数。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145319.png"></p><h2 id="encryptPassword"><a href="#encryptPassword" class="headerlink" title="encryptPassword()"></a>encryptPassword()</h2><p>传入密码，返回加密后的密码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encryptPassword</span>(<span class="params">pwd0</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> pwd1 = <span class="title function_">encryptAES</span>(pwd0, pwdDefaultEncryptSalt);</span><br><span class="line">    $(<span class="string">&quot;#casLoginForm&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;#passwordEncrypt&quot;</span>).<span class="title function_">val</span>(pwd1);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    $(<span class="string">&quot;#casLoginForm&quot;</span>).<span class="title function_">find</span>(<span class="string">&quot;#passwordEncrypt&quot;</span>).<span class="title function_">val</span>(pwd0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心逻辑就一句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pwd1 = <span class="title function_">encryptAES</span>(pwd0, pwdDefaultEncryptSalt);</span><br></pre></td></tr></table></figure><p><code>encryptPassword()</code>调用了一个名为<code>encryptAES()</code>的函数，参数<code>pwd0</code>可能是未加密的密码，<code>pwdDefaultEncryptSalt</code>可能是加密用的密钥。try-catch 不用说了，就是错误处理。</p><p>encrypt 是加密的意思，而 AES 是一种加密的方式。</p><p>而刚刚的 js 文件里面有一个文件就带着 encrypt 这个单词，点进去看，找到了下一个函数：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145605.png"></p><h2 id="encryptAES"><a href="#encryptAES" class="headerlink" title="encryptAES()"></a>encryptAES()</h2><p>传入密码明文和 AES 密钥，返回密文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">encryptAES</span>(<span class="params">data, aesKey</span>) &#123;</span><br><span class="line">  <span class="comment">//加密</span></span><br><span class="line">  <span class="keyword">if</span> (!aesKey) &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> encrypted = <span class="title function_">getAesString</span>(</span><br><span class="line">    <span class="title function_">randomString</span>(<span class="number">64</span>) + data,</span><br><span class="line">    aesKey,</span><br><span class="line">    <span class="title function_">randomString</span>(<span class="number">16</span>)</span><br><span class="line">  ); <span class="comment">//密文</span></span><br><span class="line">  <span class="keyword">return</span> encrypted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码逻辑：</p><ul><li>如果没有给出密钥，那么就不加密直接返回明文；</li><li>如果给出了密钥，那么就调用<code>getAesString()</code>函数来获取密文</li><li>返回密文</li></ul><p>其中<code>randomString()</code>函数代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $aes_chars = <span class="string">&quot;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> aes_chars_len = $aes_chars.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomString</span>(<span class="params">len</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> retStr = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    retStr += $aes_chars.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * aes_chars_len));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> retStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上图可以看到，<code>getAesString()</code>就在这个函数上方。</p><h2 id="getAesString"><a href="#getAesString" class="headerlink" title="getAesString()"></a>getAesString()</h2><p>传入明文、密钥、偏移量，返回密文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AES-128-CBC加密模式，key需要为16位，key和iv可以一样</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getAesString</span>(<span class="params">data, key0, iv0</span>) &#123;</span><br><span class="line">  <span class="comment">//加密</span></span><br><span class="line">  key0 = key0.<span class="title function_">replace</span>(<span class="regexp">/(^\s+)|(\s+$)/g</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//去除开头和结尾的空白</span></span><br><span class="line">  <span class="keyword">var</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key0);</span><br><span class="line">  <span class="keyword">var</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(iv0);</span><br><span class="line">  <span class="keyword">var</span> encrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(data, key, &#123;</span><br><span class="line">    <span class="attr">iv</span>: iv,</span><br><span class="line">    <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span>,</span><br><span class="line">    <span class="attr">padding</span>: <span class="title class_">CryptoJS</span>.<span class="property">pad</span>.<span class="property">Pkcs7</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> encrypted.<span class="title function_">toString</span>(); <span class="comment">//返回的是base64格式的密文</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中调用了 aes 加密算法的函数来加密</p><h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><p>还差密钥<code>pwdDefaultEncryptSalt</code>，去 js 文件里面搜索：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145810.png"></p><p>图中可以看到，密钥的来源是<code>pwdEncryptArr[1]</code>变量，但是在 js 文件里面却找不到这个从哪里来的了。</p><p>不过去搜索登录页面源代码的时候发现它就写在页面里面。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145859.png"></p><p>得到了密钥：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pwdDefaultEncryptSalt = <span class="string">&quot;QgkxfHXdbwRHcvDI&quot;</span>;</span><br></pre></td></tr></table></figure><p>后来发现，这个密钥同样每次都会变化，可以在获取表单变化的隐藏域值的时候顺便获取了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>信息门户加密算法是：AES-128-CBC 加密模式，key 需要为 16 位，key 和 iv 可以一样（从注释里面得到的）</p><ul><li>密文 data 是长度为 64 的随机字符串与登录密码连接。</li><li>密钥 key 就放在登录页面源码内，每次都会变化，需要动态获取。</li><li>偏移量 iv 是长度为 16 的随机字符串。</li></ul><p>现在知道了它的加密算法以及密钥，我们在模拟登录的时候把我们的密码用同样的方式加密，向以前那样发送就可以登录了。</p><p>有两种解决方案：</p><ol><li>直接在 python 里面运行复制来的 js 代码。参考：<a href="https://blog.csdn.net/xc_zhou/article/details/80952155">Python 运行 js 代码</a></li><li>使用 python 进行加密</li></ol><h1 id="加密-python-代码实现"><a href="#加密-python-代码实现" class="headerlink" title="加密 python 代码实现"></a>加密 python 代码实现</h1><h2 id="AES-简介"><a href="#AES-简介" class="headerlink" title="AES 简介"></a>AES 简介</h2><p>AES（Advanced Encryption Standard）（高级加密标准），用于代替原本的 DES（Data Encryption Standard）</p><blockquote><p>2006 年，高级加密标准已然成为<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=72260379&ss_c=ssc.citiao.link">对称密钥</a>加密中最流行的算法之一。——搜狗百科</p></blockquote><p>AES 算法将明文分为长度相等的若干组，每次加密一组数据。</p><p>分组长度固定为 128 位（16 字节），密钥长度则可以是 128，192 或 256 比特（16、24 和 32 字节）。</p><p>我遇到的加密问题需要的是 128 位的密钥。</p><h2 id="PyCryptodome-库"><a href="#PyCryptodome-库" class="headerlink" title="PyCryptodome 库"></a>PyCryptodome 库</h2><p>这个库是 PyCrypto 库（已经停止更新）的延续。</p><p><a href="https://www.pycryptodome.org/en/latest/src/cipher/cipher.html#">PyCryptodome 库的官方文档</a></p><p>安装方式（windows）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pycryptodomex</span><br></pre></td></tr></table></figure><p>导入方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cryptodome</span><br></pre></td></tr></table></figure><h2 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h2><p>在页面源码里面密钥的格式是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pwdDefaultEncryptSalt = <span class="string">&quot;QgkxfHXdbwRHcvDI&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用正则表达式来解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_encrypt_salt</span>(<span class="params">login_url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取密钥</span></span><br><span class="line"><span class="string">    :param login_url:登录页面的url</span></span><br><span class="line"><span class="string">    :return: (密钥,密钥对应的cookies)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    response=requests.get(login_url)</span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">&#x27;var\s*?pwdDefaultEncryptSalt\s*?=\s*?&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">    pwdDefaultEncryptSalt = pattern.findall(response.text)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> (pwdDefaultEncryptSalt,response.cookies)</span><br></pre></td></tr></table></figure><h2 id="获取初始化向量"><a href="#获取初始化向量" class="headerlink" title="获取初始化向量"></a>获取初始化向量</h2><p>iv 是初始化向量，也称作偏移量。</p><p>在上面的分析中，传给加密函数的 iv 是一个随机字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> encrypted = <span class="title function_">getAesString</span>(<span class="title function_">randomString</span>(<span class="number">64</span>) + data, aesKey, <span class="title function_">randomString</span>(<span class="number">16</span>)); <span class="comment">//密文</span></span><br></pre></td></tr></table></figure><p>现在用 python 来实现这个<code>randomString()</code></p><h3 id="randomString-的-python-实现"><a href="#randomString-的-python-实现" class="headerlink" title="randomString()的 python 实现"></a>randomString()的 python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">random_string</span>(<span class="params">length</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取随机字符串</span></span><br><span class="line"><span class="string">    :param length:随机字符串长度</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    ret_string=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    aes_chars = <span class="string">&#x27;ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        ret_string+=random.choice(aes_chars)</span><br><span class="line">    <span class="keyword">return</span> ret_string</span><br></pre></td></tr></table></figure><p>那一串用于随机的字符串是我从 js 文件的注释里面复制下来的，这个串并没有覆盖全部的字母和数字，为了防止意外，直接使用它的。</p><h2 id="getAesString-的-python-实现"><a href="#getAesString-的-python-实现" class="headerlink" title="getAesString()的 python 实现"></a>getAesString()的 python 实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Util.Padding <span class="keyword">import</span> pad<span class="comment">#用于对齐</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_aes_string</span>(<span class="params">data,key,iv</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    用AES-CBC方式加密字符串</span></span><br><span class="line"><span class="string">    :param data: 需要加密的字符串</span></span><br><span class="line"><span class="string">    :param key: 密钥</span></span><br><span class="line"><span class="string">    :param iv: 偏移量</span></span><br><span class="line"><span class="string">    :return: base64格式的加密字符串</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#预处理字符串</span></span><br><span class="line">    data=<span class="built_in">str</span>.encode(data)</span><br><span class="line">    data=pad(data, AES.block_size)<span class="comment">#将明文对齐</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#预处理密钥和偏移量</span></span><br><span class="line">    key=<span class="built_in">str</span>.encode(key)</span><br><span class="line">    iv=<span class="built_in">str</span>.encode(iv)</span><br><span class="line"></span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv)<span class="comment">#初始化加密器</span></span><br><span class="line">    cipher_text=cipher.encrypt(data)<span class="comment">#加密</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#返回的是base64格式的密文</span></span><br><span class="line">    cipher_b64=<span class="built_in">str</span>(base64.b64encode(cipher_text), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> cipher_b64</span><br></pre></td></tr></table></figure><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>首先，先将明文对齐，因为 AES 加密是分组加密，所以明文的长度需要是组长度的倍数。</p><p>有两种方式</p><ol><li><code>Cryptodome.Util.Padding</code>中的 pad 函数就可以实现对齐，就是我采用的办法。</li><li><a href="https://github.com/hfldqwe/encrypt/blob/master/encrypt/aes_cbc.py">组长雁横的代码</a>是这样实现对齐的：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add_to_16</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(value) % <span class="number">16</span> != <span class="number">0</span>:</span><br><span class="line">        value += <span class="string">&#x27;\0&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>.encode(value)  <span class="comment"># 返回bytes</span></span><br></pre></td></tr></table></figure><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>js 代码里面在加密之前，对数据做了编码处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(key0);</span><br><span class="line"><span class="keyword">var</span> iv = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(iv0);</span><br></pre></td></tr></table></figure><p>因此也顺便处理一下。</p><p><a href="https://www.runoob.com/python/att-string-encode.html">python encode 方法</a></p><blockquote><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Python encode() 方法以 <em>encoding</em> 指定的编码格式编码字符串。errors 参数可以指定不同的错误处理方案。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>encode()方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>,errors=<span class="string">&#x27;strict&#x27;</span>)</span><br></pre></td></tr></table></figure></blockquote><h2 id="encryptAES-的-python-实现"><a href="#encryptAES-的-python-实现" class="headerlink" title="encryptAES()的 python 实现"></a>encryptAES()的 python 实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_aes</span>(<span class="params">data,key=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    进行AES加密</span></span><br><span class="line"><span class="string">    :param data: 需要加密的字符串</span></span><br><span class="line"><span class="string">    :param key: 密钥</span></span><br><span class="line"><span class="string">    :return: 如果key存在，则返回密文，否则返回明文</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">not</span> key):</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data=random_string(<span class="number">64</span>)+data</span><br><span class="line">        iv=random_string(<span class="number">16</span>)<span class="comment">#偏移量</span></span><br><span class="line">        encrypted =get_aes_string(data,key,iv)</span><br><span class="line">        <span class="keyword">return</span> encrypted</span><br></pre></td></tr></table></figure><h2 id="encryptPassword-的-python-实现"><a href="#encryptPassword-的-python-实现" class="headerlink" title="encryptPassword()的 python 实现"></a>encryptPassword()的 python 实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_password</span>(<span class="params">password,login_url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    加密密码</span></span><br><span class="line"><span class="string">    :param password: 需要加密的密码</span></span><br><span class="line"><span class="string">    :param login_url:登录页面的url</span></span><br><span class="line"><span class="string">    :return: (加密后的密码,对应的cookies)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    key,cookies=get_encrypt_salt(login_url)</span><br><span class="line">    password.strip()<span class="comment">#去除头尾空格</span></span><br><span class="line">    encrypted=encrypt_aes(password,key)</span><br><span class="line">    <span class="keyword">return</span> (encrypted,cookies)</span><br></pre></td></tr></table></figure><p>这就完成了</p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    login_url=<span class="string">&#x27;http://ids.chd.edu.cn/authserver/login?service=http%3A%2F%2Fportal.chd.edu.cn%2F&#x27;</span></span><br><span class="line"></span><br><span class="line">    password=<span class="built_in">input</span>(<span class="string">&#x27;password:&#x27;</span>)</span><br><span class="line">    password,cookies=encrypt_password(password,login_url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;encrypted password:&#x27;</span>,password)</span><br></pre></td></tr></table></figure><h1 id="有效性检验"><a href="#有效性检验" class="headerlink" title="有效性检验"></a>有效性检验</h1><p>可以使用浏览器开发者工具的控制台，调用 js 函数，传入同样的参数，看是否得到相同的结果。</p><p>测试结果如图：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/QQ%E5%9B%BE%E7%89%8720190718160740.png"><br><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/QQ%E5%9B%BE%E7%89%8720190718160734.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python读取ini文件失败的原因</title>
      <link href="/posts/python_read_ini_No_section/"/>
      <url>/posts/python_read_ini_No_section/</url>
      
        <content type="html"><![CDATA[<p>尝试使用 python 的<code>configparser</code>来读取<code>ini</code>配置文件，但是遇到了<code>No Section</code>的错误。</p><p>最终发现其实是路径出了问题。</p><span id="more"></span><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>初始代码简化之后是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    config=ConfigParser()<span class="comment">#创建配置对象</span></span><br><span class="line">    config.read(<span class="string">&#x27;test.ini&#x27;</span>)<span class="comment">#读取配置文件</span></span><br><span class="line">    result=config.get(section=<span class="string">&#x27;test&#x27;</span>,option=<span class="string">&#x27;name&#x27;</span>)<span class="comment">#读取test下的name</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>同目录的<code>test.ini</code>的内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[test]</span></span><br><span class="line"><span class="attr">name</span> = tom</span><br></pre></td></tr></table></figure><p>但是运行出现了<code>configparser.NoSectionError: No section: &#39;test&#39;</code>的错误</p><h1 id="原因探索"><a href="#原因探索" class="headerlink" title="原因探索"></a>原因探索</h1><p>经过单步调试后发现并没有读取到文件的内容，猜测可能是没有找到文件。</p><p>以前在 import 自定义模块的时候遇到过类似的问题，当时的解决方法是把当前工作路径设置为正在执行的文件所在的路径。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>使用绝对路径</li><li>将当前工作路径改为当前文件路径，再使用相对路径</li></ol><p>第二种方法的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> configparser <span class="keyword">import</span> ConfigParser</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    curpath=os.path.dirname(os.path.realpath(__file__))</span><br><span class="line">    filename=os.path.join(curpath,<span class="string">&quot;test.ini&quot;</span>)</span><br><span class="line"></span><br><span class="line">    config=ConfigParser()<span class="comment">#创建配置对象</span></span><br><span class="line">    config.read(filename)<span class="comment">#读取配置文件</span></span><br><span class="line">    result=config.get(section=<span class="string">&#x27;test&#x27;</span>,option=<span class="string">&#x27;name&#x27;</span>)<span class="comment">#读取test下的name</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel实现周总结签到积分制</title>
      <link href="/posts/excel_weekly_sign/"/>
      <url>/posts/excel_weekly_sign/</url>
      
        <content type="html"><![CDATA[<p>我在自己一个学习群里设定了一个周总结制度，这篇博客记录一下如何使用 excel 函数来实现计算打卡相册的积分。<strong>这里其实我用的是 wps 表格，但是函数一样，所以我就分类在 excel 里面。</strong></p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>每周日，每个人在群聊天发一个周总结，内容是自己这周学习了什么，没有限制，只是给大家一个自我反省的机会。</p><p>如果没有可以写的东西，那么也在群里面报备，方式为在群聊天中说：“本周无总结”或者别的能表明这一事实的话。别有压力，只是回复一句话的功夫。</p><p>如果没有报备也没有在截止之前发周总结，将会被艾特提醒。可以在下一周总结之前补。</p><p>为了方便描述，下文把发送周总结称为“签到”</p><h1 id="积分规则"><a href="#积分规则" class="headerlink" title="积分规则"></a>积分规则</h1><ul><li>如果本周签到了，积分&#x3D;原本积分+正调整参数</li><li>如果未签到，积分&#x3D;原本积分+负调整参数</li><li>如果补签到，积分&#x3D;原本积分</li></ul><h1 id="签到登记表样例"><a href="#签到登记表样例" class="headerlink" title="签到登记表样例"></a>签到登记表样例</h1><table><thead><tr><th>成员 ID</th><th>昵称</th><th>正常签到次数</th><th>周总结积分</th><th>week1</th><th>week2</th><th>week3</th><th>week4</th><th>week5</th><th>week6</th></tr></thead><tbody><tr><td>1</td><td>憧憬少</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td>听星缘</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td>简白</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>HUST</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>咸鱼米</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>1 表示已签到，-1 表示未签到，补签改为 0</p><h1 id="编写公式"><a href="#编写公式" class="headerlink" title="编写公式"></a>编写公式</h1><h2 id="正常签到次数"><a href="#正常签到次数" class="headerlink" title="正常签到次数"></a>正常签到次数</h2><p>即计算 1 出现的次数（补签不算），如果用之前的<code>SUMIF</code>函数就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIF(对应成员的签到区域,1)</span><br></pre></td></tr></table></figure><p>但是我又查到一个更适合的函数：<code>COUNTIF</code></p><p>参数和<code>SUMIF</code>差不多含义，写成公式也是一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=COUNTIF(对应成员的签到区域,1)</span><br></pre></td></tr></table></figure><p>但是前者只能计算 1 出现的次数，如果计算-1 出现的次数就不行了。</p><h2 id="周总结积分"><a href="#周总结积分" class="headerlink" title="周总结积分"></a>周总结积分</h2><p>比较简单，不赘述了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=COUNTIF(E2:ZZ2,1)*积分规则!$C$3+COUNTIF(E2:ZZ2,-1)*积分规则!$D$3*(-1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel实现打卡相册积分制</title>
      <link href="/posts/excel_clock_in_album/"/>
      <url>/posts/excel_clock_in_album/</url>
      
        <content type="html"><![CDATA[<p>我在自己一个学习群里设定了一个打卡相册制度，这篇博客记录一下如何使用 sumif 函数来实现计算打卡相册的积分。<strong>这里其实我用的是 wps 表格，但是函数一样，所以我就分类在 excel 里面。</strong></p><span id="more"></span><h1 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a>规则说明</h1><p>群员可以申请建立打卡相册，需要自己下载群文件中的登记表填写相关信息，然后就可以创建群相册，在群相册描述里面写上打卡内容。</p><h2 id="相册状态"><a href="#相册状态" class="headerlink" title="相册状态"></a>相册状态</h2><ul><li>相册状态：正在进行、放弃、失败、归档</li><li>如果连续三天未打卡，管理员就删除相册，并在登记表内将相册状态设置为“失败”。</li><li>对于有期限的相册，比如打卡目标是“两周读完《xxx》”，那么在结束日期时，可以将其状态设置为“归档”。相册资源回收（删除或改作他用），避免资源闲置。若持续时间大于等于一百天，则可以选择保留相册。（可以给其他群员作榜样）</li><li>对于没有期限的相册，比如“每天背单词”，那么在创建时间满三十天后就可以选择“归档”（三十天应该够养成一个小习惯了）</li><li>相册删除后，相册记录还会保留在登记表里面</li></ul><h2 id="积分计算"><a href="#积分计算" class="headerlink" title="积分计算"></a>积分计算</h2><ul><li><p>创建相册不需要积分，但是“放弃”或“失败”每个会扣除 5 积分</p></li><li><p>一个成员的打卡相册总积分&#x3D;他所有相册的积分之和</p></li><li><p>单个相册的积分：</p><ul><li>若相册状态是“正在进行”，则<code>积分=持续天数1*正调整参数=正调整参数*（当前日期-创建日期）</code></li><li>若相册状态是“归档”，则<code>积分=正调整参数*持续天数2=正调整参数*（结束日期-创建日期）</code>,目前参数为 0.5</li><li>若相册状态是“放弃”或“失败”，则<code>积分=负调整参数</code>，也就是扣除积分，目前参数为-5，即扣除 5 积分</li></ul></li></ul><h2 id="相册字段"><a href="#相册字段" class="headerlink" title="相册字段"></a>相册字段</h2><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>相册 ID</td><td>这个手动赋值为：最大的相册 ID+1</td></tr><tr><td>申请人昵称</td><td>可以写真名或者自己的群名片昵称，只要大家能通过这个知道是谁即可</td></tr><tr><td>相册名称</td><td>无特别要求，不过最好写明昵称和目的，例如：憧憬少的英语流利说 APP 打卡</td></tr><tr><td>相册目标描述</td><td>描述你要通过这个打卡相册达到的目标，例如：每天读口语 10 分钟</td></tr><tr><td>如何判断目标完成</td><td>上传到打卡相册的图片应当满足怎样的要求，例如：每天在相册内上传一张可以表明读了 10 分钟的截图</td></tr><tr><td>相册状态</td><td>目前用到的状态：正在进行，放弃，失败，归档（仅留表中记录，相册本身删除，若打卡满 100 天可选择保留）</td></tr><tr><td>创建日期</td><td>用于计算持续天数的字段</td></tr><tr><td>结束日期</td><td>归档日期，或有期相册结束日期。</td></tr><tr><td>持续天数</td><td>除了正在进行状态，其他状态都停止增加持续天数</td></tr><tr><td>相册类型</td><td>目前的类型：无期（未规定期限，满 30 天可以选择归档），有期（规定了完成期限，若期限内完成则归档，未完成则为失败）</td></tr><tr><td>打卡相册积分</td><td>利用表格的自动填充功能复制上一个相册的公式</td></tr></tbody></table><h1 id="编写公式"><a href="#编写公式" class="headerlink" title="编写公式"></a>编写公式</h1><h2 id="计算相册持续天数"><a href="#计算相册持续天数" class="headerlink" title="计算相册持续天数"></a>计算相册持续天数</h2><p>相册持续天数有两种情况，一种是“正在进行”，一种是其他状态，只有“正在进行”的打卡相册会继续计算天数。</p><p>也就是说：</p><ul><li>“正在进行”的相册的<code>持续天数=今天日期-创建日期</code></li><li>其他状态相册的<code>持续天数=结束日期-创建日期</code></li></ul><p>因此需要一个 IF 判断。</p><p>IF 函数的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(条件，条件为真时的返回值，条件为假时的返回值)</span><br></pre></td></tr></table></figure><p>公式如下（中文处替换为对应的单元格）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=IF(相册状态=&quot;正在进行&quot;,TODAY()-创建日期,结束日期-创建日期)</span><br></pre></td></tr></table></figure><h2 id="计算打卡相册积分"><a href="#计算打卡相册积分" class="headerlink" title="计算打卡相册积分"></a>计算打卡相册积分</h2><p>根据上述规则，我们需要用 IF 函数判断一下相册状态。</p><p>这里还用到了一个函数<code>OR</code></p><p>excel 里面的与或非不是用逻辑运算符的，而是用函数。</p><p>公式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=IF(相册状态=&quot;正在进行&quot;,1,0)*(积分规则!$C$2)*持续天数+IF(相册状态=&quot;归档&quot;,1,0)*(积分规则!$C$2)*持续天数+IF(OR(相册状态=&quot;失败&quot;,相册状态=&quot;放弃&quot;),1,0)*(积分规则!$D$2)*(-1)</span><br></pre></td></tr></table></figure><p>其中，<code>积分规则!$C$2</code>代表的是我在另一个名为“积分规则”的表中的 C2 格中设置的一个正调整参数。<code>积分规则!$D$2</code>同理。</p><h2 id="计算个人总积分"><a href="#计算个人总积分" class="headerlink" title="计算个人总积分"></a>计算个人总积分</h2><p>一个成员可以有多个相册，因此需要将他所有的相册的积分相加。</p><p>相加可以使用<code>SUM</code>函数，来将已知区域求和。</p><p>例如现在的情况是这样的：</p><table><thead><tr><th>申请人昵称</th><th>相册名称</th><th>打卡相册积分</th></tr></thead><tbody><tr><td>憧憬少</td><td>憧憬少的英语流利说打卡</td><td>18</td></tr><tr><td>简白</td><td>简白的英语打卡</td><td>12</td></tr><tr><td>咸鱼米</td><td>米米的啃书打卡</td><td>12</td></tr><tr><td>咸鱼米</td><td>米米的每日练习</td><td>5</td></tr><tr><td>H.U.S.T.</td><td>H.U.S.T.的小说练笔</td><td>3</td></tr></tbody></table><p>米米有两个相册，她的积分就是 12+5&#x3D;17，相加的格子不确定，要如何用公式计算她的积分呢？</p><p>我查到了<code>SUMIF</code>这个函数，也就是“条件相加”，格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUMIF(条件区域,求和条件,[实际求和区域])</span><br></pre></td></tr></table></figure><p><a href="https://support.office.com/zh-cn/article/SUMIF-%E5%87%BD%E6%95%B0-169b8c99-c05c-4483-a712-1697a653039b">它的官方文档链接</a></p><ul><li><p>条件区域：也就是要按条件计算的单元格区域。不太好理解，我的理解是，这个函数对于“条件区域”内符合条件的单元格进行求和。</p></li><li><p>求和条件：定义进行求和的单元格需要满足的条件。例如：32、”&gt;32”、B5、”32”、”苹果” 或 TODAY ()。<strong>任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号 (“) 括起来。 如果条件为数字，则无需使用双引号。</strong></p></li><li><p>实际求和区域：如果省略，则将条件区域当作实际求和区域。</p></li></ul><p>在这里，条件区域是“申请人昵称”，实际求和区域是“打卡相册积分”，求和条件是要计算积分的成员昵称。这样我们就可以将某个成员的所有相册数据所在的那几行给筛选出来，再将这几行的打卡相册积分相加，得到这个成员的总积分了。</p><p>某成员打卡相册总积分计算公式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIF(打卡相册登记表!B:B,某成员昵称,打卡相册登记表!K:K)</span><br></pre></td></tr></table></figure><p>这里的<code>B:B</code>和<code>K:K</code>就分别对应了“申请人昵称”和“打卡相册积分”这两列。</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10共享文件夹</title>
      <link href="/posts/win10_share_folder/"/>
      <url>/posts/win10_share_folder/</url>
      
        <content type="html"><![CDATA[<p>这是我以前写的第一篇博客的补档，由于图片太多于是就发在了 CSDN，现在不愁图片的问题了，于是就在整理电脑文件时把这篇博客在个人博客这边发一下。</p><span id="more"></span><hr><p>这是在 CSDN 的第一篇博客，也是我第一篇正式的博客。</p><p>我们的 linux 老师上课时用到了共享文件夹，于是我就百度学习了一下。</p><p>来写一下刚刚学到的共享文件夹的方法。</p><hr><h2 id="共享方法"><a href="#共享方法" class="headerlink" title="共享方法"></a>共享方法</h2><ol><li>首先右键你想要共享的文件夹，【共享】-&gt;【特定用户】<br><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181216235630691_31597.png"></li></ol><p>2.在选择框里面选择 Everyone，接着点击旁边的【添加】</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181216235804941_8233.png"></p><p>3.调整权限后，点击【共享】即可</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217000001385_2104.png"></p><p>4.共享完成</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217000107855_13168.png"></p><h2 id="别人进入共享文件夹的方法"><a href="#别人进入共享文件夹的方法" class="headerlink" title="别人进入共享文件夹的方法"></a>别人进入共享文件夹的方法</h2><p>1.你可以复制系统给你的链接给局域网内（我只试过局域网）的别人，让他复制到文件资源管理器地址栏</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217000424314_5387.png"></p><p>2.或者找到资源管理器最左下角的【网络】，让他点进去就是了。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217001303716_12814.png"></p><p>点进去之后的效果是这样：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217001517394_32227.png"></p><p>然后你就可以用这个文件夹和局域网里的各位来分享文件了。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个好用的图床管理工具PicGo</title>
      <link href="/posts/PicGo_imgur/"/>
      <url>/posts/PicGo_imgur/</url>
      
        <content type="html"><![CDATA[<p>先前给 hexo 博客插图片都是把图片 commit 到 github 上再手动构造链接，比较麻烦，又不想把图片直接放在博客所在的库。</p><p>这次找到了一个好东西：<a href="https://github.com/Molunerfinn/PicGo">PicGo</a></p><span id="more"></span><p>测试一下图片：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190628115031.png"></p><p>很方便的一个工具，简单地截图然后上传剪切板图片，它就自动帮我上传到 github 上我准备好的库里面，然后把 markdown 格式的图片引用复制到我的剪切板里面。</p><p>具体如何下载安装和使用，它的<a href="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html">官方文档</a>肯定比我写的详细，不赘述。</p><p>我使用的是 github 图床（当然，它还支持别的图床），提一下与它相关的一个比较重要的插件。</p><h1 id="PicGo-插件：github-plus"><a href="#PicGo-插件：github-plus" class="headerlink" title="PicGo 插件：github-plus"></a>PicGo 插件：github-plus</h1><p><a href="https://github.com/zWingz/picgo-plugin-github-plus">它的 github 库链接</a></p><p>它的作用是，让本地的 PicGo 相册和 github 库的内容同步。</p><p>PicGo 本体只负责上传，不负责删除。我在发现上传错图片，在 PicGo 相册中删除了图片之后，发现 github 上面并没有删除这些图片。这是个比较严重的问题。而手动删除的时候很麻烦，要 clone 到本地，删除之后再提交。</p><p>好在找到了这个插件。</p><p>这个插件的功能：</p><ul><li>将删除操作同步到 github</li><li>从 github 上把图片同步到本地相册，从而可以复制链接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python相对路径是相对于哪里</title>
      <link href="/posts/python_relative_path/"/>
      <url>/posts/python_relative_path/</url>
      
        <content type="html"><![CDATA[<p>在学习 scrapy 时，保存数据到文件的时候，发现一直出现“找不到这样的文件或文件夹”的错误，最后发现是因为 python 的相对路径。</p><span id="more"></span><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>学习 scrapy 时，编写 pipeline 来将数据保存到文件当中，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NovelPipeline</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Novel/&#x27;</span>+<span class="built_in">str</span>(item[<span class="string">&#x27;title&#x27;</span>][<span class="number">0</span>])+<span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> item[<span class="string">&#x27;content&#x27;</span>]:</span><br><span class="line">                f.write(p+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>看着爬取时调试信息飞快闪过（爬取的东西有点多），却没有发现我准备好的 Novel 文件夹里面多出文件，连忙把爬虫停下来。发现出现了“找不到这样的文件或文件夹”的错误。</p><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p>查看日志信息，发现文件名是对的，但是为什么不行呢？</p><p>于是我在<code>pipelines.py</code>里面写了测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;Novel/&#x27;</span>+<span class="string">&#x27;文件名&#x27;</span>+<span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>发现同样的错误。</p><p>我把前面的文件夹去掉，也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;文件名&#x27;</span>+<span class="string">&#x27;.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>发现文件生成在了我的工作目录下！</strong></p><p>这个时候我才注意到相对路径的问题。</p><p>当前目录是这样的（略去无关文件）：</p><ul><li>learn_scrapy<ul><li>文件名.txt</li><li>practice<ul><li>practice<ul><li>pipeline.py</li></ul></li></ul></li></ul></li></ul><p>我本来以为这个相对路径会使得文件生成在<code>pipelines.py</code>的同级目录下，但是却生成在了我的 VScode 的工作文件夹？</p><p>我回忆起 java 课时老师写错相对路径导致无法显示图片的问题。那时也是需要相对当前项目的根目录来写相对路径的。我认为这是 eclipse 的特性。</p><p>会不会这个也是 vscode 的特性？</p><p>于是我搜索“python 相对路径”，找到了和我遇到类似问题的朋友：<a href="https://www.zhihu.com/question/313379182">vscode 中使用 python 相对路径问题?-知乎</a></p><blockquote><p>我的工作目录是&#x2F;Work</p><p>我在工作目录中创建了文件&#x2F;Work&#x2F;Program&#x2F;main.py 并且运行 main.py 生成了 file.txt 文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">&#x27;HelloWorld&#x27;</span>)</span><br></pre></td></tr></table></figure><p>我以为 file.txt 在&#x2F;Work&#x2F;Program 路径下，和创建它的 main.py 在一个路径中</p><p>结果 file.txt 这个文件却在&#x2F;Work 路径下面（&#x2F;Work&#x2F;file.txt），而不是我所期望的&#x2F;Python&#x2F;Program 路径下面</p><p>所以应该怎么配置，或者安装什么插件，能让 py 创建的文件在自己的相对路径下，而不是直接跑到了工作路径那里？</p><p>这个问题怎么解决啊，困扰了我好久，而我又比较喜欢 vscode 的界面不想放弃它。求解答！</p></blockquote><p>看了回答之后我继续搜索，终于解决了困惑。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>参考链接：</p><ul><li><a href="https://www.sogou.com/link?url=DSOYnZeCC_pKZzihDKzFgzQoUkRGi7SFYAlUdwl14k9my3KYeiwMRQ..">Python 里使用相对路径的坑-简书</a></li></ul><blockquote><p><strong>Python 里写这种相对路径, 是相对于终端的当前目录的.</strong></p><p>解决办法是, 获取脚本所在目录, 构造绝对路径</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整博客分类</title>
      <link href="/posts/adjust_categories/"/>
      <url>/posts/adjust_categories/</url>
      
        <content type="html"><![CDATA[<p>目前个人博客内的分类不太合理，于是重新调整分类</p><span id="more"></span><h1 id="调整前"><a href="#调整前" class="headerlink" title="调整前"></a>调整前</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>c++</li><li>java</li><li>python</li><li>工具</li><li>日志</li><li>流程</li><li>算法</li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li>awt</li><li>c++</li><li>git</li><li>hexo</li><li>java</li><li>mysql</li><li>notepad++</li><li>python</li><li>scrapy</li><li>stl</li><li>信息检索</li><li>小游戏</li><li>日志</li><li>爬虫</li><li>算法</li><li>项目</li><li>题目</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>c++、java、python 等大类很明显和标签重叠了。</p><p>我目前对二者的理解：</p><p><strong>分类</strong>表明一个事物<strong>是什么</strong>；</p><p><strong>标签</strong>表明一个事物<strong>有什么</strong>。</p><p>按照文章区别于其他类型文章的特征来分类。</p><p>新建一个标签前，要考虑这个标签的可重用性，比如 c++、java 这类标签肯定会经常用到，但是 notepad++这类基本只用一次了，所以将它归到 IDE 这个标签内。stl 和 awt 这类标签不常用，可以删去。</p><h1 id="调整后"><a href="#调整后" class="headerlink" title="调整后"></a>调整后</h1><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>工具使用</td><td>工具的获取（下载安装）、使用，类似教程</td></tr><tr><td>编程语言</td><td>记录遇到的一些语法问题</td></tr><tr><td>项目总结</td><td>主要记录过程及遇到的问题与方案，包括一些感想和体会</td></tr><tr><td>算法模型</td><td>记录一些算法相关的题目以及概念</td></tr><tr><td>过程记录</td><td>记录解决方案和过程，记录经验总结，简化版的项目总结，侧重过程</td></tr></tbody></table><p>调整之后，分类比之前清晰多了，我写新的博文，就知道应该归类到哪里，找的时候也知道应该到哪里去找了。</p><h2 id="标签-1"><a href="#标签-1" class="headerlink" title="标签"></a>标签</h2><p>减少了一些标签</p><ul><li>IDE ：分得比较宽泛，连 notepad++都算进去</li><li>c++</li><li>git</li><li>hexo</li><li>java</li><li>mysql</li><li>python</li><li>scrapy</li><li>框架</li><li>爬虫</li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo日记本</title>
      <link href="/posts/hexo_diary/"/>
      <url>/posts/hexo_diary/</url>
      
        <content type="html"><![CDATA[<p>打算从纸质日记转到电子日记。</p><p>之前是一个月的日记放在一个 markdown 文件里面，每天一个一级标题。昨天突发奇想，为啥不用 Hexo 来搭建日记本呢？它本来就是用来写博客（blog 网络日志）的呀。</p><p>于是今天就来搭建 hexo 日记本</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文只分享设计思路以及步骤，不提供详细教程，详细教程可以看这个：<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">【持续更新】最全 Hexo 博客搭建+主题优化+插件配置+常用操作+错误分析-遇见西门</a></p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>利用 hexo 搭建日记本有很多优点：</p><ul><li>好看，并且可以随时换主题</li><li>比我之前的方式更加地将日记格式化，便于以后编写脚本来管理</li><li>可以在<code>scaffolds</code>里面设置日记模板</li><li>可以设置分类与标签</li><li>有的主题甚至能搜索文章</li></ul><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li><p>不联网：这个日记本和我部署到 github 上面的博客有些不一样，因为这个是比较隐私的，我不打算放在网上，仅利用移动硬盘备份。并且看日记都在本地，不使用外链图片，以免断网的时候无法查看</p></li><li><p>功能少：并且不需要评论，阅读计数等功能，起到的只是一个阅读器的作用。</p></li><li><p>重美观：需要能够方便地切换主题。</p></li><li><p>无需侧边目录：因为我打算一篇只记录一天的内容，写不了太多，标题层级不会太多。</p></li><li><p>写日记要便捷</p></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>参考链接：</p><ul><li><a href="https://hexo.io/zh-cn/docs/">hexo 官方中文文档</a></li></ul><h2 id="初始化-hexo"><a href="#初始化-hexo" class="headerlink" title="初始化 hexo"></a>初始化 hexo</h2><p>刚开始的时候我不是很清楚 hexo 在一台电脑上是否可以搭多个博客，后来发现，hexo 的每个博客其实就是一个“项目”，那些命令得在已经搭建博客的文件夹里面才能使用，而不是我之前想的“全局命令”。</p><p>首先初始化：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>然后就可以通过以下命令查看本地内容了：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>或简写为</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><p>在博客根目录下的<code>_config.yml</code>内配置</p><h3 id="标题相关"><a href="#标题相关" class="headerlink" title="标题相关"></a>标题相关</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">日记</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">憧憬少</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure><h3 id="permalink"><a href="#permalink" class="headerlink" title="permalink"></a>permalink</h3><p>这个设置会决定你的文件最后渲染之后放在哪里。</p><p>利用<code>hexo g</code>来渲染 markdown 文件，它会将渲染好的 html 文件放在<code>public</code>目录下，部署到 github 时，上传的就是这个文件夹里面的内容。</p><p>比如最开始的设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br></pre></td></tr></table></figure><p>则会将最开始的<code>hello-world.md</code>示例文章给生成在<code>public\2019\06\26\hello-world</code>这个文件夹当中。</p><p>我觉得一天的内容单独放一个文件夹有点不太合适，而一年的内容全部放在一个文件夹的话，三百多个文件也不好管理，所以按照一个月的内容放在一个文件夹内的规则，将这个设置改成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:title/</span></span><br></pre></td></tr></table></figure><h3 id="new-post-name"><a href="#new-post-name" class="headerlink" title="new_post_name"></a>new_post_name</h3><p>新建文章的文件名，因为日记按照时间管理比较方便，因此在文件名中加入日期</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span> <span class="comment"># File name of new posts</span></span><br></pre></td></tr></table></figure><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>我之前一直是将图片上传到 github 的一个 repo 上面然后使用链接的，看了文档之后才发现原来还有更简便的方法！</p><h3 id="方法一-外链"><a href="#方法一-外链" class="headerlink" title="方法一 外链"></a>方法一 外链</h3><p>首先开启仓库的 github page 这个设置。</p><p>比如用户名是<code>HaneChiri</code>，创建的仓库名叫<code>blog_images</code>，那么在这个仓库根目录下的图片<code>avatar.jpg</code>的链接就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hanechiri.github.io/blog_images/avatar.jpg</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/HaneChiri/blog_images/avatar.jpg</span><br></pre></td></tr></table></figure><p>后者是浏览编辑这个图片的链接，而不是图片本身。</p><p>上传之后无法访问这个链接也不要急，等几分钟就可以了。</p><p>日记本不能使用这个，因为我需要在不联网的时候也能看。</p><h3 id="方法二-资源文件夹"><a href="#方法二-资源文件夹" class="headerlink" title="方法二 资源文件夹"></a>方法二 资源文件夹</h3><p>来自<a href="https://hexo.io/zh-cn/docs/asset-folders">资源文件夹-hexo 官方文档</a></p><blockquote><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的 Hexo 项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p></blockquote><p>早知道认真看文档了，插图片就简单多了。</p><p>这个是将图片放在<code>source/images</code>中，而我将 Typora 设置成将图片自动保存在同目录下的<code>images</code>中，编辑之后只要将这个文件夹内图片给复制到前者所述文件夹，就可以在编辑以及渲染时都看到图片了。</p><h3 id="方法三-下载插件"><a href="#方法三-下载插件" class="headerlink" title="方法三 下载插件"></a>方法三 下载插件</h3><p><a href="https://blog.csdn.net/Fitz1318/article/details/86548129">Hexo 文章中插入图片的方法-CSDN</a></p><hr><p>我不需要每个文章的图片分开管理，这样会导致<code>source\_posts\</code>内有太多没用的空文件夹，因此我使用方法二，读者可以选择适合自己的方法。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>为了防止和联网的博客弄混（毕竟一旦将日记上传上去，repo 里面就会留下痕迹，哪怕删掉也看得到，除非删 repo），我打算换个别的主题。</p><p>找到了几个心仪的：</p><ul><li><a href="https://github.com/ZEROKISEKI/hexo-theme-gal">Gal</a> ：galgame。和我第一次用的夏娜 <a href="https://github.com/ShanaMaid/hexo-theme-shana">shana</a>主题是同类型的</li><li><a href="https://github.com/honjun/hexo-theme-sakura">Sakura</a> ：樱。贼好看，功能蛮多的样子</li><li><a href="https://github.com/EYHN/hexo-theme-one">One</a> ：单页面。每个文章都可以配图，上面的几个也是</li></ul><p>但是考虑到个人的一些因素，还是先用着 Next 吧，反正可以换。</p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>Next 主题有四种外观（scheme），在配置文件（<code>themes\next\_config.yml</code>）中可以找到并修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><p>最右边的<code>||</code>后面跟着的是文字边上显示的图标</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/HaneChiri</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="comment">#E-Mail: mailto:yourname@gmail.com || envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  <span class="attr">Bilibili:</span> <span class="string">https://space.bilibili.com/13290087</span></span><br></pre></td></tr></table></figure><h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><p>在对应的位置放上头像图片</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="左右"><a href="#左右" class="headerlink" title="左右"></a>左右</h4><p>为了防止和博客混淆而误将日记上传，而将侧边栏调整到相反方向</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line">  <span class="comment"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span></span><br><span class="line">  <span class="comment">#position: left</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br></pre></td></tr></table></figure><h4 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h4><p>这么好用的小功能当然要开着呀！</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p>首先在解开“分类”(<code>categories</code>)和“标签”(<code>tags</code>)的注释</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>但是这个还只是在侧边的菜单栏处显示了“分类”和“标签”两项，还没有功能。</p><p>需要在根目录下使用指令来生成这两个页面：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>这下能显示了，但是仍然不够，因为 Next 还没有识别出这两个页面就是分类和标签页面。</p><p>打开<code>source\categories\index.md</code>，里面是：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-06-26 15:44:09</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure><p>在里面加上一句，变成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-06-26 15:44:09</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>这样就能识别出这是分类页面了，能够使用了。标签页面同理。</p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><h4 id="第一步-修改主题设置"><a href="#第一步-修改主题设置" class="headerlink" title="第一步 修改主题设置"></a>第一步 修改主题设置</h4><p>找到这个设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>将<code>enable</code>改为 true 之后就会在菜单显示一个”搜索“，但是还无法使用。</p><p>照着注释里面<a href="https://github.com/theme-next/hexo-generator-searchdb">那个 github 项目</a>内的说明</p><h4 id="第二步-下载插件："><a href="#第二步-下载插件：" class="headerlink" title="第二步 下载插件："></a>第二步 下载插件：</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator-searchdb</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><h4 id="第三步-添加全局设置"><a href="#第三步-添加全局设置" class="headerlink" title="第三步 添加全局设置"></a>第三步 添加全局设置</h4><p>在根目录下的<code>_config.yml</code>加上如下设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>我把帮助中的注释复制过来就是下面这样：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># see https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="comment"># file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="comment">#  the search scope you want to search, you can chose:</span></span><br><span class="line">  <span class="comment">#    post (Default) - will only covers all the posts of your blog.</span></span><br><span class="line">  <span class="comment">#    page - will only covers all the pages of your blog.</span></span><br><span class="line">  <span class="comment">#    all - will covers all the posts and pages of your blog.</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="comment"># the form of the page contents, works with xml mode, options are:</span></span><br><span class="line">  <span class="comment">#    html (Default) - original html string being minified.</span></span><br><span class="line">  <span class="comment">#    raw - markdown text of each posts or pages.</span></span><br><span class="line">  <span class="comment">#    excerpt - only collect excerpt.</span></span><br><span class="line">  <span class="comment">#    more - act as you think.</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="comment">#define the maximum number of posts being indexed, always prefer the newest.</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line">  <span class="comment"># whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>意外地轻松便捷呢。</p><h2 id="编写快捷打开的脚本"><a href="#编写快捷打开的脚本" class="headerlink" title="编写快捷打开的脚本"></a>编写快捷打开的脚本</h2><p>虽然弄好了，但是每次想写还得打开命令行输入命令，再进入文件夹用 Typora 打开文件，太麻烦了。</p><p>于是写一下 bat 批处理脚本。</p><p>这东西其实就是把在命令行执行的命令放在一个文本文件然后把后缀名改成.bat 而已。</p><p>不过我不是很熟命令，弄了很久。</p><h3 id="快速打开本地预览"><a href="#快速打开本地预览" class="headerlink" title="快速打开本地预览"></a>快速打开本地预览</h3><p>首先是快速查看我的日记。目标是双击一下脚本文件就可以在浏览器中看到我的日记。</p><p>一般情况下的步骤：</p><ol><li>在根目录打开命令行</li><li>输入<code>hexo s</code></li><li>打开浏览器</li><li>在地址栏输入<code>localhost:4000</code></li></ol><p>我写出来的.bat 文件是这样的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> browser=<span class="string">&quot;C:\Program Files (x86)\Tencent\QQBrowser\QQBrowser.exe&quot;</span></span><br><span class="line">%browser% localhost:<span class="number">4000</span> &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p>只有两行，第一行是设置用于打开日记本的浏览器所在的位置，当然，如果设置了环境变量，这里可以直接写浏览器的名字。</p><p>第二行是利用这个浏览器打开<code>localhost:4000</code>，打开成功才执行<code>hexo s</code>来启动 hexo。</p><h3 id="新建日记"><a href="#新建日记" class="headerlink" title="新建日记"></a>新建日记</h3><p>一般情况下的步骤：</p><ol><li>在根目录打开命令行</li><li>输入<code>hexo new &lt;title&gt;</code></li><li>打开<code>source\_posts\</code></li><li>找到并打开新建的日记</li></ol><h4 id="获取标题"><a href="#获取标题" class="headerlink" title="获取标题"></a>获取标题</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> /p title=请输入标题:</span><br></pre></td></tr></table></figure><p><code>/p</code>表示动态输入</p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;%title%&quot;</span></span><br></pre></td></tr></table></figure><p><code>%变量名%</code>表示引用已经赋值的变量。</p><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>由于我设置的文件名不只是标题，因此还需要获取日期来组成文件名。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> year=%date:~<span class="number">0</span>,<span class="number">4</span>%</span><br><span class="line"><span class="built_in">set</span> month=%date:~<span class="number">5</span>,<span class="number">2</span>%</span><br><span class="line"><span class="built_in">set</span> day=%date:~<span class="number">8</span>,<span class="number">2</span>%</span><br><span class="line"></span><br><span class="line">rem 在这里设置你的文件名格式</span><br><span class="line"><span class="built_in">set</span> new_post_name=%year%-%month%-%day%-%title%</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;S:\Program Files\Typora\Typora.exe&quot;</span> source\_posts\%new_post_name%.md</span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>%date%</code>是系统变量，用于获取系统时间，返回的值的格式是<code>2019/06/26 周三</code></li><li><code>%date:~x,y%</code>代表从第 x 个字符开始，获取 y 个字符</li></ul><p>刚开始的脚本代码是这样的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> /p title=请输入标题:</span><br><span class="line">hexo new <span class="string">&quot;%title%&quot;</span></span><br><span class="line"><span class="built_in">set</span> year=%date:~<span class="number">0</span>,<span class="number">4</span>%</span><br><span class="line"><span class="built_in">set</span> month=%date:~<span class="number">5</span>,<span class="number">2</span>%</span><br><span class="line"><span class="built_in">set</span> day=%date:~<span class="number">8</span>,<span class="number">2</span>%</span><br><span class="line"></span><br><span class="line">rem 在这里设置你的文件名格式</span><br><span class="line"><span class="built_in">set</span> new_post_name=%year%-%month%-%day%-%title%</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;S:\Program Files\Typora\Typora.exe&quot;</span> source\_posts\%new_post_name%.md</span><br></pre></td></tr></table></figure><p>但是我发现在执行完<code>hexo new &quot;%title%&quot;</code>之后，命令行直接退出，加<code>pause</code>都没用。</p><p>猜测是因为，hexo 创建文件需要时间，还没创建好就打开，于是出错了。</p><p>后来改成：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;%title%&quot;</span> &amp;&amp; call z_open_editor.bat</span><br></pre></td></tr></table></figure><p>在创建完之后，才会执行后面的内容，后面的代码都放在<code>z_open_editor.bat</code>里面</p><p>最终代码：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rem z_new_diary.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /p title=请输入标题:</span><br><span class="line">hexo new <span class="string">&quot;%title%&quot;</span> &amp;&amp; call z_open_editor.bat</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">rem z_open_editor.bat</span><br><span class="line">rem 本文件只支持打开默认布局的文件</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> year=%date:~<span class="number">0</span>,<span class="number">4</span>%</span><br><span class="line"><span class="built_in">set</span> month=%date:~<span class="number">5</span>,<span class="number">2</span>%</span><br><span class="line"><span class="built_in">set</span> day=%date:~<span class="number">8</span>,<span class="number">2</span>%</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> source\_posts</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> not defined title <span class="built_in">set</span> /p title=请输入标题:</span><br><span class="line"></span><br><span class="line">rem 在这里设置你的文件名格式</span><br><span class="line"><span class="built_in">set</span> new_post_name=%year%-%month%-%day%-%title%</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> source\_posts\%new_post_name%.md</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;S:\Program Files\Typora\Typora.exe&quot;</span> source\_posts\%new_post_name%.md</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习利用Scrapy爬取b站排行榜</title>
      <link href="/posts/Scrapy_spider_bilibiliRank/"/>
      <url>/posts/Scrapy_spider_bilibiliRank/</url>
      
        <content type="html"><![CDATA[<p>开始学 python 的 Scrapy 框架了，参考书是崔庆才的《python3 网络爬虫开发实战》</p><p>跟着示例敲完之后，又试着按照一样的逻辑去爬取了 B 站排行榜的数据。</p><p>通过这个小项目学习使用 Scrapy 框架。</p><span id="more"></span><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>首先新建一个名为<code>practice</code>的项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">scrapy startproject practice</span></span><br></pre></td></tr></table></figure><p>这个项目的目录结构（省略 init 文件）：</p><ul><li>practice<ul><li>practice<ul><li>items.py</li><li>middlewares.py</li><li>pipelines.py</li><li>settings.py</li></ul></li><li>scrapy.cfg</li></ul></li></ul><p>这一个项目里面的代码是整个项目的爬虫通用的。</p><h2 id="新建-Spider"><a href="#新建-Spider" class="headerlink" title="新建 Spider"></a>新建 Spider</h2><p>新建一个爬虫<code>bilibiliRank</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">cd</span> practice</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">scrapy genspider bilibiliRank</span></span><br></pre></td></tr></table></figure><p>然后与在此目录下出现了一个<code>spider</code>文件夹，用于存放这个新的爬虫</p><ul><li>spider<ul><li>bilibiliRank.py</li></ul></li></ul><p><code>bilibiliRank.py</code>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BilibilirankSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;bilibiliRank&#x27;</span><span class="comment">#爬虫名字</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;bilibili.com&#x27;</span>]<span class="comment">#允许爬取的域名</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.bilibili.com/ranking/&#x27;</span>]<span class="comment">#初始url</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>spider</code>文件夹里面是用于爬取不同网站的爬虫，它继承自<code>scrapy.Spider</code>，scrapy 的引擎<code>Engine</code>就是利用你写的爬虫里面的<code>parse()</code>方法来解析页面获取数据，可以在这个方法里面将数据以<code>item</code>的形式返回出去，给<code>ItemPipeline</code>继续处理。</p><h2 id="创建-Item"><a href="#创建-Item" class="headerlink" title="创建 Item"></a>创建 Item</h2><p><code>items.py</code>里面定义了不同的 item，这些 item 都继承自<code>scrapy.Item</code>，文件生成的内容如下（无关注释已删去）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PracticeItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在这里你可以照着它的模板新建一个类，也可以直接修改，总之只要符合要求就可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RankItem</span>(scrapy.Item):</span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    num=scrapy.Field()</span><br><span class="line">    title=scrapy.Field()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个 Item 子类当中，我新建了两个域，也可以说是字段。按照注释给出的格式来就可以了。</p><h2 id="解析-response"><a href="#解析-response" class="headerlink" title="解析 response"></a>解析 response</h2><p>适当简化的流程大概是：引擎利用爬虫的<code>start_url</code>发起请求，然后将得到的响应<code>response</code>作为参数传入爬虫的<code>parse()</code>方法中。<code>parse()</code>将解析出的数据装入<code>Item</code>并返回给引擎。</p><p>需要解析的 html 页面内容（只展示其中一个项的结构）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;rank-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;rank-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;num&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//www.bilibili.com/video/av56121331/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lazy-img cover&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;视频标题&quot;</span> <span class="attr">src</span>=<span class="string">&quot;图片url&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;watch-later-trigger w-later&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;视频url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>视频标题&lt;/a</span><br><span class="line">        &gt;<span class="comment">&lt;!----&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;detail&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;data-box&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;b-icon play&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>366.8万<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;data-box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;b-icon view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>3.8万<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;视频url&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;data-box&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;b-icon author&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>作者名&lt;/span</span><br><span class="line">            &gt;&lt;/a</span><br><span class="line">          &gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pts&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>3798978<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          综合得分</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!----&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>爬虫文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> practice.items <span class="keyword">import</span> RankItem<span class="comment">#这是之前自定义的item</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BilibilirankSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;bilibiliRank&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;bilibili.com&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;https://www.bilibili.com/ranking/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment">#获取所有的项目</span></span><br><span class="line">        rank_items=response.css(<span class="string">&#x27;.rank-list .rank-item&#x27;</span>)</span><br><span class="line">        <span class="comment">#获取每一项中的数据</span></span><br><span class="line">        <span class="keyword">for</span> rank_item <span class="keyword">in</span> rank_items:</span><br><span class="line">            item=RankItem()</span><br><span class="line">            item[<span class="string">&#x27;num&#x27;</span>]=rank_item.css(<span class="string">&#x27;.num::text&#x27;</span>).extract_first()</span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>]=rank_item.css(<span class="string">&#x27;.content .info .title::text&#x27;</span>).extract_first()</span><br><span class="line">            <span class="keyword">yield</span> item<span class="comment">#每次调用就会返回一个item</span></span><br></pre></td></tr></table></figure><p>遇到的问题：</p><ol><li>注意获取的所有项目得是一个节点，不能用<code>extract()</code>读取其中的数据，第一次写时，写成了：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rank_list=response.css(<span class="string">&#x27;.rank-item&#x27;</span>).extract()</span><br><span class="line"><span class="keyword">for</span> rank_item <span class="keyword">in</span> rank_list:</span><br><span class="line">    <span class="comment">#……</span></span><br></pre></td></tr></table></figure><h2 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">scrapy crawl bilibiliRank -o bilibiliRank.json</span></span><br></pre></td></tr></table></figure><p>利用名为<code>bilibiliRank</code>爬虫进行爬取，并将得到的结果保存在<code>bilibiliRank.json</code>文件中</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html">scrapy 官方中文文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基于AWT的对战小游戏</title>
      <link href="/posts/java_game_FightFieldFrame/"/>
      <url>/posts/java_game_FightFieldFrame/</url>
      
        <content type="html"><![CDATA[<p>这学期的 java 课设弄完了，写个博客总结一下。</p><p><a href="https://www.bilibili.com/video/av54526303/">哔哩哔哩对应视频的传送门</a></p><span id="more"></span><h1 id="课设目的与要求"><a href="#课设目的与要求" class="headerlink" title="课设目的与要求"></a>课设目的与要求</h1><p>根据讲义中策略模式的案例，设计和实现一个基于<strong>策略模式</strong>的角色扮演游戏。其中包括主要有角色类及其子类、相关的行为类集合和测试类等。</p><p>通过本次实验，能够在掌握面向对象程序设计的基本思想基础上；深化理解 Java 面向对象程序设计中消息、继承、多态、接口、抽象类和抽象方法等概念和实现方式；并进一步掌握 Java 程序设计中的基本语法和 Java 程序运行方法等；理解和应用包（package）。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>一个游戏中有多种角色(Character)，例如：国王（King）、皇后（Queen）、骑士（Knight）、老怪（Troll）。角色之间可能要发生战斗(fight)，每场战斗都是一个角色与另一角色之间的一对一战 斗。</p><p>每个角色都有自己的生命值 (hitPoint) 、 魔法值（magicPoint）、攻击力值(damage)和防御力值(defense)。</p><p>每种角色都有一种武器进行攻击（fight）；在程序运行中，可以动态修改角色的武器(setWeaponBehavior)。</p><p>每种角色都有一种魔法对自己或者其他角色施法（performMagic）；可以动态改变拥有的魔法（setMagicBehavior）。</p><ol><li><p>首先设计和实现抽象类 Characters。</p></li><li><p>设计和实现 Character 类的几个子类：King、Queen、Knight、Troll。位</p></li><li><p>设计接口 WeaponBehavior 和 MagicBehavior。</p><ul><li><p>接 口 WeaponBehavior 的 实 现 类 ：</p><ul><li><p>KnifeBehavior （ 用 刀 ）</p></li><li><p>BowAndArrowBehavior （ 用 弓 箭 ）</p></li><li><p>AxeBehavior （ 用 斧 ）</p></li><li><p>SwordBehavior（用剑）</p></li></ul></li><li><p>接口 MagicBehavior 的实现类：</p><ul><li>HealBehavior（治疗）</li><li>InvisibleBehavior（隐身）。</li></ul></li></ul></li></ol><p>实现接口中的抽象方法，可以只在屏幕输出简单信息，也可以结合生命值(hitPoint)、攻击力值(damage)和防御力值(defense)计算。</p><ol start="4"><li><p>编写测试代码，对以上设计的系统进行测试。要求在程序运行期间，能动态改变角色拥有的武器或者魔法。</p></li><li><p>自己添加一种角色、或者添加一种武器及魔法，设计相应的类，并编写测试代码进行测试。</p></li><li><p>按照 Java 的规范，添加详细的文档注释，并用 Javadoc 生成标准的帮助文档。</p></li><li><p>将上述编译、运行、生成帮助文档的命令，填写至实验报告相应位置。</p></li><li><p>填写实验报告。并将程序代码及生成的帮助文档打包上交。</p></li></ol><h1 id="涉及的主要内容"><a href="#涉及的主要内容" class="headerlink" title="涉及的主要内容"></a>涉及的主要内容</h1><ol><li>单例模式。游戏窗口只能有一个对象，因此使用了单例模式。</li><li>策略模式。在角色类中有两个抽象策略（武器策略和魔法策略），具体策略在类中实现。</li><li>双缓冲技术。在绘制游戏画面的时候使用了双缓冲技术，防止画面闪烁。</li><li>多线程。在两处使用了多线程，一处是为了解决按键冲突的问题，另一处是为了实现游戏周期性判定的功能。</li><li>awt。</li></ol><h1 id="基本逻辑流程"><a href="#基本逻辑流程" class="headerlink" title="基本逻辑流程"></a>基本逻辑流程</h1><ol><li>抽象角色类由具体子类实现，子类主要实现了抽象方法<code>getAppearance</code>，用于获取角色的外貌（即图片），外貌会根据角色状态的不同而改变，比如角色死亡时外貌是墓碑；</li><li>根据角色的坐标以及属性（例如是否隐身，当前武器是什么）来绘制角色以及属性条、武器栏和魔法栏。</li><li>游戏时钟周期线程用于周期性地执行一些操作，例如每秒钟恢复一定的 HP 和 MP，对于隐身状态的角色，每秒钟扣除一定量的 MP 等。</li></ol><h1 id="游戏说明"><a href="#游戏说明" class="headerlink" title="游戏说明"></a>游戏说明</h1><ol><li><strong>玩家 1 操作：</strong>键盘上 A 键 D 键分别对应左右移动，J 键使用武器攻击，K 键使用魔法，L 键切换武器，O 键切换魔法；</li><li><strong>玩家 2 操作：</strong>键盘上 ← 键 → 键分别对应左右移动，小键盘上，1 键使用武器攻击，2 键使用魔法，3 键切换武器，6 键切换魔法；</li><li>每把武器有自己的攻击威力和攻击距离，只有在两个角色的距离在武器的攻击范围内时，才能够攻击成功；</li><li>伤害计算公式为：被攻击者受到的最终伤害&#x3D;攻击者攻击力+攻击者武器威力-被攻击者的防御力。若伤害小于等于 0，则不予扣除；</li><li>每秒钟会恢复一定量的 HP 和 MP；</li><li>一方死亡（HP 降为 0 及以下）则游戏结束。</li></ol><h1 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h1><h2 id="主要框架"><a href="#主要框架" class="headerlink" title="主要框架"></a>主要框架</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FightFieldFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span>&#123;</span><br><span class="line"><span class="comment">//一些游戏常量以及窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Dimension SCREEN_DIMENSION=Toolkit.getDefaultToolkit().getScreenSize();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> FFF_X=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> FFF_Y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> FFF_HEIGHT=SCREEN_DIMENSION.height;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> FFF_WIDTH=SCREEN_DIMENSION.width;</span><br><span class="line"><span class="comment">//……省略其他成员函数，下面会列举来说明</span></span><br><span class="line"><span class="comment">/*******************main函数**************************/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">FightFieldFrame f=getInstance(<span class="string">&quot;战斗领域&quot;</span>);</span><br><span class="line">f.initFrame();</span><br><span class="line"><span class="comment">//初始化角色</span></span><br><span class="line">f.initCharacter();</span><br><span class="line"><span class="comment">//添加事件监听者</span></span><br><span class="line">f.addWindowListener(<span class="keyword">new</span> <span class="title class_">MyWindowListener</span>());</span><br><span class="line">f.addKeyListener(<span class="keyword">new</span> <span class="title class_">GamePad</span>(player1,player2,f));</span><br><span class="line"><span class="comment">//新建时钟线程，用于游戏中的周期性属性检查</span></span><br><span class="line">Thread clockThread=<span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">ClockThread</span>(player1, player2, fff));</span><br><span class="line">clockThread.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>FightFieldFrame 类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只能有一个窗体对象，使用单例模式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> FightFieldFrame fff;<span class="comment">//单例模式使用的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">FightFieldFrame</span><span class="params">(String title)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(title);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> FightFieldFrame <span class="title function_">getInstance</span><span class="params">(String title)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(fff==<span class="literal">null</span>) &#123;</span><br><span class="line">fff=<span class="keyword">new</span> <span class="title class_">FightFieldFrame</span>(title);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双缓冲"><a href="#双缓冲" class="headerlink" title="双缓冲"></a>双缓冲</h2><p>双缓冲因为有两个绘图对象而得名，先在一个 image 对象上绘图然后再将此对象绘制到 Frame 上，用于减少重绘时的闪烁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化框架的位置和大小，以及缓冲对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initFrame</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//这里准备一些对象构造完成之后才能做的事情</span></span><br><span class="line">fff.setVisible(<span class="literal">true</span>);</span><br><span class="line">setBounds(FFF_X, FFF_Y, FFF_WIDTH, FFF_HEIGHT);</span><br><span class="line"></span><br><span class="line">Dimension d=getSize();</span><br><span class="line">imgBuffer=createImage(d.width, d.height);</span><br><span class="line">    gBuffer=imgBuffer.getGraphics();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建好缓冲对象后，在缓冲对象上绘制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line"><span class="comment">//全都先绘制在缓冲区</span></span><br><span class="line"><span class="comment">//绘制背景</span></span><br><span class="line">Image background=getToolkit().getImage(<span class="string">&quot;image\\background.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(background!=<span class="literal">null</span>) &#123;</span><br><span class="line">gBuffer.drawImage(background, FFF_X, FFF_Y, FFF_WIDTH, FFF_HEIGHT, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绘制人物</span></span><br><span class="line"><span class="keyword">if</span>(player1!=<span class="literal">null</span>) &#123;</span><br><span class="line">drawCharacter(gBuffer,player1);</span><br><span class="line">drawStrand(gBuffer, player1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(player2!=<span class="literal">null</span>) &#123;</span><br><span class="line">drawCharacter(gBuffer,player2);</span><br><span class="line">drawStrand(gBuffer, player2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawSlot(gBuffer);</span><br><span class="line"><span class="comment">//drawStrand(gBuffer);//绘制绝对位置的属性条，由于没有什么技术含量就只做了一个示例</span></span><br><span class="line"><span class="comment">//由于使用了背景图片，所以不必特地清空背景</span></span><br><span class="line">g.drawImage(imgBuffer, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，即便如此仍然会闪烁，这是因为重绘时调用的 update 函数会将 Frame 用背景色填充一次 再绘制。所以应该覆盖掉原本的方法，让它只绘制，不清空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//======================//</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Graphics g)</span> &#123;</span><br><span class="line">    <span class="comment">//覆盖原本的方法</span></span><br><span class="line">paint(g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//======================/*/</span></span><br></pre></td></tr></table></figure><h2 id="玩家操纵"><a href="#玩家操纵" class="headerlink" title="玩家操纵"></a>玩家操纵</h2><p>使用 GamePad 类作为键盘监听者，监听 Frame 的按键，调用角色对应的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏手柄类</span></span><br><span class="line"><span class="comment"> * 用于将键位与角色的动作对应起来</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GamePad</span> <span class="keyword">implements</span> <span class="title class_">KeyListener</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Characters player1;<span class="comment">//玩家1</span></span><br><span class="line"><span class="keyword">private</span> Characters player2;<span class="comment">//玩家2</span></span><br><span class="line"><span class="keyword">private</span> FightFieldFrame fff;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">GamePad</span><span class="params">(Characters p1, Characters p2, FightFieldFrame f)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">player1=p1;</span><br><span class="line">player2=p2;</span><br><span class="line">fff=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyPressed</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"><span class="type">int</span> code=e.getKeyCode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_J:<span class="comment">//玩家1攻击</span></span><br><span class="line">player1.fight(player2);</span><br><span class="line">player2.display();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_K:<span class="comment">//玩家1使用魔法</span></span><br><span class="line">player1.performMagic(player2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_A:<span class="comment">//玩家1左</span></span><br><span class="line">player1.setMoveLeftFlag(<span class="literal">true</span>);</span><br><span class="line">player1.setDirection(<span class="literal">true</span>);<span class="comment">//false为朝右，true为朝左</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_D:<span class="comment">//玩家1右</span></span><br><span class="line">player1.setMoveRightFlag(<span class="literal">true</span>);</span><br><span class="line">player1.setDirection(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_L:<span class="comment">//玩家1切换武器</span></span><br><span class="line">player1.changeWeapon();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_O:<span class="comment">//玩家1切换魔法</span></span><br><span class="line">player1.changeMagic();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">/****************************************************************/</span></span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_NUMPAD1:<span class="comment">//玩家2攻击</span></span><br><span class="line">player2.fight(player1);</span><br><span class="line">player1.display();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_NUMPAD2:<span class="comment">//玩家2使用魔法</span></span><br><span class="line">player2.performMagic(player1);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_LEFT:<span class="comment">//玩家2左</span></span><br><span class="line">player2.setMoveLeftFlag(<span class="literal">true</span>);</span><br><span class="line">player2.setDirection(<span class="literal">true</span>);<span class="comment">//false为朝右，true为朝左</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_RIGHT:<span class="comment">//玩家2右</span></span><br><span class="line">player2.setMoveRightFlag(<span class="literal">true</span>);</span><br><span class="line">player2.setDirection(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_NUMPAD3:<span class="comment">//玩家2切换武器</span></span><br><span class="line">player2.changeWeapon();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_NUMPAD6:<span class="comment">//玩家2切换魔法</span></span><br><span class="line">player2.changeMagic();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fff.repaint();<span class="comment">//重绘</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyReleased</span><span class="params">(KeyEvent e)</span> &#123;</span><br><span class="line"><span class="type">int</span> code=e.getKeyCode();</span><br><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_J:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_A:<span class="comment">//左</span></span><br><span class="line">player1.setMoveLeftFlag(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_D:<span class="comment">//右</span></span><br><span class="line">player1.setMoveRightFlag(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_K:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_NUMPAD1:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_LEFT:</span><br><span class="line">player2.setMoveLeftFlag(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KeyEvent.VK_RIGHT:</span><br><span class="line">player2.setMoveRightFlag(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">fff.repaint();<span class="comment">//重绘</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keyTyped</span><span class="params">(KeyEvent e)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这里控制角色左右移动并不是直接调用角色的移动方法，而是更改角色移动的标志变量，利用线程来调用角色的移动方法。这样可以解决角色的按键冲突问题。</p><h2 id="角色移动线程"><a href="#角色移动线程" class="headerlink" title="角色移动线程"></a>角色移动线程</h2><p>移动线程只负责发送消息给角色，而角色移动的具体判定由角色自身完成，从而更好地实现面向对象的思想。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MoveThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Characters character;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MoveThread</span><span class="params">(Characters c)</span> &#123;</span><br><span class="line">character=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//线程只负责发送消息，让角色自己判断移动</span></span><br><span class="line">character.moveRight();</span><br><span class="line">character.moveLeft();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这是 Characters 类中的角色移动函数，添加了延时以免在按下移动按键的一瞬间，角色移动太快出了屏幕外面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向左移动&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 由于两个线程各自操作自己的角色，所以此函数不需要同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveLeft</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!isAliveFlag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(moveLeftFlag) &#123;</span><br><span class="line">x-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1</span>);<span class="comment">//防止跑得太快</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向右移动&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * 由于两个线程各自操作自己的角色，所以此函数不需要同步</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveRight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!isAliveFlag) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(moveRightFlag) &#123;</span><br><span class="line">x+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="武器攻击实现机制"><a href="#武器攻击实现机制" class="headerlink" title="武器攻击实现机制"></a>武器攻击实现机制</h2><p>在 Characters 类中，使用武器进行攻击的方法如下，它的主要逻辑是调用 useWeapon 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 攻击某个角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c 要攻击的角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 造成的真实伤害</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fight</span><span class="params">(Characters c)</span> &#123;</span><br><span class="line"><span class="comment">//由于武器有不同的特性，所以伤害的逻辑让武器实现</span></span><br><span class="line"><span class="comment">//比如后期编写高级玩法时，弓需要计算射程</span></span><br><span class="line"><span class="keyword">if</span>(!isAliveFlag) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//如果已死亡，直接返回，下同</span></span><br><span class="line"><span class="keyword">if</span>(weapon==<span class="literal">null</span>) &#123;</span><br><span class="line">System.out.println(name+<span class="string">&quot;没有武器，无法攻击&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> attackRange=weapon.getAttackRange();</span><br><span class="line"><span class="keyword">if</span>(attackRange&gt;distance(c)) &#123;</span><br><span class="line"><span class="comment">//攻击距离大于角色之间的距离才可攻击</span></span><br><span class="line"><span class="keyword">return</span> weapon.useWeapon(<span class="built_in">this</span>,c);<span class="comment">//此角色攻击角色c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>角色类的两个属性，武器和魔法，使用的都是对应接口的引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WeaponBehavior weapon;<span class="comment">//武器</span></span><br><span class="line"><span class="keyword">protected</span> MagicBehavior magic;<span class="comment">//魔法</span></span><br><span class="line"></span><br><span class="line">以下是武器接口：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WeaponBehavior</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用武器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attacker 武器持有者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> victim 被攻击者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 造成的真实伤害</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">useWeapon</span><span class="params">(Characters attacker,Characters victim)</span>;<span class="comment">//使用武器</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttackRange</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">public</span> Image <span class="title function_">getAppearance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">以下是具体的武器实现（以剑为例，其他大同小异）：</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 剑</span></span><br><span class="line"><span class="comment"> * 实现武器接口</span></span><br><span class="line"><span class="comment"> * 威力中等，攻击距离中等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwordBehavior</span> <span class="keyword">implements</span> <span class="title class_">WeaponBehavior</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name=<span class="string">&quot;剑&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> Image appearance;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> DAMAGE=<span class="number">6</span>;<span class="comment">//武器基础威力</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> ATTACK_RANGE=<span class="number">200</span>;<span class="comment">//武器攻击距离,单位px</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String APPEARANCE_PATH=<span class="string">&quot;image\\Weapon\\Sword.png&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SwordBehavior</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SwordBehavior</span><span class="params">(String _name)</span> &#123;</span><br><span class="line">name=_name;<span class="comment">//剑，岂能无名OVO</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用武器攻击</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attacker 攻击者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> victim 被攻击者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">useWeapon</span><span class="params">(Characters attacker,Characters victim)</span> &#123;</span><br><span class="line"><span class="type">int</span> attackDamage=DAMAGE+attacker.getDamage();<span class="comment">//造成的伤害为攻击者的伤害加上武器威力</span></span><br><span class="line"><span class="type">int</span> finalDamage=victim.hitBy(attacker, attackDamage);</span><br><span class="line">System.out.println(attacker.getName()+<span class="string">&quot;使用&quot;</span>+name+<span class="string">&quot;对&quot;</span>+victim.getName()+<span class="string">&quot;造成了&quot;</span>+finalDamage+<span class="string">&quot;点伤害&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> finalDamage;<span class="comment">//返回最终伤害</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAttackRange</span><span class="params">()</span> &#123;<span class="keyword">return</span> ATTACK_RANGE;&#125;</span><br><span class="line"><span class="keyword">public</span> Image <span class="title function_">getAppearance</span><span class="params">()</span> &#123;</span><br><span class="line">appearance=Toolkit.getDefaultToolkit().getImage(APPEARANCE_PATH);</span><br><span class="line"><span class="keyword">return</span> appearance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面主要的代码是 useWeapon 方法里面调用的角色类的 hitBy 方法，里面有着伤害计算逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被某个角色攻击</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attacker 攻击者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> attackDamage 攻击者给予的攻击伤害</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最后造成的真实伤害</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hitBy</span><span class="params">(Characters attacker,<span class="type">int</span> attackDamage)</span> &#123;<span class="comment">//被攻击</span></span><br><span class="line"><span class="keyword">if</span>(!isAliveFlag) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> finalDamage=(attackDamage-defense);<span class="comment">//伤害计算：最终伤害=敌方攻击伤害-我方防御力</span></span><br><span class="line"><span class="keyword">if</span>(incHP(-finalDamage)==-<span class="number">1</span>) &#123;<span class="comment">//如果血量被扣到负数</span></span><br><span class="line"><span class="built_in">this</span>.killedBy(attacker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> finalDamage;<span class="comment">//返回最后造成的真实伤害</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>魔法的实现机制大同小异，不做特殊说明。</p><h2 id="武器切换和魔法切换"><a href="#武器切换和魔法切换" class="headerlink" title="武器切换和魔法切换"></a>武器切换和魔法切换</h2><p>实现方法是在角色类里面声明数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> WeaponBehavior weaponSlots[];<span class="comment">//武器栏位，用于存储角色携带的武器</span></span><br><span class="line"><span class="keyword">protected</span> MagicBehavior magicSlots[];<span class="comment">//魔法栏位</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> weaponSlotsIndex=<span class="number">0</span>;<span class="comment">//栏位索引，指示当前武器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> magicSlotsIndex=<span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以切换武器为例，如果当前武器是最后一把，那么换回第一把，否则索引自增：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 按顺序切换武器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeWeapon</span><span class="params">()</span> &#123;</span><br><span class="line">setWeaponBehavior(weaponSlots[weaponSlotsIndex]);</span><br><span class="line"><span class="keyword">if</span>(weaponSlotsIndex+<span class="number">1</span>&gt;=weaponSlots.length) &#123;</span><br><span class="line">weaponSlotsIndex=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">weaponSlotsIndex++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="时钟线程"><a href="#时钟线程" class="headerlink" title="时钟线程"></a>时钟线程</h2><p>时钟线程用于进行一些游戏周期性方法的调用，比如周期性恢复 HP，对角色属性值的判断等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时钟线程，用于一些周期性的计算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClockThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="keyword">private</span> Characters player1;<span class="comment">//玩家1</span></span><br><span class="line"><span class="keyword">private</span> Characters player2;<span class="comment">//玩家2</span></span><br><span class="line"><span class="keyword">private</span> FightFieldFrame fff;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> interval=<span class="number">1000</span>;<span class="comment">//时钟周期</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ClockThread</span><span class="params">(Characters p1, Characters p2, FightFieldFrame f)</span> &#123;</span><br><span class="line">player1=p1;</span><br><span class="line">player2=p2;</span><br><span class="line">fff=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 核对属性，并对于特定属性作出不同的事情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c 核对角色c的属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cheackStatus</span><span class="params">(Characters c)</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (c.getStatus()) &#123;</span><br><span class="line"><span class="keyword">case</span> Characters.ST_INVISIBLE:<span class="comment">//隐身魔法每个周期扣除一定的魔力</span></span><br><span class="line"><span class="keyword">if</span>(c.incMP(-InvisibleBehavior.COST)==-<span class="number">1</span>) &#123;<span class="comment">//如果魔力不够</span></span><br><span class="line">c.setStatus(Characters.ST_NORMAL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 周期性恢复属性值（回血回魔）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c 周期性恢复角色c的HP和MP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recover</span><span class="params">(Characters c)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(!c.getIsAliveFlag()) <span class="keyword">return</span>;<span class="comment">//角色死亡就不再回血</span></span><br><span class="line">c.incHP(Characters.HP_RECOVER);</span><br><span class="line">c.incMP(Characters.MP_RECOVER);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="comment">//做这个周期要做的事情</span></span><br><span class="line">cheackStatus(player1);</span><br><span class="line">cheackStatus(player2);</span><br><span class="line">recover(player1);</span><br><span class="line">recover(player2);</span><br><span class="line">fff.repaint();</span><br><span class="line"><span class="comment">//等待下一个周期</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(interval);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/java/awt/class-use/Image.html">java.awt.Image 官方文档</a></li><li><a href="https://www.cnblogs.com/bigthing33/p/5148807.html">使用 eclipse 生成 javadoc-博客园</a></li><li><a href="https://blog.csdn.net/kai_wei_zhang/article/details/8120382">java 双缓冲技术-CSDN</a></li><li><a href="https://blog.csdn.net/u011393661/article/details/38434581">java 获取屏幕大小-CSDN</a></li><li><a href="https://www.jb51.net/article/31981.htm">java 线程传参三种方式-脚本之家</a></li><li><a href="https://y-1746119035.iteye.com/blog/2094687">游戏角色移动流畅度的处理-ITeye</a></li><li><a href="https://blog.csdn.net/qq_34781336/article/details/80569632">eclipse 调试方式和快捷键-CSDN</a></li><li><a href="https://www.bilibili.com/video/av40583293?from=search&seid=15415941635306934765">一个讲 eclipse 调试的 b 站视频（靠这个视频解决了调试问题）-bilibili</a></li><li><a href="https://blog.csdn.net/asd765028286/article/details/78365274">绘制字体修改-CSDN</a></li></ul><h1 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h1><p>这次课设对我来说是个挑战，首先时间比较紧张，和考试放在了一周，并且用的是学了几周还没私底下练习多少的 JAVA。不过还是做的让我自己比较满意。</p><p>我选择的是看上去较为简单的一道题目，虽然简单，但是这个题目的可扩展性很强，可以尽情开脑洞，我看中的就是这一点。我在高中的时候就尝试使用 Visual Basic 来编写类似的小游戏，一些可能会遇到的困难在那时已经思考过了，所以总体来说没有遇到太过麻烦的地方。</p><p>随着经验的增长，我逐渐开始一边编程一边整理，让以后的自己也能够回顾这一次的项目。在写完这个课设之后，我用录屏软件录制了一个视频来整体讲述我编写过程中的思路，并上传到了 Bilibili 弹幕视频网站，总结经验，分享思路，以及为了便于以后回顾。地址是（<a href="https://www.bilibili.com/video/av54526303/%EF%BC%89">https://www.bilibili.com/video/av54526303/）</a></p><p>当然，过程中也遇到了一些问题。</p><p>比如绘制图片的时候遇到了只能使用绝对路径的问题，在老师上课演示的过程中也遇到过这个问题，后来我知道了 JAVA 相对路径是以项目根目录为基准而不是以文件目录为基准的。</p><p>比如角色控制按键冲突。解决方法是使用多线程，两个线程控制分别控制两个角色。</p><p>比如游戏周期性事件。在以前我使用 Visual Basic 的时候，是利用时钟控件来解决这个问题的，而 JAVA 里面可以使用线程来模拟那个时钟控件。这让我对时钟控件的原理有了比较好的认识。</p><p>在假期里面，我可能会通过继续完善这个小游戏，来更加深入地学习 JAVA。</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> awt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记5爬虫类结构优化</title>
      <link href="/posts/python_spider_note5optimization_of_the_spider_class/"/>
      <url>/posts/python_spider_note5optimization_of_the_spider_class/</url>
      
        <content type="html"><![CDATA[<p>打算全部以 cookie 来登陆，而不依赖于 session（因为听组长说 session 没 cookie 快，而且我想学些新东西而不是翻来覆去地在舒适区鼓捣）。弄了几天终于弄出来个代码不那么混乱的爬虫类了，更新一下博文来总结一下。代码在我 github 的 spider 库里面。</p><span id="more"></span><h1 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h1><p>既然要封装成爬虫类，那么就以面向对象的思维来思考一下结构。</p><p>从通用的爬虫开始，先不考虑如何爬取特定的网站。</p><p>以下只是刚开始的思路，并不是最终思路。</p><p>爬虫的行为步骤并不复杂，分为以下几步：</p><ol><li>请求并获取网页（往往需要模拟登录）</li><li>解析网页提取内容（还需要先获取需要爬取的 url）</li><li>保存内容（保存到数据库）</li></ol><p>爬虫类方法（初步设计）：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>login</td><td>登录</td></tr><tr><td>parse</td><td>解析</td></tr><tr><td>save</td><td>保存</td></tr><tr><td>crawl</td><td>爬取（外部调用者只需调用这个方法即可）</td></tr></tbody></table><p>爬虫类属性（初步设计）：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>headers</td><td>请求的头部信息，用于伪装成浏览器</td></tr><tr><td>cookies</td><td>保存登录后得到的 cookies</td></tr><tr><td>db_data</td><td>数据库的信息，用于连接数据库</td></tr></tbody></table><h1 id="进一步设计"><a href="#进一步设计" class="headerlink" title="进一步设计"></a>进一步设计</h1><p>我想将这个爬虫类设计得更为通用，也就是只修改解析的部分就能爬取不同的网站。组长说我这是打算写一个爬虫框架，我可没那么厉害，只是觉得把逻辑写死不能通用的类根本不能叫做类罢了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>我看了一下组长给出的参考代码，大致结构是这样的：</p><p>首先一个<code>Parse</code>解析类（为了关注结构，具体内容省略）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parse</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_index</span>(<span class="params">self,text</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        用于解析首页</span></span><br><span class="line"><span class="string">        :param text: 抓取到的文本</span></span><br><span class="line"><span class="string">        :return: cpatcha_url, 一个由元组构成的列表(元组由两个元素组成 (代号，学校名称))</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">       <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_captcha</span>(<span class="params">self, content, client</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        解析验证码</span></span><br><span class="line"><span class="string">        :return: &lt;int&gt; or &lt;str&gt; a code</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_info</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        解析出基本信息</span></span><br><span class="line"><span class="string">        :param text:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_current_record</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        解析消费记录</span></span><br><span class="line"><span class="string">        :param text:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.parse_info(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_history_record</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        解析历史消费记录</span></span><br><span class="line"><span class="string">        :param text:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.parse_info(text)</span><br></pre></td></tr></table></figure><p>这个思路不错，<strong>将解析部分独立形成一个类</strong>，不过这样要如何与爬虫类进行逻辑上的关联呢？解析类的对象，是什么？是解析器吗？解析器与爬虫应该是什么关系呢？</p><p>我继续往下看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Prepare</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_data</span>(<span class="params">self,username, password, captcha, schoolcode, signtype</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        构造登陆使用的参数</span></span><br><span class="line"><span class="string">        :return:data</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span><span class="comment">#省略代码，下同</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">history_record_data</span>(<span class="params">self, beginTime, endTime</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        历史消费记录data</span></span><br><span class="line"><span class="string">        :param beginTime:</span></span><br><span class="line"><span class="string">        :param endTime:</span></span><br><span class="line"><span class="string">        :return: data</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这是一个<code>Prepare</code>类，准备类？准备登录用的数据。说起来似乎比解析类更难以让我接受。解析器还可以说是装在爬虫身上，但是，但是“准备”这件事情分明是一个动作啊喂！</p><p>好吧，“一类动作”倒能说得过去吧。我看看怎么和爬虫类联系起来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Spider</span>(Parse, Prepare):<span class="comment">#???</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>等会儿等会儿……</p><p>继承关系？</p><p>让我捋捋。</p><p>为了让爬虫能解析和能准备还真是不按套路出牌啊……</p><p>子类应该是父类的特化吧不是吗，就像猫类继承动物类，汽车类继承车类一样，猫是动物，汽车也是车。</p><p>算了不继续了，毕竟我不是为了故意和我组长作对。只是将其作为一个例子来说明我的思路。</p><h2 id="解析器类"><a href="#解析器类" class="headerlink" title="解析器类"></a>解析器类</h2><p>参考代码虽然不太能让我接受，但是它的结构仍然带给了我一定启发。就是解析函数不一定要作为爬虫的方法。</p><p>解析这个步骤如果真的只写在一个函数里面真的非常非常乱，因为解析不只一个函数。比如解析表单的隐藏域，解析页面的 url，解析页面内容等。</p><p>单独写一个解析类也可以。至于它和爬虫类的关系，我觉得<strong>组合关系</strong>更为合适（想象出了一只蜘蛛身上背着一个红外透视仪的样子），spider 的解析器可以更换，这样子我觉着更符合逻辑一些。</p><p>关于更换解析器的方式，我打算先写一个通用的解析器类作为基类，而后派生出子解析器类，子解析器根据不同的网站采取不同的解析行为。</p><p>然后新建<code>my_parser.py</code>文件，写了一个<code>MyParser</code>类。解析方式是 xpath 和 beautifulsoup。这里面的代码是我把已经用于爬取学校网站的特定代码通用化之后的示例代码，实际上并不会被调用，只是统一接口，用的时候会新写一个类继承它，并覆盖里面的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyParser</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_data_parser</span>(<span class="params">self,login_url</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        This parser is for chd</span></span><br><span class="line"><span class="string">        :param url: the url you want to login</span></span><br><span class="line"><span class="string">        :return (a dict with login data,cookies)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        response=requests.get(login_url)</span><br><span class="line">        html=response.text</span><br><span class="line">        <span class="comment"># parse the html</span></span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        <span class="comment">#insert parser,following is an example</span></span><br><span class="line">        example_data=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;example_data&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        login_data=&#123;</span><br><span class="line">            <span class="string">&#x27;example_data&#x27;</span>:example_data</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> login_data,response.cookies</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">uni_parser</span>(<span class="params">self,url,xpath,**kwargs</span>):</span><br><span class="line">        response=requests.post(url,**kwargs)</span><br><span class="line">        html=response.text</span><br><span class="line">        tree=etree.HTML(html)</span><br><span class="line">        result_list=tree.xpath(xpath)</span><br><span class="line">        <span class="keyword">return</span> result_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_urls</span>(<span class="params">self,catalogue_url,**kwargs</span>):</span><br><span class="line"></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        get all urls that needs to crawl.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">#prepare</span></span><br><span class="line">        base_url=<span class="string">&#x27;http://example.cn/&#x27;</span></span><br><span class="line">        cata_base_url=catalogue_url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        para = &#123;</span><br><span class="line">            <span class="string">&#x27;pageIndex&#x27;</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#get the number of pages</span></span><br><span class="line">        xpath=<span class="string">&#x27;//*[@id=&quot;page_num&quot;]/text()&#x27;</span></span><br><span class="line">        page_num=<span class="built_in">int</span>(<span class="variable language_">self</span>.uni_parser(cata_base_url,xpath,params=para,**kwargs))</span><br><span class="line"></span><br><span class="line">        <span class="comment">#repeat get single catalogue&#x27;s urls</span></span><br><span class="line">        xpath=<span class="string">&#x27;//a/@href&#x27;</span><span class="comment">#link tag&#x27;s xpath</span></span><br><span class="line">        url_list=[]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,page_num+<span class="number">1</span>):</span><br><span class="line">            para[<span class="string">&#x27;pageIndex&#x27;</span>] = i</span><br><span class="line">            <span class="comment">#get single catalogue&#x27;s urls</span></span><br><span class="line">            urls=<span class="variable language_">self</span>.uni_parser(cata_base_url,xpath,params=para,**kwargs)</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">                url_list.append(base_url+<span class="built_in">str</span>(url))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_content</span>(<span class="params">self,url,**kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        get content from the parameter &quot;url&quot;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        html=requests.post(url,**kwargs).text</span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        content=soup.find(<span class="string">&#x27;div&#x27;</span>,<span class="built_in">id</span>=<span class="string">&#x27;content&#x27;</span>)</span><br><span class="line">        content=<span class="built_in">str</span>(content)</span><br><span class="line">        <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><p>我把构造登录信息的部分放在了解析器中。并在登录中调用。</p><p>登录之后得到的 cookies 就在参数中传递。</p><h2 id="数据库类"><a href="#数据库类" class="headerlink" title="数据库类"></a>数据库类</h2><p>由于只打算存到数据库，所以并没有写一个“存档宝石类“，或许之后会写。</p><p>目前我只写了一个保存函数，以及自己封装的一个数据库类。</p><p>这个数据库类是<code>my_database.py</code>中的<code>MyDatabase</code>（应该不会撞名吧），目前只封装了 insert 函数，传入的参数有三个：数据库名，表名，装有记录的字典。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDatabase</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,*args,**kwargs</span>):</span><br><span class="line">        <span class="variable language_">self</span>.conn=pymysql.connect(*args,**kwargs)</span><br><span class="line">        <span class="variable language_">self</span>.cursor=<span class="variable language_">self</span>.conn.cursor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,db,table,record_dict</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param db:name of database that you want to use</span></span><br><span class="line"><span class="string">        :param table:name of table that you want to use</span></span><br><span class="line"><span class="string">        :param record_dict:key for column,value for value</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">#1.use the database</span></span><br><span class="line">        sql=<span class="string">&#x27;use &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(db)</span><br><span class="line">        <span class="variable language_">self</span>.cursor.execute(sql)</span><br><span class="line">        <span class="variable language_">self</span>.conn.commit()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#2.connect the sql commend</span></span><br><span class="line">        sql=<span class="string">&#x27;insert into &#123;&#125;(&#x27;</span>.<span class="built_in">format</span>(table)</span><br><span class="line"></span><br><span class="line">        record_list=<span class="built_in">list</span>(record_dict.items())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> record_list:</span><br><span class="line">            sql += <span class="built_in">str</span>(r[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> r != record_list[-<span class="number">1</span>]:</span><br><span class="line">                sql += <span class="string">&#x27;,&#x27;</span></span><br><span class="line"></span><br><span class="line">        sql+=<span class="string">&#x27;) values(&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> r <span class="keyword">in</span> record_list:</span><br><span class="line">            sql += <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            sql += <span class="built_in">str</span>(r[<span class="number">1</span>])</span><br><span class="line">            sql += <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> r != record_list[-<span class="number">1</span>]:</span><br><span class="line">                sql += <span class="string">&#x27;,&#x27;</span></span><br><span class="line">        sql+=<span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#3.commit</span></span><br><span class="line">        <span class="variable language_">self</span>.cursor.execute(sql)</span><br><span class="line">        <span class="variable language_">self</span>.conn.commit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.cursor.close()</span><br><span class="line">        <span class="variable language_">self</span>.conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    db_data=&#123;</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;passwd&#x27;</span>:<span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;charset&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    test_record=&#123;</span><br><span class="line">        <span class="string">&#x27;idnew_table&#x27;</span>:<span class="string">&#x27;233&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mydb=MyDatabase(**db_data)</span><br><span class="line">    mydb.insert(<span class="string">&#x27;news&#x27;</span>,<span class="string">&#x27;new_table&#x27;</span>,test_record)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>封装之后用起来比较方便。</p><h3 id="save-函数"><a href="#save-函数" class="headerlink" title="save 函数"></a>save 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">content,**save_params</span>):</span><br><span class="line">    mydb=MyDatabase(**save_params)</span><br><span class="line">    record=&#123;</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span>:pymysql.escape_string(content)</span><br><span class="line">    &#125;</span><br><span class="line">    mydb.insert(<span class="string">&#x27;dbase&#x27;</span>,<span class="string">&#x27;bulletin&#x27;</span>,record)</span><br></pre></td></tr></table></figure><p>pymysql.escape_string()函数是用于将内容转义的，因为爬取的是 html 代码（就不解析那么细了，直接把那一块 html 代码全部存下来，打开的时候格式还不会乱），有些内容可能使组合成的 sql 语句无法执行。</p><h2 id="爬虫类"><a href="#爬虫类" class="headerlink" title="爬虫类"></a>爬虫类</h2><p>给构造函数传入特定的解析器和保存函数，然后调用 crawl 方法就可以让 spider 背着特制的 parser 去爬取网站内容啦~</p><p>登录函数和上次不太一样，做了一些修改，不过主要功能仍然是获取登录之后的 cookies 的。</p><p>简单说一下修改：我们学校网站登录之后会从登陆页面开始，经过三四次跳转之后才到达首页，期间获取到的 cookies 都需要保留，这样才能利用这些 cookies 来进入新闻公告页面。于是禁止重定向，手动获取下一个 url，得到这一站的 cookies 之后再手动跳转，直到跳转到首页。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySpider</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parser,save,**save_params</span>):</span><br><span class="line">        <span class="variable language_">self</span>.parser=parser<span class="comment">#parser is a object of class</span></span><br><span class="line">        <span class="variable language_">self</span>.save=save<span class="comment">#save is a function</span></span><br><span class="line">        <span class="variable language_">self</span>.save_params=save_params</span><br><span class="line">        <span class="variable language_">self</span>.cookies=<span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.headers=&#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url,home_page_url</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        login</span></span><br><span class="line"><span class="string">        :param login_url: the url you want to login</span></span><br><span class="line"><span class="string">        :param login_data_parser: a callback function to get the login_data you need when you login,return (login_data,response.cookies)</span></span><br><span class="line"><span class="string">        :param target_url: Used to determine if you have logged in successfully</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: response of login</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        login_data=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#get the login data</span></span><br><span class="line">        login_data,cookies=<span class="variable language_">self</span>.parser.login_data_parser(login_url)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#login without redirecting</span></span><br><span class="line">        response=requests.post(login_url,headers=<span class="variable language_">self</span>.headers,data=login_data,cookies=cookies,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        cookies_num=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(home_page_url!=<span class="literal">None</span> <span class="keyword">and</span> response.url!=home_page_url):<span class="comment">#if spider is not reach the target page</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[spider]: I am at the &quot;&#123;&#125;&quot; now&#x27;</span>.<span class="built_in">format</span>(response.url))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[spider]: I have got a cookie!Its content is that \n&quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(response.cookies))</span><br><span class="line">            <span class="comment">#merge the two cookies</span></span><br><span class="line">            cookies=<span class="built_in">dict</span>(cookies,**response.cookies)</span><br><span class="line">            cookies=requests.utils.cookiejar_from_dict(cookies)</span><br><span class="line">            cookies_num+=<span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[spider]: Now I have &#123;&#125; cookies!&#x27;</span>.<span class="built_in">format</span>(cookies_num))</span><br><span class="line">            next_station=response.headers[<span class="string">&#x27;Location&#x27;</span>]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;[spider]: Then I will go to the page whose url is &quot;&#123;&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(next_station))</span><br><span class="line">            response=requests.post(next_station,headers=<span class="variable language_">self</span>.headers,cookies=cookies,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        cookies=<span class="built_in">dict</span>(cookies,**response.cookies)</span><br><span class="line">        cookies=requests.utils.cookiejar_from_dict(cookies)</span><br><span class="line">        cookies_num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(home_page_url!=<span class="literal">None</span> <span class="keyword">and</span> response.url==home_page_url):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;login successfully&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.cookies=cookies</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crawl</span>(<span class="params">self,login_url,home_page_url,catalogue_url</span>):</span><br><span class="line">        <span class="variable language_">self</span>.login(login_url,home_page_url)</span><br><span class="line">        url_list=<span class="variable language_">self</span>.parser.get_urls(catalogue_url,cookies=<span class="variable language_">self</span>.cookies,headers=<span class="variable language_">self</span>.headers)</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            content=<span class="variable language_">self</span>.parser.get_content(url,cookies=<span class="variable language_">self</span>.cookies,headers=<span class="variable language_">self</span>.headers)</span><br><span class="line">            <span class="variable language_">self</span>.save(content,**<span class="variable language_">self</span>.save_params)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>为了更好地展示结构，大部分内容都 pass 省略掉。想看具体代码可以去我 github 的<a href="https://github.com/HaneChiri/Spider">spider 库</a></p><p>这个文件内首先创建了一个特定解析类，继承自通用解析类，再写了一个保存函数，准备好参数，最后爬取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> my_spider <span class="keyword">import</span> MySpider</span><br><span class="line"><span class="keyword">from</span> my_parser <span class="keyword">import</span> MyParser</span><br><span class="line"><span class="keyword">from</span> my_database <span class="keyword">import</span> MyDatabase</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">chdParser</span>(<span class="title class_ inherited__">MyParser</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_data_parser</span>(<span class="params">self,login_url</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        This parser is for chd</span></span><br><span class="line"><span class="string">        :param url: the url you want to login</span></span><br><span class="line"><span class="string">        :return (a dict with login data,cookies)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> login_data,response.cookies</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_urls</span>(<span class="params">self,catalogue_url,**kwargs</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        get all urls that needs to crawl.</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment">#prepare</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#get page number</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#repeat get single catalogue&#x27;s urls</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,page_num+<span class="number">1</span>):</span><br><span class="line">            para[<span class="string">&#x27;pageIndex&#x27;</span>] = i</span><br><span class="line">            <span class="comment">#get single catalogue&#x27;s urls</span></span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> url_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">content,**save_params</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    login_url=<span class="string">&quot;pass&quot;</span><span class="comment">#省略</span></span><br><span class="line">    home_page_url=<span class="string">&quot;pass&quot;</span></span><br><span class="line">    catalogue_url=<span class="string">&quot;pass&quot;</span></span><br><span class="line"></span><br><span class="line">    parser=chdParser()</span><br><span class="line">    save_params=&#123;</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;passwd&#x27;</span>:<span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;port&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;charset&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sp=MySpider(parser,save,**save_params)</span><br><span class="line">    sp.crawl(login_url,home_page_url,catalogue_url)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记4模拟登录函数的优化</title>
      <link href="/posts/python_spider_note4optimization_of_the_login_function/"/>
      <url>/posts/python_spider_note4optimization_of_the_login_function/</url>
      
        <content type="html"><![CDATA[<p>前面写的代码虽然完成了爬取的功能，但是过于凌乱，于是打算重构一遍。首先从登陆开始</p><span id="more"></span><h1 id="改进前的代码"><a href="#改进前的代码" class="headerlink" title="改进前的代码"></a>改进前的代码</h1><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>这是第一次写的登录函数，获取登录信息和登录本身是放在一起的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    登录并返回已经登录的会话</span></span><br><span class="line"><span class="string">    :return: 已经登录的会话（session）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#设置</span></span><br><span class="line">    login_url = <span class="string">&#x27;http://ids.chd.edu.cn/authserver/login?service=http%3A%2F%2Fportal.chd.edu.cn%2F&#x27;</span></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#新建会话</span></span><br><span class="line">    session=requests.session()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取登录校验码</span></span><br><span class="line">    html=session.post(login_url,headers=headers).text</span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    lt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    dllt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    _eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    login_data=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入学号：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;btn&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">        <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">        <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">        <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">        <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登录</span></span><br><span class="line">    response=session.post(login_url,headers=headers,data=login_data)</span><br><span class="line">    <span class="keyword">if</span> response.url==<span class="string">&#x27;http://portal.chd.edu.cn/&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>第二次是将全部函数封装到类中，这次将获取登录信息从其中分出来。但是两者关系仍然太过于紧密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">spider</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    爬虫类</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,headers</span>):</span><br><span class="line">        <span class="variable language_">self</span>.session=requests.session()<span class="comment">#初始化登录session</span></span><br><span class="line">        <span class="variable language_">self</span>.is_login=<span class="literal">False</span><span class="comment">#登录状态</span></span><br><span class="line">        <span class="variable language_">self</span>.headers=headers<span class="comment">#头信息</span></span><br><span class="line">        <span class="variable language_">self</span>.cookiejar=http.cookiejar.LWPCookieJar(<span class="string">&#x27;cookie.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_login_data</span>(<span class="params">self,login_url</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        获取登录需要的数据</span></span><br><span class="line"><span class="string">        :param login_url: 登录页面url</span></span><br><span class="line"><span class="string">        :return: 一个存有登录数据的字典</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="comment"># 获取登录校验码</span></span><br><span class="line">        html = <span class="variable language_">self</span>.session.post(login_url, headers=<span class="variable language_">self</span>.headers).text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        lt = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        dllt = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        _eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        login_data = &#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入学号：&quot;</span>),</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>),</span><br><span class="line">            <span class="string">&#x27;btn&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">            <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">            <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">            <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">            <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> login_data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            登录并返回已经登录的会话</span></span><br><span class="line"><span class="string">            :return: 已经登录的会话（session）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.load_cookie():</span><br><span class="line">            <span class="variable language_">self</span>.is_login = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            <span class="comment">#获取登录信息</span></span><br><span class="line">            login_data=<span class="variable language_">self</span>.get_login_data(login_url)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 登录</span></span><br><span class="line">            response = <span class="variable language_">self</span>.session.post(login_url, headers=<span class="variable language_">self</span>.headers, data=login_data)</span><br><span class="line">            <span class="keyword">if</span> response.url!=login_url:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.is_login=<span class="literal">True</span></span><br><span class="line">                <span class="variable language_">self</span>.save_cookie()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.session</span><br><span class="line"></span><br><span class="line">    <span class="comment">#省略后面的函数</span></span><br></pre></td></tr></table></figure><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>这次改进，我打算让<code>login()</code>函数与获取登录信息用的函数关系没有那么紧密，让后者可以被替换或者不用。</p><p>所以使用了回调函数，也就是将函数指针作为参数传入，不过 python 变量本身就像指针一样，直接传变量即可。</p><h2 id="函数头"><a href="#函数头" class="headerlink" title="函数头"></a>函数头</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url,login_data_parser=<span class="literal">None</span>,target_url=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure><p>传入了三个参数，</p><ul><li><strong>login_url</strong> : 显而易见，这是登录页面的 url</li><li><strong>login_data_parser</strong> : 这是一个函数，用于解析页面中随机生成的隐藏域代码的函数，可以不传入</li><li><strong>target_url</strong> : 用于判断是否登录成功，这是登录之后会跳转到的页面</li></ul><h2 id="获取登录信息"><a href="#获取登录信息" class="headerlink" title="获取登录信息"></a>获取登录信息</h2><p>接着判断参数是否为函数（是否可调用），如果可以调用，就调用它获取登录信息。在这里不需要关心函数内部具体如何获取，而只用关心它的接口。</p><p>这个函数的返回值是一个装有登录信息的 dict，和一个 cookies。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url,login_data_parser=<span class="literal">None</span>,target_url=<span class="literal">None</span></span>):</span><br><span class="line">        login_data=<span class="literal">None</span></span><br><span class="line">        <span class="comment">#get the login data</span></span><br><span class="line">        <span class="keyword">if</span>(login_data_parser!=<span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">callable</span>(login_data_parser)):</span><br><span class="line">            login_data,cookies=login_data_parser(login_url)</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>然后就完成了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url,login_data_parser=<span class="literal">None</span>,target_url=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        login</span></span><br><span class="line"><span class="string">        :param login_url: the url you want to login</span></span><br><span class="line"><span class="string">        :param login_data_parser: a callback function to get the login_data you need when you login,return (login_data,response.cookies)</span></span><br><span class="line"><span class="string">        :param target_url: Used to determine if you have logged in successfully</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :return: response of login</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        login_data=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#get the login data</span></span><br><span class="line">        <span class="keyword">if</span>(login_data_parser!=<span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">callable</span>(login_data_parser)):</span><br><span class="line">            login_data,cookies=login_data_parser(login_url)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#login</span></span><br><span class="line">        response=requests.post(login_url,headers=<span class="variable language_">self</span>.headers,data=login_data,cookies=cookies)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(target_url!=<span class="literal">None</span> <span class="keyword">and</span> response.url==target_url):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;login successfully&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.cookies=cookies</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="获取登录信息函数"><a href="#获取登录信息函数" class="headerlink" title="获取登录信息函数"></a>获取登录信息函数</h2><p>这个和前面就是一样的了。只要修改传给 login 函数的函数，就可以获取不同网站的登录信息。login 函数变得更加通用了，不再过于依赖登录信息函数存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">chd_login_data_parser</span>(<span class="params">self,url</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        This parser is for chd</span></span><br><span class="line"><span class="string">        :param url: the url you want to login</span></span><br><span class="line"><span class="string">        :return (a dict with login data,cookies)</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        response=requests.get(login_url)</span><br><span class="line">        html=response.text</span><br><span class="line">        <span class="comment"># parse the html</span></span><br><span class="line">        soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        lt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        dllt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        _eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        login_data=&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="built_in">input</span>(<span class="string">&#x27;input account:&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: <span class="built_in">input</span>(<span class="string">&#x27;input passwd:&#x27;</span>),</span><br><span class="line">            <span class="string">&#x27;btn&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">            <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">            <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">            <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">            <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> login_data,response.cookies</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git恢复误提交的内容</title>
      <link href="/posts/git_reset_incorrect_commit/"/>
      <url>/posts/git_reset_incorrect_commit/</url>
      
        <content type="html"><![CDATA[<p>在图书馆敲下最后几行代码，然后就着手机热点把爬虫代码 push 上去之后，突然想起来，我好像忘了把账号密码部分改成手动输入，现在 push 上去的是明文啊！掀桌！早知道就回宿舍上传了，说不准还能想起来。</p><span id="more"></span><h1 id="问题及其解决方案"><a href="#问题及其解决方案" class="headerlink" title="问题及其解决方案"></a>问题及其解决方案</h1><p>已经上传了，即便我再改回来上传，别人也可以从 git log 里面看到我的账号密码。</p><p>那就版本回退，重新更新再上传。但是在我使用<code>GitHub Desktop</code>的<code>Revert this commit</code>的时候它却让我解决一大堆冲突……等会儿，啥时候多出来那么多“changes”？？？刚刚还一个都没有啊，怎么我用了这个选项还没回退就出现一大堆冲突？</p><p>我对 git 其实不熟练，用 GUI 界面也是，解决这些冲突比较麻烦。所以最后的解决方案比较粗暴：</p><ol><li>删除本地库以解决那一大堆的冲突文件</li><li>从远程库 clone 回来</li><li>把库内文件全部打包复制在别的路径</li><li>在库里面打开 git bash，使用<code>git reset --hard 版本号</code>回到没出事的版本</li><li>将前面备份的文件复制回来</li><li>修改之后重新提交，完成</li></ol><h1 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h1><ul><li>得多准备一条分支，别直接在主分支上边写</li><li>一定要注意代码中的隐私信息！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手工归档编程项目</title>
      <link href="/posts/archive_project/"/>
      <url>/posts/archive_project/</url>
      
        <content type="html"><![CDATA[<p>以前写代码建立的工程到处堆放，导致不能很好的找到以前的代码。虽然以前简单地划分了一下文件夹，但并没有投入太多精力去想如何分类。所以打算养成归档编程项目的好习惯，记录一下过程。也给读者们一个参考。</p><span id="more"></span><p>不放图了，文件树结构就用无序列表来显示。</p><h1 id="分类整理"><a href="#分类整理" class="headerlink" title="分类整理"></a>分类整理</h1><p>首先把所有项目文件夹全部放进一个专门的文件夹里面，最好不要中文名，也不要拼音，这是个好习惯，以后的命名也是。我将它起名为<code>DEVELOP</code>。</p><p>将它放置在 F 盘（我拿 F 盘当文件盘），并且设置一个快捷方式在桌面，嘿嘿我还给快捷方式选了一个很炫酷的图标让自己开心一下。</p><p>然后根据语言将其分为<code>cpp_develop</code>，<code>py_develop</code>，<code>vb_develop</code>，<code>web_develop</code>等（html，css，js 等统一划分到 web_develop 里面，因为我个人觉得它们三个分不开）</p><p>在每一个语言文件夹里面再细分(用 cpp 举例)</p><table><thead><tr><th>文件夹名</th><th>内容</th></tr></thead><tbody><tr><td>cpp_archive</td><td>用于归档已经完成的项目，方便以后查找</td></tr><tr><td>cpp_project</td><td>用于存放正在开发的项目</td></tr><tr><td>cpp_test</td><td>用于测试。这里面我建立了几个空项目用于在别人问我代码问题的时候测试</td></tr><tr><td>cpp_example</td><td>用于存放从各种渠道得到的源代码，用于研究学习，里面的代码是别人的</td></tr><tr><td>cpp_lessonwork</td><td>用于存放课设或者课程实验代码，可并入 cpp_project</td></tr><tr><td>cpp_pratice</td><td>用于存放一些不足以称为项目的代码</td></tr></tbody></table><p>现在的目录大概是这样的：</p><ul><li>DEVELOP<ul><li>cpp_develop<ul><li>cpp_archive</li><li>cpp_project</li><li>cpp_test</li><li>cpp_example</li><li>cpp_lessonwork</li><li>cpp_pratice</li></ul></li><li>py_develop</li><li>vb_develop</li><li>web_develop</li></ul></li></ul><h1 id="归档规则"><a href="#归档规则" class="headerlink" title="归档规则"></a>归档规则</h1><p>项目名称+六位数日期(附加信息)</p><p>比如：</p><p>词法分析代码高亮 190403(修复了 xx)</p><p>日期是为了手动版本控制，利用肉眼就能知道哪些信息。以前做课设的时候就这样弄的（不过队友都不配合我这样搞，我发的版本是多少，改了之后发过来还是多少……）</p><p>总之归档时保证下次打开这个项目时能够唤醒当时编写时的记忆即可。</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简易倒排索引</title>
      <link href="/posts/simple_inverted_index/"/>
      <url>/posts/simple_inverted_index/</url>
      
        <content type="html"><![CDATA[<p>智能信息检索这门课程有个上机作业，题目是“实现倒排索引”。</p><p>用到了以前没有学的 STL 中的 vector。</p><p>经过两次课上写代码（3 小时）加上课后修 bug 的时间（晚上十点到十二点）总共 5 个小时，终于完成了一个简易的倒排索引。因为十点时已经太困，喝了柠檬茶提神结果现在睡不着，所以继续熬夜把博客写完吧。</p><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>勿抄袭代码，代码仅供参考。转载注明出处</p><h1 id="倒排索引简介"><a href="#倒排索引简介" class="headerlink" title="倒排索引简介"></a>倒排索引简介</h1><p>为了从文档集（collection）中检索出想要的结果，首先要将文档集中的每个词项（term）建立索引，以确定词项所在的文档（document）的 id，从而返回根据关键字查询的结果。</p><p>倒排索引的格式大概是下图这样（代码成果图）：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/simple_inverted_index.png"></p><p>每一个词项后面跟着它在文档集中出现的次数，以及出现过的文档的 id 所组成的一个序列。</p><p>例如第一条：</p><table><thead><tr><th>词项</th><th>词频</th><th>倒排记录表</th></tr></thead><tbody><tr><td>API</td><td>6</td><td>4，5，6</td></tr></tbody></table><p>就代表<code>API</code>这个词在文档集（六个文件）中出现了六次，这六次分布在文档 4、文档 5 和文档 6。</p><p>搜索引擎大致就是这个原理，建立好了索引之后，只需要把你搜索的关键词对应的 posting 求交集然后把对应的文档显示出来就可以了。</p><h1 id="数据结构设计"><a href="#数据结构设计" class="headerlink" title="数据结构设计"></a>数据结构设计</h1><h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><p>文档其实在这里就是文件，对于每个文档，都有一个文档名，以及相对应的文档 ID，它们得绑定好，否则会混乱。因此将它们放在一个结构体里面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Document</span></span><br><span class="line">&#123;</span><br><span class="line">string docName;<span class="comment">//文档名</span></span><br><span class="line"><span class="type">int</span> docID;<span class="comment">//文档id</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="索引项（IndexItem）"><a href="#索引项（IndexItem）" class="headerlink" title="索引项（IndexItem）"></a>索引项（IndexItem）</h2><p>同样的，每一个记录的词项、词频和记录表也是绑定的，所以也打包起来。文档 id 的数目不定，又不想自己写链表或者动态数组怕出错，因此采用了 STL（标准模板库）里面的动态数组 vector（向量容器）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">IndexItem</span></span><br><span class="line">&#123;</span><br><span class="line">string term;<span class="comment">//词项</span></span><br><span class="line"><span class="type">int</span> frequence;<span class="comment">//词频</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; posting;<span class="comment">//记录表</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="索引类（CIndex）"><a href="#索引类（CIndex）" class="headerlink" title="索引类（CIndex）"></a>索引类（CIndex）</h2><p>代码应该不难看懂。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CIndex</span></span><br><span class="line">&#123;</span><br><span class="line">vector&lt;IndexItem&gt; indexList;<span class="comment">//索引表</span></span><br><span class="line">vector&lt;Document&gt; collection;<span class="comment">//文档集</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">CIndex</span>();</span><br><span class="line"><span class="comment">//利用文件名数组初始化文档集</span></span><br><span class="line"><span class="built_in">CIndex</span>(string p_collection[], <span class="type">int</span> n);</span><br><span class="line"><span class="comment">//显示文档集内所有文档的文件名</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showCollection</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//显示当前倒排索引表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showIndexList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//索引单篇文档</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">indexDocument</span><span class="params">(FILE*fp, <span class="type">int</span> docID)</span></span>;</span><br><span class="line"><span class="comment">//索引文档集</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">indexCollection</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//排序索引表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sortIndex</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//索引表合并同类项</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mergeIndex</span><span class="params">()</span></span>;</span><br><span class="line">~<span class="built_in">CIndex</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h1><ol><li>扫描一篇文档，将这篇文档对应的文档 ID 加入对应词项的 posting</li><li>对文档集中每一篇文档重复第一步，获取所有词项及其对应的 posting 加入索引表，此时每个词项的 posting 中只有一个文档 ID，并且有很多重复的词项记录；</li><li>排序索引表；</li><li>将重复的项的 posting 合并，并且增加词频，删除重复项。</li></ol><p>2019-4-4 补充：想到一个新思路——直接按照 ID 从小到大扫描一遍整个文档集，每扫描一个词项，就在词典中查找这个词项，增加词频，然后把现在正在处理的文档的 ID 加入到 posting，最后再排个序即可。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="有参构造函数"><a href="#有参构造函数" class="headerlink" title="有参构造函数"></a>有参构造函数</h2><p>初始化文档集</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@name &lt;CIndex::CIndex&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;初始化文档集&gt;</span></span><br><span class="line"><span class="comment">//@param &lt;string p_collection[]:文档文件名数组&gt;&lt;int n:数组长度&gt;</span></span><br><span class="line">CIndex::<span class="built_in">CIndex</span>(string p_collection[], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">Document nextDoc;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">nextDoc.docName = p_collection[i];</span><br><span class="line">nextDoc.docID = i<span class="number">+1</span>;<span class="comment">//编号从1开始</span></span><br><span class="line">collection.<span class="built_in">push_back</span>(nextDoc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引单篇文档"><a href="#索引单篇文档" class="headerlink" title="索引单篇文档"></a>索引单篇文档</h2><p>大致思路是，一个个字符读取进来，如果是字母就一直读完整个单词，并把这个单词作为词项加入表中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@name &lt;CIndex::indexDocument&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;索引单篇文档&gt;</span></span><br><span class="line"><span class="comment">//@param &lt;FILE * fp:已打开的文件指针&gt;&lt;int docID:此文件的编号&gt;</span></span><br><span class="line"><span class="comment">//@return &lt;扫描到的词项数量&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CIndex::indexDocument</span><span class="params">(FILE * fp, <span class="type">int</span> docID)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> ch;<span class="comment">//扫描用的变量</span></span><br><span class="line">IndexItem indexItem;<span class="comment">//打包用的变量</span></span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;<span class="comment">//扫描到的词项数量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">feof</span>(fp))</span><br><span class="line">&#123;<span class="comment">//一次循环获取一个单词</span></span><br><span class="line"><span class="comment">//找到第一个字母</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">feof</span>(fp)) <span class="keyword">break</span>;<span class="comment">//防止空文件导致的无限循环</span></span><br><span class="line">&#125; <span class="keyword">while</span> (!<span class="built_in">isalpha</span>(ch));</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">feof</span>(fp)) <span class="keyword">break</span>;<span class="comment">//防止因文件后面的空行而索引空字符串</span></span><br><span class="line"><span class="comment">//读取单词，给索引项赋值</span></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">isalpha</span>(ch))</span><br><span class="line">&#123;</span><br><span class="line">indexItem.term += ch;</span><br><span class="line">ch = <span class="built_in">fgetc</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">indexItem.frequence = <span class="number">1</span>;</span><br><span class="line">indexItem.posting.<span class="built_in">push_back</span>(docID);<span class="comment">//将本文件的文档ID加入posting</span></span><br><span class="line"><span class="comment">//把索引项加入词典</span></span><br><span class="line">indexList.<span class="built_in">push_back</span>(indexItem);</span><br><span class="line">num++;</span><br><span class="line"><span class="comment">//清空索引项，准备下一次</span></span><br><span class="line">indexItem.term=<span class="string">&quot;&quot;</span>;</span><br><span class="line">indexItem.posting.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="索引文档集"><a href="#索引文档集" class="headerlink" title="索引文档集"></a>索引文档集</h2><p>索引文档弄好之后，索引整个文档集不过是加个循环而已</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@name &lt;CIndex::indexCollection&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;索引文档集&gt;</span></span><br><span class="line"><span class="comment">//@return &lt;词项总数目&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CIndex::indexCollection</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//打开对应的文件并索引</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; collection.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">FILE* fp = <span class="built_in">fopen</span>(collection[i].docName.<span class="built_in">c_str</span>(), <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="comment">//索引单篇文档</span></span><br><span class="line">num+=<span class="built_in">indexDocument</span>(fp, collection[i].docID);</span><br><span class="line"><span class="comment">//关闭文件</span></span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序索引表"><a href="#排序索引表" class="headerlink" title="排序索引表"></a>排序索引表</h2><p>直接使用<code>&lt;algorithm&gt;</code>头文件里面的<code>sort()</code>函数进行排序，自定义比较函数<code>cmp()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(IndexItem a, IndexItem b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.term&lt;b.term;<span class="comment">//词项按照从小到大排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CIndex::sortIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(indexList.<span class="built_in">begin</span>(), indexList.<span class="built_in">end</span>(), cmp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@name &lt;CIndex::mergeIndex&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;索引表合并同类项&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CIndex::mergeIndex</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">IndexItem item1,item2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sortIndex</span>();</span><br><span class="line">vector&lt;IndexItem&gt;::iterator it_cur=indexList.<span class="built_in">begin</span>();<span class="comment">//创建迭代器</span></span><br><span class="line">vector&lt;IndexItem&gt;::iterator it_next = it_cur + <span class="number">1</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator p1, p2;<span class="comment">//用于合并posting的迭代器</span></span><br><span class="line"><span class="keyword">while</span> (it_cur != indexList.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(it_cur<span class="number">+1</span>!=indexList.<span class="built_in">end</span>()) it_next = it_cur + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>((*it_cur).term == (*it_next).term)</span><br><span class="line">&#123;<span class="comment">//这个循环内处理掉所有与当前词项重复的词项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将二者的posting排序</span></span><br><span class="line"><span class="built_in">sort</span>((*it_cur).posting.<span class="built_in">begin</span>(), (*it_cur).posting.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">sort</span>((*it_next).posting.<span class="built_in">begin</span>(), (*it_next).posting.<span class="built_in">end</span>());</span><br><span class="line"><span class="comment">//有序合并两者的posting</span></span><br><span class="line">p1 = (*it_cur).posting.<span class="built_in">begin</span>();</span><br><span class="line">p2 = (*it_next).posting.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span> (p1 != (*it_cur).posting.<span class="built_in">end</span>() &amp;&amp; p2 != (*it_next).posting.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((*p1) &lt; (*p2))<span class="comment">//结果集中加入较小的元素</span></span><br><span class="line">&#123;</span><br><span class="line">temp.<span class="built_in">push_back</span>(*p1);</span><br><span class="line"><span class="comment">//这个while用于跳过重复的元素</span></span><br><span class="line"></span><br><span class="line">p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>((*p1) &gt; (*p2))</span><br><span class="line">&#123;</span><br><span class="line">temp.<span class="built_in">push_back</span>(*p2);</span><br><span class="line"></span><br><span class="line">p2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">temp.<span class="built_in">push_back</span>(*p1);</span><br><span class="line"><span class="comment">//遇到相同的则两个都后移，避免出现重复</span></span><br><span class="line">p1++;</span><br><span class="line">p2++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p1 != (*it_cur).posting.<span class="built_in">end</span>())<span class="comment">//如果串1没有合并完则将串1后面部分直接复制</span></span><br><span class="line">&#123;</span><br><span class="line">temp.<span class="built_in">push_back</span>(*p1);</span><br><span class="line">p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p2 != (*it_next).posting.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">temp.<span class="built_in">push_back</span>(*p2);</span><br><span class="line">p2++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除结果集重复部分</span></span><br><span class="line">temp.<span class="built_in">erase</span>(<span class="built_in">unique</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>()), temp.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">(*it_cur).frequence++;<span class="comment">//词频增加</span></span><br><span class="line">(*it_cur).posting.<span class="built_in">assign</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>());<span class="comment">//将结果复制</span></span><br><span class="line">indexList.<span class="built_in">erase</span>(it_next);<span class="comment">//删除重复项</span></span><br><span class="line">temp.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">if</span> (it_cur + <span class="number">1</span> != indexList.<span class="built_in">end</span>()) it_next = it_cur + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">it_cur++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*失败代码</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; indexList.size()-1; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">item1 = indexList[i];</span></span><br><span class="line"><span class="comment">item2 = indexList[i + 1];</span></span><br><span class="line"><span class="comment">int j = 1;//j是相对于item1的偏移量</span></span><br><span class="line"><span class="comment">while (item1.term == item2.term)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">vector&lt;int&gt; temp(item1.posting.size()+item2.posting.size());</span></span><br><span class="line"><span class="comment">sort(item1.posting.begin(), item1.posting.end());</span></span><br><span class="line"><span class="comment">sort(item2.posting.begin(), item2.posting.end());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">merge(item1.posting.begin(), item1.posting.end(), item2.posting.begin(), item2.posting.end(), temp.begin());</span></span><br><span class="line"><span class="comment">indexList[i].posting.assign(temp.begin(), temp.end());</span></span><br><span class="line"><span class="comment">indexList.erase(indexList.begin()+i+j);</span></span><br><span class="line"><span class="comment">indexList[i].frequence++;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">item2 = indexList[i + j];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">j = 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始使用的是普通的 for 循环，但是发现随着元素的删除，循环次数应该改变，因此改成了迭代器加 while 的方式。</p><p>迭代器还是个蛮有用的东西，就是一个封装得比较好的指针。</p><h2 id="main-测试"><a href="#main-测试" class="headerlink" title="main 测试"></a>main 测试</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CIndex.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string fileList[<span class="number">6</span>] =</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;doc1.txt&quot;</span>,</span><br><span class="line"><span class="string">&quot;doc2.txt&quot;</span>,</span><br><span class="line"><span class="string">&quot;doc3.txt&quot;</span>,</span><br><span class="line"><span class="string">&quot;doc4.txt&quot;</span>,</span><br><span class="line"><span class="string">&quot;doc5.txt&quot;</span>,</span><br><span class="line"><span class="string">&quot;doc6.txt&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">CIndex <span class="title">in</span><span class="params">(fileList,<span class="number">6</span>)</span></span>;</span><br><span class="line">in.<span class="built_in">showCollection</span>();</span><br><span class="line">in.<span class="built_in">indexCollection</span>();</span><br><span class="line">in.<span class="built_in">mergeIndex</span>();</span><br><span class="line">in.<span class="built_in">showIndexList</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老鼠和毒药问题</title>
      <link href="/posts/rats_and_poison/"/>
      <url>/posts/rats_and_poison/</url>
      
        <content type="html"><![CDATA[<p>昨天在上完课回宿舍的路上，楠哥提起了一道他在某个基础知识竞赛上遇到的题目，我觉得解法很巧妙，分享记录一下。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>有 1024 瓶水，其中一瓶有毒，你有 10 只老鼠用于试毒（这里是题目假设，所以别下不了手让老鼠试毒 OVO），老鼠如果喝到毒药，会在一星期后死亡。你有一周时间，如何找出这一瓶毒药？</p><span id="more"></span><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>楠哥说他刚开始想用二分，可是时间上不允许。</p><p>也就是把瓶子分两组，每组的瓶子里都倒出一点混合在一起给一只老鼠喝，哪一组的老鼠中毒了，就再把这一组的瓶子分两组，以此类推。但是这样时间上来不及，第一周缩小范围到 512 瓶……第九周 2 瓶，第十周找到。耗时太长。</p><hr><p>于是他想到了另一种解法：</p><p>给每个瓶子标号，给老鼠也标号 0 到 9。</p><p>从逻辑上将 10 只老鼠当成 10 位的二进制数。</p><p>将瓶子的编号转换为二进制数，比如第 5 号瓶子转换为第 101 号瓶子，将编号第 0 位（即最右边一位）为 1 的水给 0 号老鼠喝，编号第 1 位（即从右边数第二位）为 1 的水给 1 号老鼠喝，以此类推。</p><p>也就是说，0 号老鼠喝了 1,11,101,111……这些瓶子的水，1 号老鼠喝了 10,11，110,111……这些瓶子的水，后面的老鼠也是如此。</p><p>如果一周时间到，0 号老鼠嗝屁了，那么就说明有毒的水的编号的第 0 位（最右边的位）为 1；如果 1 号老鼠嗝屁了，就说明有毒的水编号的第 1 位是 1……</p><p>最后根据 10 只老鼠中毒情况，得到一个 10 位的二进制数，这个数转换为十进制就是毒药的编号。</p><p>我觉得这个解法很巧妙。</p><p>这让我想起了在听我们学校 ACM 协会的某节课的时候提到的状态压缩，也是使用二进制的，不过我当时没听懂，也就没记下来。</p><p>老鼠有 10 只，它们的死活可以表示 2^10 种状态，恰好是 1024 种。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记3封装爬虫类</title>
      <link href="/posts/python_spider_note3class_spider/"/>
      <url>/posts/python_spider_note3class_spider/</url>
      
        <content type="html"><![CDATA[<p>在完成了基本的爬取任务之后，接到了将其封装为一个爬虫类的任务</p><p>传送门：</p><ul><li><p><a href="https://yxchangingself.xyz/posts/python_spider_note1simple_spider/#more">python 爬虫学习笔记 1 一个简单的爬虫</a></p></li><li><p><a href="https://yxchangingself.xyz/posts/python_spider_note2login_and_database/#more">python 爬虫学习笔记 2 模拟登录与数据库</a></p></li></ul><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>转载注明出处。</p><h1 id="任务介绍"><a href="#任务介绍" class="headerlink" title="任务介绍"></a>任务介绍</h1><p>1、尝试不使用 session 去进行爬取，最好能将 cookies 保存下来可以供下次使用。<br>2、第二个是尝试将这些封装成面向对象的方式，模拟登陆，爬取，解析，写入数据库这几个部分分离开来。</p><p>先做第二个任务</p><h1 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h1><h2 id="190310-周日"><a href="#190310-周日" class="headerlink" title="190310 周日"></a>190310 周日</h2><h3 id="创建爬虫类"><a href="#创建爬虫类" class="headerlink" title="创建爬虫类"></a>创建爬虫类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">spider</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    爬虫类</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.session=requests.session()<span class="comment">#初始化登录session</span></span><br><span class="line">        <span class="variable language_">self</span>.is_login=<span class="literal">False</span><span class="comment">#登录状态</span></span><br></pre></td></tr></table></figure><h3 id="获取登录所需信息"><a href="#获取登录所需信息" class="headerlink" title="获取登录所需信息"></a>获取登录所需信息</h3><p>获取登录信息（账号密码以及校验码）这部分与登录可以分开，单独写一个成员函数。</p><p>在输入密码这个地方，本来查到可以使用<code>getpass</code>这个库里面的<code>getpass()</code>函数来使用类似 linux 的密码不回显，用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">passwd=getpass.getpass()</span><br><span class="line"><span class="built_in">print</span>(passwd)<span class="comment">#测试用输出</span></span><br></pre></td></tr></table></figure><p>但是直接在 pycharm 里面运行是会卡在输入那里，并且也会回显。后来查到了，这个方法是在命令行当中才管用，我试了一下在 python 命令行中使用，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">import</span> getpass</span><br><span class="line">&gt;&gt;&gt;passwd=getpass.getpass()</span><br><span class="line">Warning: Password <span class="built_in">input</span> may be echoed.</span><br><span class="line">Password: &gt;? <span class="number">123</span></span><br><span class="line">&gt;&gt;&gt;<span class="built_in">print</span>(passwd)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>虽然可以使用了，但是仍然会回显。所以这个命令行说的应该不是 python 命令行，而是 cmd 或者 shell。</p><p>在虚拟环境的 cmd 里面，成功了，Password 后面未回显我的输入，下面的数字是测试用的输出，将密码打印出来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(venv) F:\DEVELOP\py_develop\spider&gt;python test.py</span><br><span class="line">Password:</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>不过为了方便调试代码，我还是使用了<code>input()</code>函数</p><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/AaronFan/p/6057224.html">python3-password 在输入密码时隐藏密码-博客园</a></li><li><a href="https://www.cnblogs.com/Richardzhu/p/5162289.html">Python 之控制台输入密码的方法-博客园</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_login_data</span>(<span class="params">self,login_url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取登录需要的数据</span></span><br><span class="line"><span class="string">    :param login_url: 登录页面url</span></span><br><span class="line"><span class="string">    :return: 一个存有登录数据的字典</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取登录校验码</span></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(login_url, headers=<span class="variable language_">self</span>.headers).text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    lt = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    dllt = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    _eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    login_data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入学号：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;btn&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">        <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">        <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">        <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">        <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> login_data</span><br></pre></td></tr></table></figure><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        登录并返回已经登录的会话</span></span><br><span class="line"><span class="string">        :return: 已经登录的会话（session）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    login_data=<span class="variable language_">self</span>.get_login_data(login_url)<span class="comment">#获取登录信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 登录</span></span><br><span class="line">    response = <span class="variable language_">self</span>.session.post(login_url, headers=<span class="variable language_">self</span>.headers, data=login_data)</span><br><span class="line">    <span class="keyword">if</span> response.url!=login_url:<span class="comment">#如果没有跳转回登录页面，那么就是登录成功</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.is_login=<span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.session</span><br></pre></td></tr></table></figure><h3 id="day8-进度"><a href="#day8-进度" class="headerlink" title="day8 进度"></a>day8 进度</h3><ol><li>了解了一下 Python 类与对象的语法，尝试将代码封装到类中（一些中间代码未保留），不过想要将它改的有通用性（能够爬取其他网站）有些困难，还是先固定只能爬取信息门户</li><li>接下来的计划：将类完成之后再慢慢优化，学习使用 cookie 代替 session 保持登录，以及数据库的更多知识</li></ol><h2 id="190311-周一"><a href="#190311-周一" class="headerlink" title="190311 周一"></a>190311 周一</h2><h3 id="day9-进度"><a href="#day9-进度" class="headerlink" title="day9 进度"></a>day9 进度</h3><ol><li>图书馆借了一本 mysql 的书籍，在 mysql 命令行上练习创建数据库，表以及字段的操作</li><li>在将代码封装成类的过程中，学习了如何将参数作为一个字典传入，以及将一个字典作为参数传入</li></ol><h2 id="190312-周二"><a href="#190312-周二" class="headerlink" title="190312 周二"></a>190312 周二</h2><h3 id="获取单页目录内的公告-url"><a href="#获取单页目录内的公告-url" class="headerlink" title="获取单页目录内的公告 url"></a>获取单页目录内的公告 url</h3><p>目录网页的内容：</p><ul><li>关于……的通知</li><li>关于……获奖</li><li>……</li><li>2700 条记录，分为 138 页显示，下一页</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_url_from_cata</span>(<span class="params">self,url,params</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    返回当前页面的url组成的列表</span></span><br><span class="line"><span class="string">    :param url: 无参数的url#如：http://portal.xxx.edu.cn/detach.portal</span></span><br><span class="line"><span class="string">    :param params:url的？后参数#如：?pageIndex=1</span></span><br><span class="line"><span class="string">    :return:以页面指向的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url域名部分</span></span><br><span class="line">    <span class="comment">#如：http://portal.xxx.edu.cn</span></span><br><span class="line">    base=url.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    base=base[<span class="number">0</span>]+<span class="string">&#x27;//&#x27;</span>+base[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取当前页所有链接</span></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(url,params=params).text<span class="comment">#用params参数来拼接参数</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    rss_title = soup.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;rss-title&#x27;</span>)<span class="comment">#获取所有链接</span></span><br><span class="line"></span><br><span class="line">    result_list=[]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> rss_title:</span><br><span class="line">        title=url.get_text().strip()</span><br><span class="line">        page_url=base+<span class="string">&#x27;/&#x27;</span>+url[<span class="string">&#x27;href&#x27;</span>]<span class="comment">#将url拼接完整</span></span><br><span class="line">        l=(title,page_url)</span><br><span class="line">        result_list.append(l)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(result_list)</span></span><br><span class="line">    <span class="keyword">return</span> result_list</span><br></pre></td></tr></table></figure><h3 id="获取所有目录内的公告-url"><a href="#获取所有目录内的公告-url" class="headerlink" title="获取所有目录内的公告 url"></a>获取所有目录内的公告 url</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_url_from_cata_all</span>(<span class="params">self, url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取页面的底部跳转到其他页的链接并获取目录，给出一个目录页的url，获取相关的所有目录页的url并获取链接</span></span><br><span class="line"><span class="string">    :param url: 其中任何一个目录页的url#如：http://portal.xxx.edu.cn/detach.portal?pageIndex=1</span></span><br><span class="line"><span class="string">    :return:以所有页面的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取除去参数之后的url</span></span><br><span class="line">    <span class="comment">#如：http://portal.xxx.edu.cn/detach.portal</span></span><br><span class="line">    base=url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(url).text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取页数</span></span><br><span class="line">    reg = <span class="string">&#x27;共.*?条记录 分(.*?)页显示&#x27;</span></span><br><span class="line">    reg = re.<span class="built_in">compile</span>(reg, re.S)</span><br><span class="line">    num = <span class="built_in">int</span>(re.findall(reg, html)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url</span></span><br><span class="line">    para = &#123;</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.pmn&#x27;</span>: <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.ia&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;bulletinsMoreView&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;search&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;groupid&#x27;</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.pen&#x27;</span>: <span class="string">&#x27;pe65&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ret=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num+<span class="number">1</span>):</span><br><span class="line">        ret.extend(<span class="variable language_">self</span>.get_url_from_cata(base,params=para))</span><br><span class="line">        para[<span class="string">&#x27;pageIndex&#x27;</span>] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h3 id="day10-进度"><a href="#day10-进度" class="headerlink" title="day10 进度"></a>day10 进度</h3><p>实现了自动获取目录页数，并从每一页目录获取所有的 url，返回当前所有公告的 url 的列表</p><h2 id="190313-周三"><a href="#190313-周三" class="headerlink" title="190313 周三"></a>190313 周三</h2><h3 id="获取正文"><a href="#获取正文" class="headerlink" title="获取正文"></a>获取正文</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">self,url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    提取页面中的公告正文</span></span><br><span class="line"><span class="string">    :param url: 页面url</span></span><br><span class="line"><span class="string">    :return: 正文</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(url, headers=<span class="variable language_">self</span>.headers).text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bulletin_content = soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bulletin-content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    bulletin_content =bulletin_content.get_text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bulletin_content</span><br></pre></td></tr></table></figure><h3 id="保存到-txt"><a href="#保存到-txt" class="headerlink" title="保存到 txt"></a>保存到 txt</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_by_txt</span>(<span class="params">self,file_content,file_name</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取单个公告页面的公告并保存到txt</span></span><br><span class="line"><span class="string">    :param file_content:文件内容(str)</span></span><br><span class="line"><span class="string">    :param file_name:输出文件名(str)</span></span><br><span class="line"><span class="string">    :return:无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 转换为可以作为文件名字的形式</span></span><br><span class="line">    reg = <span class="string">r&#x27;[\/:*?&quot;&lt;&gt;|]&#x27;</span></span><br><span class="line">    file_name = re.sub(reg, <span class="string">&quot;&quot;</span>, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(file_content)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;成功保存到&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(file_name))</span><br></pre></td></tr></table></figure><h3 id="保存到-db"><a href="#保存到-db" class="headerlink" title="保存到 db"></a>保存到 db</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_by_db</span>(<span class="params">self,content,title</span>):</span><br><span class="line">    <span class="comment">#未改造完成</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;root&#x27;</span>, db=<span class="string">&#x27;news&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&quot;insert into spider(`title`,`content`) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(title, content))</span><br><span class="line">    db.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经成功保存公告到数据库：“&#123;&#125;”&#x27;</span>.<span class="built_in">format</span>(title))</span><br></pre></td></tr></table></figure><h3 id="day11-进度"><a href="#day11-进度" class="headerlink" title="day11 进度"></a>day11 进度</h3><p>尝试将保存到数据库的函数里面的数据库参数放到函数形参处，怎么弄都觉得不太合适，于是还是将原本的代码放入</p><h2 id="190314-周四"><a href="#190314-周四" class="headerlink" title="190314 周四"></a>190314 周四</h2><h3 id="cookie-保持登录"><a href="#cookie-保持登录" class="headerlink" title="cookie 保持登录"></a>cookie 保持登录</h3><p>参考链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/42950252">Python——Cookie 保存到本地-知乎</a>（解决了问题的主要链接）</li><li><a href="https://blog.csdn.net/qq_33472765/article/details/80738923">爬虫保存 cookies 时重要的两个参数（ignore_discard 和 ignore_expires）的作用</a></li></ul><p>首先是库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar</span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,headers</span>):</span><br><span class="line">    <span class="variable language_">self</span>.session=requests.session()<span class="comment">#初始化登录session</span></span><br><span class="line">    <span class="variable language_">self</span>.is_login=<span class="literal">False</span><span class="comment">#登录状态</span></span><br><span class="line">    <span class="variable language_">self</span>.headers=headers<span class="comment">#头信息</span></span><br><span class="line">    <span class="variable language_">self</span>.cookiejar=http.cookiejar.LWPCookieJar(<span class="string">&#x27;cookie.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="保存-cookie-的函数"><a href="#保存-cookie-的函数" class="headerlink" title="保存 cookie 的函数"></a>保存 cookie 的函数</h4><p>大概是将已登录的 session 对象的 cookies 转换为字典（用了一个类似列表生成式的东西，查了一下，是字典生成式，python 还真是方便，这么多简写方式），然后保存到 cookiejar 对象中，调用<code>save()</code>函数来将 cookie 内容保存到第一个参数指定的文件中，即使 cookie 已经被抛弃和过期。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_cookie</span>(<span class="params">self</span>):</span><br><span class="line">    requests.utils.cookiejar_from_dict(&#123;c.name: c.value <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.session.cookies&#125;, <span class="variable language_">self</span>.cookiejar)</span><br><span class="line">    <span class="comment"># 保存到本地文件</span></span><br><span class="line">    <span class="variable language_">self</span>.cookiejar.save(<span class="string">&#x27;cookies&#x27;</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="加载-cookie-的函数"><a href="#加载-cookie-的函数" class="headerlink" title="加载 cookie 的函数"></a>加载 cookie 的函数</h4><p>首先初始化一个 LWPCookieJar 对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_cookiejar = http.cookiejar.LWPCookieJar()</span><br></pre></td></tr></table></figure><p>接着从文件中加载 cookie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load_cookiejar.load(<span class="string">&#x27;cookies&#x27;</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这里有个问题，这里如果加载失败了（没有这个文件，之前没有保存），需要知道已经失败了。所以使用一个 try 语句块测试一下。</p><p>然后把这个 LWPCookieJar 对象给转换成字典，再转换赋值给 session.cookie，这样就加载成功了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_cookie</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    加载cookie</span></span><br><span class="line"><span class="string">    :return: 是否成功</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    load_cookiejar = http.cookiejar.LWPCookieJar()</span><br><span class="line">    <span class="comment"># 从文件中加载cookies(LWP格式)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        load_cookiejar.load(<span class="string">&#x27;cookies&#x27;</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换成字典</span></span><br><span class="line">    load_cookies = requests.utils.dict_from_cookiejar(load_cookiejar)</span><br><span class="line">    <span class="comment"># 将字典转换成RequestsCookieJar，赋值给session的cookies.</span></span><br><span class="line">    <span class="variable language_">self</span>.session.cookies = requests.utils.cookiejar_from_dict(load_cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="修改后的-login"><a href="#修改后的-login" class="headerlink" title="修改后的 login()"></a>修改后的 login()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        登录并返回已经登录的会话</span></span><br><span class="line"><span class="string">        :return: 已经登录的会话（session）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.load_cookie():</span><br><span class="line">        <span class="variable language_">self</span>.is_login = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment">#获取登录信息</span></span><br><span class="line">        login_data=<span class="variable language_">self</span>.get_login_data(login_url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登录</span></span><br><span class="line">        response = <span class="variable language_">self</span>.session.post(login_url, headers=<span class="variable language_">self</span>.headers, data=login_data)</span><br><span class="line">        <span class="keyword">if</span> response.url!=login_url:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.is_login=<span class="literal">True</span></span><br><span class="line">            <span class="variable language_">self</span>.save_cookie()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.session</span><br></pre></td></tr></table></figure><h3 id="day12-进度"><a href="#day12-进度" class="headerlink" title="day12 进度"></a>day12 进度</h3><ol><li>完成了爬虫类的封装</li><li>使用 http.cookiejar 库实现了登录一次，在 cookie 有效期内不必再次登录的功能</li></ol><h1 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h1><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> http.cookiejar</span><br></pre></td></tr></table></figure><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">spider</span>:</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    爬虫类</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,headers</span>):</span><br><span class="line">        <span class="variable language_">self</span>.session=requests.session()<span class="comment">#初始化登录session</span></span><br><span class="line">        <span class="variable language_">self</span>.is_login=<span class="literal">False</span><span class="comment">#登录状态</span></span><br><span class="line">        <span class="variable language_">self</span>.headers=headers<span class="comment">#头信息</span></span><br><span class="line">        <span class="variable language_">self</span>.cookiejar=http.cookiejar.LWPCookieJar(<span class="string">&#x27;cookie.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="获取登录信息"><a href="#获取登录信息" class="headerlink" title="获取登录信息"></a>获取登录信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_login_data</span>(<span class="params">self,login_url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取登录需要的数据</span></span><br><span class="line"><span class="string">    :param login_url: 登录页面url</span></span><br><span class="line"><span class="string">    :return: 一个存有登录数据的字典</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取登录校验码</span></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(login_url, headers=<span class="variable language_">self</span>.headers).text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    lt = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    dllt = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    _eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    login_data = &#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入学号：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;btn&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">        <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">        <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">        <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">        <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> login_data</span><br></pre></td></tr></table></figure><h2 id="登录-1"><a href="#登录-1" class="headerlink" title="登录"></a>登录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">self,login_url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        登录并返回已经登录的会话</span></span><br><span class="line"><span class="string">        :return: 已经登录的会话（session）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.load_cookie():</span><br><span class="line">        <span class="variable language_">self</span>.is_login = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="comment">#获取登录信息</span></span><br><span class="line">        login_data=<span class="variable language_">self</span>.get_login_data(login_url)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登录</span></span><br><span class="line">        response = <span class="variable language_">self</span>.session.post(login_url, headers=<span class="variable language_">self</span>.headers, data=login_data)</span><br><span class="line">        <span class="keyword">if</span> response.url!=login_url:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.is_login=<span class="literal">True</span></span><br><span class="line">            <span class="variable language_">self</span>.save_cookie()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;登录失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">self</span>.session</span><br></pre></td></tr></table></figure><h2 id="获取单页目录"><a href="#获取单页目录" class="headerlink" title="获取单页目录"></a>获取单页目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_url_from_cata</span>(<span class="params">self,url,params</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    返回当前页面的url组成的列表</span></span><br><span class="line"><span class="string">    :param url: 无参数的url</span></span><br><span class="line"><span class="string">    :param params:url的？后参数</span></span><br><span class="line"><span class="string">    :return:以页面指向的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url域名部分</span></span><br><span class="line">    base=url.split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    base=base[<span class="number">0</span>]+<span class="string">&#x27;//&#x27;</span>+base[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取当前页所有链接</span></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(url,params=params).text<span class="comment">#用params参数来拼接参数</span></span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    rss_title = soup.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;rss-title&#x27;</span>)<span class="comment">#获取所有链接</span></span><br><span class="line"></span><br><span class="line">    result_list=[]</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> rss_title:</span><br><span class="line">        title=url.get_text().strip()</span><br><span class="line">        page_url=base+<span class="string">&#x27;/&#x27;</span>+url[<span class="string">&#x27;href&#x27;</span>]<span class="comment">#将url拼接完整</span></span><br><span class="line">        l=(title,page_url)</span><br><span class="line">        result_list.append(l)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(result_list)</span></span><br><span class="line">    <span class="keyword">return</span> result_list</span><br></pre></td></tr></table></figure><h2 id="获取全部目录"><a href="#获取全部目录" class="headerlink" title="获取全部目录"></a>获取全部目录</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_url_from_cata_all</span>(<span class="params">self, url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取页面的底部跳转到其他页的链接并获取目录，给出一个目录页的url，获取相关的所有目录页的url并获取链接</span></span><br><span class="line"><span class="string">    :param url: 其中任何一个目录页的url</span></span><br><span class="line"><span class="string">    :return:以所有页面的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取除去参数之后的url</span></span><br><span class="line">    base=url.split(<span class="string">&#x27;?&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(url).text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取页数</span></span><br><span class="line">    reg = <span class="string">&#x27;共.*?条记录 分(.*?)页显示&#x27;</span></span><br><span class="line">    num = <span class="built_in">int</span>(re.findall(reg, html)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取url</span></span><br><span class="line">    para = &#123;</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.pmn&#x27;</span>: <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.ia&#x27;</span>: <span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;bulletinsMoreView&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;search&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;groupid&#x27;</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.pen&#x27;</span>: <span class="string">&#x27;pe65&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    ret=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num+<span class="number">1</span>):</span><br><span class="line">        ret.extend(<span class="variable language_">self</span>.get_url_from_cata(base,params=para))</span><br><span class="line">        para[<span class="string">&#x27;pageIndex&#x27;</span>] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure><h2 id="获取正文-1"><a href="#获取正文-1" class="headerlink" title="获取正文"></a>获取正文</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">self,url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    提取页面中的公告正文</span></span><br><span class="line"><span class="string">    :param url: 页面url</span></span><br><span class="line"><span class="string">    :return: 正文</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    html = <span class="variable language_">self</span>.session.post(url, headers=<span class="variable language_">self</span>.headers).text</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bulletin_content = soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bulletin-content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    bulletin_content =bulletin_content.get_text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bulletin_content</span><br></pre></td></tr></table></figure><h2 id="保存到-txt-1"><a href="#保存到-txt-1" class="headerlink" title="保存到 txt"></a>保存到 txt</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_by_txt</span>(<span class="params">self,file_content,file_name</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取单个公告页面的公告并保存到txt</span></span><br><span class="line"><span class="string">    :param file_content:文件内容(str)</span></span><br><span class="line"><span class="string">    :param file_name:输出文件名(str)</span></span><br><span class="line"><span class="string">    :return:无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 转换为可以作为文件名字的形式</span></span><br><span class="line">    reg = <span class="string">r&#x27;[\/:*?&quot;&lt;&gt;|]&#x27;</span></span><br><span class="line">    file_name = re.sub(reg, <span class="string">&quot;&quot;</span>, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(file_content)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;成功保存到&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(file_name))</span><br></pre></td></tr></table></figure><h2 id="保存到数据库"><a href="#保存到数据库" class="headerlink" title="保存到数据库"></a>保存到数据库</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_by_db</span>(<span class="params">self,content,title</span>):</span><br><span class="line">    db = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;root&#x27;</span>, db=<span class="string">&#x27;news&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&quot;insert into spider(`title`,`content`) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(title, content))</span><br><span class="line">    db.commit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经成功保存公告到数据库：“&#123;&#125;”&#x27;</span>.<span class="built_in">format</span>(title))</span><br></pre></td></tr></table></figure><h2 id="保存-cookie"><a href="#保存-cookie" class="headerlink" title="保存 cookie"></a>保存 cookie</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_cookie</span>(<span class="params">self</span>):</span><br><span class="line">    requests.utils.cookiejar_from_dict(&#123;c.name: c.value <span class="keyword">for</span> c <span class="keyword">in</span> <span class="variable language_">self</span>.session.cookies&#125;, <span class="variable language_">self</span>.cookiejar)</span><br><span class="line">    <span class="comment"># 保存到本地文件</span></span><br><span class="line">    <span class="variable language_">self</span>.cookiejar.save(<span class="string">&#x27;cookies&#x27;</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="加载-cookie"><a href="#加载-cookie" class="headerlink" title="加载 cookie"></a>加载 cookie</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_cookie</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    加载cookie</span></span><br><span class="line"><span class="string">    :return: 是否成功</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    load_cookiejar = http.cookiejar.LWPCookieJar()</span><br><span class="line">    <span class="comment"># 从文件中加载cookies(LWP格式)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        load_cookiejar.load(<span class="string">&#x27;cookies&#x27;</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cookie加载失败&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换成字典</span></span><br><span class="line">    load_cookies = requests.utils.dict_from_cookiejar(load_cookiejar)</span><br><span class="line">    <span class="comment"># 将字典转换成RequestsCookieJar，赋值给session的cookies.</span></span><br><span class="line">    <span class="variable language_">self</span>.session.cookies = requests.utils.cookiejar_from_dict(load_cookies)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">crawl</span>(<span class="params">self,login_url,cata_url</span>):</span><br><span class="line">    <span class="variable language_">self</span>.login(login_url)<span class="comment">#登陆</span></span><br><span class="line">    item_list=<span class="variable language_">self</span>.get_url_from_cata_all(cata_url)<span class="comment">#获取所有标题以及对应链接</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item_list:</span><br><span class="line">        title,url=i<span class="comment">#解包</span></span><br><span class="line">        text=<span class="variable language_">self</span>.get_page(url)<span class="comment">#获取内容</span></span><br><span class="line">        <span class="variable language_">self</span>.save_by_txt(text,title+<span class="string">&#x27;.txt&#x27;</span>)<span class="comment">#保存</span></span><br><span class="line">        <span class="comment">#self.save_by_db(text,title)</span></span><br></pre></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">login_url=<span class="string">&#x27;http://xxx.xxx.xxx.cn/authserver/login?service=http%3A%2F%2Fportal.chd.edu.cn%2F&#x27;</span></span><br><span class="line">cata_url=<span class="string">&#x27;http://xxxxxx.xxx.xxx.cn/detach.portal?pageIndex=1&amp;pageSize=&amp;.pmn=view&amp;.ia=false&amp;action=bulletinsMoreView&amp;search=true&amp;groupid=all&amp;.pen=pe65&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line">spiderman=spider(headers)</span><br><span class="line">spiderman.crawl(login_url, cata_url)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记2模拟登录与数据库</title>
      <link href="/posts/python_spider_note2login_and_database/"/>
      <url>/posts/python_spider_note2login_and_database/</url>
      
        <content type="html"><![CDATA[<p>为了加入学校里面一个技术小组，我接受了写一个爬取学校网站通知公告的任务。这个任务比以前写的爬虫更难的地方在于，需要模拟登录才能获得页面，以及将得到的数据存入数据库。</p><p>本文按照日期来记录我完成任务的过程，然后再整理一遍全部代码。读者可以通过侧栏目录跳转阅读。不介绍库的安装。</p><p>传送门：<a href="https://yxchangingself.xyz/posts/python_spider_note1simple_spider/#more">爬虫学习笔记 1</a></p><span id="more"></span><h1 id="转载声明"><a href="#转载声明" class="headerlink" title="转载声明"></a>转载声明</h1><p><strong>关于参考链接：</strong>本文用到的其他博客的链接都以（我自己对内容的概括或者文章原标题-来源网站-作者名）的格式给出，关于作者名，只有博客作者自己明确声明为“原创”，我才会加上作者名。引用的文章内容我会放在来源链接的下方。</p><p><strong>关于本文：</strong>我发一下链接都注明出处了，如果想转载，也请这样做。作者<strong>憧憬少</strong>，链接的话看浏览器地址栏。</p><h1 id="任务介绍"><a href="#任务介绍" class="headerlink" title="任务介绍"></a>任务介绍</h1><p>爬取信息门户新闻并且存入数据库。</p><p>首先分解任务：</p><ol><li>实现爬取综合新闻页面的公开新闻存入 markdown 文件中(190303 完成)</li><li>将数据存到数据库（190304 完成）</li><li>学习模拟登录（190305 到 190307 完成）</li><li>爬取信息门户新闻（190308 完成）</li><li>（进阶）将代码进行封装、优化（目前未封装）</li><li>（进阶）动态更新（目前未着手）</li></ol><h1 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h1><h2 id="190303-周日"><a href="#190303-周日" class="headerlink" title="190303 周日"></a>190303 周日</h2><h3 id="练习爬取公开页面"><a href="#练习爬取公开页面" class="headerlink" title="练习爬取公开页面"></a>练习爬取公开页面</h3><p>我的<a href="https://yxchangingself.xyz/posts/python_spider_note1simple_spider/#more">第一个爬虫</a>是在 2 月多的时候在家写的，那个只是个简单的爬虫，目标是公开的页面，不需要模拟登录，也不需要存储到数据库，直接存到 txt 文件中。</p><p>先爬取学校官网的综合新闻页面复习一下。</p><p>首先讲一下我的思路：</p><p>由于新闻和公告页面通常是有一个目录页面的，也就是包含子页面的链接，在目录的子页面内才是正文内容。</p><p>假设这一页目录有三个新闻，就像是下面：</p><ul><li>新闻目录<ul><li>新闻一</li><li>新闻二</li><li>新闻三</li><li>点击查看下一页</li></ul></li></ul><p>这样的结构。</p><p>如果要写一个爬虫函数来爬取所有新闻页面，那么就要从目录着手。目录中含有前往别的新闻页面的链接，所以可以在目录页获取本页所有新闻的链接，遍历所有链接并提取新闻内容。</p><p>至于翻页也可以这样做到，“下一页”按钮也是一个链接，可以通过这个链接获取到下一页的内容。翻页部分原理比较简单，我是先攻克其他难关，把它留到最后写的。</p><h4 id="提取单页面新闻"><a href="#提取单页面新闻" class="headerlink" title="提取单页面新闻"></a>提取单页面新闻</h4><p>首先是提取单个页面的新闻。向目标 url 发出访问请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNews</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    提取页面的新闻与图片并存储为markdown文件</span></span><br><span class="line"><span class="string">    :param url: 要爬取的目标网页url</span></span><br><span class="line"><span class="string">    :return: 无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#发送请求</span></span><br><span class="line">    r=requests.get(url)<span class="comment">#r为response对象</span></span><br><span class="line">    html=r.text<span class="comment">#r.text是请求的网页的内容</span></span><br><span class="line">    <span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h5 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h5><p>这里遇到了第一个问题，提取到的页面有乱码。</p><p>解决方法：先获取响应对象的二进制响应内容，然后将其编码为 utf8</p><p><strong>参考链接：</strong></p><ul><li><a href="https://blog.csdn.net/t8116189520/article/details/78930009">python 中 response.text 与 response.content 的区别-CSDN</a></li></ul><blockquote><p>requests.content 返回的是二进制响应内容</p><p>而 requests.text 则是根据网页的响应来猜测编码</p></blockquote><ul><li><a href="https://www.cnblogs.com/gavin-num1/p/5170247.html">UNICODE,GBK,UTF-8 区别（一个比较好的编码的教程，便于理解编码的概念）-博客园</a></li><li><a href="https://blog.csdn.net/w_linux/article/details/78370218">Python 解决抓取内容乱码问题（decode 和 encode 解码）-CSDN-浅然_</a></li></ul><blockquote><p>字符串在 Python 内部的表示是 unicode 编码，在做编码转换时，通常需要以 unicode 作为中间编码，即先将其他编码的字符串解码（decode）成 unicode，再从 unicode 编码（encode）成另一种编码。</p><p>decode 的作用是将其他编码的字符串转换成 unicode 编码，如 str1.decode(‘gb2312’)，表示将 gb2312 编码的字符串 str1 转换成 unicode 编码。</p><p>encode 的作用是将 unicode 编码转换成其他编码的字符串，如 str2.encode(‘utf-8’)，表示将 unicode 编码的字符串 str2 转换成 utf-8 编码。</p></blockquote><p>修改代码为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">r=requests.get(url)</span><br><span class="line">html=r.content<span class="comment">#获取二进制字节流</span></span><br><span class="line">html=html.decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#转换为utf8编码（该网页使用的是utf8编码）</span></span><br></pre></td></tr></table></figure><h5 id="解析网页（bs4）"><a href="#解析网页（bs4）" class="headerlink" title="解析网页（bs4）"></a>解析网页（bs4）</h5><p>一开始我和之前一样使用正则表达式来提取，但是不够熟悉，总是写不出匹配的上的正则表达式。还是使用另一个东西——BeautifulSoup 库</p><p>具体如何使用请查看其他教程，本文只说我自己用到的部分。</p><p><strong>参考链接：</strong></p><ul><li><p><a href="https://blog.csdn.net/qq_42331423/article/details/80796683">Python 爬虫常用的几种数据提取方式-CSDN-凯里潇</a></p></li><li><p><a href="https://www.bilibili.com/video/av18202461?p=11">零基础入门 python3 爬虫-bilibili</a>（里面的视频 p11）</p></li><li><p><a href="https://blog.csdn.net/qq_41686130/article/details/79856474">beautifulsoup（基本选择器，标准选择器，css 选择器）-CSDN-Halosec_Wei</a>（基本上是上面一个 b 站链接的文字版，不知道是不是同一个人）</p></li><li><p><a href="https://www.jb51.net/article/65287.htm">beautifulsoup 详细教程-脚本之家</a></p></li><li><p><a href="https://blog.csdn.net/kikaylee/article/details/56841789">beautifulsoup 基本用法总结-CSDN-kikay</a></p></li></ul><blockquote><p>BeautifulSoup 是 Python 的一个库，最主要的功能就是从网页爬取我们需要的数据。BeautifulSoup 将 html 解析为对象进行处理，全部页面转变为字典或者数组，相对于正则表达式的方式，可以大大简化处理过程。</p></blockquote><p>我目前的理解是，这个 BeautifulSoup 库需要用到其他 html 解析库，可以使用 python 自带的，也可以安装第三方库，其他的库就像功能扩展插件一样，没有的话它自己也能解析。我安装了名为 lxml 的解析库。</p><p>查看源代码，找到网页中有关新闻的代码，手动将其格式化之后如下（内容不重要，省略）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;arti-title&quot;</span>&gt;</span>标题省略<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;arti-metas&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arti-update&quot;</span>&gt;</span>发布时间：2019-01-23<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arti-update1&quot;</span>&gt;</span>作者：xx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arti-update2&quot;</span>&gt;</span>来源：xxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;entry&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">&quot;read&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wp_articlecontent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>新闻前言省略<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>新闻内容省略<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">&quot;556&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">height</span>=<span class="string">&quot;320&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">align</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">src</span>=<span class="string">&quot;url省略&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">border</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;text-align:right;&quot;</span>&gt;</span>（审稿：xx <span class="symbol">&amp;nbsp;</span>网络编辑：xx）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着上面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解析html</span></span><br><span class="line">soup=BeautifulSoup(html,<span class="string">&quot;lxml&quot;</span>)<span class="comment">#返回已解析的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取标题</span></span><br><span class="line">title=soup.find(<span class="string">&#x27;h1&#x27;</span>,class_=<span class="string">&#x27;arti-title&#x27;</span>).string</span><br><span class="line"><span class="comment">#获取时间</span></span><br><span class="line">update=soup.find(<span class="string">&#x27;span&#x27;</span>,class_=<span class="string">&#x27;arti-update&#x27;</span>).string</span><br><span class="line"><span class="comment">#获取正文标签</span></span><br><span class="line">content=soup.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;wp_articlecontent&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="提取图片"><a href="#提取图片" class="headerlink" title="提取图片"></a>提取图片</h5><p>我打算将新闻保存到 markdown 文件中，提取新闻中的图片的链接的地址，这样在 md 文件中就能显示出图片了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取图片链接</span></span><br><span class="line">base=<span class="string">&#x27;学校官网url，用于和img标签中的相对地址拼接成绝对地址&#x27;</span></span><br><span class="line">imgsTag=content.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">imgsUrl=[]</span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> imgsTag:</span><br><span class="line">    imgsUrl.append(base+img[<span class="string">&#x27;src&#x27;</span>])<span class="comment">#拼接成完整的url</span></span><br><span class="line">    img.extract()<span class="comment">#删除图片标签</span></span><br></pre></td></tr></table></figure><h5 id="删除多余标签"><a href="#删除多余标签" class="headerlink" title="删除多余标签"></a>删除多余标签</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除多余标签</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> content.find_all(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="string">&#x27;style&#x27;</span>:<span class="string">&quot;text-align:center;&quot;</span>&#125;):</span><br><span class="line">    p.extract()</span><br><span class="line">p=content.find(<span class="string">&#x27;p&#x27;</span>, &#123;<span class="string">&#x27;style&#x27;</span>: <span class="string">&quot;text-align:right;&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">None</span>):</span><br><span class="line">    p.extract()</span><br></pre></td></tr></table></figure><h5 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接成字符串</span></span><br><span class="line"><span class="comment">#后来知道这样的提取方式其实不能完全提取到所有内容</span></span><br><span class="line">fileContent=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> content.contents:<span class="comment">#遍历正文内容的所有子标签</span></span><br><span class="line">    <span class="keyword">if</span>(i.string!=<span class="literal">None</span>):<span class="comment">#如果子标签里面有内容</span></span><br><span class="line">        <span class="comment">#print(i.string)#调试</span></span><br><span class="line">        fileContent+=i.string<span class="comment">#基本只剩下p标签了</span></span><br><span class="line">        fileContent+=<span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#保存到md文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.md&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">    fout.write(fileContent)</span><br></pre></td></tr></table></figure><h5 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup<span class="comment">#第4个版本改名bs4而不是全名那么长了</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNews</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    提取页面的新闻与图片并存储为markdown文件</span></span><br><span class="line"><span class="string">    :param url: 要爬取的目标网页url</span></span><br><span class="line"><span class="string">    :return: 无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#发出请求</span></span><br><span class="line">    r=requests.get(url)</span><br><span class="line">    html=r.content</span><br><span class="line">    html=html.decode(<span class="string">&#x27;utf-8&#x27;</span>)<span class="comment">#转换编码</span></span><br><span class="line">    <span class="comment">#解析html</span></span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">    content=soup.article</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取标题</span></span><br><span class="line">    title=soup.find(<span class="string">&#x27;h1&#x27;</span>,class_=<span class="string">&#x27;arti-title&#x27;</span>).string</span><br><span class="line">    <span class="comment">#获取时间</span></span><br><span class="line">    update=soup.find(<span class="string">&#x27;span&#x27;</span>,class_=<span class="string">&#x27;arti-update&#x27;</span>).string</span><br><span class="line">    <span class="comment">#获取正文</span></span><br><span class="line">    content=soup.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;wp_articlecontent&#x27;</span>)</span><br><span class="line">    <span class="comment">#获取图片链接</span></span><br><span class="line">    base=<span class="string">&#x27;http://xxxxx.xxx&#x27;</span><span class="comment">#学校官网url，用于和img标签中的相对地址拼接成绝对地址</span></span><br><span class="line">    imgsTag=content.find_all(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    imgsUrl=[]</span><br><span class="line">    <span class="keyword">for</span> img <span class="keyword">in</span> imgsTag:</span><br><span class="line">        imgsUrl.append(base+img[<span class="string">&#x27;src&#x27;</span>])<span class="comment">#拼接成完整的url</span></span><br><span class="line">        img.extract()<span class="comment">#删除图片标签</span></span><br><span class="line">    <span class="comment">#删除多余标签</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> content.find_all(<span class="string">&#x27;p&#x27;</span>,&#123;<span class="string">&#x27;style&#x27;</span>:<span class="string">&quot;text-align:center;&quot;</span>&#125;):</span><br><span class="line">        p.extract()</span><br><span class="line">    p=content.find(<span class="string">&#x27;p&#x27;</span>, &#123;<span class="string">&#x27;style&#x27;</span>: <span class="string">&quot;text-align:right;&quot;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span>(p!=<span class="literal">None</span>):</span><br><span class="line">        p.extract()</span><br><span class="line">    <span class="comment"># 拼接成字符串</span></span><br><span class="line">    fileContent=<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content.contents:</span><br><span class="line">        <span class="keyword">if</span>(i.string!=<span class="literal">None</span>):</span><br><span class="line">            <span class="comment">#print(i.string)#调试</span></span><br><span class="line">            fileContent+=i.string</span><br><span class="line">            fileContent+=<span class="string">&#x27;\n\n&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.md&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(fileContent)</span><br></pre></td></tr></table></figure><h4 id="提取多页面新闻"><a href="#提取多页面新闻" class="headerlink" title="提取多页面新闻"></a>提取多页面新闻</h4><p>原理在上面说了，提取完单页基本上就完成了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNewsContents</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    爬取目录页面链接到的页面</span></span><br><span class="line"><span class="string">    :param url: 新闻目录页面的url</span></span><br><span class="line"><span class="string">    :return: 无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#获取网页内容</span></span><br><span class="line">    r=requests.get(url)<span class="comment">#以get方式访问</span></span><br><span class="line">    html=r.content</span><br><span class="line">    html=html.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment">#获取每篇新闻的链接</span></span><br><span class="line">    base=<span class="string">&#x27;http://xxxxx.xxx&#x27;</span><span class="comment">#学校官网url，用于和相对地址拼接成绝对地址</span></span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> page_url <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;a&#x27;</span>,class_=<span class="string">&#x27;column-news-item&#x27;</span>):</span><br><span class="line">        page_url=base+<span class="string">&#x27;/&#x27;</span>+page_url[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(page_url)</span><br><span class="line">        getNews(page_url)<span class="comment">#调用提取单页函数</span></span><br></pre></td></tr></table></figure><h3 id="day1-进度"><a href="#day1-进度" class="headerlink" title="day1 进度"></a>day1 进度</h3><ol><li>实现爬取长安大学综合新闻页面的公开新闻存入 markdown 文件中</li><li>复习了 requests 库的使用</li><li>学习了 BeautifulSoup4 库的基本使用</li></ol><h2 id="190304-周一"><a href="#190304-周一" class="headerlink" title="190304 周一"></a>190304 周一</h2><p>这一天主要是将前一天爬取的数据存入数据库。</p><h3 id="将数据存入数据库"><a href="#将数据存入数据库" class="headerlink" title="将数据存入数据库"></a>将数据存入数据库</h3><h4 id="安装-MySQL-数据库"><a href="#安装-MySQL-数据库" class="headerlink" title="安装 MySQL 数据库"></a>安装 MySQL 数据库</h4><p>参考链接：</p><ul><li><a href="https://www.bilibili.com/video/av18202461/?p=4">零基础入门 python3 爬虫-bilibili</a>（里面的视频 p4）</li></ul><h4 id="使用-MySQL-Workbench"><a href="#使用-MySQL-Workbench" class="headerlink" title="使用 MySQL Workbench"></a>使用 MySQL Workbench</h4><p>MySQL Workbench 是一个可视化工具，安装 MySQL 的时候自带（我安装的是最新版的），在安装目录找到它的 exe 然后加个快捷方式在桌面，可以方便地查看数据和执行 SQL 查询指令，具体使用方法可以问度娘。我现在也不是很会。</p><p>我创建的数据库名为 news，里面创建了一个数据表 chdnews。</p><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>和大多数数据库一样，MySQL 是 C&#x2F;S 模式的，也就是客户端（client）&#x2F;服务端（server）模式的。数据库有可能在远程服务器上。想要使用数据库，就需要连接到数据库。</p><p>python 中要使用数据库需要一个 pymysql 库。</p><p>下面是连接的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="comment">#连接数据库</span></span><br><span class="line">db = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;root&#x27;</span>, db=<span class="string">&#x27;news&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个连接函数看参数名就可以看出含义了。</p><ul><li>host：主机 ip，127.0.0.1 是回传地址，指本机。也就是连接本电脑的 MySQL 的意思</li><li>port：端口号，用来和 ip 一起指定需要使用数据库的软件。在安装的时候会让你设置，默认 3306</li><li>user&amp;passwd：用户名和密码，在安装的时候已经设置好了</li><li>db：你要连接的数据库的名字。一台电脑上可以有很多数据库，数据库里面可以有很多数据表。</li><li>charset：字符编码</li></ul><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>接着可以准备一个游标，游标大概是一个用于存储结果集开头地址的指针吧，我是这么理解的。在我学了更多数据库知识后可能会更新这一部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建游标</span></span><br><span class="line">cursor = db.cursor()</span><br></pre></td></tr></table></figure><p>接着执行 SQL 的插入语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#插入</span></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into chdnews(`title`,`article`) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(title,fileContent))<span class="comment">#此处变量为上文代码中的变量</span></span><br></pre></td></tr></table></figure><p>这里的 SQL 语句是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 数据表名(字段名<span class="number">1</span>，字段名<span class="number">2</span>) <span class="keyword">values</span>(值<span class="number">1</span>，值<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>后面的<code>format</code>函数是 python 的格式化函数，将变量的值加入到字符串中对应位置。</p><p>最后提交：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提交更改</span></span><br><span class="line">db.commit()</span><br></pre></td></tr></table></figure><p>接着打开 workbench，就会发现已经存入数据库了。（你得把代码放在上面提取单页新闻的函数那里，放在保存到文件的那部分代码那儿）</p><h3 id="day2-进度"><a href="#day2-进度" class="headerlink" title="day2 进度"></a>day2 进度</h3><ol><li>下载并安装 MySQL 以及 MySQL Workbench</li><li>使用 pymysql 库进行数据库的连接，实现了把第一天得到的数据存入数据库</li></ol><h2 id="190305-周二"><a href="#190305-周二" class="headerlink" title="190305 周二"></a>190305 周二</h2><h3 id="初步了解模拟登录"><a href="#初步了解模拟登录" class="headerlink" title="初步了解模拟登录"></a>初步了解模拟登录</h3><p>最后的任务需要爬取登录后才能查看的页面，于是我去搜索了很多博客，只放一部分对我有帮助的链接。</p><p>参考链接：</p><ul><li><p><a href="https://www.cnblogs.com/woainifanfan/p/5754580.html">模拟登录 CSDN-博客园</a></p></li><li><p><a href="https://www.cnblogs.com/wodeboke-y/p/9873609.html">模拟登录 github-博客园</a></p></li></ul><p>首先查看一下需要的登录数据：</p><ol><li>打开登录网页，用 F12 打开开发者工具，选择 network（网络）选项卡</li><li>登录你的账号，此时控制台会显示一大堆请求与响应，找到以 post 方式发送的请求，一般排在第一个</li><li>那里会显示几个栏目，找到<code>Form Data</code>（表单数据），这个里面是你填写登录表单之后使用 POST 方式发送给服务端的内容。这里面除了自己填写的账号密码之外还有一些东西，比如下图的<code>lt</code>,<code>dllt</code>,<code>execution</code>,<code>_eventId</code>,<code>rmShown</code>这些都是在表单的隐藏域中，查看登录页面的源代码是可以看的到的。这些隐藏起来的东西是为了检验你是否是从浏览器进来的，只要获取到这些东西，再加上头部信息，就能伪装成浏览器了</li><li>至于头部信息，在下图也可以看到我折叠起来的几个栏目，有一个是<code>Request Headers</code>，这是我们在点击登录按钮时发送的 POST 请求信息的信息头。将里面的<code>User-Agent</code>给复制到你代码里面存在一个字典里面等会用</li><li>把头部信息和表单数据都看一下，准备一下</li></ol><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/spider_f12_form_data.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录前的准备</span></span><br><span class="line">login_url = <span class="string">&#x27;http://xxxx.xxx&#x27;</span><span class="comment">#登录页面的url</span></span><br><span class="line"><span class="comment">#头部信息</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#x27;</span></span><br><span class="line">    <span class="comment">#加上后面这些会后悔的，别加。</span></span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;xx.xx.xx.xx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>:<span class="string">&#x27;http://xxx.xxx?xxx=http://xxx.xx&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Origin&#x27;</span>:<span class="string">&#x27;http://xxx.xxx.xx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#登录用的数据</span></span><br><span class="line">login_data=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;你的账号&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;你的密码&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;btn&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lt&#x27;</span>: LT-<span class="number">790162</span>-J9kW2aEFsK3ihu4AzXcovdsJy6cYBM1552123884047-D1Nx-cas，</span><br><span class="line">    <span class="comment">#实际上lt并不能这样写上去，下文会解释。这里记录我自己的错误</span></span><br><span class="line">        <span class="string">&#x27;dllt&#x27;</span>: <span class="string">&#x27;userNamePasswordLogin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;execution&#x27;</span>: <span class="string">&#x27;e1s1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;_eventId&#x27;</span>: <span class="string">&#x27;submit&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;rmShown&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>数据准备好之后就开始登录，使用的是 requests 的另一个方法——post。</p><p>向服务器发出请求（request）的方式有 get 和 post，查看 html 源代码的时候在表单标签处可以看到表单提交的方法。如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;casLoginForm&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像这样写 html 代码会让浏览器在你按下登录按钮的时候以 post 的方式提交表单，也就是以 post 的方式向服务器发起 request，将 form data 发送过去。</p><p>post 方法的好处是在发送过程中会隐藏你的表单数据，不会被直接看到；</p><p>而前面使用过的 get 方法，会把你的表单数据加在 url 后面，网址后边以问号开头，以&amp;连接的就是发送过去的参数。</p><p>涉及登录用 post 比较好，以免轻易泄露密码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#以post方式发出登录请求</span></span><br><span class="line">r=requests.post(login_url,headers=headers,data=login_data)</span><br></pre></td></tr></table></figure><p>按理来说应该可以了呀，为什么不行？仍然得到登录页面。在这一天我折腾了很久，没有得到答案。</p><p>不过在找资料时却学到了其他的一些知识，关于 cookie 和 session。</p><h3 id="cookie-和-session"><a href="#cookie-和-session" class="headerlink" title="cookie 和 session"></a>cookie 和 session</h3><p>我目前的理解（如果不对欢迎留言）：</p><p>http 是无状态协议，两次访问都是独立的，不会保存状态信息。也就是你来过一次，下次再来的时候网站还是当你第一次来。那么怎么知道你来过，从而给你还原之前的数据呢？就有人想出 cookie 和 session 两种方式。</p><p><strong>cookie</strong>（直译：小甜饼）是服务端（网站服务器）收到客户端（你电脑）的 request（请求）的时候和 response（响应）一起发给客户端的数据。客户端把它存在文件里面，并在下一次访问这个网站时将 cookie 随着 request 一起发送过去，这样服务端就会知道你就是之前来过的那个人了。cookie 存储在客户端。</p><ol><li>客户端发送 request</li><li>服务端发送 response 附带一个 cookie（一串数据）</li><li>客户端第二次访问时把 cookie 复制一份一起发过去</li><li>服务端看到你的 cookie 就知道你是谁了</li></ol><p><strong>session</strong>（会话）是在服务端内存中保存的一个数据结构，一旦有客户端来访问，那么就给这个客户端创建一个新的 session 在服务端的内存，并将它的 session ID 随着 response 发回给客户端。客户端第二次访问时，会将被分配的 SID 随着 request 一起发过来，服务端在这边验证 SID 之后就会知道你来过。session 存储在服务端。</p><ol><li>客户端发送 request</li><li>服务端发送 response 并在自己这边创建一个 session（一堆数据）并发送一个 session ID 给客户端</li><li>客户端第二次访问时把 session ID 一起发过去</li><li>服务端看到你的 session ID 就知道你是谁了</li></ol><p>不过这俩是用来保持登录的，我还没登录成功想这个干啥？请看下一天。</p><h3 id="day3-进度"><a href="#day3-进度" class="headerlink" title="day3 进度"></a>day3 进度</h3><ol><li>初步了解 cookie 和 session 的概念</li><li>了解如何使用 chrome 浏览器的控制台查看 post 表单信息</li><li>尝试使用 requests 的 post 方法模拟登录，失败，返回登录页面</li></ol><h2 id="190306-周三"><a href="#190306-周三" class="headerlink" title="190306 周三"></a>190306 周三</h2><h3 id="表单校验码（非验证码）"><a href="#表单校验码（非验证码）" class="headerlink" title="表单校验码（非验证码）"></a>表单校验码（非验证码）</h3><p>怎么弄都不成功，都跳回登录页面。我只好去询问组长这是为什么。</p><p>原来我没发现表单校验码会变的！</p><p>一直没注意啊啊啊啊啊啊！</p><p>我没有认真比对过两次打开的乱码不一样，看结尾一样就以为一样了。其中的<code>lt</code>这个域每次打开网页都是不一样的，随机出的！</p><p>既然知道了问题，就好解决了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取登录校验码</span></span><br><span class="line">html=requests.post(login_url,headers=headers).text</span><br><span class="line">soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">lt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">dllt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">_eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">login_data=&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入学号：&quot;</span>),</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>),</span><br><span class="line">    <span class="string">&#x27;btn&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">    <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">    <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">    <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">    <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了保险，我把其他的表单域也给解析赋值给变量了。</p><p>不过仍然无法登陆成功，而是进入了一个诡异的页面:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">35em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Welcome to nginx!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      If you see this page, the nginx web server is successfully installed and</span><br><span class="line">      working. Further configuration is required.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      For online documentation and support please refer to</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://nginx.org/&quot;</span>&gt;</span>nginx.org<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      Commercial support is available at</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://nginx.com/&quot;</span>&gt;</span>nginx.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Thank you for using nginx.<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>确实有进展，但是这是啥？nginx？查了一下是一个高性能的 HTTP 和反向代理服务器，但是和我现在登录有什么关系呢？（黑人问号.jpg）</p><h3 id="利用-session-保持校验码"><a href="#利用-session-保持校验码" class="headerlink" title="利用 session 保持校验码"></a>利用 session 保持校验码</h3><p>即使登录成功，还有一个问题无法解决，那就是我获取校验码的 request 和登录用的 request 是两次不同的访问请求呀，这样校验码又会变化。</p><p>我想起了前一天看到的 session，这玩意不就能让服务端记住我？（cookie 试了一下，保存下来的是空的文件不知道怎么回事）</p><p>于是新建一个会话：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建会话</span></span><br><span class="line">session=requests.session()</span><br></pre></td></tr></table></figure><p>在获取校验码的时候改成使用 session 变量来发起请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取登录校验码</span></span><br><span class="line">html=session.post(login_url,headers=headers).text</span><br></pre></td></tr></table></figure><p><strong>这里的 session 是在客户端创建的，并不是服务端那个，我想它可能存储的是服务端发送过来的 session ID 吧。</strong></p><p>同理在正式发送请求时这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#登录</span></span><br><span class="line">r=session.post(login_url,headers=headers,data=login_data)</span><br></pre></td></tr></table></figure><p>这样就能让服务端知道我是刚刚获取校验码的那个小伙汁：D</p><p>在这一天我没有办法验证是否有效，不过在之后我验证了这个方法的成功性。</p><h3 id="day4-进度"><a href="#day4-进度" class="headerlink" title="day4 进度"></a>day4 进度</h3><ol><li>知道了原来有个每次会变化的校验码“lt”，找到了跳转回登录页面的原因。使用 Beautifulsoup 来获取每次的校验码，不过仍然没有解决无法登录的问题</li><li>使用 session 对象来保证获取校验码和登录时是同一个会话，未验证</li></ol><h2 id="190307-周四"><a href="#190307-周四" class="headerlink" title="190307 周四"></a>190307 周四</h2><h3 id="多余的头部信息"><a href="#多余的头部信息" class="headerlink" title="多余的头部信息"></a>多余的头部信息</h3><p>我终于发现了问题所在！！！！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#x27;</span>,</span><br><span class="line">    <span class="comment">#&#x27;Host&#x27;:&#x27;xxx.xxx.xxx.xxx&#x27;,</span></span><br><span class="line">    <span class="comment">#&#x27;Referer&#x27;:&#x27;http://xxx.xxx.xxx.xxx...&#x27;,#不详细打码了</span></span><br><span class="line">    <span class="comment">#&#x27;Origin&#x27;:&#x27;http://xxx.xxx.xxxx&#x27;</span></span><br><span class="line">    <span class="comment">#去掉多余的头信息才成功登录！！！！！卡了很久没想到是因为这个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头部信息写多了，我只保留了<code>User-Agent</code>之后成功登录了，你们能体会到我当时有多开心吗！</p><p>我将成为<del>新世界的卡密</del>小组里面最快完成的人！</p><p>解决了这个问题，剩下的就特别简单了。</p><p>当时我有一个下午的时间，于是我将进度迅速推进。</p><h3 id="爬取通知公告"><a href="#爬取通知公告" class="headerlink" title="爬取通知公告"></a>爬取通知公告</h3><p>设登录页面为 pageA，登录之后的页面跳转到 pageB，而 pageB 有一个按钮跳转到 pageC，这个 pageC 就是 day1 的时候的目录页面，里面有着 pageC1、pageC2、pageC3……等页面的链接，而这个 pageC 最后面还有个按钮用于跳转到目录的下一页，也就是 pageC?pageIndex&#x3D;2，还有 137 页公告栏目录。</p><p>没有什么新的东西，和 day1 说的爬取方式差不多，只是页面正文的格式和 day1 的新闻不太一样。核心结构如下，我省略了很多：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bulletin-content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bulletin-contentpe65&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;;background: white&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;_GoBack&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px;font-family: 仿宋&quot;</span>&gt;</span> 校属各单位： <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大概就是一个<code>&lt;p&gt;</code>标签里面放一个或多个<code>&lt;span&gt;</code>标签，而这里面可能还会嵌套几个<code>&lt;span&gt;</code>标签，里面才有内容，而两个内部的<code>&lt;span&gt;</code>之间还可能有内容。</p><p>这要怎么解析？</p><p>在尝试了很多方案之后，我终于百度到一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag.get_text()<span class="comment">#提取名为tag的bs4标签的内部的所有文字</span></span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li><p><a href="https://blog.csdn.net/ScapeD/article/details/81913923">BeautifulSoup 获取标签中包含的文字-CSDN-niewzh</a>（正是这个博客解决了我的问题）</p></li><li><p><a href="https://blog.csdn.net/f156207495/article/details/78074240/">BeautifulSoup 中的.text 方法和 get_text()方法的区别-CSDN</a></p></li></ul><p>解决方案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取正文内容</span></span><br><span class="line">html=session.post(url,headers=headers).text</span><br><span class="line">soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">article=soup.find(<span class="string">&#x27;div&#x27;</span>,class_=<span class="string">&#x27;bulletin-content&#x27;</span>)</span><br><span class="line">news_content=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> article.find_all(<span class="string">&#x27;p&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> p.span!=<span class="literal">None</span>:<span class="comment">#如果p含有一层span</span></span><br><span class="line">        text=<span class="built_in">str</span>(p.get_text()).strip()<span class="comment">#获取内容并去除多余空格</span></span><br><span class="line">        news_content+=text+<span class="string">&#x27;\n&#x27;</span></span><br></pre></td></tr></table></figure><p>接着我就把爬下来的东西存到数据库里面去了。弄完之后得去赶作业了，这一天的时间用完了。</p><h3 id="day5-进度"><a href="#day5-进度" class="headerlink" title="day5 进度"></a>day5 进度</h3><p>1.找到无法登录且跳转到未知页面的原因是头部信息加了多余的值，解决之后成功登录到信息门户，实现模拟登陆 2.利用之前爬取单个页面到文件的方法，用 beautifulsoup 解析并保存内容到文件 3.存入 MySQL 数据库中 4.还差爬取多页目录的功能，预计明天完成。整理代码后可提交</p><h2 id="190308-周五"><a href="#190308-周五" class="headerlink" title="190308 周五"></a>190308 周五</h2><h3 id="更多的目录页"><a href="#更多的目录页" class="headerlink" title="更多的目录页"></a>更多的目录页</h3><p>开了一个新文件准备整理一下代码，并完成最后一个功能——爬取完目录页第一页之后爬取后面更多的页。</p><p>查看源代码的时候，找“第二页”这个按钮对应的链接，发现了规律：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination-info clearFix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">&quot;共2740条记录 分137页显示&quot;</span>&gt;</span> 2740/137 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;detach.portal?pageIndex=1<span class="symbol">&amp;amp;</span>pageSize=<span class="symbol">&amp;amp;</span>.pmn=view<span class="symbol">&amp;amp;</span>.ia=false<span class="symbol">&amp;amp;</span>action=bulletinsMoreView<span class="symbol">&amp;amp;</span>search=true<span class="symbol">&amp;amp;</span>groupid=all<span class="symbol">&amp;amp;</span>.pen=pe65&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;点击跳转到第1页&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;lt;</span>&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;当前页&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;detach.portal?pageIndex=2<span class="symbol">&amp;amp;</span>pageSize=<span class="symbol">&amp;amp;</span>.pmn=view<span class="symbol">&amp;amp;</span>.ia=false<span class="symbol">&amp;amp;</span>action=bulletinsMoreView<span class="symbol">&amp;amp;</span>search=true<span class="symbol">&amp;amp;</span>groupid=all<span class="symbol">&amp;amp;</span>.pen=pe65&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;点击跳转到第2页&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>2&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;detach.portal?pageIndex=3<span class="symbol">&amp;amp;</span>pageSize=<span class="symbol">&amp;amp;</span>.pmn=view<span class="symbol">&amp;amp;</span>.ia=false<span class="symbol">&amp;amp;</span>action=bulletinsMoreView<span class="symbol">&amp;amp;</span>search=true<span class="symbol">&amp;amp;</span>groupid=all<span class="symbol">&amp;amp;</span>.pen=pe65&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;点击跳转到第3页&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>3&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;detach.portal?pageIndex=4<span class="symbol">&amp;amp;</span>pageSize=<span class="symbol">&amp;amp;</span>.pmn=view<span class="symbol">&amp;amp;</span>.ia=false<span class="symbol">&amp;amp;</span>action=bulletinsMoreView<span class="symbol">&amp;amp;</span>search=true<span class="symbol">&amp;amp;</span>groupid=all<span class="symbol">&amp;amp;</span>.pen=pe65&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;点击跳转到第4页&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>4&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;detach.portal?pageIndex=5<span class="symbol">&amp;amp;</span>pageSize=<span class="symbol">&amp;amp;</span>.pmn=view<span class="symbol">&amp;amp;</span>.ia=false<span class="symbol">&amp;amp;</span>action=bulletinsMoreView<span class="symbol">&amp;amp;</span>search=true<span class="symbol">&amp;amp;</span>groupid=all<span class="symbol">&amp;amp;</span>.pen=pe65&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;点击跳转到第5页&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>5&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;detach.portal?pageIndex=6<span class="symbol">&amp;amp;</span>pageSize=<span class="symbol">&amp;amp;</span>.pmn=view<span class="symbol">&amp;amp;</span>.ia=false<span class="symbol">&amp;amp;</span>action=bulletinsMoreView<span class="symbol">&amp;amp;</span>search=true<span class="symbol">&amp;amp;</span>groupid=all<span class="symbol">&amp;amp;</span>.pen=pe65&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="symbol">&amp;gt;</span>&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;detach.portal?pageIndex=137<span class="symbol">&amp;amp;</span>pageSize=<span class="symbol">&amp;amp;</span>.pmn=view<span class="symbol">&amp;amp;</span>.ia=false<span class="symbol">&amp;amp;</span>action=bulletinsMoreView<span class="symbol">&amp;amp;</span>search=true<span class="symbol">&amp;amp;</span>groupid=all<span class="symbol">&amp;amp;</span>.pen=pe65&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;点击跳转到最后页&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span>&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看出，指向其他目录页的相对链接，只是参数略有不同，参数中只有<code>pageIndex</code>发生了变化。至于给 url 加参数，我记得前几天看到过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#作为参数的字典</span></span><br><span class="line">para=&#123;</span><br><span class="line">    <span class="string">&#x27;pageIndex&#x27;</span>:<span class="number">1</span>,<span class="comment">#这里需要修改，先爬第一页</span></span><br><span class="line">    <span class="string">&#x27;pageSize&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.pmn&#x27;</span>:<span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.ia&#x27;</span>:<span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;bulletinsMoreView&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;search&#x27;</span>:<span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;groupid&#x27;</span>:<span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;.pen&#x27;</span>:<span class="string">&#x27;pe65&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">catalogue_url=<span class="string">&#x27;http://xxx.xx.xx.cn/detach.portal&#x27;</span><span class="comment">#未加参数的新闻目录页url</span></span><br><span class="line">    session = login()  <span class="comment"># 获取已登录的session,这个自定义函数会在下面列出</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,page_count+<span class="number">1</span>):<span class="comment">#page_count是要获取的页数</span></span><br><span class="line">        para[<span class="string">&#x27;pageIndex&#x27;</span>]=i<span class="comment">#设置新闻当前页的索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从目录页获取新闻页面链接</span></span><br><span class="line">        html = session.post(catalogue_url,params=para).text</span><br></pre></td></tr></table></figure><h3 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h3><p>要用到的库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br></pre></td></tr></table></figure><h4 id="get-bulletin"><a href="#get-bulletin" class="headerlink" title="get_bulletin"></a>get_bulletin</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_bulletin</span>(<span class="params">page_count</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    目录有多页，从第一页开始获取，往后获取page_count页的目录，并读取目录指向的所有公告</span></span><br><span class="line"><span class="string">    :param page_count: 要爬取的目录页面的数量</span></span><br><span class="line"><span class="string">    :return: 无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    para=&#123;</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.pmn&#x27;</span>:<span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.ia&#x27;</span>:<span class="string">&#x27;false&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;bulletinsMoreView&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;search&#x27;</span>:<span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;groupid&#x27;</span>:<span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.pen&#x27;</span>:<span class="string">&#x27;pe65&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    catalogue_url=<span class="string">&#x27;http://xxx.xxx.xxx.cn/detach.portal&#x27;</span><span class="comment">#未加参数的公告目录页url</span></span><br><span class="line">    session = login()  <span class="comment"># 获取已登录的session</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,page_count+<span class="number">1</span>):</span><br><span class="line">        para[<span class="string">&#x27;pageIndex&#x27;</span>]=i<span class="comment">#设置公告当前页的索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从目录页获取公告页面链接</span></span><br><span class="line">        html = session.post(catalogue_url,params=para).text</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        rss_title = soup.find_all(<span class="string">&#x27;a&#x27;</span>, class_=<span class="string">&#x27;rss-title&#x27;</span>)</span><br><span class="line">        <span class="comment">#将得到的链接与标题组装成字典</span></span><br><span class="line">        bulletin_dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> rss_title:</span><br><span class="line">            bulletin_title = <span class="built_in">str</span>(url.span.string).strip()</span><br><span class="line">            bulletin_url = <span class="string">&#x27;http://xxx.xx.xx.cn/&#x27;</span> + url[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            bulletin_dict.setdefault(bulletin_title, bulletin_url)<span class="comment">#添加一条公告记录</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#保存公告到数据库</span></span><br><span class="line">        <span class="keyword">for</span> bulletin_title, bulletin_url <span class="keyword">in</span> bulletin_dict.items():</span><br><span class="line">            <span class="comment">#saveInTXT(bulletin_url, session, bulletin_title)#这个是保存到txt文件的函数，用于测试</span></span><br><span class="line">            saveInDB(news_url, session, news_title)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="login"><a href="#login" class="headerlink" title="login"></a>login</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    登录并返回已经登录的会话</span></span><br><span class="line"><span class="string">    :return: 已经登录的会话（session）</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#设置</span></span><br><span class="line">    login_url = <span class="string">&#x27;http://xxx.xx.xx.cn/authserver/login?service=http%3A%2F%2F%2F&#x27;</span></span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#新建会话</span></span><br><span class="line">    session=requests.session()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#获取登录校验码</span></span><br><span class="line">    html=session.post(login_url,headers=headers).text</span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    lt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    dllt=soup.find(<span class="string">&#x27;input&#x27;</span>,&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;dllt&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    execution = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;execution&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    _eventId = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;_eventId&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    rmShown = soup.find(<span class="string">&#x27;input&#x27;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;rmShown&#x27;</span>&#125;)[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    login_data=&#123;</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入学号：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>: <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;btn&#x27;</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lt&#x27;</span>: lt,</span><br><span class="line">        <span class="string">&#x27;dllt&#x27;</span>: dllt,</span><br><span class="line">        <span class="string">&#x27;execution&#x27;</span>: execution,</span><br><span class="line">        <span class="string">&#x27;_eventId&#x27;</span>: _eventId,</span><br><span class="line">        <span class="string">&#x27;rmShown&#x27;</span>: rmShown</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#登录</span></span><br><span class="line">    response=session.post(login_url,headers=headers,data=login_data)</span><br><span class="line">    <span class="keyword">if</span> response.url==<span class="string">&#x27;http://xxx.xx.xx.cn/&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;登录成功！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br></pre></td></tr></table></figure><h4 id="saveInTXT"><a href="#saveInTXT" class="headerlink" title="saveInTXT"></a>saveInTXT</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">saveInTXT</span>(<span class="params">url, session, title</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取单个公告页面的公告并保存到txt</span></span><br><span class="line"><span class="string">    :param url: 要获取的页面的url</span></span><br><span class="line"><span class="string">    :param session:已经登录的会话</span></span><br><span class="line"><span class="string">    :param title:公告标题</span></span><br><span class="line"><span class="string">    :return:无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#将标题转换为可以作为文件名字的形式</span></span><br><span class="line">    reg = <span class="string">r&#x27;[\/:*?&quot;&lt;&gt;|]&#x27;</span></span><br><span class="line">    title = re.sub(reg, <span class="string">&quot;&quot;</span>, title)</span><br><span class="line"></span><br><span class="line">    path=<span class="string">&#x27;bullet\\&#x27;</span> + title+<span class="string">&#x27;.txt&#x27;</span><span class="comment">#保存在py文件目录下的bulletin文件夹内，以txt格式保存</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    #测试代码，从文件读取手动获取的公告html页面，单机测试</span></span><br><span class="line"><span class="string">    with open(&#x27;new.txt&#x27;,&#x27;r&#x27;,encoding=&#x27;utf8&#x27;) as fin:</span></span><br><span class="line"><span class="string">        html=fin.read()</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    html=session.post(url,headers=headers).text</span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    <span class="comment">#print(soup.prettify())</span></span><br><span class="line">    bulletin_content=soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bulletin-content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    bulletin_content= <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> bulletin_content.find_all(<span class="string">&#x27;p&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> p.span!=<span class="literal">None</span>:<span class="comment">#如果p含有一层span</span></span><br><span class="line">            text=<span class="built_in">str</span>(p.get_text()).strip()</span><br><span class="line">            bulletin_content+= text + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">        fout.write(bulletin_content)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;“&#123;&#125;”成功保存到&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(title,path))</span><br></pre></td></tr></table></figure><h4 id="saveInDB"><a href="#saveInDB" class="headerlink" title="saveInDB"></a>saveInDB</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">saveInDB</span>(<span class="params">url, session, title</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取单个公告页面的公告并保存到txt</span></span><br><span class="line"><span class="string">    :param url: 要获取的页面的url</span></span><br><span class="line"><span class="string">    :param session:已经登录的会话</span></span><br><span class="line"><span class="string">    :param title:公告标题</span></span><br><span class="line"><span class="string">    :return:无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    html=session.post(url,headers=headers).text</span><br><span class="line">    soup=BeautifulSoup(html,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    bulletin_content=soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;bulletin-content&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    bulletin_content= <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> bulletin_content.find_all(<span class="string">&#x27;p&#x27;</span>):</span><br><span class="line">        <span class="keyword">if</span> p.span!=<span class="literal">None</span>:<span class="comment">#如果p含有一层span</span></span><br><span class="line">            text=<span class="built_in">str</span>(p.get_text()).strip()</span><br><span class="line">            bulletin_content+= text + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存到数据库</span></span><br><span class="line">    db = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3306</span>, user=<span class="string">&#x27;root&#x27;</span>, passwd=<span class="string">&#x27;root&#x27;</span>, db=<span class="string">&#x27;news&#x27;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    cursor.execute(<span class="string">&quot;insert into chdnews(`title`,`content`) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;)&quot;</span>.<span class="built_in">format</span>(title, bulletin_content))</span><br><span class="line">    db.commit()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;已经成功保存公告到数据库：“&#123;&#125;”&#x27;</span>.<span class="built_in">format</span>(title))</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用</span></span><br><span class="line">get_bulletin(<span class="number">10</span>)<span class="comment">#爬取10页公告</span></span><br></pre></td></tr></table></figure><p>暂时没有将其通用化，直接将网址写死在函数里面了。</p><h3 id="day6-进度"><a href="#day6-进度" class="headerlink" title="day6 进度"></a>day6 进度</h3><ol><li>通过调整服务门户的 url 中的参数来获取通知公告的每一个目录页的 url，从而爬取所有公告</li><li>将学习中写的测试代码重新构造整理，添加函数注释，提交任务</li></ol><h2 id="190309-周六"><a href="#190309-周六" class="headerlink" title="190309 周六"></a>190309 周六</h2><h3 id="day7-进度"><a href="#day7-进度" class="headerlink" title="day7 进度"></a>day7 进度</h3><p>写了本篇博客进行总结</p>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换了一个主题</title>
      <link href="/posts/hexo_blog_switch_theme_1/"/>
      <url>/posts/hexo_blog_switch_theme_1/</url>
      
        <content type="html"><![CDATA[<p>把主题从<a href="https://github.com/ShanaMaid/hexo-theme-shana">shana</a>（夏娜）换成了<a href="https://github.com/iissnan/hexo-theme-next">NexT</a>，记录一下这个过程，以及遇到的一些有用的博客链接。流水账，主要保存链接。</p><span id="more"></span><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>刚弄了 hexo 博客很兴奋，于是去鼓捣各种东西，首先选了一个二次元的主题 shana，虽然这个主题我很喜欢，但是想要加目录或者是其他的一些东西，网上根本就搜不到相关的内容，在解决各种问题的过程中，我发现搜索到的几乎都是关于 NexT 这个主题的解决方法，应为这个主题很多人用。</p><p>在又一次发现主题的文件被我“弄坏了”（背景图片的幻灯片播放只显示一次）之后，我想还是换成 NexT 吧，这样就能专注于写博客，而不是为设置博客而烦恼。</p><h1 id="安装-NexT-主题"><a href="#安装-NexT-主题" class="headerlink" title="安装 NexT 主题"></a>安装 NexT 主题</h1><p><a href="https://github.com/iissnan/hexo-theme-next">NexT</a>主题安装和其他主题一样，clone 下来再改一下站点配置文件<code>_config.yml</code>就好了。</p><p>然后再设置这个主题的配置文件。这个主题的配置文件与 shana 相比起来不知道详细了多少，各种设置都准备齐全了。没费多少功夫就配置好很好看的站点了。接着就是把站长统计之类的东西设置一下。</p><ul><li>cnzz 站长统计，统计访问</li><li>leanCloud 数据统计，统计文章阅读数，参考链接：<a href="https://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E8%AE%BF%E5%AE%A2%E9%87%8F%E4%BB%A5%E5%8F%8A%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%EF%BC%89/">Hexo-Next 搭建个人博客（添加统计访客量以及文章阅读量）</a></li></ul><p>当然我也试着弄了一下 gitment 评论，仍然不行，那么只能继续采用“直接在菜单中给出 issue 页面链接”的方式了。参考链接：<a href="https://ryanluoxu.github.io/2017/11/27/Hexo-Next-%E6%B7%BB%E5%8A%A0-Gitment-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/">Hexo-Next 添加 Gitment 评论系统</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++学生信息管理系统（一）</title>
      <link href="/posts/cpp_student_info_management_system1/"/>
      <url>/posts/cpp_student_info_management_system1/</url>
      
        <content type="html"><![CDATA[<p>尝试重新设计与编写大一第一学期的 c++课设——学生信息管理系统。本文作简单思路分析与代码分享。B 站视频内录制了从头开始写的整个过程：<a href="https://www.bilibili.com/video/av44801291/">课程设计|c++控制台简易学生信息管理系统</a></p><span id="more"></span><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>要求：能够录入，显示，查找，删除，文件存取学生信息</p><p>以当时的知识是以链表来实现的，这次也是使用链表。</p><p>首先，创建一个链表结点类用于存放学生的信息，每个对象都是一个学生。</p><p>其次，创建一个链表类用于将结点连接起来。</p><p>最后，利用链表类已经创建好的各种接口，在 main 函数中进行装配，实现所需要的各种功能。</p><h1 id="链表结点类"><a href="#链表结点类" class="headerlink" title="链表结点类"></a>链表结点类</h1><ul><li>类名：CStudent</li><li>属性：姓名、性别、成绩、其余本质相同的属性（如班级号，学号）省略。</li><li>方法：以不同方式显示该学生所有信息、手动录入学生信息</li></ul><h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//链表结点类</span></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="comment">//属性：姓名、性别、成绩</span></span><br><span class="line"><span class="comment">//方法：录入、显示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CStudent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">bool</span> sex;<span class="comment">//true为男，false为女</span></span><br><span class="line"><span class="type">int</span> score;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//链表需要的指针域</span></span><br><span class="line">CStudent* next;</span><br><span class="line"><span class="comment">//=======================================</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">CStudent</span>(<span class="type">const</span> <span class="type">char</span> p_name[], <span class="type">bool</span> p_sex, <span class="type">int</span> p_score);</span><br><span class="line"><span class="built_in">CStudent</span>();</span><br><span class="line"><span class="comment">//录入与显示</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">input</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(<span class="type">int</span> method)</span></span>;</span><br><span class="line"><span class="comment">//get</span></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">getSex</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sex; &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> score; &#125;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">CStudent</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类实现"><a href="#类实现" class="headerlink" title="类实现"></a>类实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@fileName &lt;CStudent.cpp&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CStudent.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">CStudent::<span class="built_in">CStudent</span>(<span class="type">const</span> <span class="type">char</span> p_name[], <span class="type">bool</span> p_sex, <span class="type">int</span> p_score)</span><br><span class="line">&#123;<span class="comment">//有参构造则自动录入信息</span></span><br><span class="line"><span class="built_in">strcpy</span>(name, p_name);</span><br><span class="line">sex = p_sex;</span><br><span class="line">score = p_score;</span><br><span class="line">&#125;</span><br><span class="line">CStudent::<span class="built_in">CStudent</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">input</span>();<span class="comment">//如果无参构造，则手动录入信息</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CStudent::input</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入学生姓名：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; name;</span><br><span class="line"><span class="comment">//如果遇到cin连续输入出错的问题，可以在每次输入后加个cin.get()</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入学生性别（1为男，0为女）：&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="type">int</span> isex;</span><br><span class="line">cin &gt;&gt; isex;</span><br><span class="line">sex = isex ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;请输入学生成绩：&quot;</span> &lt;&lt; endl;</span><br><span class="line">cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CStudent::show</span><span class="params">(<span class="type">int</span> method)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (method)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//横向显示，一行一条记录</span></span><br><span class="line">cout &lt;&lt; name&lt;&lt;<span class="string">&quot;\t&quot;</span></span><br><span class="line">&lt;&lt; (sex ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>)&lt;&lt;<span class="string">&quot;\t&quot;</span></span><br><span class="line">&lt;&lt; score&lt;&lt;<span class="string">&quot;\t&quot;</span></span><br><span class="line">&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//纵向显示，每行一个属性</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; name &lt;&lt; endl</span><br><span class="line">&lt;&lt; <span class="string">&quot;性别：&quot;</span> &lt;&lt; (sex ? <span class="string">&quot;男&quot;</span> : <span class="string">&quot;女&quot;</span>) &lt;&lt; endl</span><br><span class="line">&lt;&lt; <span class="string">&quot;成绩：&quot;</span> &lt;&lt; score &lt;&lt; endl</span><br><span class="line">&lt;&lt; endl;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CStudent::~<span class="built_in">CStudent</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h1><h2 id="类声明-1"><a href="#类声明-1" class="headerlink" title="类声明"></a>类声明</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@fileName &lt;CStudentList.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CStudent.h&quot;</span></span></span><br><span class="line"><span class="comment">//链表类（带头结点的单向链表）</span></span><br><span class="line"><span class="comment">//属性：指向头结点的头指针</span></span><br><span class="line"><span class="comment">//方法：构造函数（手动输入）、构造函数（传入结点对象数组）、析构函数</span></span><br><span class="line"><span class="comment">//方法：显示表、查找、删除、把数据存入文件、从文件中读取数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CStudentList</span></span><br><span class="line">&#123;</span><br><span class="line">CStudent* head;<span class="comment">//头指针</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">CStudentList</span>(<span class="type">int</span> n);<span class="comment">//手动录入n个学生的信息</span></span><br><span class="line"><span class="built_in">CStudentList</span>(CStudent s[],<span class="type">int</span> n);<span class="comment">//通过对象数组自动录入n个学生的信息</span></span><br><span class="line"><span class="built_in">CStudentList</span>(<span class="type">const</span> <span class="type">char</span> fileName[]);<span class="comment">//读取文件中的数据信息来初始化</span></span><br><span class="line"><span class="built_in">CStudentList</span>();</span><br><span class="line"><span class="comment">//功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">showList</span><span class="params">()</span></span>;<span class="comment">//显示整个链表的信息</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search</span><span class="params">(<span class="type">const</span> <span class="type">char</span> name[])</span></span>;<span class="comment">//按名字查找并返回找到的个数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">deleteNode</span><span class="params">(CStudent*p)</span></span>;<span class="comment">//删除指针p指向的结点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">deleteByName</span><span class="params">(<span class="type">const</span> <span class="type">char</span> name[])</span></span>;<span class="comment">//删除表中第一个匹配的记录，同时返回是否删除成功</span></span><br><span class="line"><span class="comment">//文件读写</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">(<span class="type">const</span> <span class="type">char</span> fileName[])</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> fileName[])</span></span>;</span><br><span class="line"><span class="comment">//析构函数</span></span><br><span class="line">~<span class="built_in">CStudentList</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类实现-1"><a href="#类实现-1" class="headerlink" title="类实现"></a>类实现</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>我设计了四个构造函数。</p><p>1.如果没有参数，那么就只建立一个空链表，即只有一个头结点的链表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::CStudentList&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;创建空链表&gt;</span></span><br><span class="line">CStudentList::<span class="built_in">CStudentList</span>()</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="keyword">new</span> <span class="built_in">CStudent</span>(<span class="string">&quot;HEAD&quot;</span>, <span class="number">1</span>, <span class="number">100</span>);<span class="comment">//头结点本身的数据并不重要，所以随意填写。</span></span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.手动录入信息的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::CStudentList(int n)&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;创建n个结点的链表，并手动录入信息&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;n:初始链表结点数目（不计头结点）&gt;</span></span><br><span class="line">CStudentList::<span class="built_in">CStudentList</span>(<span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="keyword">new</span> <span class="built_in">CStudent</span>(<span class="string">&quot;HEAD&quot;</span>,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">CStudent *newNode = <span class="keyword">new</span> <span class="built_in">CStudent</span>();</span><br><span class="line">newNode-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.通过数组自动录入信息的构造函数</p><p>和上一个差不多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::CStudentList(CStudent s[],int n)&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;创建n个结点的链表，并自动从数组中获取信息&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;s:结点类对象数组&gt;&lt;n:数组s的长度&gt;</span></span><br><span class="line">CStudentList::<span class="built_in">CStudentList</span>(CStudent s[], <span class="type">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="keyword">new</span> <span class="built_in">CStudent</span>(<span class="string">&quot;HEAD&quot;</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">CStudent *newNode = <span class="keyword">new</span> <span class="built_in">CStudent</span>(s[i].<span class="built_in">getName</span>(),s[i].<span class="built_in">getSex</span>(),s[i].<span class="built_in">getScore</span>());</span><br><span class="line">newNode-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.通过文件自动录入信息的构造函数</p><p>使用到了另一个成员函数<code>open()</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::CStudentList(const char fileName[])&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;自动从文件中读取信息&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;fileName:数据来源文件的名字&gt;</span></span><br><span class="line">CStudentList::<span class="built_in">CStudentList</span>(<span class="type">const</span> <span class="type">char</span> fileName[])</span><br><span class="line">&#123;</span><br><span class="line">head = <span class="keyword">new</span> <span class="built_in">CStudent</span>(<span class="string">&quot;HEAD&quot;</span>, <span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">open</span>(fileName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示链表"><a href="#显示链表" class="headerlink" title="显示链表"></a>显示链表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::showList()&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;显示整个链表&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CStudentList::showList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CStudent*p = head-&gt;next;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;姓名\t性别\t成绩&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;<span class="built_in">show</span>(<span class="number">0</span>);<span class="comment">//以一行一记录的形式显示</span></span><br><span class="line">p = p-&gt;next;<span class="comment">//工作指针向后移动</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询结点"><a href="#查询结点" class="headerlink" title="查询结点"></a>查询结点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::search&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;按照名字查找数据并显示&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;name:要查找的学生的名字&gt;</span></span><br><span class="line"><span class="comment">//@return &lt;找到的记录数目&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CStudentList::search</span><span class="params">(<span class="type">const</span> <span class="type">char</span> name[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">CStudent*p = head-&gt;next;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;---------查找结果---------&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)<span class="comment">//遍历链表</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(p-&gt;<span class="built_in">getName</span>(),name)==<span class="number">0</span>)<span class="comment">//找到了需要的信息</span></span><br><span class="line">&#123;</span><br><span class="line">num++;</span><br><span class="line">p-&gt;<span class="built_in">show</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找删除"><a href="#查找删除" class="headerlink" title="查找删除"></a>查找删除</h3><p>由于删除结点与查找要删除的结点相对独立，因此将删除结点独立出来一个函数，以便查找删除不同属性的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::deleteNode&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;删除指针指向的链表节点&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;p:要删除的结点的指针&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CStudentList::deleteNode</span><span class="params">(CStudent*p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CStudent*p1 = head, *p2 = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p2 != p)</span><br><span class="line">&#123;</span><br><span class="line">p1 = p1-&gt;next;</span><br><span class="line">p2 = p2-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p1-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以查找姓名的删除函数为例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::deleteByName&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;按名字查找并删除第一个符合条件的结点&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;name:要删除的结点的名字&gt;</span></span><br><span class="line"><span class="comment">//@return &lt;是否删除成功(成功返回0，失败返回-1)&gt;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">CStudentList::deleteByName</span><span class="params">(<span class="type">const</span> <span class="type">char</span> name[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CStudent*p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(p-&gt;<span class="built_in">getName</span>(), name) == <span class="number">0</span>)<span class="comment">//找到了需要的信息</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">deleteNode</span>(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::open&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;从文件中读取数据并以覆盖形式写入链表&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;fileName:数据文件名&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CStudentList::open</span><span class="params">(<span class="type">const</span> <span class="type">char</span> fileName[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//清空链表</span></span><br><span class="line">CStudent* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">head = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//未删除head</span></span><br><span class="line"><span class="comment">//从文件读取数据</span></span><br><span class="line"><span class="function">ifstream <span class="title">fin</span><span class="params">(fileName)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (!fin.<span class="built_in">eof</span>())<span class="comment">//end of file</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="type">bool</span> sex=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> score=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">fin &gt;&gt; name &gt;&gt; sex &gt;&gt; score;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用头插法把数据插入到链表中</span></span><br><span class="line">CStudent *newNode = <span class="keyword">new</span> <span class="built_in">CStudent</span>(name,sex,score);</span><br><span class="line">newNode-&gt;next = head-&gt;next;</span><br><span class="line">head-&gt;next = newNode;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@funcName &lt;CStudentList::save&gt;</span></span><br><span class="line"><span class="comment">//@brief &lt;将链表存入文件&gt;</span></span><br><span class="line"><span class="comment">//@parameter &lt;fileName:保存到的数据文件名&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CStudentList::save</span><span class="params">(<span class="type">const</span> <span class="type">char</span> fileName[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">ofstream <span class="title">fout</span><span class="params">(fileName)</span></span>;<span class="comment">//打开文件，创建文件流对象</span></span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line">CStudent *p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将数据存入</span></span><br><span class="line">fout &lt;&lt; p-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; p-&gt;<span class="built_in">getSex</span>() &lt;&lt; <span class="string">&quot; &quot;</span></span><br><span class="line">&lt;&lt; p-&gt;<span class="built_in">getScore</span>()</span><br><span class="line">&lt;&lt;endl;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CStudentList::~<span class="built_in">CStudentList</span>()</span><br><span class="line">&#123;</span><br><span class="line">CStudent* p = head-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">head = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h1><p>菜单比较简单，整个程序主要流程：</p><ol><li>显示菜单选项，等待输入选项编号</li><li>分支语句，按照不同选项调用链表提供的函数</li><li>如果没有选择退出选项就循环</li></ol><h2 id="菜单函数示例"><a href="#菜单函数示例" class="headerlink" title="菜单函数示例"></a>菜单函数示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;========学生信息管理系统========&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;1.显示学生信息表&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;2.查找学生信息&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;3.从文件读取&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;4.将数据存入文件&quot;</span> &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0.退出&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选项分支示例"><a href="#选项分支示例" class="headerlink" title="选项分支示例"></a>选项分支示例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> opt = <span class="number">-1</span>;</span><br><span class="line"><span class="function">CStudentList <span class="title">list</span><span class="params">(<span class="string">&quot;data.txt&quot;</span>)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (opt != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">menu</span>();</span><br><span class="line">cin &gt;&gt; opt;</span><br><span class="line"><span class="keyword">switch</span> (opt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">list.<span class="built_in">showList</span>();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notepad++添加文件关联</title>
      <link href="/posts/notepadpp_file_association/"/>
      <url>/posts/notepadpp_file_association/</url>
      
        <content type="html"><![CDATA[<p>将一些常用 notepad++打开的文件设置为默认 notepad++打开的方法</p><span id="more"></span><p>在研究 hexo 博客的各种功能的时候，总是需要打开配置文件<code>.yml</code>，一开始我是用右键菜单里面的【用 notepad++打开】的方式来打开，后来又遇到了各种<code>.ejs</code>,<code>.styl</code>之类的文件也需要用 notepad++来编辑，就将这些文件类型的默认打开方式设置为 notepad++。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/hexo_dir.png"></p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><ol><li>菜单栏【设置】-&gt;【首选项】</li><li>如图选择【文件关联】，找到需要添加的文件类型，如果没有就选择【customize】（自定义）自己输入，然后添加。</li></ol><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/notepad%2B%2B_filelink.png"></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><ol><li>【ctrl+r】打开【运行】输入<code>control</code>（也就是打开控制面板）</li><li>小图标查看方式，找到【默认程序】，选择【将文件类型或协议与程序关联】，找到需要的后缀名，选择它的默认程序即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记1简易小说爬虫</title>
      <link href="/posts/python_spider_note1simple_spider/"/>
      <url>/posts/python_spider_note1simple_spider/</url>
      
        <content type="html"><![CDATA[<p>学了 python 语法之后在 b 站搜索练手的小项目，发现了这个视频：<a href="https://www.bilibili.com/video/av24431072">Python 实用练手小项目（超简单）</a></p><p>视频里面讲解了一个爬取图片网站图片的小爬虫。后面用到了我还没学的数据库，不过前面的部分是已经学了的，于是我就打算写一个不用数据库的，爬取某个盗版小说内容的爬虫。</p><p><strong>声明：本人不会将得到的小说内容作任何商业用途，也请阅读此文章的各位读者遵纪守法，此文章只用作学习交流，原创内容，转载请注明出处。</strong></p><span id="more"></span><h1 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h1><p>爬虫，在我理解中就是模拟人的浏览行为来获取网站上的信息的脚本，爬虫能得到的信息，一般情况下人也有权限可以得到。</p><p>盗版小说网站，不需要登录就可以看到小说内容，内容是写死在 html 文件里面的，通过右键菜单的<code>查看源代码</code>就能够查看到小说内容，很适合拿来练手。</p><p><strong>再次声明：本人不会将得到的小说内容作任何商业用途，也请阅读此文章的各位读者遵纪守法，此文章只用作学习交流，原创内容，转载请注明出处。</strong></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>爬虫的思路是向服务器发出请求，并收到服务器回复的数据，接着从获取的数据中取得想要的信息，保存在数据库中。</p><p>由于是小说，就直接保存在文本文件当中。</p><p>所以分为以下几步：</p><ol><li>发出请求</li><li>接收数据</li><li>提取信息</li><li>保存数据</li></ol><h1 id="编程原理"><a href="#编程原理" class="headerlink" title="编程原理"></a>编程原理</h1><h2 id="发出请求和接收数据"><a href="#发出请求和接收数据" class="headerlink" title="发出请求和接收数据"></a>发出请求和接收数据</h2><p>发出请求需要一个库，名字叫做<code>requests</code>，它是基于 python 自带的<code>urllib</code>库写的第三方库，差不多就是升级版的意思吧。</p><p>要注意是<code>requests</code>，不是<code>request</code>，结尾有个 s，确实存在一个不带 s 的库，注意区分。</p><p>可以使用下面的命令进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><p>pip 是 Python 包管理工具，总之有了这个玩意，你不用管它从哪里下载，在哪里安装，总之就告诉它要安装啥，它就帮你安排得明明白白的。以后会遇到很多这样的东西，比如 npm 啥的。</p><p>命令在 cmd 里面输就行了，如果电脑上没有这东西就百度一下怎么下载，一般来说安装了 python 应该就有了。</p><p>如果使用的是 pyCharm 这种 IDE，那就可以直接在代码 import 这个库，等库的名字变红再在旁边找安装按钮，很方便的。</p><p>这个库里面有个 get 函数，是采用 get 的方式（除此之外还有 post 方式，学 html 表单的时候应该有学到）来向服务器发出访问请求，并将获得的数据作为返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment">#省略代码</span></span><br><span class="line">r = requests.get(url)<span class="comment">#url是你要访问的网址</span></span><br><span class="line"><span class="built_in">print</span>(r)<span class="comment">#如果输出是&lt;Response [200]&gt;，那么就是访问成功了</span></span><br></pre></td></tr></table></figure><p>此时返回变量是请求对象，要从中获取数据，就需要使用它的两个属性<code>text</code>和<code>content</code></p><p><code>r.text</code>是数据的 html 形式，<code>r.content</code>是字节流的形式。<a href="https://www.jianshu.com/p/0e4ca633c6a6">二者的区别</a></p><p>前者返回文本格式（即二进制格式经过编码后），后者返回二进制格式。后者一般用于图片的保存。</p><p>我们需要获取的是文本内容，因此需要前者。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html=r.text</span><br></pre></td></tr></table></figure><h2 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h2><p>我们打开笔趣阁（一个盗版小说网站）的一个<a href="https://www.biquger.com/biquge/4911/">小说页面</a>，随便选一章点进去，查看源代码，发现小说的内容是放在一个<code>&lt;div&gt;</code>里面的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;booktext&quot;</span>&gt;</span></span><br><span class="line">  小说内容</span><br><span class="line">  <span class="tag">&lt;<span class="name">center</span>&gt;</span>翻页信息<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他章节也是如此，所以就可以利用这个规律将其提取出来，用的就是正则表达式。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>使用正则表达式需要使用一个内置的库<code>re</code>，根据上面的规律可以写出下面的正则表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">reg = <span class="string">r&#x27;&lt;div class=&quot;content&quot; id=&quot;booktext&quot;&gt;(.*?)&lt;center&gt;&#x27;</span><span class="comment">#正则表达式</span></span><br><span class="line">reg = re.<span class="built_in">compile</span>(reg)<span class="comment">#将字符串转换为正则表达式对象，加快匹配速度</span></span><br><span class="line">content= re.findall(reg, html)<span class="comment">#返回一个列表，列表项为匹配到的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> content==[]:<span class="comment">#未匹配到小说内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;获取失败！&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    content=<span class="built_in">str</span>(content[<span class="number">0</span>])<span class="comment">#将列表转换为字符串</span></span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/nomorewzx/p/4203829.html">re.compile()函数</a></p><h3 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h3><p>但是我写到这里的时候遇到了一个问题，就是获取到的内容是乱码。一看到乱码就应该想到是编码出了问题。</p><p>右键菜单查看网页编码，是<code>GBK</code>编码，需要转换编码。现在的情况是，网页利用<code>GBK</code>的编码来“加密”了小说文本，而我们需要用同样的方式来“解码”。需要用到<code>decode</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html=r.content.decode(<span class="string">&quot;GBK&quot;</span>, <span class="string">&quot;ignore&quot;</span>)<span class="comment">#转换编码</span></span><br></pre></td></tr></table></figure><p>将获得的二进制数据按照网页原本的编码<code>GBK</code>来解码，就能获取到正确的内容了。</p><h3 id="去除分隔字符"><a href="#去除分隔字符" class="headerlink" title="去除分隔字符"></a>去除分隔字符</h3><p>此时提取到的内容还有这很多 HTML 实体，比如<code>&amp;nbsp;</code>和<code>&lt;br /&gt;</code>，注意到它们的分布也有规律：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">id</span>=<span class="string">&quot;booktext&quot;</span>&gt;</span></span><br><span class="line">  <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>小说内容<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>小说内容<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>……省略……<span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>大雪落下，悄然覆盖着这一切。<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了开头和结尾之外，都是以<code>&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</code>进行分隔的。</p><p>可以利用<code>split()</code>函数将其分割之后重新组合，</p><p>也可以使用字符串的替换函数<code>replace()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">content=content.replace(<span class="string">&quot;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>,<span class="string">&quot;\n\n    &quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h2><p>保存在文本文件中就 ok 了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fout:<span class="comment">#fileName为保存路径加文件名</span></span><br><span class="line">    fout.write(<span class="string">&#x27;\n\n=====================\n\n&#x27;</span> + fileName + <span class="string">&#x27;\n\n=====================\n\n&#x27;</span>)</span><br><span class="line">    fout.write(content)</span><br></pre></td></tr></table></figure><h1 id="获取单章节内容代码"><a href="#获取单章节内容代码" class="headerlink" title="获取单章节内容代码"></a>获取单章节内容代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNovelByURL</span>(<span class="params">url,fileName</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    :param url: 网页的url</span></span><br><span class="line"><span class="string">    :param fileName: 保存数据的文件的名字</span></span><br><span class="line"><span class="string">    :return: -1为失败，0为成功</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#筛选文件名内非法字符</span></span><br><span class="line">    <span class="comment">#调试的时候前面几百章都行突然一章不行，发现是因为章节名字里面有非法字符</span></span><br><span class="line">    reg=<span class="string">r&#x27;[\/:*?&quot;&lt;&gt;|]&#x27;</span></span><br><span class="line">    fileName=re.sub(reg,<span class="string">&quot;&quot;</span>,fileName)<span class="comment">#利用正则表达式去除非法字符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取网页</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    html = r.content</span><br><span class="line">    html = html.decode(<span class="string">&quot;GBK&quot;</span>, <span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取网页中小说内容</span></span><br><span class="line">    reg = <span class="string">&#x27;&lt;div class=&quot;content&quot; id=&quot;booktext&quot;&gt;\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(.*?)&lt;br /&gt;\n&lt;center&gt;&#x27;</span></span><br><span class="line">    reg = re.<span class="built_in">compile</span>(reg)<span class="comment">#预编译</span></span><br><span class="line">    content = re.findall(reg, html)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#保存到文件</span></span><br><span class="line">    <span class="keyword">if</span> content==[]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;获取失败！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        content=<span class="built_in">str</span>(content[<span class="number">0</span>])<span class="comment">#转换为字符串</span></span><br><span class="line">        content=content.replace(<span class="string">&quot;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>,<span class="string">&quot;\n\n    &quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(fileName,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fout:</span><br><span class="line">            fout.write(<span class="string">&#x27;\n\n=====================\n\n&#x27;</span> + fileName + <span class="string">&#x27;\n\n=====================\n\n&#x27;</span>)</span><br><span class="line">            fout.write(content)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;成功爬取（&#123;&#125;），存储在&#123;&#125;&quot;</span>.<span class="built_in">format</span>(url,os.path.dirname(__file__)+<span class="string">&#x27;/&#x27;</span>+fileName))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="获取全部章节内容的思路"><a href="#获取全部章节内容的思路" class="headerlink" title="获取全部章节内容的思路"></a>获取全部章节内容的思路</h1><p>盗版小说网站章节的 url 有个规律，就是 url 的最后一串数字是连续的，照这个规律，知道第一章的 url，就可以获得后续章节的 url。于是我着手写这么个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getNovelByIndexInc</span>(<span class="params">url, number=<span class="number">1</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    此函数用于通过已知的起始url来获取仅有尾部索引不同且连续的一系列网页内的小说，</span></span><br><span class="line"><span class="string">    不连续时会跳过获取失败的网址，不过有可能连续几千个网址都是无效网址，所以慎用此函数</span></span><br><span class="line"><span class="string">    或改用getNovelByContentPage函数</span></span><br><span class="line"><span class="string">    :param url:起始章节的url</span></span><br><span class="line"><span class="string">    :param number: 要获取的章节数</span></span><br><span class="line"><span class="string">    :return:无</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从我写的注释里面也可以看出，我失败了。</p><p>一开始的一百多章还是没什么问题的，只有偶尔几个网址是无效网址，但是后面爬取的时候等了十分钟还没爬取到下一章，一直输出“无效网址”，我查看了那断片的两个连续章节之后才发现，最后的一串数字差了几万。<del>不会是因为作者断更吧！</del></p><p>这种方式不可靠，还是换一种方式。</p><p>那么要如何可以改进呢？</p><p>我写了另一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getNovelByContentPage</span>(<span class="params">url,path=<span class="string">&#x27;novel&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    通过获取目录页面链接与标题，进一步调用获取已知链接页面的函数来保存页面内容</span></span><br><span class="line"><span class="string">    :param url: 书籍目录页面</span></span><br><span class="line"><span class="string">    :param path:保存路径，默认为同目录下的novel文件夹</span></span><br><span class="line"><span class="string">    :return:-1为失败，0为成功</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>网站的书籍页面会有一个目录，而目录下隐藏的就是我需要的全部章节的链接呀！</p><p>这个函数用到的内容上面也都讲到了，就直接放代码吧。</p><h1 id="获取全部章节内容的代码"><a href="#获取全部章节内容的代码" class="headerlink" title="获取全部章节内容的代码"></a>获取全部章节内容的代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getNovelByContentPage</span>(<span class="params">url,path=<span class="string">&#x27;novel&#x27;</span></span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    通过获取目录页面链接与标题，进一步调用获取已知链接页面的函数来保存页面内容</span></span><br><span class="line"><span class="string">    :param url: 书籍目录页面</span></span><br><span class="line"><span class="string">    :param path:保存路径，默认为同目录下的novel文件夹</span></span><br><span class="line"><span class="string">    :return:-1为失败，0为成功</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取网页</span></span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    html = r.content<span class="comment">#获取网页二进制内容</span></span><br><span class="line">    html = html.decode(<span class="string">&quot;GBK&quot;</span>, <span class="string">&quot;ignore&quot;</span>)<span class="comment">#转换编码</span></span><br><span class="line">    <span class="comment"># 获取网页中小说内容</span></span><br><span class="line">    reg = <span class="string">&#x27;&lt;dd&gt;&lt;a href=&quot;(.*?)&quot; title=&quot;(.*?)&quot;&gt;.*?&lt;/a&gt;&lt;/dd&gt;&#x27;</span><span class="comment">#获取链接和标题</span></span><br><span class="line">    reg = re.<span class="built_in">compile</span>(reg, re.S)</span><br><span class="line">    info= re.findall(reg, html)</span><br><span class="line">    <span class="comment">#由于是分组匹配，得到的列表中每个元素的[0]是链接，[1]是标题</span></span><br><span class="line">    <span class="comment">#保存到文件</span></span><br><span class="line">    <span class="keyword">if</span> info==[]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;获取章节目录失败&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):<span class="comment">#检查目录是否已经存在</span></span><br><span class="line">            os.makedirs(path)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">            realpath=path+<span class="string">&quot;\\&quot;</span>+i[<span class="number">1</span>]+<span class="string">&quot;.txt&quot;</span></span><br><span class="line">            <span class="keyword">if</span> os.path.exists(realpath):<span class="comment">#避免重复爬取</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                getNovelByURL(i[<span class="number">0</span>],realpath)<span class="comment">#调用获取单页面内容的函数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为博客增加访问统计</title>
      <link href="/posts/hexo_visit_count/"/>
      <url>/posts/hexo_visit_count/</url>
      
        <content type="html"><![CDATA[<p>用 CNZZ 统计网站访问量</p><span id="more"></span><p>我用的主题是 shana，网站统计的配置部分是这样的：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 网站统计</span></span><br><span class="line"><span class="comment"># 站长统计 填写id</span></span><br><span class="line"><span class="comment"># eg:　</span></span><br><span class="line"><span class="comment"># CNZZ: 123456789</span></span><br><span class="line"><span class="attr">CNZZ:</span></span><br></pre></td></tr></table></figure><p>百度了一下发现 CNZZ 和百度统计都可以统计网站访问量。当然想统计呀，这样就更有动力来写了。</p><p>尝试了百度统计一个多小时之后还没弄好，我就开始试 CNZZ，毕竟主题的作者直接写在配置里面了，还是按照规矩来吧。</p><p><strong>CNZZ 不是中国站长（cnzz.cn）那个，而是友盟（cnzz.com）</strong>，我一开始进的是中国站长……找了老半天统计功能才发现进错网站了。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>注册一个 cnzz 账号</li><li>填写网站信息</li><li>复制统计代码</li><li>粘贴统计 id 到配置文件</li><li>粘贴统计代码到需要统计的页面开头</li></ol><p>粘贴代码到哪里又是个问题，根据前面尝试弄百度统计的经验，在主题文件夹下的<code>\layout\_partial</code>内是用于生成页面的代码，摸索一阵后发现应该粘贴到<code>head.ejs</code>里面以达到生成在页面前面的效果。</p><p>一开始没显示“站长统计”的字样我以为是无效，甚至还去 issue 里面问 shana 的作者怎么弄。</p><p>后来发现，原来是 shana 主题在切换背景图片的时候会掩盖字样……好吧是我太心急了。</p><h1 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h1><h2 id="hexo-的页面生成方式"><a href="#hexo-的页面生成方式" class="headerlink" title="hexo 的页面生成方式"></a>hexo 的页面生成方式</h2><p><code>theme\&lt;themeName&gt;\layout\_partial</code>下的文件都是.ejs 文件，应该是“扩展的 js”文件，用于生成相应的页面。</p><p>例如<code>head.ejs</code>中专门存储生成 html 文件的<code>&lt;head&gt;</code>部分</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>文章一开始是全部展开的，浏览起来比较难受，查了之后发现其实只需要在文章中加上一个标记就可以折叠。</p><p>.md 文件里面是下面这种结构：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">显示出来的文章提要</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">正文</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署博客的过程记录</title>
      <link href="/posts/hexo_deploy_log/"/>
      <url>/posts/hexo_deploy_log/</url>
      
        <content type="html"><![CDATA[<p>建立 Hexo 博客的相关知识整理成的笔记，不太全面。</p><span id="more"></span><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p><strong>这部分算是年终总结一样的东西吧。</strong></p><p>在 2018 年 8 月底的时候，我还是对域名、服务器等名词没有了解的一个 web 小白，那时一个朋友在群里发了一个非常好看的个人博客，我一下子就被吸引了，羡慕但是又没有能力自己弄，感觉太难了。当时我只学过一点 HTML 和 CSS，javaScript 还未怎么学，而且已经很久没有练习过，已经忘得差不多。</p><p>那个朋友东给我发了一个《基于 CentOS 搭建 WordPress 个人博客》的页面，东说他想弄，已经租了个腾讯云服务器，问我有没有兴趣。我当时还是蛮犹豫的，对于我来说难度还是很大的，那个网页上并不是个教程，说的内容我大部分看不懂。不过我还是想整一个的，于是尝试去学。</p><p>我属于那种“如果不能基本上理解一个概念，那么就会完全拒绝相关的知识输入，即便已经记住了也不会长久”的学习类型，而且以前又比较自闭，不想问别人，只在网上查找已有的问题答案，所以学习起来特别困难。</p><p>买了域名，备了案，租了学生价服务器，照着教程<a href="http://www.jianshu.com/p/5b6587b95901">《新手如何用腾讯云服务器搭建一个 wordPress 博客-简书》</a>鼓捣了好久终于弄出来一个 wordPress 博客。但我当时仅仅是“知其然而不知其所以然”，并不认为自己学到了什么，弄好了主页就一直搁置在那里，感觉心疼租服务器的钱但是又没办法。开学了又有很多事情要忙，大学并不像高中的时候想象的那么悠闲。</p><hr><p>直到一个学期结束我才考虑起开始重新弄个博客。经过了一个学期，我学会了更多的东西，把上个暑假的建博客的流程给理解了应该没什么问题。</p><p>我开始整理以前编程留下的笔记。以前使用的是 vnote，但是我觉得界面不太好看，而且功能大多用不上，遇到问题百度也搜不到，碰巧它这时又不知道出了什么毛病，于是换成了 Typora，把笔记重新筛选了一遍。分类尽可能少，渐渐地开始“一元化”笔记。</p><p>随后又想起了以前只学了一点的 git。没有一次性学完它，导致我没有去用它，顶多只是使用网页版 github 上传一下代码点亮小绿块让自己爽一下，也搁置了很久。说起来我真是喜欢半途而废。</p><p>不如把这整理好的笔记传到 github 上面备份吧，感觉比网盘备份 b 格高。刚好前几天学 Python 的时候找到了廖雪峰的 git 教程，这让我有些后悔没有听另一个朋友朱的推荐。</p><p>整 github 的时候又发现了 github page 的功能，想起来 github 也可以搭博客，所以今天（2019-2-6）就研究了一整天搭好了这个博客。挑了个和我以前羡慕的个人博客相同的主题，美滋滋，成就感爆棚。</p><hr><p>好了，接下来我来分享一下我是如何搭建这样一个博客的。不保证零基础能看懂。</p><h1 id="Hexo——一个博客框架"><a href="#Hexo——一个博客框架" class="headerlink" title="Hexo——一个博客框架"></a>Hexo——一个博客框架</h1><p>和 WordPress 差不多，都是用来搭建博客的一个框架。但是问题来了——</p><p><strong>框架</strong>，又是啥？</p><p>自学计算机类的知识最大的问题就在于百度到的东西需要各种各样的前置知识，很难一下子理解那是什么意思，越听越迷糊。不管在看这篇博客的你知不知道框架的意思，反正上个暑假的我是不明白的。而且这是简称，光百度一个“框架”好像又搜不到明确的定义。</p><p>这个障碍一直妨碍着我对<code>bootstrap</code>、<code>vue</code>、<code>MFC</code>、<code>QT</code>等框架的准确理解，后来我才知道，<strong>软件框架</strong>到底是个啥</p><p>简而言之，在我的理解里面，框架，就是<strong>可以复用的代码</strong>，就是“不要重复造轮子”中的<strong>“轮子”</strong>，就是别人已经写好的封装了各种复杂 API 的<strong>库</strong>。框架可以帮你完成一些基础语法本身也可以完成的事情，让你不必在建房子的时候从烧砖开始，而是可以解放思维直接开始画楼房设计图。</p><p>Hexo，就是一个可以帮助你生成静态网页的一个工具，所有的核心功能比如打标签归档加时间，以及界面美化工作都帮你做好了，你可以专注于博客内容的创作，而不必学习如何“烧砖”（写前端代码）。网上搜索“hexo”，可以找到它的<a href="https://hexo.io/zh-cn/">官网</a>。hexo 的官网文档做得非常好，不仅提供准确的中文版文档，还附有视频，让我学得非常之愉快。</p><p>不过作为一个“楼房设计工程师”，你还是需要一些其他的帮手来帮助你“建房子”。</p><p>在 Hexo 官网的文档里面有详细的教程教你如何安装必须的东西，我在这里只讲一些理解性的东西，详细的指令不多讲。</p><hr><p>安装 Hexo 的时候你需要俩工具：</p><ul><li>node.js</li><li>git</li></ul><h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><p><a href="https://baike.baidu.com/item/node.js/7567977">node.js-百度百科</a></p><blockquote><p>Node.js 是一个让 JavaScript 运行在服务端的开发平台，实质是对 Chrome V8 引擎进行了封装。</p></blockquote><p>引用自<a href="https://www.cnblogs.com/thinkam/p/8262743.html"><a href="https://www.cnblogs.com/thinkam/p/8262743.html">node.js 和 JavaScript 的关系-博客园</a></a></p><blockquote><ul><li>JavaScript 是一门语言</li><li>node.js 不是一门语言，也不是一种特殊的 JavaScript 方言 - 它仅仅就是用于运行普通 JavaScript 代码的东西</li><li>所有浏览器都有运行网页上 JavaScript 的 JavaScript 引擎。Firefox 有叫做 Spidermonkey 的引擎，Safari 有 JavaScriptCore，Chrome 有 V8</li><li>node.js 就是带有能操作 I&#x2F;O 和网络库的 V8 引擎，因此你能够在浏览器之外使用 JavaScript 创建 shell 脚本和后台服务或者运行在硬件上</li></ul></blockquote><p><strong>个人理解：node.js 是 javaScript 的解释器</strong></p><p>为啥要安装它呢？应该是为了使用 node.js 的 npm（Node Package Manager，是一个 node.jS 包管理和分发工具）,可以理解为一个安装程序，可以给你安装官方已经整合好的包。当然其他作用我也不知道。</p><p>如果已经有 git 和 node.js，直接使用下面指令进行安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$ npm install -g hexo-cli`</span><br></pre></td></tr></table></figure><p>虽然前面有个 linux 系统的 shell 的命令提示符，但是安装好 node.js 之后用 windows 系统的 cmd 里面也是可以用的。至于打开 cmd，win+R 打开运行窗口输入“cmd”，回车就出现了。记得输入时不要输入前面的$符号，那是命令提示符。</p><h1 id="git——版本控制系统"><a href="#git——版本控制系统" class="headerlink" title="git——版本控制系统"></a>git——版本控制系统</h1><p>git 的<a href="https://git-scm.com/download/win">安装</a>和<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">使用</a>就不多说了。用于将 Hexo 生成好的页面给推送到 github 这个远程库里。至少要知道 git 的一些基本概念。</p><h1 id="Hexo-的使用"><a href="#Hexo-的使用" class="headerlink" title="Hexo 的使用"></a>Hexo 的使用</h1><p>这 Hexo 安装好之后你可以在 cmd 使用它的指令。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化 Hexo 的指令（命令提示符不写了，下同）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init 指定目录（省略则初始化当前目录）</span><br></pre></td></tr></table></figure><p>初始化 hexo 之后会在你指定的目录生成一大堆文件，这些文件和文件夹是从它的官方 github 库里面 clone 下来的，这也是一开始要下好 git 的原因。</p><p>比较重要的几个文件是：</p><table><thead><tr><th>_config.yml</th><th align="left">配置文件，使用 YAML 来写的数据文件</th></tr></thead><tbody><tr><td>scaffolds</td><td align="left">模板文件夹，存放新文章的模板</td></tr><tr><td>source</td><td align="left">文章，图片，草稿等资源都放在这里</td></tr><tr><td>themes</td><td align="left">主题文件夹，Hexo 根据主题生成静态页面</td></tr></tbody></table><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>或者简写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>前文说过，Hexo 是用来帮助你生成静态网页的一个工具，就是用这个指令。这个指令将目前编写好的文章以及主题等东西给包装好，生成用于上传到你的网站上（这里我们用 github page）的网页。至于此命令的详细说明，请看 Hexo 文档。</p><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>说实话我在看文档的时候没看懂“部署网站”是啥意思，后来知道了，这就是将<code>hexo generate</code>生成的静态页面推送到你的 github 库里面去的意思。</p><p>指令是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>也可以简写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p><code>deploy</code>可以与<code>generate</code>共同简写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>一个意思，都是先生成静态页面，再部署网站。</p><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`$ hexo server`</span><br></pre></td></tr></table></figure><p>在自己电脑上运行服务器来查看博客的效果，默认情况下，访问网址为： <code>http://localhost:4000/</code></p><p>其余指令我目前还没用到，详情请见<a href="https://hexo.io/zh-cn/docs/commands">Hexo 文档</a></p><h1 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h1><p>在 github 仓库的 setting 里面，有一栏叫做 github page，在其中的 source 选项内选择作为数据源的分支，一般将博客部署在 master 分支，所以选择 master 作为数据源。</p><p>你可以选择两种方式来给你用来存放博客数据的仓库起名字，第一种就是你百度经常看到的：<code>你的用户名.github.io</code>的形式，这种形式会让你在选择好数据源之后提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your site is published at https://你的用户名.github.io/</span><br></pre></td></tr></table></figure><p>然后你可以使用给出的链接来打开你的博客，点击链接，会默认打开你数据源分支内的 index.html 文件作为主页，如果没有这个文件就会<code>404：找不到页面</code>，当然，Hexo 会帮你生成好 index.html，只要你把生成好的页面给 push 上 github 就可以。如果你知道包含哪些文件的话，自己手动上传应该也 ok。</p><p>有了这种方式，其实你甚至可以不需要 Hexo，自己写 html 页面也能做一个博客，不过这样就像前文说的从“烧砖”开始建楼了。</p><p>第二种起名方式就是不按照第一种来，随便起，比如用户名是<code>HaneChiri</code>，创建的仓库名叫<code>blog</code>,那么选择完数据源分支之后呢，得到的提示可能是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Your site is published at https://hanechiri.github.io/blog/</span><br></pre></td></tr></table></figure><p>这样需要写的网址就会长一些，要加上仓库名。试了一下这样是可以的。我的两个仓库就分别使用了以上两种方式。</p><h1 id="markdown-的图片"><a href="#markdown-的图片" class="headerlink" title="markdown 的图片"></a>markdown 的图片</h1><p>这里的文章使用的是 markdown 语法，一个比较容易学习的标记语言，可以让你手不离键盘地完成排版，我现在就是在用 markdown 来写.md 文件，然后放进 source 文件夹的_post 子文件夹里面，之后再上传。</p><p>markdown 可以方便的插入图片和超链接。但是图片一般来说是利用相对路径放在.md 文件的附近的，生成静态页面的时候图片的路径又会被打乱，导致图片显示失败。</p><p>Hexo 文档里面提供了几种方式来插入图片，比如插件。但是那种方式无法实时预览，而且难弄。</p><p>所以干脆使用外部图片链接，在 github 上面再建立一个仓库用来存放图片，提供链接给博客使用。</p><p>要这样使用的前提是去开启 github page 这个设置。</p><p>比如用户名是<code>HaneChiri</code>，创建的仓库名叫<code>blog_images</code>，那么在这个仓库根目录下的图片<code>avatar.jpg</code>的链接就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hanechiri.github.io/blog_images/avatar.jpg</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/HaneChiri/blog_images/avatar.jpg</span><br></pre></td></tr></table></figure><p>后者是浏览编辑这个图片的链接，而不是图片本身。</p><p>上传之后无法访问这个链接也不要急，等几分钟就可以了。</p><h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><ul><li><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/">【持续更新】最全 Hexo 博客搭建+主题优化+插件配置+常用操作+错误分析-遇见西门</a></li></ul><h1 id="步骤总结"><a href="#步骤总结" class="headerlink" title="步骤总结"></a>步骤总结</h1><p>由于网上教程很多，我在这里只是简单把我部署博客的步骤总结一下：</p><ol><li>开一个 github 空仓库（注册和新建仓库应该不用多说）</li><li>在一个本地空文件夹内初始化 hexo</li><li>此文件夹内，与远程库建立关联（其实这一步可以不必，不过以后可能用得到，先弄着吧）</li><li>给<code>_config.yml</code>文件内<code>deploy</code>属性设置好<code>type</code>（: git，记得冒号后面有个空格）、<code>url</code>（github 仓库的链接）和<code>branch</code>（推送到的分支，一般用 master）</li><li>修改其他配置比如<code>title</code>、<code>author</code>、<code>new_post_name</code>、<code>language</code>、<code>post_asset_folder</code></li><li>安装一个 git 部署的东西<code>npm install --save hexo-deployer-git</code></li><li>生成并在本地测试页面效果</li><li>生成并部署网站<code>hexo d -g</code></li><li>新建，编辑文章然后重复上一步</li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客站务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
