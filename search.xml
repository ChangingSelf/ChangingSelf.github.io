<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【001】整理混乱的生活</title>
      <link href="/posts/reboot-self-management-system/"/>
      <url>/posts/reboot-self-management-system/</url>
      
        <content type="html"><![CDATA[<p>最近这段时间，我的生活还是挺混乱的，有很多的事情要忙，有很多的时间与精力（足以应对这些事情），但是就是不能够充分地利用好现有的资源来做正事。要么就是浪费在看漫画看小说，要么就是逃避般的放空自己，去睡觉或者什么都不干。</p><p>尝试使用文字来梳理自己现在的状况，理清现在应该做什么事情。顺便记录下这个过程，以便自己以后参考。</p><p><strong>本文仅供参考，各位读者还是按照自己的方式来吧。</strong></p><a id="more"></a><h1 id="现在要做的事情有哪些？"><a href="#现在要做的事情有哪些？" class="headerlink" title="现在要做的事情有哪些？"></a>现在要做的事情有哪些？</h1><p>首先要将所有的任务都收集起来，尽量不要遗漏。</p><p>可以写在纸上，也可以使用清单类软件将任务列出来。</p><p>为了避免重复和遗漏，可以先想几个分类，再在分类下列举。比如，在学校作业方面、自我提升方面、准备考研方面、准备期末考试方面分别有哪些任务。可以先只写任务名称，后面再补内容和截止时间。想到什么都列出来，也不管是不是可执行的任务。</p><ul><li><p>学校作业：在这个分类下面，脑海中遍历现在正在进行的每个课程。</p><ul><li>数据库<ul><li>实验报告</li><li>复习期末考试</li><li>课设小组组员任务安排</li></ul></li><li>数字图像处理<ul><li>上机作业：周四前上交</li><li>补频域处理录播</li></ul></li><li>JSP上机准备</li><li>网络测控技术期末复习</li><li>信息安全期末复习</li></ul></li><li><p>准备考研</p><ul><li>概率论第一二三章复习：周六前</li><li>每日一题</li><li>周日的单词测试错词整理复习</li><li>思修主要知识点复习</li><li>近代史主要知识点复习</li><li>微分中值定理课后笔记整理</li><li>总结前一段时间单词升级内容</li><li>英语六级复习计划</li><li>慕课数据结构课程</li><li>固定背单词时间</li><li>英语做真题阅读</li><li>英语六级听力练习</li><li>养成做错题的习惯</li></ul></li><li><p>自我提升</p><ul><li>【博客】数字图像处理：直方图均衡化</li><li>【博客】分类与标签整理</li><li>整理电脑</li></ul></li></ul><h1 id="规范化以及确定优先级"><a href="#规范化以及确定优先级" class="headerlink" title="规范化以及确定优先级"></a>规范化以及确定优先级</h1><p>将需要做的事情都列出来了之后，需要对它们进行规范化，因为有些事情根本不能执行，比如”养成做错题的系统“、”固定背单词时间“等。</p><p>任务得是可以执行的，需要有一个目标，达成了这个目标之后，就可以说这个任务完成了。</p><p>关于目标，可以参考SMART法则，也就是具体的（Specific），可度量的（Measurable），可行的（Attainable），与自己其他目标相关的（Relevant），有时间限制的（Time-bound）。具体内容百度”SMART原则“会有很多解释，这里不多说了。这里比较重要的就是具体化和时间限制。<del>可行性啥的，对于作业来说，难道不可行你就不做了吗QAQ。</del></p><p>我现在尝试规范一下我上面列出的任务。由于时间问题，并不是每个任务都写得很详细。</p><ul><li><p>学校作业</p><ul><li>数据库<ul><li><strong>实验报告：根据钉钉群内发的”实验报告内容“，将之前做的上机代码整合起来，完成实验报告文档。周五之前完成。</strong></li><li><strong>周五之前看完剩下的几个数据库慕课视频</strong></li><li>复习期末考试：下周一之前复习完第一讲到第十讲，即SQL语句之前的内容。</li><li>课设小组组员任务安排：周五原数据库课的时间，小组内开一次会议。</li></ul></li><li>数字图像处理<ul><li><strong>上机作业：周四前上交</strong><ul><li>周二完成bug的修改，周三录制要上交的视频</li></ul></li><li>补频域处理录播，在下周一之前</li></ul></li><li>JSP上机准备：周二花一节课时间，整理一下JSP相关的知识点</li><li>网络测控技术期末复习：下周一前复习第一讲和第二讲的录屏回放，完成知识点的整理</li><li>信息安全期末复习：下周一前复习第一二三四讲的录屏回放，完成知识点的整理</li></ul></li><li><p>准备考研</p><ul><li>数学<ul><li>周六前补完上次概率论的录播</li><li>概率论第一二三章复习：周六前整理知识点笔记，以及例题笔记</li><li>微分中值定理课后笔记整理：周二先回忆一遍微分中值定理相关例题，重新做一遍例题</li><li><strong>想法：</strong>固定每天在八点到九点为做数学题的时间，做今天的每日一题、作业或者之前留下的错题</li></ul></li><li>英语<ul><li>周三前英语作业</li><li>整理复习周日的单词测试的错词到笔记本上，第二天早上测试一下自己</li><li>总结与复习前一段时间单词升级内容，只看主题词回想有哪些单词可以替代它</li><li>英语六级复习计划：周四前制定</li><li><strong>想法：</strong>固定背单词时间在早上七点半到八点</li></ul></li><li>政治：主要是理解概念，暂时不需要背知识点，只需要做框架笔记，便于回忆<ul><li>周日前看一遍思修回放</li><li>周日前看一遍近代史回放</li><li>周日前看一遍毛中特回放</li></ul></li><li>专业课<ul><li>周日前慕课数据结构课程第一讲</li></ul></li></ul></li><li><p>自我提升：支线任务，不规定截止时间，啥时候有空才去做</p><ul><li>【博客】数字图像处理：直方图均衡化</li><li>【博客】分类与标签整理</li><li>整理电脑Buffer文件夹和Download文件夹</li></ul></li></ul><p>标粗的就是必须要做的，优先级比较高。</p><p>标注了“想法”的项，不是可执行的任务，而只是一个笔记而已，整理一下：</p><ul><li><p>固定背单词时间在早上七点半到八点（因为原本有这个习惯，捡回来并不难）</p></li><li><p>固定每天在八点到九点为做数学题的时间，做今天的每日一题、作业或者之前留下的错题。（难点在于这里，我总是以各种理由逃避刷题）</p></li></ul><h1 id="挑选任务去执行"><a href="#挑选任务去执行" class="headerlink" title="挑选任务去执行"></a>挑选任务去执行</h1><p>简单分析了一下后，明天（周二）要做的事情就是这些：</p><ul><li>【1.5h】花一节课时间整理一下JSP的知识点，准备周三的上机练习</li><li>【15min】整理错词</li><li>【30min】英语作业</li><li>【1.5h】【上午3、4节课】微分中值定理课后笔记整理，重新做一遍例题</li><li>【2h】看完剩下的数据库慕课视频，此任务留在当天完成其他任务后，如果仍然有时间精力再做</li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后挂一下自己。在写这篇的过程中，溜号去刷B站了。导致七点钟开始写，直到十点半才搞定。在本篇计划中本来要划给今天的任务只能推迟到明天了。</p><p>试着每周日的时候这样梳理一下下周要做的事情。按照列出的任务来定目标，定计划，这样好像比直接定目标要好一些。先试试。</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【自我管理系统】任务管理系统v200423</title>
      <link href="/posts/self-management-task-manage-v200423/"/>
      <url>/posts/self-management-task-manage-v200423/</url>
      
        <content type="html"><![CDATA[<p>梳理我现有的任务管理系统，以做出改进。</p><p>目前这个系统我并没有非常严格地在执行，因为没有养成这个习惯，但是我能够感受到它是有用的。</p><a id="more"></a><h1 id="目的（系统需求）"><a href="#目的（系统需求）" class="headerlink" title="目的（系统需求）"></a>目的（系统需求）</h1><p>建立并运行了这个系统后：</p><ul><li>当我得到一个任务的时候，我不会忘记这个任务或者遗失它的相关资料</li><li>能够让我明确地知道什么时候应该做什么事情，不会将时间浪费在迷茫上</li><li>当我要来执行一个任务的时候，我能够迅速地找到它的相关资料，不会将时间浪费在找资料上面</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>活页本</li><li>充足的方格活页纸</li><li>活页本隔页</li></ul><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p>参照子弹笔记的<code>集子</code>的概念。原本我使用的是子弹笔记，后来移植到活页本上了。</p><h2 id="月集子"><a href="#月集子" class="headerlink" title="月集子"></a>月集子</h2><p>使用一张活页纸</p><ul><li>上个月的目标完成情况</li><li>上个月的总结，以无序列表的形式列举一下自己干了啥，附加自己对上个月的一段话概括描述</li><li>本月的目标：可以动态添加，但是添加到本部分的内容一定要明确、具体</li></ul><h2 id="周集子"><a href="#周集子" class="headerlink" title="周集子"></a>周集子</h2><p>一周使用一张活页纸</p><ul><li>上周的目标完成情况</li><li>上周的总结，以无序列表的形式列举一下自己干了啥，附加自己对上周的一段话概括描述</li><li>本周的目标：可以动态添加，但是添加到本部分的内容一定要明确、具体。如果全部完成，可以从月集子中选取目标加到这里</li></ul><h2 id="日集子"><a href="#日集子" class="headerlink" title="日集子"></a>日集子</h2><p>一周的内容按照顺序写，一般来说是七天用两张活页纸</p><ul><li>今天要做的任务：参考子弹笔记的记号系统</li></ul><p>任务结构（均写在一行）：</p><ul><li>分类：比如说“数学作业”，总之是一眼就能看出来是啥任务就行</li><li>任务内容：尽可能精简</li><li>截止时间</li></ul><h1 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h1><h2 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h2><ul><li>触发条件：被分配了任务时。比如，老师在网课直播中口头提到了作业。</li><li>动作：<ul><li>由其截止时间判断任务级别是日级别、周级别还是月级别，添加到对应的集子</li><li>记录<ul><li>记录载体优先级：活页本，电子产品，大脑。优先级越低的载体在条件满足时尽量将记录整理到优先级高的载体。</li></ul></li></ul></li></ul><h2 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h2><ul><li>触发条件：任务条目过多</li><li>动作：<ul><li>在空白纸页处按照重要紧急度分类，誊抄一遍任务</li></ul></li></ul><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><ul><li>触发条件：集子周期结束时</li><li>动作：<ul><li>手机APP扫描，发送到电脑，按照<code>电脑文件管理系统</code>来进行归档</li><li>丢弃上一个周期已归档的活页纸</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>【自我管理系统】电脑文件管理系统v200417</title>
      <link href="/posts/self-management-file-manage-v200417/"/>
      <url>/posts/self-management-file-manage-v200417/</url>
      
        <content type="html"><![CDATA[<p>以此文梳理我的电脑文件管理系统，由于是我的文件管理系统，所以很多个性化的设置，读者建立自己的系统时可改为自己的。</p><a id="more"></a><h1 id="目的（系统需求）"><a href="#目的（系统需求）" class="headerlink" title="目的（系统需求）"></a>目的（系统需求）</h1><ul><li>当我产生或者获得一个新的文件时，知道存放到哪里</li><li>当我想要找到某个我需要的文件时，能够迅速找到</li><li>当我的电脑遗失或者重装时，重要的文件不丢失，能够迅速恢复</li><li>让我能够舒适地使用电脑</li></ul><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>腾讯电脑管家桌面助手独立版：用到它的桌面收纳格、文件夹映射（减少查找层级）</li><li>坚果云：用到云同步功能</li><li>Listary：快速搜索打开文件夹和软件，可以用everything代替</li></ul><h1 id="环境配置（数据结构）"><a href="#环境配置（数据结构）" class="headerlink" title="环境配置（数据结构）"></a>环境配置（数据结构）</h1><p>磁盘分为三个分区：</p><ul><li>C盘：系统盘。100G。</li><li>D盘：软件盘。自定义安装时改个盘符即可</li><li>F盘：文件盘。分配最大的空间。<u>用腾讯桌面整理将其映射到桌面</u></li></ul><p>F盘下建立子文件夹：</p><ul><li>Archive：存放我的作业等项目文件的存档。<u>使用坚果云同步</u>。</li><li>Blog：存放个人博客源文件</li><li>Buffer：缓冲区，用于存放正在进行的项目的文件。固定到快速访问，并<u>用腾讯桌面整理将其映射到桌面</u></li><li>MyNotebook：存放Vnote笔记本。<u>使用坚果云同步</u></li><li>Resource：存放资源，包括课件、软件以及其他各种学习资源<ul><li>Software</li></ul></li><li>UserFolder：用户文件夹（图片、下载、音乐、文档、视频等）移动到这文件夹，避免占用系统盘空间。<ul><li><strong>图片文件夹</strong>（<code>F:\UserFolder\Pictures</code>）下新建以下文件夹（因为暂时没有拍照存相片的习惯，所以没有相册文件夹）<ul><li>Wallpaper：存放壁纸图片。桌面右键菜单【个性化】-&gt;左侧菜单【背景】-&gt;【背景】选项选择“幻灯片放映”，将本文件夹设置为相册。</li><li>Temp：临时图片存放处。用于存放暂时保存的图片，默认此处的图片都是可以删除的，哪天想起来了就可以全选删除。</li><li>Useful：存放有用的图片，比如证件照片等。</li><li>Icon：图标包。图标可在<a href="https://www.flaticon.com/" target="_blank" rel="noopener">Flaticon</a>这个网站免费下载，用于装饰文件夹。</li></ul></li><li>将<strong>下载文件夹</strong>（<code>F:\UserFolder\download</code>）（作为收集箱文件夹）<u>使用腾讯桌面整理映射到桌面</u>，便于随时打开、观察它是否存在未处理的文件以及将文件拖入。</li><li><strong>视频文件夹</strong>（<code>F:\UserFolder\Videos</code>）新建Bilibili文件夹，存放自己做的B站视频。</li></ul></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>移动时注意先建立对应文件夹（如新建download文件夹），再将其路径指定为此文件夹，避免出现将整个F盘指定为用户文件夹的情况。</p><p>如果出现上述问题，可通过以下方案解决，它来自此<a href="https://zhidao.baidu.com/question/266780916556253685.html" target="_blank" rel="noopener">百度知道链接</a></p><blockquote><p>可以在注册表中修改<br>win+R 输入“regedit”<br>找到\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders<br>找数值为属 F:\ 的 修改了就行</p></blockquote><h1 id="标准流程（数据操作）"><a href="#标准流程（数据操作）" class="headerlink" title="标准流程（数据操作）"></a>标准流程（数据操作）</h1><h2 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h2><p>由于文件大多数来自网络下载，将用户文件夹中的“download”文件夹设置为<strong>收集箱</strong>。相比于之前单独新建一个收集箱文件夹，省去了从download文件夹移动到收集箱的过程。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>根据文件类型进行分类</p><ul><li>自己新建的工程文件：在Buffer文件夹中找到对应的项目文件夹（或者新建）放入。</li><li>下载的软件<ul><li>安装版：放入<code>Resource\Software\Installer</code></li><li>免安装版：放入<code>Resource\Software\Portable</code></li></ul></li><li>图片<ul><li>壁纸：放入<code>Pictures\WallPaper</code>文件夹</li><li>临时截图：放入<code>Pictures\Temp</code>文件夹</li><li>有用处的图片：放入<code>Pictures\Useful</code>文件夹</li><li>图标包：放入<code>Pictures\Icon</code>文件夹</li></ul></li><li>课件与讲义、笔记：放入Buffer文件夹中对应的课程文件夹</li></ul><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><p>归档还是挺重要的，以前做过的东西可能还要用到。例如近期，软件质量保证与测试这门课程需要使用上上个学期的软件工程导论的第四次上机作业<code>4_软工导论实验四透镜质量检测190618.rar</code>的代码和报告来进行测试，我就很快找到了。</p><p>当完成一个项目（比如课设、上机作业、校内校外活动例如某个比赛）后，将用到的资料打包为一个压缩包，只保留能够还原此项目的必要资料，例如编译生成的exe之类的都删除。</p><p>压缩包命名为<code>[大学学期号_][科目名称]&lt;项目名称&gt;&lt;六位数归档日期&gt;</code>，其中尖括号必选，方括号可选例如：<code>5_计算机图形学隐面算法及光照模型191129.rar</code>代表：大学第五学期（大三第一学期）做的隐面算法及光照模型项目，它在2019年11月29日归档。</p><p>这个归档日期并不代表它做完的日期，而是我在将其打包成压缩包并放入Archive文件夹的日期，或者是我根据文件的最后更新时间推测出的项目完成时间。因为我在形成这个归档系统之前，并没有记录完成时间的意识。</p><p>打包好之后，将其放入Archive文件夹对应的年份文件夹中。若是有多个类似的项目文件（比如同一个课程的课设和上机），就新建一个文件夹将它们放在一起，但是内部不再新建新的层级的文件夹。</p><p>此时，Archive文件夹中的一个示意结构如下：</p><ul><li>Archive<ul><li>0000：用于存放未整理好的归档文件，这是我之前重构Archive文件夹时留下的，我觉得没有必要删除，就留着了。</li><li>2017：存放2017年的项目文件<ul><li>vb：2017年写的vb项目的文件夹<ul><li><code>是英雄就下一百层171125.rar</code>：其实完成时间还要更早，但是最后更新日期是这个所以就用了它</li><li>……</li></ul></li><li><code>1_第八届创业先锋挑战赛171011.rar</code></li><li>……</li></ul></li><li>2018：<ul><li>……</li></ul></li><li>2019：<ul><li>5_计算机辅助设计：同一科目的项目文件开一个文件夹存放<ul><li><code>5_CAD复习笔记191210.rar</code></li><li><code>5_CAD三类自由曲线191129.rar</code></li><li><code>5_CAD旋转的三角形191129.rar</code></li><li><code>5_CAD折线路径191129.rar</code></li></ul></li><li><code>明日方舟代理指挥190721.rar</code>：不是学校作业的就不需要学期号了</li><li>……</li></ul></li></ul></li></ul><p>Archive文件夹使用云同步，重装系统后它是最快恢复的部分，这让我真正意识到建立一个完善的系统是多么重要。</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><ul><li>双击ctrl使用Listary或者使用everything查找项目名称</li><li>或者进入对应功能的文件夹手动查找，按照上面的方式设置，查找层级一般不会超过三层（因为还有桌面映射）</li></ul><h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><p>根据F盘中文件夹中数据的重要程度来执行不同的策略。</p><p>本系统中最为重要的文件是<code>Archive</code>中的文件，因为这里面都是我自己积累下来的自己完成的代码以及各种资料，它们是不可恢复的。</p><p>其次是存放着日记的<code>MyNotebook</code>文件夹，虽然不可恢复但是对我来说只要不泄露就行，删日记这种事情我以前没少干。</p><p>它们都使用了坚果云同步，以及定期移动硬盘备份。</p><p>接着是<code>Blog</code>文件夹，它存放着我个人博客的hexo源代码。我使用git来对它进行管理，注意这个git库和它用于部署的git库不一样，这个是用于管理源代码而不是发布的内容（public文件夹）的。每发布一篇博文，或者修改一次配置，就commit一次。将其push到github的私有库，并通过码云的仓库导入功能同步过来，这样就轻松有了两份备份，而且自带历史版本管理。</p><p><code>Buffer</code>文件夹不进行备份，借此让我在项目结束后尽快归档，避免数据丢失。</p><p>最不重要的是<code>Resource</code>文件夹，里面存放的资源（软件安装包、课件、各种电子书）都是可以再次获取的，并不包含我的心血在其中。基本上不需要备份。偶尔一些比较难以获取的（比如下载速度贼慢的）会备份到百度云盘（莫得选择，坚果云的流量不能浪费）上。</p><p><code>UserFolder\Video\Bilibili</code>：在每次录制并上传一个新的视频后，将其资料归档到这个文件夹，因为视频压缩后也很大，所以使用百度云盘备份。备份时机在每次录制并上传一个新的视频后。</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>博客总目录</title>
      <link href="/posts/blog-catalogue/"/>
      <url>/posts/blog-catalogue/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是本博客站点的文章目录索引，如果你想在本站逛一逛，可以从这里开始。</p><p>如果想要搜索特定内容，请结合标签、分类和站内搜索功能。部分博客有对应的B站视频，以及github库，详见各自文章的开头传送门。</p><p>此目录并非包含本站所有文章，比如日志总结之类的不一定会放到目录。</p><p>如果觉得本站访问速度慢，可以在【友情链接】中找到<a href="https://changingself.gitee.io/" target="_blank" rel="noopener">托管在gitee的本站链接</a>，速度会快很多</p><a id="more"></a><h1 id="这个博客的内容"><a href="#这个博客的内容" class="headerlink" title="这个博客的内容"></a>这个博客的内容</h1><p>以下是我的博客内容的简单分类，根据我前一次搭建博客的经验所得。</p><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>过程复盘</td><td>记录学习实践一个事物的过程，侧重记录与反思</td></tr><tr><td>知识整理</td><td>针对某一部分知识进行集中整理方便查阅，例如API、语法、命令等</td></tr><tr><td>解决方案</td><td>针对遇到的某个具体问题寻找解决方案</td></tr><tr><td>算法理解</td><td>针对某个具体算法的理解掌握</td></tr><tr><td>工具使用</td><td>对于框架、软件、网站等工具的使用方法与心得经验，或是简单推荐</td></tr><tr><td>目录索引</td><td>定期将本博客的文章索引起来，或者整理一些有用的参考链接</td></tr><tr><td>日志随笔</td><td>随便写点啥心情，或者年终总结之类的</td></tr></tbody></table><p>这个分类肯定会有交叉，没办法完全将它们分开，也没必要。每个分类虽然有交叉，但是也有自己的侧重。</p><p>比如<strong>过程复盘</strong>和<strong>知识整理</strong>，前者我会尽量将我探索的过程记录下来，夹杂着一些知识点，而后者会将知识点进行简单罗列便于查询。</p><p><strong>解决方案</strong>是针对某个具体的问题编写解决步骤，而<strong>工具使用</strong>则是将使用这个工具的一些常见的问题集中解决。</p><p><strong>日志随笔</strong>里面可能会对近期写的一些博文进行索引，但是是按照时间顺序线性串联；而<strong>目录索引</strong>则是专门索引一个系列的文章。</p><p><strong>算法理解</strong>是针对某个具体的算法进行解析，从而达到学习的目的。</p><h1 id="python爬虫"><a href="#python爬虫" class="headerlink" title="python爬虫"></a>python爬虫</h1><ul><li><a href="http://yxchangingself.xyz/posts/python_spider_note1simple_spider/">python爬虫学习笔记1简易爬虫</a>：我的第一篇爬虫博客（2019-02-08），讲了一个爬取小说的简单爬虫</li><li><a href="http://yxchangingself.xyz/posts/python_spider_note2login_and_database/">python爬虫学习笔记2模拟登录与数据库</a></li><li><a href="http://yxchangingself.xyz/posts/python_spider_note3class_spider/">python爬虫学习笔记3封装爬虫类</a></li><li><a href="http://yxchangingself.xyz/posts/python_spider_note4optimization_of_the_login_function/">python爬虫学习笔记4模拟登录函数的优化</a></li><li><a href="http://yxchangingself.xyz/posts/python_spider_note5optimization_of_the_spider_class/">python爬虫学习笔记5爬虫类结构优化</a></li></ul><hr><ul><li><a href="http://yxchangingself.xyz/posts/Scrapy_spider_bilibiliRank/">练习利用Scrapy爬取b站排行榜</a>：开始学python的Scrapy框架了，参考书是崔庆才的《python3网络爬虫开发实战》。跟着教程敲完之后，又试着按照一样的逻辑去爬取了B站排行榜的数据。</li><li><a href="http://yxchangingself.xyz/posts/portal_login_encrypt/">学校信息门户模拟登录之密码加密</a>：以前写的爬虫无法登录到学校的信息门户上去了，因为门户的新JS代码将表单的密码先加密了一次，再将其与别的表单数据POST过去。使用的是AES加密的CBC模式。当时我对密码学知识还没有太多了解，所以如果有不太对的地方欢迎留言</li><li><a href="http://yxchangingself.xyz/posts/portal_login/">学校信息门户模拟登录</a>：将登陆我的学校信息门户的部分专门封装成一个模块，需要的时候导入。</li><li><a href="http://yxchangingself.xyz/posts/wechat_offical_account_spider_1_get_article_urls/">爬取微信公众号文章1获取文章链接</a>：通过已有的微信公众号个人订阅号来获取某个公众号的所有文章链接。缺点是需要手动登录并将cookies复制过来。</li><li><a href="http://yxchangingself.xyz/posts/wechat_offical_account_spider_2_fail_to_get_html/">爬取微信公众号文章2获取页面失败</a>：其实没有获取失败，只是因为用的控制台print的字符有数量限制，没显示完全导致误会。</li><li><a href="http://yxchangingself.xyz/posts/Scrapy_spider_1/">Scrapy爬虫框架（1）一个简单的可用的爬虫</a>：为了做一个疫情新闻爬虫而复习Scrapy</li></ul><hr><ul><li><a href="http://yxchangingself.xyz/posts/python_spider_parser_beautifulsoup/">python爬虫解析库BeautifulSoup速查</a></li></ul><h1 id="课设或上机作业思路分享"><a href="#课设或上机作业思路分享" class="headerlink" title="课设或上机作业思路分享"></a>课设或上机作业思路分享</h1><ul><li><a href="http://yxchangingself.xyz/posts/simple_inverted_index/">简易倒排索引</a>：智能信息检索作业</li><li><a href="http://yxchangingself.xyz/posts/java_game_FightFieldFrame/">java基于AWT的对战小游戏</a>：java课设，主要内容在<a href="https://www.bilibili.com/video/av54526303/" target="_blank" rel="noopener">B站的视频</a>说明</li><li><a href="http://yxchangingself.xyz/posts/MFC_RGB_demonstration/">MFC习题|RGB颜色模型演示程序</a>：计算机图形学的某个选做课后习题</li><li><a href="http://yxchangingself.xyz/posts/IMS_base_on_LAN/">【课设总结】基于LAN的即时通信软件</a>：python的tkinter程序，计算机网络的课设。</li><li><a href="http://yxchangingself.xyz/posts/python_des_gui/">【作业总结】python写的DES替代算法的gui小工具</a>：信息安全上机作业</li><li><a href="http://yxchangingself.xyz/posts/sound-card-data-acquisition/">【作业总结】声卡数据采集及处理</a>：计算机网络测控</li><li><a href="http://yxchangingself.xyz/posts/java_simple_studentInfoSystem/">【编程练习】java简易学生管理系统</a>：数据库基础上机练习</li></ul><h1 id="出于兴趣弄的"><a href="#出于兴趣弄的" class="headerlink" title="出于兴趣弄的"></a>出于兴趣弄的</h1><ul><li><p><a href="http://yxchangingself.xyz/posts/Africanights_simu_hr_1/">【编程练习】明日非舟抽卡模拟器（1）按照概率抽取干员星级</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/Africanights_simu_hr_2/">【编程练习】明日非舟抽卡模拟器（2）xml文件解析</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/cpp_student_info_management_system1/">c++学生信息管理系统（一）</a>：不是作业，是几个学期后想要试试看写原本的项目</p></li><li><p><a href="http://yxchangingself.xyz/posts/hexo_diary/">hexo日记本</a>：用hexo搭建一个本地的日记本（现在并没有在用了，因为新建和预览都比较麻烦）</p></li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul><li><p><a href="http://yxchangingself.xyz/posts/python_relative_path/">python相对路径是相对于哪里</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/python_read_ini_No_section/">python读取ini文件失败的原因</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/MFC_get_input_by_Dialog/">MFC用对话框获取输入</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/git_amend_commited_info/">更改git仓库已经commit的用户名和邮箱信息</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/update_old_hexo_blog_after_build_new_hexo_blog/">建新hexo博客后继续更新旧hexo博客的方法</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/win10_share_folder/">WIN10共享文件夹</a></p></li><li><p><a href="http://yxchangingself.xyz/posts/notepadpp_file_association/">notepad++添加文件关联</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 目录索引 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记第二次博客切换主题以及主题优化</title>
      <link href="/posts/hexo_blog_switch_theme_2/"/>
      <url>/posts/hexo_blog_switch_theme_2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery主题</a></li><li><a href="https://blog.csdn.net/qq_39610915/article/details/90679768" target="_blank" rel="noopener">Hexo博客优化：在Next主题中设置进阶版Live2D看板娘————拒绝踩坑！！！！</a></li><li><a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">进阶版Live2D的github库</a></li></ul><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2019年2月28日的时候第一次换了主题，从从<a href="https://github.com/ShanaMaid/hexo-theme-shana" target="_blank" rel="noopener">shana</a>（夏娜）换成了<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>，当时换主题的原因是：虽然二次元主题蛮好看的我挺喜欢，但是不实用，功能缺乏，而NexT作为一个使用人数非常多的主题，功能非常齐全，所以决定换主题。</p><p>2020年4月5日，也就是今天，我花了一个上午的时间将个人博客的主题换成闪烁之狐的<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">Matery</a>主题，既美观功能又丰富。</p><p><img src="https://i.loli.net/2020/04/05/I6UPO1TAuyEGqrk.png" alt="效果图"></p><h1 id="换主题"><a href="#换主题" class="headerlink" title="换主题"></a>换主题</h1><p>切换的方法和其他主题没有什么差别，下载或者clone主题到hexo文件夹的theme目录下，再在根目录的配置文件中切换即可。重点说一下我遇到的问题。</p><h2 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h2><p>用Next主题的时候，我添加了搜索插件，可以进行站内搜索，但是切换了主题之后，却不可以用了。虽然这个主题的右上角自带搜索按钮。</p><p>README里面关于这一点是这样说的：</p><blockquote><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre></blockquote><p>需要安装这么一个插件，可是我已经安装了不是吗？切换主题前还可以用的呀！</p><p>我去看了一下主题作者的博客以及也使用这个主题的朋友的博客，他们的站内搜索是可以用的。</p><p>后来才发现，next主题里面安装的插件是<code>hexo-generator-searchdb</code>而不是<code>hexo-generator-search</code>，末尾差了两个字母……</p><p>这两个主题支持的插件不一样，但是名字相似，而且配置部分里面都有上述的内容，所以很容易掉坑里。</p><p>把原本的搜索插件删除了就行了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$npm</span> uninstall hexo-generator-searchdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="升级live2d看板娘"><a href="#升级live2d看板娘" class="headerlink" title="升级live2d看板娘"></a>升级live2d看板娘</h1><p>原本使用的live2d插件是<code>hexo-helper-live2d</code>，模型是<code>koharu</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$npm</span> <span class="token function">install</span> --save hexo-helper-live2d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之前就得知有进阶版的live2D，不过一直没去弄，这次趁着切换主题，顺便将她升级一下。</p><p>这方面资料不太多，只搜到这么一篇教程：<a href="https://blog.csdn.net/qq_39610915/article/details/90679768" target="_blank" rel="noopener">Hexo博客优化：在Next主题中设置进阶版Live2D看板娘————拒绝踩坑！！！！</a></p><p>这篇教程教的是如何在Next主题下设置，改成Matery主题的也可以。<strong>以下步骤相同的部分直接引用自原教程</strong></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><blockquote><p>下载<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">大神项目</a>，解压到本地博客目录的themes/next/source下，修改autoload.js文件，将其中</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> live2d_path <span class="token operator">=</span> <span class="token string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> live2d_path <span class="token operator">=</span> <span class="token string">"/live2d/"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>我这个比较新的版本的<code>autoload.js</code>里面开头就是这两句：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注意：live2d_path 参数应使用绝对路径</span><span class="token keyword">const</span> live2d_path <span class="token operator">=</span> <span class="token string">"https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//const live2d_path = "/live2d-widget/";</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以直接将第二句注释打开，第一句注释上：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 注意：live2d_path 参数应使用绝对路径</span><span class="token comment" spellcheck="true">//const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/";</span><span class="token keyword">const</span> live2d_path <span class="token operator">=</span> <span class="token string">"/live2d-widget/"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里第二句赋值的内容需要修改为你放在source目录下的文件夹的名字。</p><p>比如我从github上面clone下来名字是<code>live2d-widget-master</code>，如果你不改文件夹名字，将其移动到<code>themes/next/source</code>下后，你需要将<code>themes/next/source/live2d-widget-master/autoload.js</code>这个文件开头声明的那个常量改为：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">const</span> live2d_path <span class="token operator">=</span> <span class="token string">"/live2d-widget-master/"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即source目录下的live2d文件夹的名字。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><blockquote><p>在/themes/next/layout/_layout.swing中,<body>标签中新增如下内容，########为你自己的github账号：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://########.github.io/live2d/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>标签中新增如下内容：一定一定要加上依赖！！！！！</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><p>我用的这个主题里面没有<code>layout/_layout.swing</code>这个文件，但是有<code>layout/layout.ejs</code>文件，其实是一样的，都说明了主题的布局</p><p>文件里面大致长这样：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> config.language %<span class="token punctuation">></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>&lt;%- partial('_partial/head') %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--需要加的三条语句--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://ChangingSelf.github.io/live2d-widget/autoload.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 其他的东西省略 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，目前在本地用<code>hexo s</code>预览是看不到的，因为这一句：</p><pre class="line-numbers language-html"><code class="language-html">&lt;script src="https://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>你的用户名</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token punctuation">.</span>github<span class="token punctuation">.</span>io<span class="token operator">/</span><span class="token operator">&lt;</span>你放在source目录下的文件夹名<span class="token operator">></span><span class="token operator">/</span>autoload<span class="token punctuation">.</span>js"<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要引用你部署在github仓库里面的js文件，但是你现在还没有部署上去，你需要先部署到github才能在本地预览，或者将这个绝对链接改为相对链接，这个比较复杂，还是用现在这种方法比较好。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><blockquote><p>在<strong>主题配置文件_config.yml</strong> 中,新增如下内容：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">live2d</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>想修改看板娘大小、位置、格式、文本内容等，可查看并修改 waifu-tips.js 、 waifu-tips.json 和 waifu.css。</p><p>最终效果如图：</p><p><img src="https://img-blog.csdnimg.cn/20190602135515459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM5NjEwOTE1,size_16,color_FFFFFF,t_70" alt=""></p></blockquote><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>我照着这个作者的教程走就搞定了。</p><p>不过还有个问题，那就是看板娘是放在左边的，有点挡正文，右边目录处倒是有一块很适合放看板娘的空白。</p><p>这个问题在她的github仓库的issue里面找到了<a href="https://github.com/stevenjoezhang/live2d-widget/issues/28" target="_blank" rel="noopener">答案</a></p><p>可以在刚刚的<code>\themes\matery\source\live2d-widget</code>目录下面的<code>waifu.css</code>设置她的位置：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#waifu</span> </span><span class="token punctuation">{</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*这个就是设置左右的*/</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">3</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease-in-out, bottom <span class="token number">3</span>s ease-in-out<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>改成下面这样：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#waifu</span> </span><span class="token punctuation">{</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> -<span class="token number">1000</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*left: 0;*/</span>    <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span><span class="token number">3</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> transform <span class="token number">.3</span>s ease-in-out, bottom <span class="token number">3</span>s ease-in-out<span class="token punctuation">;</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以了。</p><p>关于这个left和right选项的具体数值设置方式如下（vscode给我提示的）：</p><blockquote><p>Specifies how far an absolutely positioned box’s right margin edge is offset to the left of the right edge of the box’s ‘containing block’.</p><p>Syntax: <length> | <percentage> | auto</p></blockquote><p>也就是说可以是长度、百分比、自动，这三种模式，一开始的<code>left:0</code>其实是百分比的形式。后面调整的<code>right:100px</code>表示看板娘距离右边界100像素（防止点不到互动按钮）</p><p>而要修改将其关掉后让看板娘重新显示的条条的样式，则需要修改下面这个：</p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token id">#waifu-toggle</span> </span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#fa0</span><span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">66</span>px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>    <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">12</span>px<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*right: 0;*/</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">5</span>px <span class="token number">2</span>px <span class="token number">5</span>px <span class="token number">5</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">transition</span><span class="token punctuation">:</span> margin-left <span class="token number">1</span>s<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">60</span>px<span class="token punctuation">;</span>    <span class="token property">writing-mode</span><span class="token punctuation">:</span> vertical-rl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我还是继续将它放在左边，不过将它挪出来了一点，免得我点不到。</p><p>说实话这个看板娘超可爱！</p><h1 id="换图床"><a href="#换图床" class="headerlink" title="换图床"></a>换图床</h1><p>这个主题对图片的需求量大了很多，再继续用github图床的话担心速度慢显示效果不好。所以选择了其他图床。</p><p>最后选择了SM.MS图床，它是免费且无需注册就可以上传图片，这种图床缺点就是不太放心，不过这个也算是一个大图床，不用太担心它挂掉。大不了重要的图片再上传到github图床。</p><p>PicGo也支持SMMS图床，所以图床工具也有了。</p><p>最好在PicGo的插件商店下载一个叫做<code>smms-user</code>的插件，再注册一个SMMS的用户获取API口令填进去，这样上传上去的内容自己还能找得到，还可以删除。</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业总结】python写的DES替代算法的gui小工具</title>
      <link href="/posts/python_des_gui/"/>
      <url>/posts/python_des_gui/</url>
      
        <content type="html"><![CDATA[<p>信息安全的上机作业：实现DES替代算法，不限语言，可以调库</p><p><a href="https://github.com/ChangingSelf/DES" target="_blank" rel="noopener">github库传送门</a></p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200402080056.png" alt="完成图"></p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://blog.csdn.net/whatday/article/details/97423901" target="_blank" rel="noopener">python3 bytes与hex字符串互转</a></p></li><li><p><a href="https://www.it610.com/article/1223283792861564928.htm" target="_blank" rel="noopener">对于Python中的字节串bytes和字符串以及转义字符的新的认识</a></p></li><li><p><a href="https://www.jianshu.com/p/66551c2b6b91" target="_blank" rel="noopener">python常用的十进制、16进制、字符串、字节串之间的转换</a></p></li><li><p><a href="https://blog.csdn.net/ahilll/article/details/81531587" target="_blank" rel="noopener">Python GUI之tkinter窗口视窗教程大集合（看这篇就够了）</a></p></li></ul><h1 id="pyDes库"><a href="#pyDes库" class="headerlink" title="pyDes库"></a>pyDes库</h1><p>使用python来写最简单，安装一个pyDes库即可。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$pip</span> <span class="token function">install</span> pyDes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我采用的是默认的ECB（Electronic CodeBook电码本模式）。下面介绍的API也都是用最简单的版本。</p><p>首先传入密钥创建一个des对象：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pyDeskey <span class="token operator">=</span> <span class="token string">'Ts%uN#w4'</span>  # 密钥需要<span class="token number">8</span>个字符，即64bitdes <span class="token operator">=</span> pyDes<span class="token punctuation">.</span>des<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 两种填充方式</span>des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain_text<span class="token punctuation">,</span>pad<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span>padmode<span class="token operator">=</span>pyDes<span class="token punctuation">.</span>PAD_NORMAL<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 如果用默认模式，需要设置pad参数</span>des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain_text<span class="token punctuation">,</span>padmode<span class="token operator">=</span>pyDes<span class="token punctuation">.</span>PAD_PKCS5<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># plain_text是明文,padmode是填充模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果只传入明文，就需要注意明文的长度问题；</p><p>在<code>PAD_NORMAL</code>模式下设置pad参数的话，就代表使用pad的字符来填充明文不够长度的部分；</p><p>在<code>PAD_PKCS5</code>模式下不能设置pad参数。一般用这个比较好。</p><h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><pre class="line-numbers language-python"><code class="language-python">des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher_text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><h2 id="MyDes类"><a href="#MyDes类" class="headerlink" title="MyDes类"></a>MyDes类</h2><p>先写一个MyDes类将原本的pyDes.des类封装一下。这样可以加一些自己的方法，而且不用担心会不小心覆盖掉原来的方法。</p><p>一开始写的类方法：</p><ul><li>构造方法</li><li>加密：传入明文bytes，返回密文bytes</li><li>解密：传入密文bytes，返回明文bytes</li><li>随机生成密钥：随机生成8个字符的字符串</li></ul><p>后来加上的类方法：</p><ul><li>将字节串转换为十六进制字符串</li><li>将十六进制字符串转换为字节串</li></ul><h2 id="MyDesGui类"><a href="#MyDesGui类" class="headerlink" title="MyDesGui类"></a>MyDesGui类</h2><p>再写一个MyDesGui类，专门用于图形界面显示。<strong>不过现在回过头来看，它还负责了本来应该由MyDes类负责的逻辑，这是一个需要改进的地方</strong></p><p>图形界面相关类方法：</p><ul><li>构造方法</li><li>初始化控件</li><li>显示密文：传入密文bytes，在控件上显示密文</li><li>显示明文：传入明文bytes，在控件上显示明文</li></ul><p>以下类方法本来应该放在MyDes类里面实现，在这里面只是简单地调用MyDes的类方法的，但是现在是直接在这里面实现对应的算法，需要改进</p><ul><li>des加密</li><li>des解密</li><li>二重des加密</li><li>二重des解密</li><li>三重两密des加密</li><li>三重两密des解密</li><li>三重三密des加密</li><li>三重三密des解密</li></ul><h2 id="二重Des算法"><a href="#二重Des算法" class="headerlink" title="二重Des算法"></a>二重Des算法</h2><p>一开始的DES加密解密搞定了之后，二重DES，三重DES就比较简单了。</p><p>设C为密文，P为明文，E_k为以k为密钥的DES加密，D_k为以k为密钥的DES解密。</p><p>二重DES的加密：C = E_k2(E_k1(P))</p><p>二重DES的解密：P = D_k1(D_k2(C))</p><h2 id="三重两密Des算法"><a href="#三重两密Des算法" class="headerlink" title="三重两密Des算法"></a>三重两密Des算法</h2><p>加密：C = E_k1(D_k2(E_k1(P)))</p><p>解密：P = D_k1(E_k2(D_k1(C)))</p><h2 id="三重三密Des算法"><a href="#三重三密Des算法" class="headerlink" title="三重三密Des算法"></a>三重三密Des算法</h2><p>加密：C = E_k3(D_k2(E_k1(P)))</p><p>解密：P = D_k1(E_k2(D_k3(C)))</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="bytes和字符串之间的转换“损耗”"><a href="#bytes和字符串之间的转换“损耗”" class="headerlink" title="bytes和字符串之间的转换“损耗”"></a>bytes和字符串之间的转换“损耗”</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>pyDes库的加密解密的输入输出都是bytes类型的字节串，要如何将其正确地显示在编辑框上，以及从编辑框上读取呢？</p><p>可能你会说，python将bytes转换成str不是很简单吗？</p><p>str转换成bytes：</p><pre class="line-numbers language-python"><code class="language-python">text_b <span class="token operator">=</span> text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 如果出现问题，encode里面可以加上errors='ignore'参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bytes转换成str：</p><pre class="line-numbers language-python"><code class="language-python">text <span class="token operator">=</span> text_b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 如果出现问题，decode里面可以加上errors='ignore'参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没错，确实很简单，但是这种方式有一个问题，转换的过程中可能会有一些“损耗”。</p><p>比如下面这段代码，预期结果是输出两个字节串，一个密文字节串，一个明文字节串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pyDesplain_text <span class="token operator">=</span> <span class="token string">'你好世界helloworld'</span>key <span class="token operator">=</span> <span class="token string">'Ts%uN#w4'</span>  # 密钥需要<span class="token number">8</span>个字符，即64bitdes <span class="token operator">=</span> pyDes<span class="token punctuation">.</span>des<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取明文字符串plain_text</span>plain_text_b <span class="token operator">=</span> plain_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>cipher_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain_text_b<span class="token punctuation">,</span>padmode<span class="token operator">=</span>pyDes<span class="token punctuation">.</span>PAD_PKCS5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 转换为字符串以显示在编辑框</span>cipher_text <span class="token operator">=</span> cipher_text_b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取密文字符串</span>cipher_text_b <span class="token operator">=</span> cipher_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>plain_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text_b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是实际上的输出是：</p><pre><code>b&#39;\x80$-\xd1\x07\x1e=k+\xac\x00\xb4\xbb\x19\xa6\xf6\xd7\x8f\x91\x86\xa0\x9e.\x05&#39;24---------------------------------------------------------------------------UnicodeDecodeError                        Traceback (most recent call last)&lt;ipython-input-1-c98230c2df1e&gt; in &lt;module&gt;     11 print(len(cipher_text_b))     12 # 转换为字符串以显示在编辑框---&gt; 13 cipher_text = cipher_text_b.decode()     14      15 # 从编辑框获取密文字符串UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0x80 in position 0: invalid start byte</code></pre><p>这是因为，<strong>加密后的字节串是不符合utf-8的编码格式的</strong>。我一开始想加个ignore选项忽略过去：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pyDesplain_text <span class="token operator">=</span> <span class="token string">'你好世界helloworld'</span>key <span class="token operator">=</span> <span class="token string">'Ts%uN#w4'</span>  # 密钥需要<span class="token number">8</span>个字符，即64bitdes <span class="token operator">=</span> pyDes<span class="token punctuation">.</span>des<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取明文字符串plain_text</span>plain_text_b <span class="token operator">=</span> plain_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>cipher_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain_text_b<span class="token punctuation">,</span>padmode<span class="token operator">=</span>pyDes<span class="token punctuation">.</span>PAD_PKCS5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 转换为字符串以显示在编辑框</span>cipher_text <span class="token operator">=</span> cipher_text_b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>errors<span class="token operator">=</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取密文字符串</span>cipher_text_b <span class="token operator">=</span> cipher_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>plain_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text_b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text_b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出就会变成下面这样：</p><pre><code>b&#39;\x80$-\xd1\x07\x1e=k+\xac\x00\xb4\xbb\x19\xa6\xf6\xd7\x8f\x91\x86\xa0\x9e.\x05&#39;24---------------------------------------------------------------------------ValueError                                Traceback (most recent call last)&lt;ipython-input-2-63175c965c0a&gt; in &lt;module&gt;     16      17 cipher_text_b = cipher_text.encode()---&gt; 18 plain_text_b = des.decrypt(cipher_text_b)     19 print(plain_text_b)     20 print(plain_text_b.decode())c:\python38\lib\site-packages\pyDes.py in decrypt(self, data, pad, padmode)    677                 if pad is not None:    678                         pad = self._guardAgainstUnicode(pad)--&gt; 679                 data = self.crypt(data, des.DECRYPT)    680                 return self._unpadData(data, pad, padmode)    681 c:\python38\lib\site-packages\pyDes.py in crypt(self, data, crypt_type)    570                 if len(data) % self.block_size != 0:    571                         if crypt_type == des.DECRYPT: # Decryption must work on 8 byte blocks--&gt; 572                                 raise ValueError(&quot;Invalid data length, data must be a multiple of &quot; + str(self.block_size) + &quot; bytes\n.&quot;)    573                         if not self.getPadding():    574                                 raise ValueError(&quot;Invalid data length, data must be a multiple of &quot; + str(self.block_size) + &quot; bytes\n. Try setting the optional padding character&quot;)ValueError: Invalid data length, data must be a multiple of 8 bytes.</code></pre><p>转换是成功了，但是解密时失败了，因为<strong>在转码时忽略了一些字节，导致长度对不上了。</strong></p><p>我在写代码的时候遇到的就是这个问题，当局者迷，想不到是哪里出现了错误，单步调试发现是中间出现了“损耗”。在写本文总结的时候，才发现问题所在。可见总结复盘是多么重要，不写总结的话，这段调试时间就白费了。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>换一种方式将字节串转换为字符串，也就是不让字节串转换为每个字节对应的字符组成的字符串，而是直接将其编码显示出来，比如显示成：</p><pre><code>b&#39;\xe4\xbd\xa0\xe5\xa5\xbd\xe4\xb8\x96\xe7\x95\x8chelloworld&#39;</code></pre><p>而不是将其直接显示成对应字符的形式，即print函数的显示效果。</p><p>不过这种方式仍然不能解决从字符串转换为字节串的问题。</p><p>最后在一个博客（<a href="https://blog.csdn.net/whatday/article/details/97423901" target="_blank" rel="noopener">传送门</a>）里面找到了比较好用的转换函数，也比较容易看懂：</p><p>十六进制字符串转bytes</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''hex string to byteseg:'01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF'b'\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef''''</span><span class="token keyword">def</span> <span class="token function">hexStringTobytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> bytes<span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>str<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># return a2b_hex(str)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bytes转十六进制字符串</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''bytes to hex string eg:b'\x01#Eg\x89\xab\xcd\xef\x01#Eg\x89\xab\xcd\xef''01 23 45 67 89 AB CD EF 01 23 45 67 89 AB CD EF''''</span><span class="token keyword">def</span> <span class="token function">bytesToHexString</span><span class="token punctuation">(</span>bs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># hex_str = ''</span>    <span class="token comment" spellcheck="true"># for item in bs:</span>    <span class="token comment" spellcheck="true">#     hex_str += str(hex(item))[2:].zfill(2).upper() + " "</span>    <span class="token comment" spellcheck="true"># return hex_str</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%02X '</span> <span class="token operator">%</span> b <span class="token keyword">for</span> b <span class="token keyword">in</span> bs<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个博主采用了空格分隔的十六进制字符串，非常好地解决了我的需求，转换时不会损耗，显示在编辑框时也不会乱码。</p><h2 id="解密后填充字符仍然存在"><a href="#解密后填充字符仍然存在" class="headerlink" title="解密后填充字符仍然存在"></a>解密后填充字符仍然存在</h2><h3 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pyDesplain_text <span class="token operator">=</span> <span class="token string">'你好世界helloworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text<span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token string">'Ts%uN#w4'</span>  # 密钥需要<span class="token number">8</span>个字符，即64bitdes <span class="token operator">=</span> pyDes<span class="token punctuation">.</span>des<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取明文字符串plain_text</span>plain_text_b <span class="token operator">=</span> plain_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>cipher_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain_text_b<span class="token punctuation">,</span>padmode<span class="token operator">=</span>pyDes<span class="token punctuation">.</span>PAD_PKCS5<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 转换为字符串以显示在编辑框</span>cipher_text <span class="token operator">=</span> bytesToHexString<span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取密文字符串</span>cipher_text_b <span class="token operator">=</span> hexStringTobytes<span class="token punctuation">(</span>cipher_text<span class="token punctuation">)</span>plain_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text_b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre><code>你好世界helloworld你好世界helloworld</code></pre><p>在解密后的输出结果中会出现几个乱码，后面这几个乱码是因为加密时进行了填充，而解密时没有去掉。</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>我采用的是将填充字符换成空格，然后在显示的时候用strip去掉空白。但是刚刚发现还有更好的方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pyDesplain_text <span class="token operator">=</span> <span class="token string">'你好世界helloworld'</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text<span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token string">'Ts%uN#w4'</span>  # 密钥需要<span class="token number">8</span>个字符，即64bitdes <span class="token operator">=</span> pyDes<span class="token punctuation">.</span>des<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取明文字符串plain_text</span>plain_text_b <span class="token operator">=</span> plain_text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>cipher_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>plain_text_b<span class="token punctuation">,</span>padmode<span class="token operator">=</span>pyDes<span class="token punctuation">.</span>PAD_PKCS5<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 转换为字符串以显示在编辑框</span>cipher_text <span class="token operator">=</span> bytesToHexString<span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从编辑框获取密文字符串</span>cipher_text_b <span class="token operator">=</span> hexStringTobytes<span class="token punctuation">(</span>cipher_text<span class="token punctuation">)</span>plain_text_b <span class="token operator">=</span> des<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>cipher_text_b<span class="token punctuation">,</span>padmode<span class="token operator">=</span>pyDes<span class="token punctuation">.</span>PAD_PKCS5<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里也添加填充选项</span><span class="token keyword">print</span><span class="token punctuation">(</span>plain_text_b<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接在解密时也添加相同的填充选项就行了。</p><h1 id="其他知识"><a href="#其他知识" class="headerlink" title="其他知识"></a>其他知识</h1><h2 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h2><p>启动一个窗口：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tkroot <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建标签框架：</p><pre class="line-numbers language-python"><code class="language-python">des_LF <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'DES'</span><span class="token punctuation">)</span>des_LF<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建标签：</p><pre class="line-numbers language-python"><code class="language-python">tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>des_LF<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'明文'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建编辑框并与变量双向绑定：</p><pre class="line-numbers language-python"><code class="language-python">plain_text_var <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 明文</span>tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>des_LF<span class="token punctuation">,</span>textvariable<span class="token operator">=</span>self<span class="token punctuation">.</span>plain_text_var<span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建按钮并与响应函数绑定，其中用到了lambda函数：</p><pre class="line-numbers language-python"><code class="language-python">tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>des_LF<span class="token punctuation">,</span>text<span class="token operator">=</span><span class="token string">'DES加密'</span><span class="token punctuation">,</span>                  command<span class="token operator">=</span><span class="token keyword">lambda</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>key_var<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>isShow<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>stick<span class="token operator">=</span>tk<span class="token punctuation">.</span>W<span class="token operator">+</span>tk<span class="token punctuation">.</span>E<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>显示对话框：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> tkinter<span class="token punctuation">.</span>messagebox <span class="token keyword">as</span> tkmtkm<span class="token punctuation">.</span>showwarning<span class="token punctuation">(</span><span class="token string">'注意'</span><span class="token punctuation">,</span><span class="token string">'密钥长度必须为8个字符，即64bit'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 密码算法 </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【自我管理系统】归档文件</title>
      <link href="/posts/self-management-archive/"/>
      <url>/posts/self-management-archive/</url>
      
        <content type="html"><![CDATA[<p>记录2020年第12周的文件归档</p><p><img src="https://i.loli.net/2020/04/05/kYWwGKu5RSsItbJ.jpg" alt="我现在的桌面"></p><a id="more"></a><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>3月13日也就是上周五晚上，我重装了一次系统，将电脑上存的各种乱七八糟的资料备份到移动硬盘后清空所有磁盘，借此机会整理一下混乱的电脑。</p><p>在这次之前，我没有系统性地整理过整个电脑的文件，偶尔整理也只是对部分文件进行分类，并没有制定出文件产生和保存的合适规则（规则还是有的，就是比较混乱）</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>首先，我无法抽出一整天的时间专门用于整理电脑文件，从以前的经验来看这样效果也不好，不能一次性将所有事情都想到，于是我将整理时间设置为一周。</p><p>我现在的磁盘分区状况：系统C盘，软件D盘，文件F盘。C、D盘都在固态硬盘上以加快速度，F盘在1T的机械硬盘上面。</p><p>按照我以前的做法，首先F盘作为我的资料盘，所有的个人资料都放在这个盘中，包括“视频”、“文档”等用户文件夹，这在上周五装系统手动备份文件时带来了很多好处，我只需要将F盘中的东西全部带走就好，不需要理会其他盘。这次也是这么做。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>由于整理工作需要持续几天，所以我在F盘下面建了一个文件夹叫做“Inbox”，用于存放所有我需要整理的文件，第一天的状况大致如下：</p><p>F：</p><ul><li>Inbox<ul><li>我所有的文件夹，由于我也不记得，就不列出来了</li></ul></li></ul><h2 id="整理Archive文件夹"><a href="#整理Archive文件夹" class="headerlink" title="整理Archive文件夹"></a>整理Archive文件夹</h2><p>首先需要整理我的Archive（归档）文件夹，这个文件夹在重装之前是用于存放我所有以及完成的项目文件的，大致分为学业相关以及编程相关两大类，下面细分为很多小类，很多重叠，举例如下：</p><ul><li>Archive<ul><li>college_archive<ul><li>各种比赛</li><li>专业课<ul><li>xx课<ul><li>xx课课设190627.zip</li><li>xx课实验190514.zip</li></ul></li><li>xy课</li></ul></li><li>成就</li><li>杂项</li></ul></li><li>develop_archive<ul><li>cpp</li><li>java</li><li>python</li><li>asm</li><li>web</li><li>vb</li></ul></li></ul></li></ul><p>按照以前的规则，其中每个项目的相关文件都被打包成压缩文件，并起名为“科目+名称+归档日期”，这为我进一步进行整理归类提供了便利。</p><p>由于存储这些项目文件就是为了以后在想找的时候方便查找，我打算不再按照内容进行细分，而是主要按照时间顺序来进行分类。</p><p>划分到月太细，于是按照年份来划分。首先建立一个文件夹名为“0000”，充当一个“Inbox”的作用，将所有文件抽出来放进去。随后建立“2017”、“2018”、“2019”、“2020”四个文件夹，按照文件名中的归档日期归类。</p><p>有一些项目文件是同一个科目的，比如java面向对象实验和java面向对象课设，那么就在年份文件夹中建立一个新的科目文件夹存放同类文件。一个科目只有一个文件那种就放在年份文件夹根目录下不用动。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200322204635.png" alt="2019年文件夹示例"></p><p>这样分类好了之后，和以前一样，用坚果云将Archive设置为同步文件夹，由于只是移动文件的位置，没有消耗上传流量。</p><p>需要查找某个文件时，使用Listary进行查找即可，或者手动进入文件夹查找，由于是按照时间分类，不用担心按照内容分类时找不到具体分类，节约了归档时间。</p><h2 id="删除Develop文件夹"><a href="#删除Develop文件夹" class="headerlink" title="删除Develop文件夹"></a>删除Develop文件夹</h2><p>重装之前，我在F盘下设立了一个名为”Develop”的文件夹，用于存放所有编程项目，按照编程语言来分类，在彻底不更新编程项目后，将其打包并放入Archive文件夹。</p><p>当时分类也很细，大致是这样的：</p><ul><li>Develop<ul><li>cpp_develop<ul><li>cpp_test：临时文件夹，里面的文件都可以删</li><li>cpp_example:用于学习某个知识点的，别人的项目</li><li>cpp_exercise:用于练习的项目</li><li>cpp_project：课设、实验啥的都放在这里</li><li>cpp_archive.lnk：指向Archive文件夹对应文件夹的快捷方式（建立后基本没用过）</li></ul></li><li>java_develop</li><li>asm_develop</li><li>web_develop</li><li>vb_develop</li><li>python_develop</li><li>test</li></ul></li></ul><p>其他的文件夹里面都是类似的情况，大量冗余的文件夹，很少用到。</p><p>我这样做了很久之后，发现这种做法会导致Develop文件夹中的项目文件夹不断累积（当时懒得归档后面忘记归档），而且要找到自己正在写的项目非常麻烦。一个治标不治本的方法是，建立一个Buffer文件夹，用于存放正在写的项目的文件夹的快捷方式。</p><p>这次干脆取消这个Develop文件夹，将正在写的项目都放在Buffer文件夹中，以及不再写的项目写完即打包归档，如果累积着不归档，Buffer将会越来越满，使得我不会忘记归档。而且不按照编程语言分类，免得出现大量冗余文件夹，不便于管理。</p><h2 id="整理Resource文件夹"><a href="#整理Resource文件夹" class="headerlink" title="整理Resource文件夹"></a>整理Resource文件夹</h2><p>Resource文件夹是我的资源文件夹，里面放的都是囤积的各种学习资料，比如c#电子书、日语视频、软件安装包等（基本没看过，但是好歹是以前得到的资源，删了浪费啊）</p><p>按照用途分为几类：</p><ul><li>软件安装包<ul><li>便携安装包：可以装在U盘里面的免安装轻便实用小工具，比如everthing</li><li>其他安装包</li></ul></li><li>图标包</li><li>囤积的学习资源：其他所有的资源，懒得分类了，分了也没用，反正只是囤着</li></ul><h2 id="整理bilibili文件夹"><a href="#整理bilibili文件夹" class="headerlink" title="整理bilibili文件夹"></a>整理bilibili文件夹</h2><p>作为一名UP主，自然有一个存放自己成品视频的文件夹。</p><p>有了Archive文件夹的经验，也是取消了按照内容分类，改为按照年份来分类。</p><p>整理视频的时候挺感慨的，居然已经录了那么多视频了，还是在已经丢失了很多视频原文件的情况下。</p><p>由于视频一般都是几百M几百M的，自然全部需要压缩。我用到的是小丸工具箱，这东西太好用了，压缩率贼高，1G的东西能给你压成几十M，而且画质没啥影响。</p><p>压缩后仍然很大，不能放进Archive文件夹用坚果云来同步，坚果云每个月的上传流量是1G。这个时候就可以用到百度云盘了。</p><p>百度云盘同步功能要会员了，所以就把2018年和2019年的文件夹直接上传上去，反正也不会往里面加文件了。</p><h2 id="整理私人文件"><a href="#整理私人文件" class="headerlink" title="整理私人文件"></a>整理私人文件</h2><p>还有一些私人文件，比如日记、视频、照片、自己中二时期写的小说等，具有一定的隐私性。上一次整理的时候我一直没有好好地分类，只是丢在一个名为”私人文件夹”的文件夹内，一直保存在本地。</p><p>我一直不敢将这些隐私的东西放到云端，甚至买了一个移动硬盘专门备份。</p><p>这次重装后，意识到这些东西必须备份到云端，否则不安全。并且对于坚果云还是比较信任的，所有将私人文件夹同步到坚果云。</p><p>当然，不是直接备份。而是重新开始使用VNote（当初开始用Typora之后就因为颜值问题换了它，但是后来发现还是VNote好用）来管理我的日记。并将文件同步到坚果云。绝佳配合。</p><p>不过视频、照片等还没处理好，不太信任百度云。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>现在我的磁盘结构大致如下：C盘系统盘，D盘软件盘，F盘为我的资料盘和工作盘。</p><p>F盘里面有如下几个文件夹：</p><ul><li>Archive：按照年份分类的已经完成的项目的归档文件。最为重要，因为都是我努力的成果。坚果云同步。</li><li>Inbox：收集箱，用DropIt快速收集文件到Inbox中，有空的时候再将其处理分类，目前通过腾讯桌面管家独立版将其从F盘根目录映射到桌面，以便快速收集以及处理。最不重要，应当保持本文件夹经常为空。</li><li>Buffer：存放正在进行的项目的相关文件，完成后立即进行打包归档，或者放入Inbox稍后处理。中等重要。</li><li>Blog：存放hexo博客源代码，放在F盘根目录方便快速查找。不太重要，且丢失后可找回，在github私有库托管</li><li>MyNotebook：VNote笔记本文件夹。重要，里面有日记，可以删除但是不能给别人看到。</li><li>UserFolder：用户文件夹，例如：视频、音乐、下载、图片、文档等系统用户文件夹被我移动到F盘下。Bilibili文件夹放在视频文件夹中</li><li>Resource：资源文件夹，我囤积的资源。不太重要，因为不咋用。</li><li>System backup：系统备份</li></ul>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记第二次重装系统</title>
      <link href="/posts/Reinstall_win10/"/>
      <url>/posts/Reinstall_win10/</url>
      
        <content type="html"><![CDATA[<p>折腾了三个多小时终于把win10重装好了，这是我第二次自己装系统。</p><p>本文记录了我这次重装系统的过程，以及一些从中学到的新知识，供参考。</p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.bilibili.com/video/av77344372" target="_blank" rel="noopener">【装机教程】超详细WIN10系统安装教程，官方ISO直装与PE两种方法</a></li><li><a href="https://github.com/chennnnny/good-use-software/wiki/" target="_blank" rel="noopener">定制chocolatey安装路径</a></li></ul><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>第一次重装用的是一键装机的软件做的U盘，捆绑了一大堆东西，而且装完还是什么都不明白，啥也没学到，装的还是阉割版的企业版（不确定是不是，因为我现在装好专业版后发现功能似乎比原来多）</p><p>这一次重装的起因是：我弟将家里的台式机从win7升级到win10。他在b站找到了一个讲得非常详细的<a href="https://www.bilibili.com/video/av77344372" target="_blank" rel="noopener">装系统教程</a>，并且成功自己装好了系统。</p><p>我也看了一下那个教程，光是看完视频我就觉得收获颇多，比第一次自己动手装系统学到的还多。学到了pe是什么，以及装系统的一些原理。</p><p>当时我就给自己以前买的16gU盘里面装了一个pe，并尝试从U盘启动以打开pe。不同于第一次，这一次我对里面的东西都有了一些了解，不是完全抓瞎，开始研究里面每个东西是干啥的。非常有成就感。</p><p>玩了一下pe之后就退了回到win10，虽然也有安装包，不过我还是不敢轻易装，还是怕自己吧电脑折腾坏了，等到下次做好准备再说。</p><p>这周五我觉得就是合适的时机了，晚上九点钟将系统先用dism++备份好，在幕布（可以在网页端登录）列好需要重新安装的软件，准备开始了。</p><h1 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h1><p>在操作开始之前，我先总结一下有关的概念</p><h2 id="什么是PE系统"><a href="#什么是PE系统" class="headerlink" title="什么是PE系统"></a>什么是PE系统</h2><p>下面来自百度百科：</p><blockquote><p>Windows Preinstallation Environment（Windows PE），Windows预安装环境，是带有有限服务的最小Win32子系统，基于以保护模式运行的Windows XP Professional及以上内核。它包括运行Windows安装程序及脚本、连接网络共享、自动化基本过程以及执行硬件验证所需的最小功能。</p></blockquote><p>简单来说，PE就是一个小型的windows系统，去掉了一切不必要的功能，将体积缩小到能够装进U盘里面运行（当然并不是在U盘里面直接运行）。</p><p>电脑可以选择从哪个磁盘来启动，如果你插上了U盘，也可以选择从U盘启动，从而启动U盘中存放的PE系统。</p><h2 id="两种安装方式"><a href="#两种安装方式" class="headerlink" title="两种安装方式"></a>两种安装方式</h2><p>如同参考视频里面说的，你可以用官方镜像来安装，也可以用PE系统来辅助安装。</p><p>第一种方法就是到微软官网去，用官网的启动U盘制作器把你的U盘制作成启动U盘，这样你从U盘启动电脑之后，就会自动进入安装程序。</p><p>第二种方法是下载系统的ISO镜像文件（其实就是一个比较特别的压缩包），并在U盘里面安装PE系统，把ISO文件放进U盘。从U盘启动时，首先进入PE系统，在这里可以对现有的磁盘进行操作，你可以用PE里面自带的分区工具来提前分区，然后装载放在U盘的ISO文件，进行安装。</p><p>详细的内容看参考视频，UP主讲得非常非常好！</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>开始安装之后把系统盘清了准备安装结果出现错误，我开始慌了。</p><p>退出安装回到pe桌面，在家里找出以前买的移动硬盘，把文件啥的给拷进去（之前认为装系统只清系统盘就够了，但现在的情况似乎要全部清掉，不管怎样先备份），同时使用pe里面的dism++来尝试恢复之前的备份。</p><p>使用PE系统安装的好处就体现出来了，如果我用的是第一种方法，那么一旦主系统被删了，那么我就没办法补救了，连进去拷贝数据都做不到。</p><p>也许是我使用方式不对，系统并没有恢复，拔掉U盘后无法进入系统。那就只好继续装了。</p><p>由于我以及备份好了数据，所以将分区全部清掉，重新分区。</p><p>我现在有一块1T的机械硬盘和自己加装的256g的固态硬盘。</p><p>固态硬盘两个区：</p><ul><li>系统C盘</li><li>加速区S盘</li></ul><p>机械硬盘四个区</p><ul><li>虚拟机Z盘（未装SSD前的C盘，后来被我用来放virtualbox的虚拟磁盘）</li><li>文件F盘</li><li>软件D盘</li><li>娱乐E盘。</li></ul><p>分区确实挺多的，足足六个分区，而其中还有功能重复的盘。根据我现在的使用情况，我分成了三个分区：系统C盘，软件D盘，文件F盘。</p><p>F盘是我之前最常用的盘，正因为之前把所有资料都放在这里，备份起来非常方便。</p><p>之后就很顺利的照着视频完成了安装。</p><h2 id="chocolatey重装软件"><a href="#chocolatey重装软件" class="headerlink" title="chocolatey重装软件"></a>chocolatey重装软件</h2><p>重装软件我使用的是chocolatey，这个是我最近找到的一个工具，它是一个windows包管理工具，类似于Linux上面的apt，不用关心它从哪里下载，安装到哪里，有哪些依赖，一个命令搞定安装。</p><p>如果你不想让它默认安装在C盘，那么你得先在环境变量里面添加一个变量<code>ChocolateyInstall</code>，值为你指定的它的安装路径。</p><p>如果你不想让它将下载的软件放在C盘，那么你也得添加一个环境变量<code>ChocolateyToolsLocation</code>，值为你指定的工具安装路径。</p><p>然后去它的<a href="https://www.chocolatey.org/install" target="_blank" rel="noopener">官网</a>下载它。（如果先安装再修改环境变量会出现一系列问题，别问我怎么知道的）</p><p>下载它的方式是：复制官网给出的下载命令，以管理员身份打开powershell，运行这条安装命令，它就会自动安装到你之前指定的位置。</p><p>在cmd或者powershell输入以下命令以确认安装成功：</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$choco</span> <span class="token operator">-</span>?<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用指令：</p><p>列出/查询软件包</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$choco</span> list 软件包名<span class="token variable">$choco</span> search 软件包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查询本地已安装的软件包（-lo就是local的缩写）</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$choco</span> list <span class="token operator">-</span>lo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装某个软件包</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$choco</span> install 软件包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载某个软件包</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$choco</span> uninstall 软件包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>升级某个软件</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$choco</span> upgrade 软件包名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多的命令可以去官网的<a href="https://www.chocolatey.org/docs" target="_blank" rel="noopener">文档</a>查看，具体有哪些包可以去<a href="https://www.chocolatey.org/packages" target="_blank" rel="noopener">这里</a>查看</p><h3 id="我用chocolatey安装的软件"><a href="#我用chocolatey安装的软件" class="headerlink" title="我用chocolatey安装的软件"></a>我用chocolatey安装的软件</h3><p>比如我要安装chrome，可以用这个命令：</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token variable">$choco</span> install googlechrome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下面列出我下载的软件：</p><ul><li><p>chrome：谷歌浏览器</p></li><li><p>git</p><ul><li>choco install git.install</li></ul></li><li><p>cmder：很好用的终端，可以代替系统自带的cmd和powershell来用</p><ul><li>choco install cmder</li></ul></li><li><p>potplayer：很好用的视频播放器</p><ul><li>choco install potplayer</li></ul></li><li><p>wechat：微信</p><ul><li>choco install wechat</li></ul></li><li><p>github-desktop</p><ul><li>choco install github-desktop</li></ul></li><li><p>vscode</p><ul><li>choco install vscode</li></ul></li><li><p>eclipse</p><ul><li>choco install eclipse</li></ul></li><li><p>jdk8</p><ul><li>choco install jdk8</li></ul></li><li><p>python</p><ul><li>choco install python</li></ul></li><li><p>steam</p></li><li><p>wps-office-free</p><p>英文版的</p><ul><li>由于无法使用之前的账号登录就换成中国版了</li></ul></li><li><p>winrar</p></li><li><p>putty</p></li><li><p>anki</p></li><li><p>obs</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【作业总结】声卡数据采集及处理</title>
      <link href="/posts/sound-card-data-acquisition/"/>
      <url>/posts/sound-card-data-acquisition/</url>
      
        <content type="html"><![CDATA[<p>这学期开了网络化测控课，第二周开头就布置了一个相当有难度的作业：</p><p>以小组为单位，写一个声卡数据采集程序，功能要求：</p><ol><li>以曲线形式显示波形；</li><li>利用数字滤波器对数据进行平滑滤波；</li><li>对声音信号进行FFT变化，计算信号的主频。</li></ol><p>对于缺乏很多前置知识的我们专业的学生来说，这确实非常有难度。</p><p>到编写本文的时候，已经进行了三天，基本功能编写完成，还需要进一步优化，<del>为了能够偷懒，</del>为了让队员能够更加了解本次项目，以及我自己能够从中学到东西，撰写本文如下。</p><p>本文并不专业，作者本身不是控制专业，所以出现错误在所难免，<strong>本文不是教程，仅仅是一次作业的记录复盘，不能保证正确性。</strong></p><p><a href="https://gitee.com/ChangingSelf/sound-card-data-acquisition" target="_blank" rel="noopener">码云仓库开源链接</a></p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://shanewfx.github.io/blog/2013/08/14/caprure-audio-on-windows/" target="_blank" rel="noopener">Windows上的音频采集技术</a>：采集过程整体流程说明</li><li><a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/wasapi" target="_blank" rel="noopener">About WASAPI</a>：音频API官方文档</li><li><a href="https://blog.csdn.net/FunnyWhiteCat/article/details/88676119" target="_blank" rel="noopener">使用WASAPI捕获声卡音频</a>：对官方文档示例代码的改写</li><li><a href="https://www.jianshu.com/p/968f684ecd83" target="_blank" rel="noopener">WASAPI 01 采集默认设备的音频</a>：对API分段解析的一篇博文</li><li><a href="https://www.bilibili.com/video/av91971619" target="_blank" rel="noopener">如何对时域声音信号进行FFT变换</a>：一个B站的视频，蛮不错的，比较清晰，不过没讲FFT原理，我从中知道了FFT的输入输出分别应该是什么。</li><li><a href="https://www.bilibili.com/video/av45626580/" target="_blank" rel="noopener">【算法讲堂】【电子科技大学】【ACM】快速傅里叶变换（FFT）</a>：也是B站视频，代码主要参考的是这个，不过是递归版本的。但是好理解</li><li><a href="https://blog.csdn.net/enjoy_pascal/article/details/81478582" target="_blank" rel="noopener">简单易懂的FFT</a></li><li><a href="https://blog.csdn.net/u011327754/article/details/80001123" target="_blank" rel="noopener">【信号处理】信号处理中的FFT后的意义及常用处理方法</a></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>还是得写啊，我先确认一下小组成员的配置。</p><p>小组总共四个人，<a href="https://github.com/ChangingSelf" target="_blank" rel="noopener">我</a>、<a href="https://github.com/EndlessPeak" target="_blank" rel="noopener">leesin</a>、<a href="https://github.com/MikoSamey" target="_blank" rel="noopener">咸鱼米</a>、<a href="https://gitee.com/jane_white" target="_blank" rel="noopener">简白</a>。</p><p>我只和咸鱼米一起写过代码，大致了解她的水平。</p><p>预估编程能力：我 &gt; leesin &gt; 咸鱼米 &gt; 简白；</p><p>对git了解程度： 我 ≈ leesin &gt; 咸鱼米 &gt; 简白；</p><h2 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h2><p>简白没有带电脑，无法参与编程；</p><p>咸鱼米的电脑非常卡顿，存储空间也非常小，上学期写课设的时候，她甚至是把eclipse放在U盘里面打开的，不指望她能用vs。</p><p>leesin的电脑应该和我相当，目前没有出现过啥问题。</p><p>我的电脑以及网络应该是小组里面最好的，游戏本外加非常快的网络，看网课从来只有老师那边卡（说起这个就想起网络测控老师那边卡成壁纸的网速）</p><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><p>首先应该会用到windows的API，用C++比较好，组员们最熟悉的也是它（大概吧），而且课设是做个小车，曾经接触过单片机编程，知道是需要用C来编程的，java、python啥的别想用，所以最终选了C++。</p><p>这次除了这上面的作业外，还有一个略简单的作业，PID控制程序，这个就用VC++6.0来写了，照顾一下没有vs的咸鱼米，正好我也在学校机房写习惯了它。</p><p>但是写完PID之后，发现声卡数据采集程序要是拿VC++6.0来写，未知原因跑不通，加上调试起来确实没有vs方便，就决定这个项目还是用vs吧。</p><p>IDE决定是vs，接着是协作方式的问题，果断git，平台的话，还是用国内的码云吧，毕竟要考虑网速问题。</p><p>在码云上建立了私有仓库，用master-develop分支结构。</p><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><h2 id="周二-2020-03-03"><a href="#周二-2020-03-03" class="headerlink" title="周二-2020-03-03"></a>周二-2020-03-03</h2><p>初步了解组员情况，分析题目要求。</p><p>在码云建立私有库，并邀请组员加入。PID项目初始化。</p><h2 id="周三-2020-03-04"><a href="#周三-2020-03-04" class="headerlink" title="周三-2020-03-04"></a>周三-2020-03-04</h2><p>了解了一下PID算法，然后交给leesin和咸鱼米去整了。</p><p>真正的难点在于声卡数据采集和处理这个项目。我们都对此非常不了解。</p><h3 id="声卡数据采集"><a href="#声卡数据采集" class="headerlink" title="声卡数据采集"></a>声卡数据采集</h3><p>首先，需要采集声音信息。</p><p>该如何采集？我当时想到的是，应该是有API可以调用的，但是并没有查到那种讲解API的博客，能找到的只有官方文档：<a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/wasapi" target="_blank" rel="noopener">About WASAPI</a>。</p><p>在本次项目之前，我是不太喜欢读文档的，因为有很多讲解得很详细的博客，没理由去自己啃文档啊，而且一般那种时候我都是处于课设周，需要查询大量资料，没有时间去看英文文档，除非遇到看博客解决不了的问题。</p><p>这次只能看了，当然，还是得配合翻译插件（chrome刚装彩云小译没几天就用上了，中英对照效果还不错）。</p><blockquote><p>The Windows Audio Session API (WASAPI) enables client applications to manage the flow of audio data between the application and an <a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/audio-endpoint-devices" target="_blank" rel="noopener">audio endpoint device</a>.</p><p>Windows 音频会话 API (WASAPI)使客户端应用程序能够管理应用程序和音频端点设备之间的音频数据流。</p><p>Header files Audioclient.h and Audiopolicy.h define the WASAPI interfaces.</p><p>头文件 Audioclient.h 和 audiopolis. h 定义了 WASAPI 接口。</p></blockquote><p>懂了，想用这个API得先包含两个头文件，<code>Audioclient.h</code>和<code>Audiopolicy.h</code>，不过在vc++6.0我编译不了，说没有这俩文件，但是vs可以，所以后来统一用了vs。</p><p>接着看后面的说明，照着做但是不行。</p><p>比如，让我调用<code>IMMDevice::Activate</code>这个方法，写上去却找不到这个方法，说是<code>::</code>前面得是命名空间或者类。后来折腾了很久才发现，原来<code>IMMDevice</code>不是命名空间而是类名啊！</p><p>然而我还是不太清楚如何弄出来它说的那些客户端，各种参数太多了，不知道传啥。好在后面终于找到了一些有用的资料。</p><p>对于采集数据的流程和原理不是很明白，但是通过读文档以及后来找到的一些博客互相配合着理解，总算对整个流程有了一个大致的了解。</p><p>流程分为以下几步（<a href="http://shanewfx.github.io/blog/2013/08/14/caprure-audio-on-windows/" target="_blank" rel="noopener">Windows上的音频采集技术</a>：采集过程整体流程说明）：</p><blockquote><ul><li>创建多媒体设备枚举器(IMMDeviceEnumerator)</li><li>通过多媒体设备枚举器获取声卡接口(IMMDevice)</li><li>通过声卡接口获取声卡客户端接口(IAudioClient)</li><li>通过声卡客户端接口(IAudioClient)可获取声卡输出的音频参数、初始化声卡、获取声卡输出缓冲区的大小、开启/停止对声卡输出的采集</li><li>通过声卡采集客户端接口(IAudioCaptureClient)可获取采集的声卡输出数据，并对内部缓冲区进行控制</li></ul></blockquote><hr><p>由于用到的函数太多了，就只给出函数官方文档链接，以及在代码中做出简单的注释。注释内容大部分为机翻。</p><p>为了清晰，没有加入错误处理的代码。</p><p>下面的示例代码解析自官方的示例程序<a href="https://docs.microsoft.com/en-us/windows/win32/coreaudio/capturing-a-stream" target="_blank" rel="noopener">Capturing a Stream</a>，会有一些改动。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>最开始，得使用<code>CoInitialize</code>函数来在当前线程上初始化 COM 库（<a href="https://docs.microsoft.com/en-us/windows/win32/api/objbase/nf-objbase-coinitialize" target="_blank" rel="noopener">CoInitialize函数</a>）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">CoInitialize</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化com库</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>采集结束后，记得关闭</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token function">CoUninitialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="创建多媒体设备枚举器"><a href="#创建多媒体设备枚举器" class="headerlink" title="创建多媒体设备枚举器"></a>创建多媒体设备枚举器</h4><p>定义一些常量</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">const</span> CLSID CLSID_MMDeviceEnumerator <span class="token operator">=</span> <span class="token function">__uuidof</span><span class="token punctuation">(</span>MMDeviceEnumerator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> IID IID_IMMDeviceEnumerator <span class="token operator">=</span> <span class="token function">__uuidof</span><span class="token punctuation">(</span>IMMDeviceEnumerator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> IID IID_IAudioClient <span class="token operator">=</span> <span class="token function">__uuidof</span><span class="token punctuation">(</span>IAudioClient<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> IID IID_IAudioCaptureClient <span class="token operator">=</span> <span class="token function">__uuidof</span><span class="token punctuation">(</span>IAudioCaptureClient<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这些常量是这些类的UUID，总之就是用来标识这些类的。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/combaseapi/nf-combaseapi-cocreateinstance" target="_blank" rel="noopener">Cocreateinstance函数</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//创建多媒体设备枚举器</span>    IMMDeviceEnumerator <span class="token operator">*</span>pEnumerator <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">CoCreateInstance</span><span class="token punctuation">(</span>        CLSID_MMDeviceEnumerator<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//创建与指定 CLSID (Class ID，即类标识符)关联的类的单个未初始化对象。</span>        <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//如果为 NULL，则表示该对象不是作为聚合的一部分创建的</span>        CLSCTX_ALL<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//管理新创建对象的代码将在其中运行的上下文。 这些值取自枚举 CLSCTX</span>        IID_IMMDeviceEnumerator<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//对用于与对象通信的接口标识符的引用</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pEnumerator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收 riid 请求的接口指针的指针变量的地址。 成功返回后，* ppv 包含请求的接口指针。 失败时，* ppv 包含 NULL。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取声卡接口"><a href="#获取声卡接口" class="headerlink" title="获取声卡接口"></a>获取声卡接口</h4><p>使用刚刚获取的枚举器来获取默认音频端点设备。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/mmdeviceapi/nf-mmdeviceapi-immdeviceenumerator-getdefaultaudioendpoint" target="_blank" rel="noopener">IMMDeviceEnumerator::GetDefaultAudioEndpoint方法</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//获取声卡接口</span>    IMMDevice <span class="token operator">*</span>pDevice <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声卡接口</span>    pEnumerator<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetDefaultAudioEndpoint</span><span class="token punctuation">(</span>        eCapture<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//端点设备的数据流方向。 调用方应该将此参数设置为以下两个 EDataFlow 枚举值之一:eRender,eCapture,前者渲染，后者捕获</span>        eConsole<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//端点设备的角色。 调用者应该将这个参数设置为以下 ERole 枚举值之一:eConsole,eMultimedia,eCommunications</span>        <span class="token operator">&amp;</span>pDevice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向一个指针变量，该方法将默认音频端点设备的端点对象的 immmdevice 接口的地址写入该指针变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置默认音频格式"><a href="#设置默认音频格式" class="headerlink" title="设置默认音频格式"></a>设置默认音频格式</h4><p>这里用的是使用最小音频格式，也可以手动设置自己的音频格式。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/mmeapi/ns-mmeapi-waveformatex" target="_blank" rel="noopener">WAVEFORMATEX 结构体</a></p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token comment" spellcheck="true">//获取音频格式</span>    WAVEFORMATEX <span class="token operator">*</span>pwfx <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pAudioClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetMixFormat</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pwfx<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="获取声卡客户端"><a href="#获取声卡客户端" class="headerlink" title="获取声卡客户端"></a>获取声卡客户端</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/mmdeviceapi/nf-mmdeviceapi-immdevice-activate" target="_blank" rel="noopener">IMMDevice::Activate方法</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//通过声卡接口获取声卡客户端接口</span>    IAudioClient <span class="token operator">*</span>pAudioClient <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    pDevice<span class="token operator">-</span><span class="token operator">></span><span class="token function">Activate</span><span class="token punctuation">(</span>IID_IAudioClient<span class="token punctuation">,</span> CLSCTX_ALL<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pAudioClient<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="初始化声卡客户端"><a href="#初始化声卡客户端" class="headerlink" title="初始化声卡客户端"></a>初始化声卡客户端</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/audioclient/nf-audioclient-iaudioclient-initialize" target="_blank" rel="noopener">IAudioClient::Initialize方法</a></p><pre class="line-numbers language-cpp"><code class="language-cpp">    REFERENCE_TIME hnsRequestedDuration <span class="token operator">=</span> REFTIMES_PER_SEC<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//采样持续时间，单位100纳秒</span>    pAudioClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">Initialize</span><span class="token punctuation">(</span>        AUDCLNT_SHAREMODE_SHARED<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//与其他设备共享音频端点设备</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//选项</span>        hnsRequestedDuration<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//以时间值表示的缓冲区容量</span>        <span class="token number">0</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//设备周期，共享模式下设为0</span>        pwfx<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//音频格式</span>        <span class="token constant">NULL</span><span class="token comment" spellcheck="true">//指向session的GUID的指针，设置为NULL表示打开一个新session</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>REFTIMES_PER_SEC</code>是一个宏，作为参考时间单位。100纳秒 = 1e-7秒，即这个宏定义的值。也就是说，上面的代码是采样1秒的意思。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// REFERENCE_TIME time units per second and per millisecond</span><span class="token macro property">#<span class="token directive keyword">define</span> REFTIMES_PER_SEC  10000000</span><span class="token macro property">#<span class="token directive keyword">define</span> REFTIMES_PER_MILLISEC  10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="获取捕获客户端"><a href="#获取捕获客户端" class="headerlink" title="获取捕获客户端"></a>获取捕获客户端</h4><p><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudioclient-getservice" target="_blank" rel="noopener">IAudioClient::GetService方法</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//获取捕获客户端</span>    IAudioCaptureClient <span class="token operator">*</span>pCaptureClient <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    hr <span class="token operator">=</span> pAudioClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetService</span><span class="token punctuation">(</span>        IID_IAudioCaptureClient<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//客户端接口ID</span>        <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pCaptureClient<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启动音频流"><a href="#启动音频流" class="headerlink" title="启动音频流"></a>启动音频流</h4><p><a href="https://docs.microsoft.com/en-us/windows/win32/api/audioclient/nf-audioclient-iaudioclient-start" target="_blank" rel="noopener">IAudioClient::Start</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//启动音频流</span>m_pAudioClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="采集数据"><a href="#采集数据" class="headerlink" title="采集数据"></a>采集数据</h4><p>启动音频流之后，就可以开始捕获数据了，音频流有一个缓冲区</p><p>流程如下：</p><ul><li>从缓冲区获取下一个数据包</li><li>处理数据包</li><li>释放缓冲区</li><li>获取下一个数据包大小，循环直到缓冲区为空</li></ul><p>获取数据包大小，以确定流中是否有数据。</p><pre class="line-numbers language-cpp"><code class="language-cpp">UINT32 packetLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据包长度</span>BYTE <span class="token operator">*</span>pData <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据包首地址</span>UINT32 numFramesAvailable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据包中可用的音频帧数</span>DWORD flags<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//缓冲区状态标志</span>vector<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> recorder<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于存储数据</span>pCaptureClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetNextPacketSize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packetLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取下一个数据包的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理其中的数据。</p><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudiocaptureclient-releasebuffer" target="_blank" rel="noopener">IAudioCaptureClient::ReleaseBuffer</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudiocaptureclient-getnextpacketsize" target="_blank" rel="noopener">IAudioCaptureClient::GetNextPacketSize</a></li><li><a href="https://docs.microsoft.com/zh-cn/windows/win32/api/audioclient/nf-audioclient-iaudiocaptureclient-getbuffer" target="_blank" rel="noopener">IAudioCaptureClient::GetBuffer</a></li></ul><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">while</span> <span class="token punctuation">(</span>packetLength <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取缓冲区中的数据</span>            pCaptureClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetBuffer</span><span class="token punctuation">(</span>                <span class="token operator">&amp;</span>pData<span class="token punctuation">,</span><span class="token comment" spellcheck="true">//数据包指针变量的地址</span>                <span class="token operator">&amp;</span>numFramesAvailable<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//数据包中可用的音频帧数</span>                <span class="token operator">&amp;</span>flags<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//缓冲区状态标志</span>                <span class="token constant">NULL</span><span class="token punctuation">,</span>                <span class="token constant">NULL</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断是否静音</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> AUDCLNT_BUFFERFLAGS_SILENT<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                pData <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> dataSize <span class="token operator">=</span> numFramesAvailable <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可用帧数*4=BYTE数</span>            <span class="token comment" spellcheck="true">//采集数据</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                BYTE tem <span class="token operator">=</span> pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                recorder<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加进自己实现准备好的数据数组中</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//释放缓冲区</span>            pCaptureClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">ReleaseBuffer</span><span class="token punctuation">(</span>numFramesAvailable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取下一个数据包大小</span>            pCaptureClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetNextPacketSize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>packetLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，由于缓冲区会不断地进来数据，你可以加一个判断，读取了多少个数据包后退出循环，否则会无限循环。</p><h4 id="关闭音频流"><a href="#关闭音频流" class="headerlink" title="关闭音频流"></a>关闭音频流</h4><pre class="line-numbers language-cpp"><code class="language-cpp">pAudioClient<span class="token operator">-</span><span class="token operator">></span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> recorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> recorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200308165600.png" alt="输出效果图"></p><p>周三大概做到这里</p><h2 id="周四-2020-03-05"><a href="#周四-2020-03-05" class="headerlink" title="周四-2020-03-05"></a>周四-2020-03-05</h2><p>周四主要将波形曲线画出来。</p><h3 id="绘制波形"><a href="#绘制波形" class="headerlink" title="绘制波形"></a>绘制波形</h3><p>创建了一个MFC项目，并新建了一个类，主要是将上面说到的代码简单封装了一下，没有用到的暂时不显示。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//CRecorder.h</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;dshow.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;winerror.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;mmdeviceapi.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Functiondiscoverykeys_devpkey.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Audioclient.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;Audiopolicy.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;complex></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// REFERENCE_TIME time units per second and per millisecond</span><span class="token macro property">#<span class="token directive keyword">define</span> REFTIMES_PER_SEC  10000000</span><span class="token macro property">#<span class="token directive keyword">define</span> REFTIMES_PER_MILLISEC  10000</span><span class="token macro property">#<span class="token directive keyword">define</span> EXIT_ON_ERROR(hres)  \              if (FAILED(hres)) { goto Exit; }</span><span class="token macro property">#<span class="token directive keyword">define</span> SAFE_RELEASE(punk)  \              if ((punk) != NULL)  \                { (punk)->Release(); (punk) = NULL; }</span><span class="token keyword">class</span> <span class="token class-name">CRecorder</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> m_recorder<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据记录器</span>    IAudioClient <span class="token operator">*</span>m_pAudioClient<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声卡客户端</span>    IAudioCaptureClient <span class="token operator">*</span>m_pCaptureClient<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//捕获流客户端</span>    WAVEFORMATEX <span class="token operator">*</span>m_pwfx<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//手动提取出来的代码</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>    <span class="token keyword">void</span> <span class="token function">refreshRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//刷新采样数据</span>    <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>HRESULT hres<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//错误处理（也没咋用，懒得写那么多错误处理）</span>    HRESULT <span class="token function">RecordAudioStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//整块的示例代码，用于测试，现在不使用</span>    <span class="token operator">~</span><span class="token function">CRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">drawWaveform</span><span class="token punctuation">(</span>CDC<span class="token operator">*</span> pDC<span class="token punctuation">,</span> CRect rect<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绘制图像</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现部分和上面差不多就不赘述了。</p><p>主要是绘制方面。</p><p>第三个参数<code>vector&lt;BYTE&gt; output</code>是为了后面的滤波所准备的，是由leesin提出的改进</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> CRecorder<span class="token operator">::</span><span class="token function">drawWaveform</span><span class="token punctuation">(</span>CDC<span class="token operator">*</span> pDC<span class="token punctuation">,</span>CRect rect<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> output<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//RecordAudioStream();</span>    <span class="token keyword">int</span> height <span class="token operator">=</span> rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> width <span class="token operator">=</span> rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x_coefficient <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//int a = dataStart;</span>    pDC <span class="token operator">-</span><span class="token operator">></span> <span class="token function">MoveTo</span><span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span>dataStart<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> dataStart<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> output<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>dataStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>x_coefficient <span class="token operator">&lt;=</span> width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">LineTo</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span>dataStart<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x_coefficient<span class="token punctuation">,</span> output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在对话框类中获取pDC</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CsoundcarddataacquisitionDlg<span class="token operator">::</span><span class="token function">drawWaveform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    m_pPanel <span class="token operator">=</span> <span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_PANEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获得静态窗口对象指针</span>    <span class="token comment" spellcheck="true">//清屏</span>    m_pPanel<span class="token operator">-</span><span class="token operator">></span><span class="token function">ShowWindow</span><span class="token punctuation">(</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//偷懒用的方法</span>    m_pPanel<span class="token operator">-</span><span class="token operator">></span><span class="token function">ShowWindow</span><span class="token punctuation">(</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取控件区域</span>    CRect rect<span class="token punctuation">;</span>    m_pPanel<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetClientRect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取控件画笔</span>    CDC<span class="token operator">*</span> pDC <span class="token operator">=</span> m_pPanel<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetDC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//绘制原始采样数据</span>    m_pPanel<span class="token operator">-</span><span class="token operator">></span><span class="token function">UpdateWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//m_recorder.RecordAudioStream();</span>    m_recorder<span class="token punctuation">.</span><span class="token function">refreshRecorder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_recorder<span class="token punctuation">.</span><span class="token function">drawWaveform</span><span class="token punctuation">(</span>pDC<span class="token punctuation">,</span> rect<span class="token punctuation">,</span>m_recorder<span class="token punctuation">.</span><span class="token function">NoFiltering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReleaseDC</span><span class="token punctuation">(</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><pre class="line-numbers language-cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>BYTE<span class="token operator">></span> CRecorder<span class="token operator">::</span><span class="token function">NoFiltering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m_recorder<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200308173908.png" alt="第一次显示的图"></p><h3 id="滤波算法"><a href="#滤波算法" class="headerlink" title="滤波算法"></a>滤波算法</h3><p>老师给了个txt，里面就是各种滤波算法，我也没啥精力去研究了，就交给leesin了，他完成得很不错，就是刚刚上面说的设计就是他整的。不过一开始用的算法效果不太好，让他继续研究。此时咸鱼米在弄vc6.0的PID那个项目，因为她没有vs。</p><h2 id="周五周六-2020-03-06-07"><a href="#周五周六-2020-03-06-07" class="headerlink" title="周五周六-2020-03-06~07"></a>周五周六-2020-03-06~07</h2><p>这两天都在学习那个FFT快速傅里叶变换</p><h3 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h3><p>参考各方资料写出来这个递归版本的（迭代版本的看不懂），参考链接见本文开头。</p><ul><li>输入：多项式系数表示法的系数，值为时域下的幅值</li><li>输出：多项式点值表示法的点（以复数表示），其模为频域下的幅值</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/**FFT传入的复数数组里面都是实数，含义是多项式系数表示法的系数，值为时域幅值系数数组长度得是2的整数次方返回值的模为频谱幅值*/</span>vector<span class="token operator">&lt;</span>complex<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">>></span> CRecorder<span class="token operator">::</span><span class="token function">FFT</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>complex<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">>></span> A<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.141592651</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> A<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//递归结束条件</span>    vector<span class="token operator">&lt;</span>complex<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">>></span> A1<span class="token punctuation">,</span> A2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//A(x) = A1(x^2) + x * A2(x^2)</span>    <span class="token comment" spellcheck="true">//将系数分类</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            A1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            A2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    A1 <span class="token operator">=</span> <span class="token function">FFT</span><span class="token punctuation">(</span>A1<span class="token punctuation">)</span><span class="token punctuation">;</span>    A2 <span class="token operator">=</span> <span class="token function">FFT</span><span class="token punctuation">(</span>A2<span class="token punctuation">)</span><span class="token punctuation">;</span>    complex<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">Wn</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>PI <span class="token operator">/</span> len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>PI <span class="token operator">/</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//len等分点的角度增量</span>    complex<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">W</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于遍历复平面单位圆上的len个等分点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> W <span class="token operator">*</span><span class="token operator">=</span> Wn<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> A1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> W <span class="token operator">*</span> A2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        A<span class="token punctuation">[</span>i <span class="token operator">+</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> A1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> W <span class="token operator">*</span> A2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> A<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成之后的效果是下面这样的：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200308174022.png" alt=""></p><p>上图的坐标都是没有变换的，还是以左上角为原点。</p><h2 id="发现重装系统前写的东西都没了"><a href="#发现重装系统前写的东西都没了" class="headerlink" title="发现重装系统前写的东西都没了"></a>发现重装系统前写的东西都没了</h2><p>啊啊啊啊啊啊！后面那么一大段就这样没了！不太想补了。</p><p>其实核心部分也基本上说完了，剩下的就是坐标转化以及动态采样了，读者们可以移步本项目的<a href="https://gitee.com/ChangingSelf/sound-card-data-acquisition" target="_blank" rel="noopener">码云仓库</a>查看代码。</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编程练习】java简易学生管理系统</title>
      <link href="/posts/java_simple_studentInfoSystem/"/>
      <url>/posts/java_simple_studentInfoSystem/</url>
      
        <content type="html"><![CDATA[<p>上周一个数据库作业，用文件读写的方式来实现学生信息的读写，从而与数据库编程的方式进行对比。</p><p>在这个练习中，我主要是打算熟悉一下java的文件操作，因为我发现我学了java之后基本没有写过文件读写。</p><p>本文主要总结一下本练习用到的一些知识点，方便下次使用。</p><p><a href="https://github.com/ChangingSelf/fileio-exercises" target="_blank" rel="noopener">本文对应的github库</a></p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/kaml8/p/9853595.html" target="_blank" rel="noopener">java输入和输出函数</a></li><li><a href="https://www.cnblogs.com/oneboi/articles/8615331.html" target="_blank" rel="noopener">java文件和文件夹的创建</a></li><li><a href="https://zhuanlan.zhihu.com/p/87560794" target="_blank" rel="noopener">Java I/O包 读写文件</a>：有关各种文件流、Reader和Writer之间关系的解释</li><li><a href="https://blog.csdn.net/ai_bao_zi/article/details/81097898" target="_blank" rel="noopener">java基础知识之FileInputStream流</a></li><li><a href="https://www.cnblogs.com/ywzbky/p/10697414.html" target="_blank" rel="noopener">JAVA中字符流详解</a></li><li><a href="https://www.jianshu.com/p/ec76c4394a00" target="_blank" rel="noopener">Java 实现文件随机读写-RandomAccessFile</a></li><li><a href="https://zhuanlan.zhihu.com/p/68598753" target="_blank" rel="noopener">流-文件操作（1）-Java高级知识（4）</a>：讲了流的原理和分类</li><li><a href="https://zhuanlan.zhihu.com/p/98911542" target="_blank" rel="noopener">Java语言的输入与输出与文件处理</a>：常用文件处理类的API列表</li><li><a href="https://cloud.tencent.com/developer/ask/48910" target="_blank" rel="noopener">如何检查Java字符串并不是所有空白？</a></li></ul><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li>1.建两个文本文件</li><li>2.插入学生信息</li><li>3.查询学生对应的奖励</li><li>4.增删改信息</li></ul><h2 id="文件1-学生基本信息"><a href="#文件1-学生基本信息" class="headerlink" title="文件1 学生基本信息"></a>文件1 学生基本信息</h2><table><thead><tr><th>学号</th><th>姓名</th><th>性别</th><th>年龄</th><th>专业</th><th>位置</th><th>长度</th></tr></thead><tbody><tr><td>2017901006</td><td>杨啸</td><td>男</td><td>21</td><td>软件工程</td><td>0</td><td>30</td></tr><tr><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td><td>……</td></tr></tbody></table><ul><li>位置：奖励文件内对应的位置</li><li>长度：奖励文件内对应的奖励字段的长度</li></ul><h2 id="文件2-奖励"><a href="#文件2-奖励" class="headerlink" title="文件2 奖励"></a>文件2 奖励</h2><p>记录学生获得的奖励</p><table><thead><tr><th align="center">奖励</th></tr></thead><tbody><tr><td align="center">2011校奖学金，2012国家奖学金</td></tr><tr><td align="center">2012校优秀学生</td></tr></tbody></table><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><ul><li>model包<ul><li>Gender枚举类：枚举值为“男”和“女”</li><li>StudentInfo类：作为学生信息结点，存储学生信息的六个字段。后来写着写着觉得这个类名太长了，不该加Info后缀的，写起来怪怪的。</li><li>StudentInfoSystem类：用于实现整个系统的逻辑功能，包括录入信息，查找信息，保存数据，读取数据等。</li></ul></li><li>view包<ul><li>ConsoleMenu类：控制台菜单类，作为与用户交互的界面。</li></ul></li></ul><h1 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h1><h2 id="Gender枚举类"><a href="#Gender枚举类" class="headerlink" title="Gender枚举类"></a>Gender枚举类</h2><p>在录入学生性别的时候，会涉及到输入什么的问题，输入0或1？输入“男”或“女”？如果用整数或者字符串都可能会产生非法数据，导致一些问题，这些问题在很久以前我拿C++写的时候就遇到过一些。</p><p>最好的方式不是用布尔类型这种二值类型，而是使用枚举类型，因为有可能用到别的值，比如UNSET（未设置）。</p><p>在这次练习之前，我会的java枚举大概是下面这样：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> Gender <span class="token punctuation">{</span>    MALE<span class="token punctuation">,</span>    FAMALE<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如同C++枚举一样列出枚举值，然后当成常量一样使用。</p><p>后面变成了这样：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Gender.java</span><span class="token keyword">package</span> model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Gender <span class="token punctuation">{</span>    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FAMALE</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String m_genderString<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Gender</span><span class="token punctuation">(</span>String gender<span class="token punctuation">)</span> <span class="token punctuation">{</span>        m_genderString <span class="token operator">=</span> gender<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getGenderString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> m_genderString<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据字符串的值返回对应的枚举值     * TODO：应该可以优化成不用手动写switch的     * @param genderString     * @return 返回字符串对应的枚举值，找不到则返回null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Gender <span class="token function">newGender</span><span class="token punctuation">(</span>String genderString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>genderString<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"男"</span><span class="token operator">:</span>            <span class="token keyword">return</span> Gender<span class="token punctuation">.</span>MALE<span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"女"</span><span class="token operator">:</span>            <span class="token keyword">return</span> Gender<span class="token punctuation">.</span>FAMALE<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>百度了几篇博客之后（当时没收藏，找不到了），知道了枚举类一点点原理。</p><p>拿上面这个代码举例：写<code>MALE(&quot;男&quot;)</code>其实像是为Gender类的构造方法传入一个值为“男”的字符串，而默认的构造方法是没有参数的，所以你需要写一个以字符串为参数的构造方法。</p><p>为了保留下这个传入的字符串，需要定义一个字符串类型的属性；为了获取它，再定义一个getter。</p><p>这样做的目的是，在输出学生性别时，可以调用性别属性的<code>getGenderString()</code>方法获取对应的字符串。</p><p>最下面那个<code>newGender()</code>方法则是在录入学生性别时使用。</p><h2 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h2><p>java中的File类是对文件的抽象，它可以是文件，也可以是目录。</p><pre class="line-numbers language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果传入的不是目录字符串，则返回</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它拥有的方法主要是用于检测文件的信息的，比如它是文件还是目录，是否存在，绝对路径是什么等等，它不能直接读写文件（创建倒是可以）。</p><p>读写文件得需要其他类，这一部分的类太多了，我找了挺久才找到合适的类。</p><h2 id="FileOutputStream类"><a href="#FileOutputStream类" class="headerlink" title="FileOutputStream类"></a>FileOutputStream类</h2><p>首先是保存数据到文件中。用到了这个类，它是文件输出流，以字节流的形式输出到文件。意思就是给他传入的参数是字节数组而不是字符串。不过字符串转字节数组非常简单，用字符串的<code>getBytes()</code>就好。</p><p>打开文件输出流：</p><pre class="line-numbers language-java"><code class="language-java">File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果传入的不是目录字符串，则返回</span>File infoFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName <span class="token operator">+</span> <span class="token string">"/StudentInfoList.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学生信息文件</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>infoFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> infoFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>FileOutputStream infoFOS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>infoFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随后拼接好学生信息的字符串，转换为字节数组，传入即可：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> infoBuf <span class="token operator">=</span> studentInfoString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>infoFOS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>infoBuf<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写入文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最后记得close</p><pre class="line-numbers language-java"><code class="language-java">infoFOS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="FileReader类和BufferedReader类"><a href="#FileReader类和BufferedReader类" class="headerlink" title="FileReader类和BufferedReader类"></a>FileReader类和BufferedReader类</h2><p>一行一个学生信息，所以读取时打算直接readline，需要<code>BufferedReader</code>类，进而需要<code>FileReader</code>类。</p><pre class="line-numbers language-java"><code class="language-java">BufferedReader bufReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>infoFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开缓冲字符流</span>String tmpString <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmpString <span class="token operator">=</span> bufReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为基本信息文件中保存的是奖励在奖励文件中的位置与长度，所以在读取时需要设置文件指针。</p><p>这个需要用到<code>RandomAccessFile</code>类。</p><pre class="line-numbers language-java"><code class="language-java">RandomAccessFile randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>rewardFile<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开随机读写</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置文件指针到指定位置，读取对应长度的字节。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从Reward文件中读取奖励信息</span>randomAccessFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>tmpBytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> rewardLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取指定长度的奖励信息</span>String rewardString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>tmpBytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写到这里我还遇到了一个问题，就是读取到字符串后，无法判断字符串是否为空，如果用<code>rewardString.equals(&quot;&quot;)</code>或者``rewardString.isEmpty()`，发现字符串的长度是和我设置的缓冲区大小有关的。虽然全部是空白，但是并不为空字符串。用长度判断也不行。</p><p>后来找到了一个方法：</p><pre class="line-numbers language-java"><code class="language-java">String rewardString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>tmpBytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>trim()</code>可以去掉首尾空白，那么1024长度的空字符串就会变成0长度的普通的空字符串，就可以用刚刚的方式来判断学生是否有奖励了。</p><h2 id="录入学生信息"><a href="#录入学生信息" class="headerlink" title="录入学生信息"></a>录入学生信息</h2><p>java的控制台输入我也是没弄过，这次就来试试。</p><p>会了之后发现蛮简单的。创建一个<code>Scanner</code>对象，传入源输入流，要从控制台输入，所以输入流设置为<code>System.in</code>。</p><pre class="line-numbers language-java"><code class="language-java">Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要读取一行数据，可以使用<code>next()</code>或者<code>nextLine()</code>方法，区别详情见百度</p><p>录入普通字符串搞定：</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的学号"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String studentId <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>录入性别则需要判断合法性（其实上面的学号，姓名也需要判断合法性，不过不是本次练习的核心，就没弄了）</p><pre class="line-numbers language-java"><code class="language-java">String genderString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>Gender gender <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的性别,输入\"男\" 或者\"女\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    genderString <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    gender <span class="token operator">=</span>  Gender<span class="token punctuation">.</span><span class="token function">newGender</span><span class="token punctuation">(</span>genderString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>gender <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里用了一个do-while循环，如果输入的不是枚举类里面有的值，就要求再次输入。</p><p>接着是年龄，年龄是一个正整数，需要<code>nextInt()</code>来获取整数，如果输入的不是整数，就会抛出异常。处理完这个异常之后继续要求输入，直到输入正确的年龄为止。</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的年龄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        age <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄必须是正数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年龄必须是整数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空错误数据</span>    <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在输入完整数类型的年龄后，需要输入字符串类型的专业了，这里会遇到和C++输入一样的情况，那就是你还没输入就当你输入了，最后得到的是空字符串。这是因为在输入整数后按下回车键确定时，这个换行符还留存在输入缓冲区，下一个<code>nextLine()</code>将其当成了结束标志，从而结束字符串的输入。所以需要清空一下缓冲区，清空方式就是读取一个值并丢弃：</p><pre class="line-numbers language-java"><code class="language-java">scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除缓冲区空行</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String major <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后是录入学生的奖励，这个部分加深了我对“String的相等比较不能用<code>==</code>而要用<code>equals()</code>”的知识点的印象。</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的专业"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String major <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入学生的奖励，每输入完一项换行，输入\"done\"结束输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String rewardString <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>Vector<span class="token operator">&lt;</span>String<span class="token operator">></span> reward <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>    rewardString <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rewardString<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> reward<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rewardString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>rewardString<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><h2 id="保存数据到文件"><a href="#保存数据到文件" class="headerlink" title="保存数据到文件"></a>保存数据到文件</h2><pre class="line-numbers language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * 保存到文件中     * @param pathName 数据文件所在的路径字符串     * @return 保存的记录数，如果出错返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">saveData</span><span class="token punctuation">(</span>String pathName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果传入的不是目录字符串，则返回</span>            File infoFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName <span class="token operator">+</span> <span class="token string">"/StudentInfoList.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学生信息文件</span>            File rewardFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName <span class="token operator">+</span> <span class="token string">"/Rewards.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学生奖励文件</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>infoFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> infoFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rewardFile<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> rewardFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream infoFOS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>infoFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            FileOutputStream rewardFOS <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>rewardFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> curPosition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//“奖励”文件指针当前位置</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>StudentInfo studentInfo<span class="token operator">:</span>m_studentInfoList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String studentInfoString <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s,%s,%s,%d,%s,"</span><span class="token punctuation">,</span>                         studentInfo<span class="token punctuation">.</span><span class="token function">getStudentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        studentInfo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        studentInfo<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getGenderString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        studentInfo<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        studentInfo<span class="token punctuation">.</span><span class="token function">getMajor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">)</span><span class="token punctuation">;</span>                String rewardString <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> studentInfo<span class="token punctuation">.</span><span class="token function">getReward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拼接奖励字符串</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rewardString<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//奖励字符串不为空，则添加换行符</span>                    rewardString <span class="token operator">+=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rewardBuf <span class="token operator">=</span> rewardString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为字节数组</span>                studentInfoString <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s,%s\n"</span><span class="token punctuation">,</span> curPosition<span class="token punctuation">,</span>rewardBuf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                curPosition <span class="token operator">+=</span> rewardBuf<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算下一个位置</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> infoBuf <span class="token operator">=</span> studentInfoString<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//写入文件        </span>                infoFOS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>infoBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>                rewardFOS<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>rewardBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"成功保存%d条记录到以下文件中：\n[%s]\n[%s]\n"</span><span class="token punctuation">,</span>                    m_studentInfoList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    infoFile<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    rewardFile<span class="token punctuation">.</span><span class="token function">getCanonicalPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">;</span>            rewardFOS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            infoFOS<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> m_studentInfoList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="从文件中加载数据"><a href="#从文件中加载数据" class="headerlink" title="从文件中加载数据"></a>从文件中加载数据</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 从文件中加载     * @param pathName 数据文件所在的路径字符串     * @param clearFlag 是否清空内存中原有数据     * @return 读取的记录数，如果出错返回-1     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadData</span><span class="token punctuation">(</span>String pathName<span class="token punctuation">,</span><span class="token keyword">boolean</span> clearFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>clearFlag<span class="token punctuation">)</span> m_studentInfoList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果传入的不是目录字符串，则返回</span>            File infoFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName <span class="token operator">+</span> <span class="token string">"/StudentInfoList.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学生信息文件</span>            File rewardFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>pathName <span class="token operator">+</span> <span class="token string">"/Rewards.csv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//学生奖励文件</span>            BufferedReader bufReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>infoFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开缓冲字符流</span>            RandomAccessFile randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>rewardFile<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开随机读写</span>            String tmpString <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmpString <span class="token operator">=</span> bufReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//按行读取</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> infoStrings <span class="token operator">=</span> tmpString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按照分隔符分割</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>infoStrings<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果字段数对不上，说明文件格式有问题</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//从StudentInfo文件中读取学生信息</span>                String studentId <span class="token operator">=</span> infoStrings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> infoStrings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                Gender gender <span class="token operator">=</span> Gender<span class="token punctuation">.</span><span class="token function">newGender</span><span class="token punctuation">(</span>infoStrings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>gender <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> age <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>infoStrings<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String major <span class="token operator">=</span> infoStrings<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> position <span class="token operator">=</span> Long<span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>infoStrings<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> rewardLen <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>infoStrings<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//从Reward文件中读取奖励信息</span>                randomAccessFile<span class="token punctuation">.</span><span class="token function">seek</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmpBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                randomAccessFile<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>tmpBytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> rewardLen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取指定长度的奖励信息</span>                String rewardString <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>tmpBytes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为字符串</span>                Vector<span class="token operator">&lt;</span>String<span class="token operator">></span> rewardList <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rewardString<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//如果奖励不为空则添加</span>                    rewardList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> rewardArr <span class="token operator">=</span> rewardString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span>String reward <span class="token operator">:</span> rewardArr<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        rewardList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>reward<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                StudentInfo newStudentInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StudentInfo</span><span class="token punctuation">(</span>studentId<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> age<span class="token punctuation">,</span> major<span class="token punctuation">,</span> rewardList<span class="token punctuation">)</span><span class="token punctuation">;</span>                m_studentInfoList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newStudentInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bufReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            randomAccessFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> counter<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫框架（1）一个简单的可用的爬虫</title>
      <link href="/posts/Scrapy_spider_1/"/>
      <url>/posts/Scrapy_spider_1/</url>
      
        <content type="html"><![CDATA[<p>很久没写爬虫了，又重新开始使用scrapy，之前学习的内容基本上都忘了，重新复习一遍，发现对它的理解又加深了一些。</p><p>本文将初级知识点简单梳理，实现了一个HelloWorld级别的Scrapy爬虫。</p><p>本文适用于Scrapy 1.6.0，结合了自己的理解，可能理解有错误，欢迎在下面评论区指出。</p><p><strong>不包含安装教程。</strong></p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://baike.baidu.com/item/scrapy/7914913?fr=aladdin" target="_blank" rel="noopener">Scrapy-百度百科</a></li><li><a href="https://zhuanlan.zhihu.com/p/96082022" target="_blank" rel="noopener">Python爬虫-scrapy介绍及使用</a></li><li><a href="http://www.scrapyd.cn/doc/" target="_blank" rel="noopener">Scrapy中文网</a></li><li><a href="http://lab.scrapyd.cn/" target="_blank" rel="noopener">Scrapy中文网的爬虫实验室</a></li><li>xpath教程：<ul><li><a href="https://zhuanlan.zhihu.com/p/29436838" target="_blank" rel="noopener">学爬虫利器XPath,看这一篇就够了</a>：这个是结合代码来讲解的</li><li><a href="https://zhuanlan.zhihu.com/p/65177112" target="_blank" rel="noopener">Python神技能：六张表 搞定 Xpath 语法</a>：这个是列出语法表的</li></ul></li><li><a href="https://www.jianshu.com/p/4e5aaf317f95" target="_blank" rel="noopener">VScode Python no module的解决方法</a></li><li><a href="https://www.cnblogs.com/yrxns/p/7930177.html" target="_blank" rel="noopener">Python中获得当前目录和上级目录</a></li></ul><h1 id="Scrapy是啥"><a href="#Scrapy是啥" class="headerlink" title="Scrapy是啥"></a>Scrapy是啥</h1><p>先看看<a href="https://baike.baidu.com/item/scrapy/7914913?fr=aladdin" target="_blank" rel="noopener">Scrapy-百度百科</a>的解释：</p><blockquote><p>Scrapy是一个为爬取网站数据、提取结构性数据而设计的应用程序框架，它可以应用在广泛领域：Scrapy 常应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。通常我们可以很简单的通过 Scrapy 框架实现一个爬虫，抓取指定网站的内容或图片。 </p></blockquote><p>它是一个<strong>框架</strong>，帮你解决写爬虫的过程中遇到的一些问题，简化你写爬虫的过程。对于一些简单的爬虫，你不需要自己来写重复的代码，它将重复的代码都隐藏起来，你只需要写一些与你需要爬取的网站相关的东西就可以了。</p><p>例如，爬虫需要发送请求和获取响应，scrapy有个专门的调度器来帮你解决这个问题，你不需要自己来调度，你只需要使用它的下载器传给你的响应对象Response来进行解析即可，解析好的数据你也可以打包成它的一个名为Item的类的对象中，更方便地进行处理。方便很多。</p><h1 id="Scrapy的组成"><a href="#Scrapy的组成" class="headerlink" title="Scrapy的组成"></a>Scrapy的组成</h1><p>下面这个图片来自于<a href="https://zhuanlan.zhihu.com/p/96082022" target="_blank" rel="noopener">Python爬虫-scrapy介绍及使用</a></p><p><img src="https://pic4.zhimg.com/80/v2-5e7ceadeb3ddd9de9436008322aee147_hd.jpg" alt="借用知乎找来的图片"></p><ul><li><strong>调度器（Scheduler）</strong>选择合适的时机发送Request（请求）给下载器；</li><li><strong>下载器（Downloader）</strong>处理Request（响应），即发送请求并获取响应Response，将Response传给爬虫；</li><li><strong>爬虫（Spider）</strong>主要做两类事情：<ol><li>提取当前Response中的数据，打包成Item（或者是dict），将它们发送给管道</li><li>获取Response中下一个Request的url（比如你第一个Response爬取的是目录页，那么就是获取目录项对应的url）从而构造下一个Request，再将这个Request发送给调度器</li></ol></li><li><strong>管道（Item Pipeline）</strong>处理Item中的数据</li><li><strong>中间件（Middleware）</strong>分为下载中间件和爬虫中间件，用来在传送Request和Response过程中做一些额外的处理</li><li><strong>引擎（Engine）</strong>用于将以上模块都连接起来，其他模块都直接与引擎交互，数据等由引擎进行转发</li></ul><p>一般我们需要编写的，就是爬虫和管道，也就是解析数据和处理数据。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>首先在命令行创建项目</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$scrapy</span> startproject 项目名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>会生成一个以你项目名称命名的文件夹，里面就是你的项目文件</p><p><img src="https://pic2.zhimg.com/80/v2-24923a6533dde878d8e61b2da8104831_hd.jpg" alt="再次借用一下知乎那篇文章的图片"></p><h2 id="创建爬虫"><a href="#创建爬虫" class="headerlink" title="创建爬虫"></a>创建爬虫</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$scrapy</span> genspider 爬虫名 爬取的域名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的作用是在spider目录下按照模板创建一个以你爬虫为名的py文件，当然你也可以手动创建，只要你的文件符合scrapy的要求就行，最好用命令。</p><p>记得先切换到你项目目录。</p><h2 id="编写爬虫"><a href="#编写爬虫" class="headerlink" title="编写爬虫"></a>编写爬虫</h2><p>我要练习爬取的是<a href="http://www.scrapyd.cn/doc/" target="_blank" rel="noopener">Scrapy中文网</a>提供的<a href="http://lab.scrapyd.cn/" target="_blank" rel="noopener">爬虫实验室</a></p><p>爬虫命名为lab，创建好的初始爬虫文件<code>lab.py</code>是这样的</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">LabSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'lab'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lab.scrapyd.cn'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://lab.scrapyd.cn'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>name</strong>：爬虫名</li><li><strong>allowed_domains</strong>：允许访问的域名，<strong>注意是域名，而不是要爬取的url，别写成<a href="http://lab.scrapyd.cn之类的" target="_blank" rel="noopener">http://lab.scrapyd.cn之类的</a></strong></li><li><strong>start_urls</strong>：初始url</li><li>parse(self,response)：解析函数，传入的参数就是Response响应，你可以用这个引用来获取网页内容，从而进行处理</li></ul><h3 id="运行过程理解"><a href="#运行过程理解" class="headerlink" title="运行过程理解"></a>运行过程理解</h3><p>按照我的理解，当启动这个爬虫时：</p><ul><li>scrapy会将start_urls这个列表里面的url都生成对应的Request发给<strong>调度器</strong></li><li>然后调度器将Request通过引擎转发给<strong>下载器</strong></li><li>下载器再将下载好的Response发给<strong>引擎</strong>，引擎调用该爬虫的parse方法，将这个Response传入作为参数</li><li>引擎获取parse的返回值<ul><li>如果是Request（即新的请求），就发送给<strong>调度器</strong></li><li>如果是item或者dict，就发送给<strong>管道</strong></li></ul></li><li>当调度器中没有新的Request了，scrapy停止。</li></ul><h3 id="调试解析"><a href="#调试解析" class="headerlink" title="调试解析"></a>调试解析</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$scrapy</span> shell 你要爬取的url<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处，我要爬取的就是<code>http://lab.scrapyd.cn</code>。</p><p>这个命令可以打开交互式调试命令行，如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$scrapy</span> shell http://lab.scrapyd.cn<span class="token comment" spellcheck="true">#……省略一大堆日志信息</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> Available Scrapy objects:<span class="token punctuation">[</span>s<span class="token punctuation">]</span>   scrapy     scrapy module <span class="token punctuation">(</span>contains scrapy.Request, scrapy.Selector, etc<span class="token punctuation">)</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   crawler    <span class="token operator">&lt;</span>scrapy.crawler.Crawler object at 0x0000017F01C9A748<span class="token operator">></span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   item       <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   request    <span class="token operator">&lt;</span>GET http://lab.scrapyd.cn<span class="token operator">></span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   response   <span class="token operator">&lt;</span>200 http://lab.scrapyd.cn<span class="token operator">></span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   settings   <span class="token operator">&lt;</span>scrapy.settings.Settings object at 0x0000017F031BCBE0<span class="token operator">></span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   spider     <span class="token operator">&lt;</span>LabSpider <span class="token string">'lab'</span> at 0x17f034c2da0<span class="token operator">></span><span class="token punctuation">[</span>s<span class="token punctuation">]</span> Useful shortcuts:<span class="token punctuation">[</span>s<span class="token punctuation">]</span>   fetch<span class="token punctuation">(</span>url<span class="token punctuation">[</span>, redirect<span class="token operator">=</span>True<span class="token punctuation">]</span><span class="token punctuation">)</span> Fetch URL and update local objects <span class="token punctuation">(</span>by default, redirects are followed<span class="token punctuation">)</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   fetch<span class="token punctuation">(</span>req<span class="token punctuation">)</span>                  Fetch a scrapy.Request and update local objects<span class="token punctuation">[</span>s<span class="token punctuation">]</span>   shelp<span class="token punctuation">(</span><span class="token punctuation">)</span>           Shell <span class="token function">help</span> <span class="token punctuation">(</span>print this help<span class="token punctuation">)</span><span class="token punctuation">[</span>s<span class="token punctuation">]</span>   view<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    View response <span class="token keyword">in</span> a browserIn <span class="token punctuation">[</span>1<span class="token punctuation">]</span>: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scrapy这时已经将response给你了，你可以使用这些命令来进行调试。</p><p>没错，就是给parse函数传的那个response参数。</p><p>你可以使用：</p><pre class="line-numbers language-bash"><code class="language-bash">In<span class="token punctuation">[</span>1<span class="token punctuation">]</span>:response.text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来获取得到的html字符串，以确定是否成功获取到自己想要的网页。</p><p>先去那个网站按f12查看一下它的元素：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-mb-12 col-8<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>quote post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>看官，此页面只为爬虫练习使用，都是残卷，若喜欢可以去找点高清版！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>作者：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中国传世名画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lab.scrapyd.cn/archives/57.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>【详情】<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   标签： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lab.scrapyd.cn/tag/%E8%89%BA%E6%9C%AF/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>艺术<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lab.scrapyd.cn/tag/%E5%90%8D%E7%94%BB/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>quote post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下面每一幅都是上亿？你造几？<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>作者：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>天价世界名画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lab.scrapyd.cn/archives/55.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>【详情】<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tags<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                   标签： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lab.scrapyd.cn/tag/%E8%89%BA%E6%9C%AF/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>艺术<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>，<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tag<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://lab.scrapyd.cn/tag/%E5%90%8D%E7%94%BB/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>名画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们需要获取到的，是以下内容：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'看官，此页面只为爬虫练习使用，都是残卷，若喜欢可以去找点高清版！'</span><span class="token punctuation">,</span> <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'艺术'</span><span class="token punctuation">,</span> <span class="token string">'名画'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'下面每一幅都是上亿？你造几？'</span><span class="token punctuation">,</span> <span class="token string">'tag'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'艺术'</span><span class="token punctuation">,</span> <span class="token string">'名画'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这个response拥有几种解析方法，你可以使用xpath，也可以用css。</p><p>xpath教程：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/29436838" target="_blank" rel="noopener">学爬虫利器XPath,看这一篇就够了</a>：这个是结合代码来讲解的</li><li><a href="https://zhuanlan.zhihu.com/p/65177112" target="_blank" rel="noopener">Python神技能：六张表 搞定 Xpath 语法</a>：这个是列出语法表的</li></ul><p>比如使用xpath：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[contains(@class,"quote")]'</span><span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//div[contains(@class,"quote")]'</span> data<span class="token operator">=</span><span class="token string">'&lt;div class="quote post">\n\t        &lt;span '</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//div[contains(@class,"quote")]'</span> data<span class="token operator">=</span><span class="token string">'&lt;div class="quote post">\n\t        &lt;span '</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//div[contains(@class,"quote")]'</span> data<span class="token operator">=</span><span class="token string">'&lt;div class="quote post">\n\t        &lt;span '</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//div[contains(@class,"quote")]'</span> data<span class="token operator">=</span><span class="token string">'&lt;div class="quote post">\n\t        &lt;span '</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>Selector xpath<span class="token operator">=</span><span class="token string">'//div[contains(@class,"quote")]'</span> data<span class="token operator">=</span><span class="token string">'&lt;div class="quote post">\n\t        &lt;span '</span><span class="token operator">></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回的将是Selector的列表，Selector的具体用法也不在本文范围内。</p><p>其实<code>response.xpath()</code>只是方便使用，它调用了<code>response.selector.xpath()</code>，也就是说xpath和css实际上是Selector的方法。说这个的原因在于告诉你，对于这个列表里面每一个Selector，你都可以使用同样的方法来进行解析。</p><p>接着你就可以利用这个调试shell来调整你的xpath字符串或者css字符串了。</p><h3 id="编写Item域"><a href="#编写Item域" class="headerlink" title="编写Item域"></a>编写Item域</h3><p>items.py里面有着你可以用的item类，根据你确定需要获取的字段（Field）来给它添加：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># Define here the models for your scraped items</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># See documentation in:</span><span class="token comment" spellcheck="true"># https://doc.scrapy.org/en/latest/topics/items.html</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">TutorialItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    text <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    tag <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解析代码"><a href="#解析代码" class="headerlink" title="解析代码"></a>解析代码</h3><p>我用的是css选择器。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">LabSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'lab'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lab.scrapyd.cn'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://lab.scrapyd.cn'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        quotes<span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'div.quote'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> quote <span class="token keyword">in</span> quotes<span class="token punctuation">:</span>            item <span class="token operator">=</span> items<span class="token punctuation">.</span>TutorialItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            text <span class="token operator">=</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.text::text'</span><span class="token punctuation">)</span>            tag <span class="token operator">=</span> quote<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.tag::text'</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span> <span class="token operator">=</span> text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'tag'</span><span class="token punctuation">]</span> <span class="token operator">=</span> tag<span class="token punctuation">.</span>getall<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">yield</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始爬取"><a href="#开始爬取" class="headerlink" title="开始爬取"></a>开始爬取</h2><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$scrapy</span> crawl 需要启动的爬虫名 -o 输出文件名（比如test.json）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>scrapy会自动将得到的item保存到输出文件</p><h2 id="解决导入items模块的问题"><a href="#解决导入items模块的问题" class="headerlink" title="解决导入items模块的问题"></a>解决导入items模块的问题</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> ospath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span>parent_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>path<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>parent_path<span class="token punctuation">)</span><span class="token keyword">import</span> items<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编程练习】明日非舟抽卡模拟器（2）xml文件解析</title>
      <link href="/posts/Africanights_simu_hr_2/"/>
      <url>/posts/Africanights_simu_hr_2/</url>
      
        <content type="html"><![CDATA[<p>为了修改与添加方便，将干员的信息放在简历类Resume中，简历信息使用xml文件存储，在启动时加载进来。</p><p><a href="https://github.com/ChangingSelf/Africanights" target="_blank" rel="noopener">本项目连载github库地址</a></p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://zhuanlan.zhihu.com/p/66284713" target="_blank" rel="noopener">细说java解析XML文档的常用方法（含实例）-知乎</a></p></li><li><p><a href="https://blog.csdn.net/ooppookid/article/details/51704792" target="_blank" rel="noopener">Java千百问_02基本使用（010）_java、javax、sun、org包有什么区别</a></p></li><li><p><a href="https://www.w3cschool.cn/java/java-dom-intro.html" target="_blank" rel="noopener">Java DOM简介-w3cSchool</a></p></li></ul><h1 id="解析xml文件"><a href="#解析xml文件" class="headerlink" title="解析xml文件"></a>解析xml文件</h1><p>需要import进来的内容如下，jdk1.8全部自带，不需要额外下载。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取文档对象"><a href="#获取文档对象" class="headerlink" title="获取文档对象"></a>获取文档对象</h2><p>解析方式如下：</p><ul><li>首先获取一个工厂类（<code>DocumentBuilderFactory</code>）实例，使用了单例模式所以得用<code>newInstance()</code>来获取全局对象</li><li>再用获得的工厂对象来创建文档解析器（<code>DocumentBuilder</code>）</li><li>最后才能够利用文档解析器来解析文档（<code>Document</code>）</li></ul><pre class="line-numbers language-java"><code class="language-java">String path <span class="token operator">=</span> <span class="token string">"Melantha.xml"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析xml文件</span>DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Document doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>DocumentBuilder</code>对象的<code>parse()</code>方法可以直接传入String类型的字符串文件路径，也可以传入文件对象，例如：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span>String path <span class="token operator">=</span> <span class="token string">"Melantha.xml"</span><span class="token punctuation">;</span>File f<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解析xml文件</span>DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Document doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="DOM方式获取文档数据"><a href="#DOM方式获取文档数据" class="headerlink" title="DOM方式获取文档数据"></a>DOM方式获取文档数据</h2><p>此处引用自：<a href="https://www.w3cschool.cn/java/java-dom-intro.html" target="_blank" rel="noopener">Java DOM简介-w3cSchool</a></p><blockquote><p>例如，我们有以下xml结构:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>yourTag</span><span class="token punctuation">></span></span>This is an <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bold</span><span class="token punctuation">></span></span>important<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bold</span><span class="token punctuation">></span></span> test.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>yourTag</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>DOM节点的层级如下，其中每行代表一个节点:</p><pre><code>ELEMENT: yourTag   + TEXT: This is an   + ELEMENT: bold     + TEXT: important   + TEXT: test.</code></pre><p><code>yourTag</code>元素包含文本，后跟一个子元素，后跟另外的文本。</p><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p>为了支持混合内容，DOM节点非常简单。标签元素的“内容”标识它是的节点的类型。</p><p>例如，<yourTag> 节点内容是元素<code>yourTag</code>的名称。</p><p>DOM节点API定义<code>nodeValue()</code>，<code>nodeType()</code>和<code>nodeName()</code>方法。</p><p>对于元素节点<code>&lt; yourTag&gt;</code>nodeName()返回yourTag，而nodeValue()返回null。</p><p>对于文本节点<code>+ TEXT:这是一个</code>nodeName()返回#text，nodeValue()返回“This is an”。</p></blockquote><p>虽然这里写的用<code>nodeValue()</code>，但现在用的是<code>getValue()</code>这样子的方法。</p><h1 id="载入单份xml文件示例代码"><a href="#载入单份xml文件示例代码" class="headerlink" title="载入单份xml文件示例代码"></a>载入单份xml文件示例代码</h1><p>需要解析的xml文件的内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resume</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>玫兰莎<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>star</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>star</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chat</span><span class="token punctuation">></span></span>......玫兰莎。从现在起，我的利刃将为您所用。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chat</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>portrayal</span><span class="token punctuation">></span></span>image/Melantha.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>portrayal</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resume</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码部分：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 载入简历对象     * @param path 简历文件路径     * @return 简历对象     */</span>    <span class="token keyword">public</span> Resume <span class="token function">loadResume</span><span class="token punctuation">(</span>String path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Resume resume <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//解析xml文件</span>            DocumentBuilderFactory dbf <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder db <span class="token operator">=</span> dbf<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document doc <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            String nameString<span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String starString<span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"star"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> starInt <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>starString<span class="token punctuation">)</span><span class="token punctuation">;</span>            String chatString<span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"chat"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String portrayalString<span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"portrayal"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            resume <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Resume</span><span class="token punctuation">(</span>nameString<span class="token punctuation">,</span> starInt<span class="token punctuation">,</span> chatString<span class="token punctuation">,</span> portrayalString<span class="token punctuation">)</span><span class="token punctuation">;</span>            resume<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resume<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建新hexo博客后继续更新旧hexo博客的方法</title>
      <link href="/posts/update_old_hexo_blog_after_build_new_hexo_blog/"/>
      <url>/posts/update_old_hexo_blog_after_build_new_hexo_blog/</url>
      
        <content type="html"><![CDATA[<p>我创建了一个新的github账号ChangingSelf（憧憬少）来搭建新的博客，旧的博客搭建在旧账号HaneChiri（羽尘）上，原本的博客已经有一些人知道了，所以我用这个方式来将以前的访客带到我的新博客来。</p><p>问题在于，为了部署新博客，我将原本的ssh密钥对文件删掉了，重新生成了新的ssh，现在想要部署旧博客就会出现类似下面的错误：</p><pre><code>ERROR: Permission to HaneChiri/HaneChiri.github.io.git denied to ChangingSelf.   fatal: Could not read from remote repository.                                         Please make sure you have the correct access rights                             `    </code></pre><p>大意是我没有权限，也就是ssh没有配好。</p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.csdn.net/skylin19840101/article/details/98616205" target="_blank" rel="noopener">github支持多个账号</a></li><li><a href="https://www.cnblogs.com/yanglang/p/9563496.html" target="_blank" rel="noopener">SSH-keygen用法</a></li><li><a href="https://www.awaimai.com/2200.html" target="_blank" rel="noopener">git配置多个SSH-key</a></li><li><a href="https://blog.csdn.net/hao495430759/article/details/80673568" target="_blank" rel="noopener">git配置多个SSH-key-多图易理解版</a></li><li><a href="https://www.centos.bz/2018/06/%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAssh%E5%AF%86%E9%92%A5%E5%AF%B9%E5%B9%B6%E4%B8%94%E6%B0%B8%E4%B9%85%E5%A4%9Assh%E7%AE%A1%E7%90%86/" target="_blank" rel="noopener">配置多个ssh密钥对并且永久多ssh管理</a></li><li><a href="https://blog.csdn.net/weixin_34377919/article/details/91857803" target="_blank" rel="noopener">是否必须每次添加ssh-add</a></li><li><a href="https://baike.baidu.com/item/SSH/10407" target="_blank" rel="noopener">ssh百度百科</a></li></ul><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="目前状况"><a href="#目前状况" class="headerlink" title="目前状况"></a>目前状况</h2><p>操作系统是win10（找到的资料很多linux的，不过没关系，有git-bash）</p><p>github上有两个账号，一个旧账号（HaneChiri），一个新账号（ChangingSelf）。本地有两个hexo博客源代码文件夹，分别对应两个账号上搭建的博客。</p><p>本地<code>C:\Users\Administrator\.ssh</code>文件夹内有：</p><ul><li>id_rsa.pub：公钥文件，已添加到ChangingSelf账号的ssh-key</li><li>id_rsa：私钥文件</li><li>known_hosts</li></ul><p>现在在ChangingSelf博客文件夹内使用<code>hexo d</code>部署博客，可以部署到对应账号的仓库，而在HaneChiri博客文件夹内部署博客，则权限不足。</p><p>（现在回想起来也许直接将现在新的公钥添加到旧账号中就搞定了呀，搞那么麻烦QAQ，等写完这篇文再试试这个方法）</p><h2 id="过程复盘"><a href="#过程复盘" class="headerlink" title="过程复盘"></a>过程复盘</h2><h3 id="生成新密钥对"><a href="#生成新密钥对" class="headerlink" title="生成新密钥对"></a>生成新密钥对</h3><p>先来看看<a href="https://baike.baidu.com/item/SSH/10407" target="_blank" rel="noopener">百度百科</a>关于SSH（安全外壳协议）的介绍：</p><blockquote><p>从客户端来看，SSH提供两种级别的安全验证。</p><p><strong>第一种级别（基于口令的安全验证）</strong></p><p>只要你知道自己帐号和口令，就可以登录到远程主机。所有传输的数据都会被加密，但是不能保证你正在连接的服务器就是你想连接的<a href="https://baike.baidu.com/item/服务器" target="_blank" rel="noopener">服务器</a>。可能会有别的服务器在冒充真正的服务器，也就是受到“中间人”这种方式的攻击。</p><p><strong>第二种级别（基于密匙的安全验证）</strong></p><p>需要依靠<a href="https://baike.baidu.com/item/密匙" target="_blank" rel="noopener">密匙</a>，也就是你必须为自己创建一对密匙，并把公用密匙放在需要访问的服务器上。如果你要连接到SSH服务器上，客户端软件就会向服务器发出请求，请求用你的密匙进行安全验证。服务器收到请求之后，先在该服务器上你的主目录下寻找你的公用密匙，然后把它和你发送过来的公用密匙进行比较。如果两个密匙一致，服务器就用公用密匙加密“质询”（challenge）并把它发送给客户端软件。客户端软件收到“质询”之后就可以用你的私人密匙解密再把它发送给服务器。</p><p>用这种方式，你必须知道自己密匙的<a href="https://baike.baidu.com/item/口令" target="_blank" rel="noopener">口令</a>。但是，与第一种级别相比，第二种级别不需要在网络上传送口令。</p><p>第二种级别不仅加密所有传送的数据，而且“中间人”这种攻击方式也是不可能的（因为他没有你的私人密匙）。但是整个登录的过程可能需要10秒 [2] 。</p></blockquote><p>我们现在弄的就是第二种，基于密钥的安全验证。本地创建一个密钥对，将公钥放在github服务器上，本地保留私钥。</p><p>首先，打开git-bash，生成新的ssh密钥对：</p><pre class="line-numbers language-shell"><code class="language-shell">$ssh-keygen -t rsa -C "youremail@xxx.com" -f keyfileName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-t</td><td>生成的密钥类型，默认rsa</td></tr><tr><td>-C</td><td>注释文字，应该不会影响密钥内容，这里设置成邮箱</td></tr><tr><td>-f</td><td>指定密钥文件名，默认为id_rsa</td></tr></tbody></table><p>由于.ssh目录下已经存在默认文件名的密钥，所以换一个名字。我想要生成旧账号HaneChiri的密钥，所以文件名就起名为<code>id_rsa_hanechiri</code>，当然，这个并无影响。</p><p>最后会生成两个文件，.pub后缀的是公钥，另一个是私钥。</p><h3 id="添加公钥到github账号"><a href="#添加公钥到github账号" class="headerlink" title="添加公钥到github账号"></a>添加公钥到github账号</h3><p>在网页右上角账号设置中找到SSH key，添加公钥文件的内容即可，添加过程很简单，不详细叙述。</p><p>添加完毕后再次部署HaneChiri的博客，发现仍然是这个错误：</p><pre><code>ERROR: Permission to HaneChiri/HaneChiri.github.io.git denied to ChangingSelf.   fatal: Could not read from remote repository.                                         Please make sure you have the correct access rights       </code></pre><p>也对，现在有两个密钥对，可能是配对错误了。</p><p>仔细看错误内容，HaneChiri库拒绝了用户ChangingSelf的访问，也就是说，用的是HaneChiri的公钥，与新账号ChangingSelf的私钥，难怪无法配对了。因此我们需要改变私钥的选择。</p><h3 id="改变使用的私钥"><a href="#改变使用的私钥" class="headerlink" title="改变使用的私钥"></a>改变使用的私钥</h3><p>我查到的参考博客里面基本上都说要使用<code>ssh-add</code>命令来将私钥添加管理，不过我后来发现，这个添加并不是永久保存，而是添加到ssh-agent的高速缓存中，我打开另一个git-bash的时候就不行了（参考：<a href="https://blog.csdn.net/weixin_34377919/article/details/91857803" target="_blank" rel="noopener">是否必须每次添加ssh-add</a>）</p><h4 id="临时性保存"><a href="#临时性保存" class="headerlink" title="临时性保存"></a>临时性保存</h4><p>打开ssh-agent服务，即输入命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$ssh</span>-agent <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后添加私钥：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$ssh</span>-add C:/Users/Administrator/.ssh/id_rsa_hanechiri <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的地址是需要使用的私钥文件的绝对地址。</p><p>可以通过-l选项查看所有已经添加的私钥：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$ssh</span>-add -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用-D选项清空私钥列表：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$ssh</span>-add -D<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着在这个git-bash里面来操作就行了（如果退出就得再弄一次），此时用<code>hexo d</code>命令部署，就部署成功了。</p><h4 id="永久性保存"><a href="#永久性保存" class="headerlink" title="永久性保存"></a>永久性保存</h4><p>需要永久保存私钥的选择，则需要一个配置文件config，这个文件长这样：</p><pre><code>Host github.com    HostName github.com    IdentityFile C:/Users/Administrator/.ssh/id_rsa_hanechiri    PreferredAuthentications publickey    User HaneChiri</code></pre><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>Host</td><td>网站别名，最好和HostName一致</td></tr><tr><td>HostName</td><td>网站域名</td></tr><tr><td>IdentityFile</td><td>私钥文件的绝对路径</td></tr><tr><td>PreferredAuthentications</td><td>验证方式，填publickey就是公钥验证</td></tr><tr><td>User</td><td>用户名</td></tr></tbody></table><p>可以配置多个网站，每个网站都有上面这些字段。在你使用ssh访问这个文件内存在的某个网站时，ssh就会拿这个文件里面指定的私钥来进行验证。</p><p>在.ssh目录下找，如果存在这个名为<code>config</code>的文件，就打开来编辑，没有的话就新建一个。</p><p>配置好文件之后，打开git-bash再使用<code>hexo d</code>就搞定部署了。</p><p>由于我只是需要临时将博客地址转移的公告发上旧博客，使用临时的方法就好了。（不过我是先用了config文件的方法，写本文时才尝试临时性的方法，成功了）</p><h1 id="最后做个试验"><a href="#最后做个试验" class="headerlink" title="最后做个试验"></a>最后做个试验</h1><p>最后再来试试我写本文时，对ssh更加了解之后，才想到的简便方法：直接把新账号ChangingSelf的公钥添加到旧账号的ssh-key中。</p><p>结果给我显示：</p><pre><code>Key is already in use</code></pre><p>果然没这么简单。找解决方法，也就是上文我写的那些。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【编程练习】明日非舟抽卡模拟器（1）按照概率抽取干员星级</title>
      <link href="/posts/Africanights_simu_hr_1/"/>
      <url>/posts/Africanights_simu_hr_1/</url>
      
        <content type="html"><![CDATA[<p>好友封掣写了一个<a href="https://github.com/lollipopnougat/arknights" target="_blank" rel="noopener">明日方舟模拟寻访</a>，于是也想做一个来作为java的练手，这学期写课设的时候就体现出我平时写代码写太少了。</p><p>当然，经过这学期末的编码轰炸，我现在可不敢像以前一样没有计划地直接开始，先想好它的架构，随后再开始编写，并留下系列博文记录，供以后参考。</p><p><a href="https://github.com/ChangingSelf/Africanights" target="_blank" rel="noopener">本项目连载github库地址</a></p><a id="more"></a><h1 id="目前已经构思的架构"><a href="#目前已经构思的架构" class="headerlink" title="目前已经构思的架构"></a>目前已经构思的架构</h1><ul><li>主包<ul><li>视图包view</li><li>模型包model<ul><li>简历类Resume：用于存储干员的信息，比如名字，星级，立绘路径等</li><li>人事资源类HumanResourse：用于存储合成玉以及其他抽卡资源数目<ul><li>属性<ul><li>合成玉数目</li><li>卡池</li></ul></li><li>方法<ul><li>单抽</li><li>十连</li></ul></li></ul></li><li>卡池类Pool<ul><li>属性<ul><li>星级出率：一维数组，下标对应星级，值为对应出率</li><li>简历池：二维数组，一维下标对应星级，二维下标动态，值为干员引用</li></ul></li><li>方法<ul><li>载入简历loadResume(String fileName)<br>从文件中读取出简历，并加入简历池</li><li>抽出下一份简历recruit()<br>先抽取星级，再从对应的星级池中抽取简历</li><li>抽取星级randomStar()<br>生成1~100的随机整数，根据星级出率确定每个星级的区间，判断随机数落在哪个区间，从而确定星级</li><li>抽取对应星级的简历randomResume(int star)<br>从简历池中随机抽取下标，并返回下标对应的干员引用</li></ul></li></ul></li></ul></li></ul></li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>根据卡池的出率抽取星级。</p><p>干员的星级分为一星到六星，每个星级的概率不一定相同。</p><p>这个目标的要点在于，如何给予六个星级不同的抽取概率。</p><hr><p><strong>方法一</strong>是创建一个100个元素的数组，根据不同星级各自的概率分配不同的元素数量。比如，三星有45%概率被抽出，那么就将45个元素赋值为“3”，六星有2%的概率，那么就将2个元素赋值为“6”。最后抽取下标来获取星级。</p><p>不过我没有采取这种方式，这种方式有点暴力。这个例子里面还好，是100个整数，假如是100个开销比较大的对象，或者概率精确到了很多位小数，那么就不太合适了。</p><hr><p><strong>方法二</strong>是对每个星级划分一个区间，概率决定了区间的长度，在总区间内随机一个数，然后判断落在哪个星级区间。我用的是这个方法。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 卡池类 * 负责存储卡池概率信息 */</span><span class="token keyword">package</span> africanights<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pool</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_starProbability <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token number">0.00</span><span class="token punctuation">,</span><span class="token number">0.00</span><span class="token punctuation">,</span><span class="token number">0.00</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//1,2星</span>            <span class="token number">0.40</span><span class="token punctuation">,</span><span class="token number">0.50</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//3,4星</span>            <span class="token number">0.08</span><span class="token punctuation">,</span><span class="token number">0.02</span><span class="token comment" spellcheck="true">//5,6星</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//星级出率，下标1~6对应星级，0暂时闲置</span>    <span class="token comment" spellcheck="true">/**     * 根据星级概率抽取出一个星级，取值为1~6     * @return 干员星级     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">randomStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> star <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回值</span>        <span class="token keyword">int</span> randomInt <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//产生[1,100]之间的随机数</span>        <span class="token comment" spellcheck="true">//判断星级区间</span>        <span class="token comment" spellcheck="true">/**         * 每一个星级根据概率大小占据[1,100]区间不同长度的区间，         * 判断随机数落在哪个区间，就是抽取到了哪个星级         *          */</span>        <span class="token keyword">int</span> lowerInt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//边界整数，用于给星级区域定界</span>        <span class="token keyword">int</span> upperInt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m_starProbability<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lowerInt <span class="token operator">=</span> upperInt<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上一个星级的上界变为这个星级的下界</span>            <span class="token keyword">int</span> areaLength <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>m_starProbability<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            upperInt <span class="token operator">+=</span> areaLength<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>lowerInt <span class="token operator">&lt;=</span> randomInt <span class="token operator">&amp;&amp;</span> randomInt <span class="token operator">&lt;</span> upperInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果随机数落在[lowerInt,upperInt)区间</span>                star <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//单独处理抽到100的情况</span>        <span class="token comment" spellcheck="true">//抽到100则为最高星级</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>randomInt <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> m_starProbability<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> star<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试randomStar()</span>        Pool pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counter<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> star <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">randomStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//测试randomStar()</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>star<span class="token punctuation">)</span><span class="token punctuation">;</span>            counter<span class="token punctuation">[</span>star<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"抽到%d星%d个\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>counter<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//测试randomStar()*/</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更改git仓库已经commit的用户名和邮箱信息</title>
      <link href="/posts/git_amend_commited_info/"/>
      <url>/posts/git_amend_commited_info/</url>
      
        <content type="html"><![CDATA[<p>换了一个github账号，想把以前的仓库push到新的账号上，但是commit的用户名和邮箱信息还是以前的，想修改成新的用户信息。</p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><p><a href="https://msd.misuland.com/pd/3223833238703179904" target="_blank" rel="noopener">图文详解如何修改git已提交记录的邮箱？</a> ：关于如何使用<code>git rebase -i</code>来修改commit的信息</p></li><li><p><a href="https://www.jianshu.com/p/72717f1a1e90" target="_blank" rel="noopener">github修改commit的用户名和邮箱</a> ： 这里面讲得很全面，所有方法都讲到了</p></li><li><p><a href="https://help.github.com/en/github/using-git/changing-author-info" target="_blank" rel="noopener">git更改作者信息</a> ：git官方教程，使用脚本</p></li></ul><h1 id="最终采纳的方法"><a href="#最终采纳的方法" class="headerlink" title="最终采纳的方法"></a>最终采纳的方法</h1><p>使用<code>git rebase</code>成功修改了一条，但是一条条改比较麻烦。</p><p>最终使用了官方提供的脚本（怪不得那么多教程的脚本代码都长一样，原来是官方的），修改前面三个变量即可，详情见上面的官方教程的参考链接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">git</span> filter-branch --env-filter <span class="token string">'OLD_EMAIL="your-old-email@example.com"CORRECT_NAME="Your Correct Name"CORRECT_EMAIL="your-correct-email@example.com"if [ "<span class="token variable">$GIT_COMMITTER_EMAIL</span>" = "<span class="token variable">$OLD_EMAIL</span>" ]then    export GIT_COMMITTER_NAME="<span class="token variable">$CORRECT_NAME</span>"    export GIT_COMMITTER_EMAIL="<span class="token variable">$CORRECT_EMAIL</span>"fiif [ "<span class="token variable">$GIT_AUTHOR_EMAIL</span>" = "<span class="token variable">$OLD_EMAIL</span>" ]then    export GIT_AUTHOR_NAME="<span class="token variable">$CORRECT_NAME</span>"    export GIT_AUTHOR_EMAIL="<span class="token variable">$CORRECT_EMAIL</span>"fi'</span> --tag-name-filter <span class="token function">cat</span> -- --branches --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【课设总结】基于LAN的即时通信软件</title>
      <link href="/posts/IMS_base_on_LAN/"/>
      <url>/posts/IMS_base_on_LAN/</url>
      
        <content type="html"><![CDATA[<p>本学期开了计算机网络课程，期末的课程设计我选了这个题目——基于LAN的即时通讯软件，题目就只有这么短，剩下的全部自己发挥，不限平台不限语言。</p><p>由于以前自学过c++网络编程，写了个简易的聊天室（bug百出），所有刚开始也想用c++来写，新建了MFC项目正在画界面的时候，才想起今时不同往日，我会的语言不止c++了，还有java和python。最后决定用python，虽说java写的可能以后会更好扩展更好维护一些，但是python写起来应该会更加轻松（个人看法）。</p><p>本文基于我当时写的课设报告，在之后可能会将其中学到的知识整理成其他的博文，并在此文中列出。</p><p>b站视频已上传：<a href="https://www.bilibili.com/video/av83477871/" target="_blank" rel="noopener">【课设思路分享】基于LAN的即时通讯软件</a></p><p>对应github库传送门：<a href="https://github.com/ChangingSelf/simuqq" target="_blank" rel="noopener">simuqq</a></p><p>比较长，配合侧边栏目录食用。</p><a id="more"></a><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p>程序分为服务端和客户端两部分，服务端无图形界面，客户端具有登录界面、主界面以及聊天窗口界面总共三个图形界面。</p><p>先开启服务端程序，再打开客户端程序。</p><p>客户端的初始界面是登陆界面，在这个界面可以输入用户名、密码，具有“登录”和“注册”两个按钮。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102154415.png" alt="客户端登录界面"></p><p>在输入用户名和密码登录之后，会跳转到主页面。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102200520.png" alt="开了三个客户端登录之后的效果"></p><p>主页面显示账号个人信息，以及当前在线的其他账号的用户名。用户可以双击选择当前在线的其他账号打开聊天窗口进行聊天。</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102201641.png" alt="打开聊天窗口进行聊天"></p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102201905.png" alt="回复对方"></p><p>其中一人断开连接之后：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102202345.png" alt="断开连接之后"></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><table><thead><tr><th>操作系统</th><th>windows10</th></tr></thead><tbody><tr><td>编辑器（没影响）</td><td>visual studio code</td></tr><tr><td>解释器</td><td>python3.7.0</td></tr></tbody></table><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>画个用例图先：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102151916.png" alt="用例图"></p><p>客户端的用例有注册、登录、连接到服务端、查看在线的其他客户端以及选择聊天对象。</p><p>其中，选择聊天对象进行聊天需要先查看当前有哪些客户端在线，而在这之前需要登录。</p><h1 id="代码文件结构"><a href="#代码文件结构" class="headerlink" title="代码文件结构"></a>代码文件结构</h1><ul><li>client.py：客户端业务逻辑代码</li><li>server.py：服务端代码</li><li>gui<ul><li>home_page.py：登录后跳转到的主页面</li><li>login_dlg.py：登录界面</li><li>chat_dlg.py：聊天界面</li></ul></li><li>account_database.json：用于存放注册账号数据的数据文件</li><li>utility.py：存放一些自己写的工具函数</li></ul><h1 id="概要设计及对应代码"><a href="#概要设计及对应代码" class="headerlink" title="概要设计及对应代码"></a>概要设计及对应代码</h1><p>为了方便阅读，就将代码部分与设计部分放在一起。</p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102154630.png" alt="类图"></p><h3 id="界面类"><a href="#界面类" class="headerlink" title="界面类"></a>界面类</h3><p>图形界面使用的是python自带的tkinter模块。对每个界面，单独编写一个类，放在单独的模块中，存放在代码根目录下的gui文件夹内。而业务逻辑另外编写client类和server类。</p><p>令界面与业务逻辑结合的方式是，在client类中初始化界面时，将自身的处理函数作为回调函数传入界面类中，从而使界面的组件与回调函数绑定。</p><h3 id="登录界面代码示例"><a href="#登录界面代码示例" class="headerlink" title="登录界面代码示例"></a>登录界面代码示例</h3><p>因为界面不是重点，故仅放出登录界面代码，其他两个界面类类似。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token triple-quoted-string string">'''登录模块login_dlg.py展示登录窗口并实现登录功能'''</span><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk<span class="token keyword">import</span> gui<span class="token punctuation">.</span>chat_dlg<span class="token keyword">class</span> <span class="token class-name">LoginDlg</span><span class="token punctuation">(</span>tk<span class="token punctuation">.</span>Frame<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> loginCallback<span class="token punctuation">,</span> regCallback<span class="token punctuation">,</span> master<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>master<span class="token operator">=</span>master<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>master <span class="token operator">=</span> master        self<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 设置按钮回调函数</span>        self<span class="token punctuation">.</span>loginCallback <span class="token operator">=</span> loginCallback        self<span class="token punctuation">.</span>regCallback <span class="token operator">=</span> regCallback        <span class="token comment" spellcheck="true"># 初始化</span>        self<span class="token punctuation">.</span>userName <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 与文本框双向绑定</span>        self<span class="token punctuation">.</span>password <span class="token operator">=</span> tk<span class="token punctuation">.</span>StringVar<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.pack()</span>        <span class="token comment" spellcheck="true"># self.grid(row=0,column=0)</span>        self<span class="token punctuation">.</span>createWidgets<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">createWidgets</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 登录框架=============</span>        loginLF <span class="token operator">=</span> tk<span class="token punctuation">.</span>LabelFrame<span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'登录'</span><span class="token punctuation">)</span>        loginLF<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sticky<span class="token operator">=</span>tk<span class="token punctuation">.</span>E<span class="token operator">+</span>tk<span class="token punctuation">.</span>W<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loginLF <span class="token operator">=</span> loginLF  <span class="token comment" spellcheck="true"># 这里需要将它保存为属性，否则这个函数结束后会出问题</span>        <span class="token comment" spellcheck="true"># 用户名</span>        self<span class="token punctuation">.</span>userNameLab <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>loginLF<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'用户名'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>userNameLab<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>userNameEntry <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>loginLF<span class="token punctuation">,</span> textvariable<span class="token operator">=</span>self<span class="token punctuation">.</span>userName<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>userNameEntry<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 密码框</span>        self<span class="token punctuation">.</span>passwdLab <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>loginLF<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'密码'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>passwdLab<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>passwdEntry <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>            loginLF<span class="token punctuation">,</span> show<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">,</span> textvariable<span class="token operator">=</span>self<span class="token punctuation">.</span>password<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>passwdEntry<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 登录按钮</span>        self<span class="token punctuation">.</span>loginBtn <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>            loginLF<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'登录'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>self<span class="token punctuation">.</span>loginCallback<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loginBtn<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 注册按钮</span>        self<span class="token punctuation">.</span>signupBtn <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>            loginLF<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'注册'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>self<span class="token punctuation">.</span>regCallback<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>signupBtn<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>userName<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>password<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">geometry</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>master<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">'300x100'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#用于调整窗口大小</span><span class="token keyword">def</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true">#用于在本模块内测试用的函数</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>    loginDlg <span class="token operator">=</span> LoginDlg<span class="token punctuation">(</span>test2<span class="token punctuation">,</span> test2<span class="token punctuation">,</span> window<span class="token punctuation">)</span>    loginDlg<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端类Client"><a href="#客户端类Client" class="headerlink" title="客户端类Client"></a>客户端类Client</h3><p>客户端掌握着界面对象的引用，在初始化它们时，将自身的处理函数传入给它们，以便在触发界面事件时调用。</p><p>客户端主要提供了以下方法：</p><table><thead><tr><th>方法</th><th>简介</th></tr></thead><tbody><tr><td>connect</td><td>连接到服务器</td></tr><tr><td>login</td><td>登录，需要调用connect，由服务端进行合法性检测</td></tr><tr><td>register</td><td>注册，为了简化而直接由客户端写入文件</td></tr><tr><td>send</td><td>构造消息并发送给服务端</td></tr><tr><td>recv</td><td>接收消息并解析</td></tr></tbody></table><p>为了客户端与服务端交流的便利，我自定义了消息格式，所以发送时需要封装，接收时需要解析，下文会讲。</p><h3 id="服务端类Server"><a href="#服务端类Server" class="headerlink" title="服务端类Server"></a>服务端类Server</h3><p>服务端没有界面（做了就做不完了），负责接收连接以及转发客户端之间的聊天消息。ip以及端口是固定的。</p><h2 id="数据文件格式"><a href="#数据文件格式" class="headerlink" title="数据文件格式"></a>数据文件格式</h2><p>已经注册的账号信息使用json文件保存（即<code>account_database.json</code>），保存格式如下：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"用户名1"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"密码1"</span><span class="token punctuation">,</span>        <span class="token property">"registerTime"</span><span class="token operator">:</span>注册时间<span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"用户名2"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"password"</span><span class="token operator">:</span><span class="token string">"密码2"</span><span class="token punctuation">,</span>        <span class="token property">"registerTime"</span><span class="token operator">:</span>注册时间<span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用用户名作为键，每个用户对应一个密码以及一个注册时间。</p><h2 id="自定义消息"><a href="#自定义消息" class="headerlink" title="自定义消息"></a>自定义消息</h2><p><strong>（这个是我自己规定的服务端和客户端之间交换信息的格式）</strong></p><p>客户端不直接与另一个客户端通信，而是通过服务端转发。</p><p>客户端与服务端之间发送规定格式的json字符串来交流，此字符串以下称之为“消息”，聊天的文字称作“聊天消息”。此格式解析出来是python的一个字典，也就是json里面的对象，可以方便地使用键值对来找到需要的字段值。字段如下（不是所有的字段都同时被设置）：</p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>当前消息类型（必选）</td></tr><tr><td>userName</td><td>用户名</td></tr><tr><td>password</td><td>密码</td></tr><tr><td>errStr</td><td>错误字符串</td></tr><tr><td>infoStr</td><td>信息字符串</td></tr><tr><td>message</td><td>聊天消息</td></tr><tr><td>data</td><td>传递的数据</td></tr></tbody></table><p>其中type字段的值以及对应的必选字段如下：</p><ul><li>登录login：必须设置userName和password，用于客户端发送登录请求以及服务端发送确认；</li><li>数据刷新data：必须设置data，且为字典，用于服务端给客户端发送更新后的当前在线列表；</li><li>聊天消息msg: 必须设置message和userName，用于客户端向另一个客户端发送聊天消息时使用，其中message是聊天消息的内容。当源客户端向服务端发送此消息时，userName是目的客户端的用户名，服务端接收到消息之后，将userName改为源客户端的用户名，然后转发消息给目的客户端；</li><li>提示info: 必须设置infoStr，发送提示信息</li><li>错误err:必须设置errStr，发送错误信息</li></ul><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>注册时客户端读取数据文件并检查注册信息合法性，用户名不可重复，密码可以重复，用户名和密码都是字符串。</p><p>当注册信息合法，就组装json字符串，并写入数据文件。</p><p><strong>注意：这里本来应该是客户端将注册信息发送给服务端，然后服务端修改数据文件的，但是我为了防止自己写不完，就简化了这个流程</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#...</span><span class="token keyword">import</span> utility<span class="token comment" spellcheck="true">#只强调一下这个是自定义模块</span><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#...</span>    <span class="token keyword">def</span> <span class="token function">register</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        注册        在填写了用户名和密码之后，如果信息合法，则将信息写入数据文件        :return: 注册成功返回0,失败返回-1        '''</span>        <span class="token comment" spellcheck="true"># 从登录对话框获取信息</span>        userName <span class="token operator">=</span> self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'loginDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>userName<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'loginDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 检查合法性</span>        <span class="token keyword">if</span> userName <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            utility<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            utility<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token string">'密码不能为空'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>dataFile<span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 使用a+方式打开，防止文件内容被覆盖</span>            fp<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调整指针到开头</span>            accountStr <span class="token operator">=</span> fp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> accountStr <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果文件内没有内容，即刚刚创建</span>                accountData <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 否则读取文件内容</span>                fp<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                accountData <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>accountStr<span class="token punctuation">)</span>            <span class="token keyword">if</span> userName <span class="token keyword">in</span> accountData<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                utility<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token string">'该用户名已经被注册'</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>            <span class="token comment" spellcheck="true"># 写入数据文件</span>            accountData<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>                userName<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>                    <span class="token string">'registerTime'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            utility<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">'注册成功！'</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            fp<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 只保留从开头到当前位置，其余删除#当前位置为开头，故为全部删除</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>accountData<span class="token punctuation">,</span> fp<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> separators<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一部分的要点在于，文件中存储的是json字符串，不能简单地添加到文件末尾，而是需要将数据先读取出来，添加完数据后，再将整个文件覆盖。</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>客户端首先尝试连接服务端，如果成功再进行下一步。</p><h3 id="请求登录"><a href="#请求登录" class="headerlink" title="请求登录"></a>请求登录</h3><p>客户端向服务端发送登录请求消息，并等待服务端的确认消息。</p><p><strong>登录请求消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>login</td></tr><tr><td>userName</td><td>用户名输入框中的值</td></tr><tr><td>password</td><td>密码输入框中的值</td></tr></tbody></table><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sendLoginData</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> userName<span class="token punctuation">:</span> str<span class="token punctuation">,</span> password<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        发送登录数据        '''</span>        <span class="token comment" spellcheck="true"># 构造并发送消息</span>        accountData <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>            <span class="token string">'userName'</span><span class="token punctuation">:</span> userName<span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> password        <span class="token punctuation">}</span>        accountStr <span class="token operator">=</span> utility<span class="token punctuation">.</span>dumpJson<span class="token punctuation">(</span>accountData<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>accountStr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端收到登录请求消息之后，检查账号信息的合法性。会向客户端回复两种消息，错误消息或者登录确认消息。</p><h3 id="处理登录请求"><a href="#处理登录请求" class="headerlink" title="处理登录请求"></a>处理登录请求</h3><h4 id="登录失败"><a href="#登录失败" class="headerlink" title="登录失败"></a>登录失败</h4><p>如果账号信息错误，服务端向此客户端发送错误消息，并断开与它的连接。错误消息包含以下字段：</p><p> <strong>err消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>err</td></tr><tr><td>errStr</td><td>错误信息</td></tr></tbody></table><p>客户端收到此错误消息后，显示警告对话框，并重置socket。</p><h4 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h4><p>若服务端检测到账号信息无误，则向此客户端发送确认消息，并将它的socket、地址以及登录时间加入到在线列表中，并向其他在线的客户端发送数据刷新消息（见下文）。</p><p><strong>登录确认消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>login</td></tr><tr><td>userName</td><td>置为空字符串</td></tr><tr><td>password</td><td>置为空字符串</td></tr><tr><td>infoStr</td><td>可选，登录成功提示</td></tr><tr><td>data</td><td>设置为当前在线账户列表</td></tr></tbody></table><p>这是服务端处理登录请求的代码</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">acceptLogin</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cliSock<span class="token punctuation">,</span> cliAddr<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        接受已连接的客户端的登录请求        :return: 登录成功返回0，失败返回-1        '''</span>        <span class="token comment" spellcheck="true"># 获取客户端提交的账号密码，客户端以json字符串的形式发送过来</span>        loginStr <span class="token operator">=</span> cliSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bufsize<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        loginDict <span class="token operator">=</span> utility<span class="token punctuation">.</span>loadJson<span class="token punctuation">(</span>loginStr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 检查登录消息是否正确</span>        <span class="token keyword">if</span> <span class="token operator">not</span> utility<span class="token punctuation">.</span>isCorrectMsg<span class="token punctuation">(</span>loginDict<span class="token punctuation">)</span><span class="token punctuation">:</span>            errStr <span class="token operator">=</span> <span class="token string">'数据有误，请重新连接'</span>            self<span class="token punctuation">.</span>closeLink<span class="token punctuation">(</span>cliSock<span class="token punctuation">,</span> errStr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭连接</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># 检查账号</span>        cliUserName <span class="token operator">=</span> loginDict<span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span>        cliPassword <span class="token operator">=</span> loginDict<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>checkAccount<span class="token punctuation">(</span>cliUserName<span class="token punctuation">,</span> cliPassword<span class="token punctuation">)</span>        <span class="token keyword">if</span> res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            errStr <span class="token operator">=</span> <span class="token string">'账号不存在'</span>            self<span class="token punctuation">.</span>closeLink<span class="token punctuation">(</span>cliSock<span class="token punctuation">,</span> errStr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭连接</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">elif</span> res <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span>            errStr <span class="token operator">=</span> <span class="token string">'密码错误'</span>            self<span class="token punctuation">.</span>closeLink<span class="token punctuation">(</span>cliSock<span class="token punctuation">,</span> errStr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 关闭连接</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'用户[userName={}]登录成功'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cliUserName<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将新用户加入在线列表</span>            self<span class="token punctuation">.</span>onlineClients<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>                cliUserName<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">'socket'</span><span class="token punctuation">:</span> cliSock<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 客户端socket</span>                    <span class="token string">'address'</span><span class="token punctuation">:</span> cliAddr<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 客户端地址</span>                    <span class="token string">'loginTime'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 登录时间</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 登录成功，向该客户端发送确认消息</span>            self<span class="token punctuation">.</span>sendLoginAck<span class="token punctuation">(</span>cliSock<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">sendLoginAck</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cliSock<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        登录成功之后向客户端发送确认消息以及当前在线客户端列表        '''</span>        curOnline <span class="token operator">=</span> self<span class="token punctuation">.</span>getCurOnline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取当前在线列表</span>        msgDict <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'login'</span><span class="token punctuation">,</span>            <span class="token string">'infoStr'</span><span class="token punctuation">:</span> <span class="token string">'登录成功！'</span><span class="token punctuation">,</span>            <span class="token string">'data'</span><span class="token punctuation">:</span> curOnline<span class="token punctuation">,</span>            <span class="token string">'userName'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">''</span>        <span class="token punctuation">}</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>cliSock<span class="token punctuation">,</span> <span class="token operator">**</span>msgDict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="等待确认"><a href="#等待确认" class="headerlink" title="等待确认"></a>等待确认</h3><p>发送了登录请求消息之后，客户端会等待服务端发来的登录确认消息或者错误消息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recvLoginAck</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        等待服务端传回确认        :return: 成功返回0，失败返回-1        '''</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> utility<span class="token punctuation">.</span>loadJson<span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 检查消息合法性</span>        <span class="token keyword">if</span> <span class="token operator">not</span> utility<span class="token punctuation">.</span>isCorrectMsg<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>resetSock<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'err'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果收到的是服务端的错误消息</span>            utility<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token string">'errStr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>resetSock<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 重启socket</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">elif</span> res<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'login'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 登录成功，输出信息</span>            <span class="token keyword">if</span> <span class="token string">'infoStr'</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                utility<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token string">'infoStr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                utility<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">'登录成功'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">'data'</span> <span class="token keyword">in</span> res<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>contactList <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'curOnline'</span><span class="token punctuation">]</span>                self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'homePage'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>refreshList<span class="token punctuation">(</span>self<span class="token punctuation">.</span>contactList<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                contactList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果不是err消息也不是确认消息，则登录失败</span>            self<span class="token punctuation">.</span>resetSock<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端登录代码"><a href="#客户端登录代码" class="headerlink" title="客户端登录代码"></a>客户端登录代码</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        登录        :return: 登录成功返回0，失败返回-1        '''</span>        <span class="token comment" spellcheck="true"># 从登录对话框获取信息</span>        userName <span class="token operator">=</span> self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'loginDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>userName<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'loginDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>password<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 检查合法性</span>        <span class="token keyword">if</span> userName <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            utility<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token string">'用户名不能为空'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">if</span> password <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            utility<span class="token punctuation">.</span>showerror<span class="token punctuation">(</span><span class="token string">'密码不能为空'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># 如果连接成功，向服务器发送信息</span>        res <span class="token operator">=</span> self<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token comment" spellcheck="true"># 构造并发送消息</span>        self<span class="token punctuation">.</span>sendLoginData<span class="token punctuation">(</span>userName<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 如果发送信息成功，且账号信息正确，则弹出好友列表页面</span>        <span class="token comment" spellcheck="true"># 等待服务端的确认信息</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>recvLoginAck<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 跳转到主页面</span>            self<span class="token punctuation">.</span>userName <span class="token operator">=</span> userName            self<span class="token punctuation">.</span>gotoHomePage<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 开启接收消息线程</span>            self<span class="token punctuation">.</span>recvThread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>recvLoop<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>recvThread<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>recvThread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录的流程如下图所示：</p><p><img src="https://raw.githubusercontent.com/ChangingSelf/Figurebed/master/blog_images/20200102173045.png" alt="客户端登录-活动图"></p><h2 id="客户端界面跳转"><a href="#客户端界面跳转" class="headerlink" title="客户端界面跳转"></a>客户端界面跳转</h2><p>登录成功后，会从登陆界面跳转到主页面。</p><p>原理是将登录界面隐藏，再显示主界面。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">gotoHomePage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        跳转到主页面        '''</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> self<span class="token punctuation">.</span>gui<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span>page<span class="token punctuation">]</span><span class="token punctuation">.</span>grid_forget<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>window<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'SimuQQ主页面'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'homePage'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'homePage'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>userName<span class="token punctuation">.</span>set<span class="token punctuation">(</span>self<span class="token punctuation">.</span>userName<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'homePage'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打开聊天窗口：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">openChatWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        打开聊天窗口        :param userName: 聊天对象的用户名        '''</span>        self<span class="token punctuation">.</span>chatWith <span class="token operator">=</span> userName  <span class="token comment" spellcheck="true"># 设置聊天对象</span>        self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'chatDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chatWindow<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'[{}]向[{}]发起的聊天'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> userName<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>chatWindow<span class="token punctuation">.</span>deiconify<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># self.chatWindow.mainloop()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发送聊天消息"><a href="#发送聊天消息" class="headerlink" title="发送聊天消息"></a>发送聊天消息</h2><p>用户在客户端的在线列表中双击选择一个在线客户端，会打开对选择对象的聊天窗口。</p><p>用户在输入框中输入聊天消息并点击发送按钮后，客户端将会构建并发送msg消息给服务端，该消息的内容如下：</p><p><strong>msg消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>msg</td></tr><tr><td>message</td><td>需要发送给聊天对象的聊天消息</td></tr><tr><td>userName</td><td>聊天对象的用户名</td></tr></tbody></table><p>服务端在收到客户端的msg消息后，将userName字段修改为发送端的用户名，并转发给目的端。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">sendChatMsg</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        发送聊天消息        '''</span>        <span class="token comment" spellcheck="true"># 获取聊天窗口的输入框内文字</span>        chatMsg <span class="token operator">=</span> self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'chatDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getInputContent<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构造消息</span>        msgDict <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'type'</span><span class="token punctuation">:</span> <span class="token string">'msg'</span><span class="token punctuation">,</span>            <span class="token string">'userName'</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>chatWith<span class="token punctuation">,</span>            <span class="token string">'message'</span><span class="token punctuation">:</span> chatMsg        <span class="token punctuation">}</span>        msgStr <span class="token operator">=</span> utility<span class="token punctuation">.</span>dumpJson<span class="token punctuation">(</span>msgDict<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送消息</span>        self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>msgStr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 同时在自己这边显示自己说的话</span>        <span class="token comment" spellcheck="true"># 构建输出内容</span>        outputContent <span class="token operator">=</span> <span class="token string">'[{}]{}\n{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>userName<span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y/%m/%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chatMsg<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'chatDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>addOutputContent<span class="token punctuation">(</span>outputContent<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 清空输入框</span>        self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'chatDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>clearInputContent<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端消息处理"><a href="#客户端消息处理" class="headerlink" title="客户端消息处理"></a>客户端消息处理</h2><p>客户端在登录成功后，开启消息接收线程，它的线程体是一个无限循环，并将其置为守护线程（Deamon Thread），在所有前台线程结束之后，消息接收线程也随之结束。</p><p>在没有注意到这一点前，我调试了这个bug很久——关闭窗口会无响应，后来才知道不是tkinter的问题，而是我开的这个线程没有随之关闭。</p><p>客户端主要会收到两种消息，数据刷新消息和聊天消息。同样的，这里本来还应该处理err消息以及info消息的，担心做不完就简化了。</p><h3 id="数据刷新消息"><a href="#数据刷新消息" class="headerlink" title="数据刷新消息"></a>数据刷新消息</h3><p>在服务端接收一个新的连接时，或是服务端检测到一个旧有连接断开时，会向当前在线的客户端发送一个数据刷新消息，该消息包含以下字段：</p><p><strong>data消息的结构：</strong></p><table><thead><tr><th>字段</th><th>值</th></tr></thead><tbody><tr><td>type</td><td>data</td></tr><tr><td>data</td><td>当前在线账号的用户名的列表</td></tr></tbody></table><p>客户端收到此消息时，调用界面类的对应方法刷新主页面的在线列表。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Client</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">recvLoop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        接收消息的循环        '''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            msgStr <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>            msgDict <span class="token operator">=</span> utility<span class="token punctuation">.</span>loadJson<span class="token punctuation">(</span>msgStr<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> utility<span class="token punctuation">.</span>isCorrectMsg<span class="token punctuation">(</span>msgDict<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>  <span class="token comment" spellcheck="true"># 如果消息不正确，忽略这个消息</span>            <span class="token keyword">if</span> msgDict<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'data'</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果接收到数据刷新消息</span>                self<span class="token punctuation">.</span>contactList <span class="token operator">=</span> msgDict<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'curOnline'</span><span class="token punctuation">]</span>                self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'homePage'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>refreshList<span class="token punctuation">(</span>self<span class="token punctuation">.</span>contactList<span class="token punctuation">)</span>            <span class="token keyword">if</span> msgDict<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'msg'</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果接收到聊天消息</span>                self<span class="token punctuation">.</span>openChatWindow<span class="token punctuation">(</span>msgDict<span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 构建输出内容</span>                outputContent <span class="token operator">=</span> <span class="token string">'[{}]{}\n{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                    msgDict<span class="token punctuation">[</span><span class="token string">'userName'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y/%m/%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgDict<span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>gui<span class="token punctuation">[</span><span class="token string">'chatDlg'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>addOutputContent<span class="token punctuation">(</span>outputContent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务端消息处理"><a href="#服务端消息处理" class="headerlink" title="服务端消息处理"></a>服务端消息处理</h2><p>接下来是比较核心的部分。</p><p>在编写客户端时，为了专注于客户端的编写，对于服务端，我采用的是比较简单的无限循环：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">acceptLoop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        接受连接的线程循环        刚开始的时候测试客户端用的，        客户端的登录测试完毕之后，将其中的代码提取出来封成另一个函数acceptLogin()，        供selectLoop使用        '''</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'正在等待新的连接'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 接受新的连接请求</span>            cliSock<span class="token punctuation">,</span> cliAddr <span class="token operator">=</span> self<span class="token punctuation">.</span>serSock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>acceptLogin<span class="token punctuation">(</span>cliSock<span class="token punctuation">,</span> cliAddr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端大致成型之后，我开始编写服务端的这一部分。</p><p>我想起来之前在编写c++聊天室的时候，用到了一个事件模型，可以解决以上线程循环遇到的问题。</p><p>上面这个写法会出现的问题，以前我就遇到过。</p><p>如果服务端想要监听多个客户端发送过来的聊天消息，第一种方法是遍历每个客户端，recv每个客户端（将客户端socket改成非阻塞的就行）；第二种方法是为每个客户端建立单独的接收消息线程。</p><p>这两个方案其实都不太好。后来我找到了一个叫做事件选择模型的东西（<code>WSAEventSelect</code>），解决了一部分问题，当时知识还是太浅薄，不能完全理解那东西，所以还是写出了一堆bug。</p><p>现在回想起来，python里面应该也有类似的东西吧？我就记着个select了，一搜，还真是叫做select。</p><p>找到可用的资料好像并不太多，其中一个对我很有用的文章的链接是这个：<a href="https://www.jianshu.com/p/e26594304e11" target="_blank" rel="noopener">python Select模块简单使用</a></p><p>后来翻了一下文档，找到了关于select的英文原版<a href="https://docs.python.org/3.7/library/select.html#select.select" target="_blank" rel="noopener">简介</a></p><p><strong>我简单描述一下我在这个项目里面是如何使用select模型的：</strong></p><p>设置三个需要处理消息的队列，分别存放所有的socket（包括服务端socket和客户端socket）、用于存放存在待处理消息的socket的等待队列、需要检查错误的socket的队列。</p><p>select函数接收上述三个队列，并在阻塞timeout时间后返回三个队列，分别是可读取队列、可写入队列和错误队列。</p><p>可读取队列中的socket是已经接收到消息的socket，即接收缓冲区中存在消息，需要处理。如果是服务端socket，表明有新的客户端连接请求到达，对连接请求进行处理；如果是客户端socket，表明有已经连接的客户端发送消息过来，先将它们放入对应的消息队列中，并将它们加入到第二个监听队列即等待消息处理的队列。</p><p>可写入队列中的socket是从等待消息处理的队列中选择出目前能够接受消息、即接收缓冲区可用的socket。遍历这个队列，对其中的socket进行消息处理，处理完毕后删除它的消息队列，以及将它移出等待队列。</p><p>错误队列存放从需要检查错误的socket队列中选择出的出错的socket，在本项目中将需要检查设置为存放所有socket的队列，即检查所有的socket。遍历此队列，将错误的socket移除。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Server</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">selectLoop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        使用select函数来进行处理的循环        '''</span>        readList <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>serSock<span class="token punctuation">]</span>        writeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        message_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 存储消息用的字典，键为socket，值为消息列表</span>        i <span class="token operator">=</span> <span class="token number">0</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'服务器已经启动，正在等待客户端的连接'</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>debug<span class="token punctuation">(</span><span class="token string">'循环数：'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true"># select函数阻塞timeout时间，从参数的三个列表中，选择出此时可读取、可写入、出现错误的元素返回</span>            readableList<span class="token punctuation">,</span> writableList<span class="token punctuation">,</span> exceptionList <span class="token operator">=</span> select<span class="token punctuation">.</span>select<span class="token punctuation">(</span>                readList<span class="token punctuation">,</span> writeList<span class="token punctuation">,</span> readList<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 1. 遍历当前可读取的socket</span>            <span class="token keyword">for</span> sock <span class="token keyword">in</span> readableList<span class="token punctuation">:</span>                <span class="token keyword">if</span> sock <span class="token keyword">is</span> self<span class="token punctuation">.</span>serSock<span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 如果是服务端socket，那么就是有客户端来连接了</span>                    cliSock<span class="token punctuation">,</span> cliAddr <span class="token operator">=</span> sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>acceptLogin<span class="token punctuation">(</span>cliSock<span class="token punctuation">,</span> cliAddr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true"># 如果登录成功</span>                        readList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cliSock<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 将新的客户端socket加入监听列表</span>                        message_dict<span class="token punctuation">[</span>cliSock<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 为新的socket创建消息列表</span>                        self<span class="token punctuation">.</span>refreshCurOnline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 给所有在线客户端刷新在线信息</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 已连接的用户发送消息过来</span>                    <span class="token comment" spellcheck="true"># 接收一下</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        data <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>self<span class="token punctuation">.</span>bufsize<span class="token punctuation">)</span>                    <span class="token keyword">except</span><span class="token punctuation">:</span>                        <span class="token comment" spellcheck="true"># 如果收到空数据，代表客户端已经断开连接</span>                        readList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>                        <span class="token keyword">del</span> message_dict<span class="token punctuation">[</span>sock<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 删除对应的消息队列</span>                        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'客户端[userName={}]断开了连接'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                            self<span class="token punctuation">.</span>getUserNameBySock<span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        self<span class="token punctuation">.</span>closeLink<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果没有出现异常，再检查是否收到空数据</span>                        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true"># 如果收到空数据，代表客户端已经断开连接</span>                            readList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>                            <span class="token keyword">del</span> message_dict<span class="token punctuation">[</span>sock<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 删除对应的消息队列</span>                            self<span class="token punctuation">.</span>closeLink<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'客户端[{}]断开了连接'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>                                self<span class="token punctuation">.</span>getUserNameBySock<span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true"># 收到老用户的消息</span>                            dataStr <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 将消息加入对应的消息队列</span>                            message_dict<span class="token punctuation">[</span>sock<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>                            writeList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 2.处理待回复的消息</span>            <span class="token keyword">for</span> sock <span class="token keyword">in</span> writableList<span class="token punctuation">:</span>                <span class="token keyword">while</span> len<span class="token punctuation">(</span>message_dict<span class="token punctuation">[</span>sock<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    dataStr <span class="token operator">=</span> message_dict<span class="token punctuation">[</span>sock<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 取出消息队列中第一个消息</span>                    <span class="token keyword">del</span> message_dict<span class="token punctuation">[</span>sock<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                    self<span class="token punctuation">.</span>addressMsg<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 处理消息</span>                    <span class="token comment" spellcheck="true"># 测试代码：测试消息处理是否可用</span>                    <span class="token comment" spellcheck="true"># sock.sendall(('echo:'+dataStr).encode())</span>                <span class="token comment" spellcheck="true"># 将消息队列中所有消息处理完毕，则将它从待回复队列中删除</span>                writeList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 3.处理出错的socket</span>            <span class="token keyword">for</span> sock <span class="token keyword">in</span> exceptionList<span class="token punctuation">:</span>                readList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>待我更加理解这个东西，可能会回来补充完善这个部分。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>以上便是我的计算机网络课设的核心思路以及核心代码了，其他未列出的方法，读者看方法名字大致也能猜到它们的作用，就不浪费篇幅去说了。</p><p>本文耗费5个小时完成（结合课设报告）。</p><p>如有错漏欢迎在下方评论区指出。</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> internet </tag>
            
            <tag> tkinter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类说明</title>
      <link href="/posts/categories_description/"/>
      <url>/posts/categories_description/</url>
      
        <content type="html"><![CDATA[<p>为了对文章进行更好的管理，需要提前确定好文章的分类。将本博客内的文章分为以下七类：</p><ul><li>过程复盘</li><li>知识整理</li><li>解决方案</li><li>算法理解</li><li>工具使用</li><li>目录索引</li><li>日志随笔</li></ul><a id="more"></a><p> 分类定好了基本就不变了：</p><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>过程复盘</td><td>记录学习实践一个事物的过程，侧重记录与反思</td></tr><tr><td>知识整理</td><td>针对某一部分知识进行集中整理方便查阅，例如API、语法、命令等</td></tr><tr><td>解决方案</td><td>针对遇到的某个具体问题寻找解决方案</td></tr><tr><td>算法理解</td><td>针对某个具体算法的理解掌握</td></tr><tr><td>工具使用</td><td>对于框架、软件、网站等工具的使用方法与心得经验，或是简单推荐</td></tr><tr><td>目录索引</td><td>定期将本博客的文章索引起来，或者整理一些有用的参考链接</td></tr><tr><td>日志随笔</td><td>随便写点啥心情，或者年终总结之类的</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 目录索引 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/hello_world/"/>
      <url>/posts/hello_world/</url>
      
        <content type="html"><![CDATA[<p>大家好，我是憧憬少。</p><a id="more"></a><p>这是用hexo搭建的第二个博客，由于想改一个名字，又担心会影响到很多东西，于是就新搭建了一个，原本的博客仍然保留，链接在此：<a href="https://hanechiri.github.io" target="_blank" rel="noopener">羽尘的个人博客-尘世未解</a></p><p>其实和以前的几乎是一样的，只是改了用户名，以及域名。这可能是中二病带来的对帅气名字的执着吧！</p><p>现在是2019年12月30日，大三第一学期末，现在的我，比之前会了更多的东西，也认识到了文字输出对于学习的重要性，所以我会花更多时间在写博客总结上（也许吧）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MFC习题|RGB颜色模型演示程序</title>
      <link href="/posts/MFC_RGB_demonstration/"/>
      <url>/posts/MFC_RGB_demonstration/</url>
      
        <content type="html"><![CDATA[<p>习题来源：《计算机图形学基础教程》孔令德（第二版）</p><p>用mfc基于对话框的编程，实现下图的RGB颜色模型演示程序。点击颜色按钮能将“颜色及代码”这个组框中的静态文本框变成对应的颜色，调色板按钮可以调出自带的颜色选择对话框。滚动条和旁边的编辑框都可以调整颜色。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190914121959.png" alt=""></p><a id="more"></a><p>设计对话框过程不详述，直接开始代码和思路介绍。<strong>参考链接见文末。</strong></p><h1 id="改变演示块颜色"><a href="#改变演示块颜色" class="headerlink" title="改变演示块颜色"></a>改变演示块颜色</h1><p>我在这里将用于演示颜色的静态文本框称为演示块，对应的ID为<code>IDC_COLOR_BOX</code>。</p><p>查找了很久关于“如何修改控件颜色”的资料。</p><p>改变控件颜色需要在对话框类的<code>OnCltColor()</code>成员函数里面写对应代码。要生成这个方法，需要添加<code>WM_CTLCOLOR</code>这个消息的响应函数，在<code>Class View</code>的对话框类上右键可以找到<code>Add Windows Message Handler</code>，在这里添加就可以了。</p><p>生成的代码如下：</p><pre class="line-numbers language-cpp"><code class="language-cpp">HBRUSH CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnCtlColor</span><span class="token punctuation">(</span>CDC<span class="token operator">*</span> pDC<span class="token punctuation">,</span> CWnd<span class="token operator">*</span> pWnd<span class="token punctuation">,</span> UINT nCtlColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HBRUSH hbr <span class="token operator">=</span> CDialog<span class="token operator">::</span><span class="token function">OnCtlColor</span><span class="token punctuation">(</span>pDC<span class="token punctuation">,</span> pWnd<span class="token punctuation">,</span> nCtlColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: Change any attributes of the DC here</span>    <span class="token comment" spellcheck="true">// TODO: Return a different brush if the default is not desired</span>    <span class="token keyword">return</span> hbr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个函数会在每个控件被重绘时调用，所以将改变控件颜色的代码放在这里就行了。</p><p>参数<code>pWnd</code>可以用来识别现在是哪个控件正在被重绘。</p><p>它的返回值是用于填充控件的画刷。</p><p>可以先判断是哪个控件正在被重绘，当演示块被重绘时，将它的颜色调整为自己设置的颜色。</p><pre class="line-numbers language-cpp"><code class="language-cpp">HBRUSH CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnCtlColor</span><span class="token punctuation">(</span>CDC<span class="token operator">*</span> pDC<span class="token punctuation">,</span> CWnd<span class="token operator">*</span> pWnd<span class="token punctuation">,</span> UINT nCtlColor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    HBRUSH hbr <span class="token operator">=</span> CDialog<span class="token operator">::</span><span class="token function">OnCtlColor</span><span class="token punctuation">(</span>pDC<span class="token punctuation">,</span> pWnd<span class="token punctuation">,</span> nCtlColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// TODO: Change any attributes of the DC here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pWnd<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetDlgCtrlID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> IDC_COLOR_BOX<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断控件</span>    <span class="token punctuation">{</span>        hbr<span class="token operator">=</span><span class="token function">CreateSolidBrush</span><span class="token punctuation">(</span>m_color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调整颜色</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// TODO: Return a different brush if the default is not desired</span>    <span class="token keyword">return</span> hbr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码的<code>m_color</code>是一个对话框类的<code>protected</code>变量，我把它和自动生成的<code>m_hIcon</code>放在了一起。</p><p><strong>注意：如果这个变量被设置为<code>public</code>，就会在运行时产生错误，原因未知。</strong></p><p>此变量在对话框类的初始化函数<code>OnInitDialog()</code>内初始化。</p><p><strong>有了以上代码之后，想要改变演示块的颜色，只需要改变<code>m_color</code>的值并刷新对话框（例如使用<code>Invalidate()</code>）就可以了。</strong></p><h1 id="显示颜色代码"><a href="#显示颜色代码" class="headerlink" title="显示颜色代码"></a>显示颜色代码</h1><p>在演示块下面有一个静态文本框用于显示当前颜色的十六进制代码，例如“#ffffff”。</p><p>由于颜色每次都是在对话框刷新的时候被改变的，可以将这个功能写在<code>OnPaint()</code>内。获取方式也不难，看代码基本能看懂，不赘述。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnPaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//其他代码</span>    <span class="token comment" spellcheck="true">//获取颜色代码</span>    CStatic <span class="token operator">*</span>color_code <span class="token operator">=</span> <span class="token punctuation">(</span>CStatic<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_COLOR_CODE<span class="token punctuation">)</span><span class="token punctuation">;</span>    CString color<span class="token punctuation">;</span>    color<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"#%02x%02x%02x"</span><span class="token punctuation">,</span><span class="token function">GetRValue</span><span class="token punctuation">(</span>m_color<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">GetGValue</span><span class="token punctuation">(</span>m_color<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">GetBValue</span><span class="token punctuation">(</span>m_color<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    color_code <span class="token operator">-</span><span class="token operator">></span><span class="token function">SetWindowText</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现颜色按钮"><a href="#实现颜色按钮" class="headerlink" title="实现颜色按钮"></a>实现颜色按钮</h1><p>双击每个颜色按钮，添加它们的响应事件，例如：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnButtonRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add your control notification handler code here</span>    m_color <span class="token operator">=</span> <span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调整它们的颜色，并进行刷新重绘。</p><p>至于调色板按钮，需要使用mfc内置的颜色对话框<code>CColorDlg</code>:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnButtonPalette</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add your control notification handler code here</span>    CColorDialog palette<span class="token punctuation">;</span>    <span class="token keyword">int</span> nResponse <span class="token operator">=</span> palette<span class="token punctuation">.</span><span class="token function">DoModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nResponse <span class="token operator">==</span> IDOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m_color <span class="token operator">=</span> palette<span class="token punctuation">.</span><span class="token function">GetColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取调色板的颜色</span>    <span class="token punctuation">}</span>    <span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现滚动条"><a href="#实现滚动条" class="headerlink" title="实现滚动条"></a>实现滚动条</h1><h2 id="初始化滚动条"><a href="#初始化滚动条" class="headerlink" title="初始化滚动条"></a>初始化滚动条</h2><p>首先需要在对话框的<code>OnInitDialog()</code>方法内，新增初始化滚动条范围值的代码。</p><pre class="line-numbers language-cpp"><code class="language-cpp">BOOL CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnInitDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//其它代码</span>    <span class="token comment" spellcheck="true">//...</span>    CScrollBar <span class="token operator">*</span>scroll<span class="token operator">=</span><span class="token punctuation">(</span>CScrollBar<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_SCROLLBAR_R<span class="token punctuation">)</span><span class="token punctuation">;</span>    scroll<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetScrollRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scroll <span class="token operator">=</span> <span class="token punctuation">(</span>CScrollBar<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_SCROLLBAR_G<span class="token punctuation">)</span><span class="token punctuation">;</span>    scroll<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetScrollRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    scroll <span class="token operator">=</span> <span class="token punctuation">(</span>CScrollBar<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_SCROLLBAR_B<span class="token punctuation">)</span><span class="token punctuation">;</span>    scroll<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetScrollRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> TRUE<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// return TRUE  unless you set the focus to a control</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码初始化了三个滚动条控件，首先用<code>GetDlgItem()</code>来获取ID对应的控件对象的指针，然后调用<code>SetScrollRange()</code>来设定其范围为0~255。</p><h2 id="响应滚动条事件"><a href="#响应滚动条事件" class="headerlink" title="响应滚动条事件"></a>响应滚动条事件</h2><p>滚动条的响应事件不像按钮一样是每个按钮分开的，而是分为水平滚动条事件响应函数，和垂直滚动条响应函数。</p><p>在<code>Class View</code>里对对话框类右键，在右键菜单中找到<code>Add Windows Message Handler</code>，添加<code>WM_HSCROLL</code>消息的响应函数（如果是垂直滚动条，应该是<code>WM_VSCROLL</code>消息）。</p><p>生成的响应函数是这样的：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnHScroll</span><span class="token punctuation">(</span>UINT nSBCode<span class="token punctuation">,</span> UINT nPos<span class="token punctuation">,</span> CScrollBar<span class="token operator">*</span> pScrollBar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add your message handler code here and/or call default</span>    CDialog<span class="token operator">::</span><span class="token function">OnHScroll</span><span class="token punctuation">(</span>nSBCode<span class="token punctuation">,</span> nPos<span class="token punctuation">,</span> pScrollBar<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没看文档，不过参数大概意思可能是：</p><ul><li>nSBCode：滚动条响应的消息类型</li><li>nPos：滚动条改变状态之后的值</li><li>pScrollBar：指向被改变状态的滚动条控件的指针</li></ul><p>滚动条拖动的代码需要自己写，在实现功能之前，你即使用鼠标拖动滑块，滑块也会回到原来的位置。</p><p>在这个响应函数里面，我只让滚动条改变对应的编辑框对应的数值。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnHScroll</span><span class="token punctuation">(</span>UINT nSBCode<span class="token punctuation">,</span> UINT nPos<span class="token punctuation">,</span> CScrollBar<span class="token operator">*</span> pScrollBar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add your message handler code here and/or call default</span>    CDialog<span class="token operator">::</span><span class="token function">OnHScroll</span><span class="token punctuation">(</span>nSBCode<span class="token punctuation">,</span> nPos<span class="token punctuation">,</span> pScrollBar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> pScrollBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetScrollPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取当前位置</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>nSBCode<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> SB_THUMBPOSITION<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>被拖动        pos <span class="token operator">=</span> nPos<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//其实这里还可以写别的事件响应，丰富功能</span>    <span class="token punctuation">}</span>    pScrollBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetScrollPos</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置与滚动条对应的编辑框的数值</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>pScrollBar<span class="token operator">-</span><span class="token operator">></span><span class="token function">GetDlgCtrlID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> IDC_SCROLLBAR_R<span class="token operator">:</span>        <span class="token function">SetDlgItemInt</span><span class="token punctuation">(</span>IDC_EDIT_R<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> IDC_SCROLLBAR_G<span class="token operator">:</span>        <span class="token function">SetDlgItemInt</span><span class="token punctuation">(</span>IDC_EDIT_G<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> IDC_SCROLLBAR_B<span class="token operator">:</span>        <span class="token function">SetDlgItemInt</span><span class="token punctuation">(</span>IDC_EDIT_B<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="响应编辑框变化事件"><a href="#响应编辑框变化事件" class="headerlink" title="响应编辑框变化事件"></a>响应编辑框变化事件</h2><p>现在已经可以滑动滚动条来修改编辑框内的值了，但演示块的颜色还不会改变，我把这个功能写在编辑框里面了，这样，可以顺便实现“在编辑框内修改值来修改颜色”的功能。</p><p>这是其中一个编辑框的响应函数代码，其他两个类似，要说的内容都写在注释里面了。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnChangeEditR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: If this is a RICHEDIT control, the control will not</span>    <span class="token comment" spellcheck="true">// send this notification unless you override the CDialog::OnInitDialog()</span>    <span class="token comment" spellcheck="true">// function and call CRichEditCtrl().SetEventMask()</span>    <span class="token comment" spellcheck="true">// with the ENM_CHANGE flag ORed into the mask.</span>    <span class="token comment" spellcheck="true">// TODO: Add your control notification handler code here</span>    <span class="token function">UpdateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//更新数据，将数据从控件上同步到绑定的变量</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>m_R_value<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>CScrollBar<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_SCROLLBAR_R<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">SetScrollPos</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据滚动条位置设置当前颜色值</span>    <span class="token keyword">int</span> R<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>G<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>B<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    R<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CScrollBar<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_SCROLLBAR_R<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetScrollPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CScrollBar<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_SCROLLBAR_G<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetScrollPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    B<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>CScrollBar<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_SCROLLBAR_B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetScrollPos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m_color <span class="token operator">=</span> <span class="token function">RGB</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>G<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为了防止整个对话框闪烁，只刷新演示块</span>    CRect rect<span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>CStatic<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_COLOR_BOX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">GetWindowRect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ScreenToClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换为对话框上的客户坐标</span>    <span class="token function">InvalidateRect</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只刷新控件位置</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成这一步之后，已经能够实现使用滚动条或者编辑框来改变颜色了，但是当你在点击颜色按钮时，虽然颜色改变了，但是滚动条的位置和编辑框的值不会随之改变。</p><p>因此还需要一步：</p><h2 id="滚动条随颜色而变化位置"><a href="#滚动条随颜色而变化位置" class="headerlink" title="滚动条随颜色而变化位置"></a>滚动条随颜色而变化位置</h2><p>这个对话框内只有颜色按钮能够改变颜色，所以简单地在所有颜色按钮的代码内添加改变位置的代码即可。</p><p>而改变滚动条的位置只需要改变对应的编辑框的数值就可以了。</p><p>于是颜色按钮代码变成了这样</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphcisExercise2Dlg<span class="token operator">::</span><span class="token function">OnButtonRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add your control notification handler code here</span>    m_color <span class="token operator">=</span> <span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调整滚动条位置</span>    <span class="token keyword">int</span> R<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>G<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>B<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    R<span class="token operator">=</span><span class="token function">GetRValue</span><span class="token punctuation">(</span>m_color<span class="token punctuation">)</span><span class="token punctuation">;</span>    G<span class="token operator">=</span><span class="token function">GetGValue</span><span class="token punctuation">(</span>m_color<span class="token punctuation">)</span><span class="token punctuation">;</span>    B<span class="token operator">=</span><span class="token function">GetBValue</span><span class="token punctuation">(</span>m_color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetDlgItemInt</span><span class="token punctuation">(</span>IDC_EDIT_R<span class="token punctuation">,</span>R<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetDlgItemInt</span><span class="token punctuation">(</span>IDC_EDIT_G<span class="token punctuation">,</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SetDlgItemInt</span><span class="token punctuation">(</span>IDC_EDIT_B<span class="token punctuation">,</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="部分用到的MFC函数或宏的简介"><a href="#部分用到的MFC函数或宏的简介" class="headerlink" title="部分用到的MFC函数或宏的简介"></a>部分用到的MFC函数或宏的简介</h1><p>详细的自己百度</p><ul><li><code>GetRValue()</code>，<code>GetGValue()</code>，<code>GetBValue()</code>，分别用于获取颜色值的RGB三个通道的值</li><li><code>SetDlgItemInt()</code>，可以将值送入ID对应的控件</li><li><code>GetDlgItem()</code>，通过ID来获取指向控件的指针，记得转换指针类型</li><li><code>Invalidate()</code>，使客户区无效化，引起重绘</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://www.jizhuomi.com/software/191.html" target="_blank" rel="noopener">VS2010/MFC编程入门之二十六（常用控件：滚动条控件Scroll Bar）-鸡啄米</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MFC用对话框获取输入</title>
      <link href="/posts/MFC_get_input_by_Dialog/"/>
      <url>/posts/MFC_get_input_by_Dialog/</url>
      
        <content type="html"><![CDATA[<p>在MFC调用对话框读入数据，并在客户区输出。</p><p>这是《计算机图形学基础教程》的一个习题：</p><blockquote><p>使用MFC设计一个长方形类CRectangle，调用对话框读入长方形的长度和宽度，在客户区输出长方形的周长和面积。</p></blockquote><p>这个书上并没有教怎么用对话框读取输入，我在这之前也完全没接触过MFC的对话框。弄了两小时，终于把这道题做出来了。以此文记录一下</p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="http://www.docin.com/p-242469989.html" target="_blank" rel="noopener">MFC调用输入对话框并返回输入信息</a></li><li><a href="https://www.sogou.com/link?url=DSOYnZeCC_owkDvmYG0gMz-JrNZwwuWK8exNhhiXPsEIKMrTb1L7Tc88xhL_moz5C1NeXNQ2BY9d-4ud3wkh5slk12zu172c4pCyk2vXyzKM7-ZhrzgWRu8yqGHnU-QomKwJVMAaAqOt5pUc3zy0dg.." target="_blank" rel="noopener">MFC对话框和常用教程</a></li></ul><h1 id="设计对话框"><a href="#设计对话框" class="headerlink" title="设计对话框"></a>设计对话框</h1><p>找了一下，MFC似乎没有像python那样的<code>input()</code>或者像是VB里面的<code>inputBox()</code>之类的函数，所以得自己先设计对话框。</p><p>首先打开<code>Resource View</code>，在<code>Dialog</code>处右键菜单插入新的对话框。</p><p>接着就是放控件以及给控件命名了。这个比较简单，就不详细说了。</p><p>我设计的对话框有两个<code>Edit</code>控件，一个是<code>IDC_LENGTH</code>，用于输入长方形的长，一个是<code>IDC_WIDTH</code>，用于输入长方形的宽。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910194014.png" alt=""></p><h1 id="新建对话框类"><a href="#新建对话框类" class="headerlink" title="新建对话框类"></a>新建对话框类</h1><p>在设计好的对话框上右键菜单打开类向导，也就是<code>classWizard</code>，会弹出一个对话框如下图：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910194429.png" alt=""></p><p>大致意思是：检测到有个新建的对话框资源，你可能想要为它创建一个类，要创建吗？</p><p>点确定创建一个对应的类。</p><p>如果没有弹出这个对话框，你也可以在类向导右上角的<code>Add Class</code>按钮来创建一个MFC里面的类，把基类调整成<code>CDialog</code>，<code>Dialog ID</code>设置成你刚刚设计的对话框ID就可以了。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910195108.png" alt=""></p><p>（其实命名最好在后面加个<code>Dlg</code>后缀以表示这是对话框，但是我懒得改了）</p><h1 id="添加关联变量"><a href="#添加关联变量" class="headerlink" title="添加关联变量"></a>添加关联变量</h1><p>在类向导里面选择第二个选项卡，也就是<code>Member Bariables</code>成员变量选项卡。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910195436.png" alt=""></p><p>这里面列出了对话框上控件的ID，这些ID可以在设计对话框的时候指定。</p><p>选中用于输入数据的控件，然后点击<code>Add Variable</code>添加对话框类的成员变量。改变量名字，其他选项默认即可。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910200353.png" alt=""></p><p>这个操作与你直接在类代码中添加的区别是，这个操作会建立起控件和这个成员变量的关联关系。这个关联关系体现在自定义对话框类的<code>DoDataExchange()</code>这个成员函数内：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CInputRectangle<span class="token operator">::</span><span class="token function">DoDataExchange</span><span class="token punctuation">(</span>CDataExchange<span class="token operator">*</span> pDX<span class="token punctuation">)</span><span class="token punctuation">{</span>    CDialog<span class="token operator">::</span><span class="token function">DoDataExchange</span><span class="token punctuation">(</span>pDX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//{{AFX_DATA_MAP(CInputRectangle)</span><span class="token function">DDX_Text</span><span class="token punctuation">(</span>pDX<span class="token punctuation">,</span> IDC_LENGTH<span class="token punctuation">,</span> m_edLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加关联变量之前，这里是没有这两行的</span><span class="token function">DDX_Text</span><span class="token punctuation">(</span>pDX<span class="token punctuation">,</span> IDC_WIDTH<span class="token punctuation">,</span> m_edWidth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//}}AFX_DATA_MAP</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用对话框"><a href="#调用对话框" class="headerlink" title="调用对话框"></a>调用对话框</h1><p>如图，我打算使用菜单来调用对话框输入矩形长和宽。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190910201233.png" alt=""></p><p>添加菜单的过程不详细说。</p><p>直接跳到菜单的响应函数：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphicsExerciseView<span class="token operator">::</span><span class="token function">OnHomework2_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add your command handler code here</span>    CInputRectangleDlg inputDlg<span class="token punctuation">;</span>    <span class="token keyword">int</span> nResponse <span class="token operator">=</span> inputDlg<span class="token punctuation">.</span><span class="token function">DoModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nResponse<span class="token operator">==</span>IDOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里获取输入并在客户区输出</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文件开头include对话框类的头文件，声明对象，并调用对话框对象的<code>DoModal()</code>方法。</p><p>这个方法在对话框关闭之后，才会返回一个值，对应关闭对话框的动作，这里我用<code>nResponse</code>这个int变量接收返回值。</p><p>接着判断返回值，如果是点击确定按钮关闭对话框，那么获取对话框的输入，并且在客户区输出。</p><h2 id="获取输入"><a href="#获取输入" class="headerlink" title="获取输入"></a>获取输入</h2><p>绑定对话框上两个编辑框的变量分别为：<code>m_edWidth</code>和<code>m_edLength</code>。默认情况下，它们是CString类型的，因此需要进行类型转换。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> width<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>inputDlg<span class="token punctuation">.</span>m_edWidth<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> height<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>inputDlg<span class="token punctuation">.</span>m_edLength<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>对上面两行代码的说明：</p><ul><li>两个关联变量是<code>public</code>的，因此可以直接访问。</li><li>CString的<code>GetBuffer()</code>成员函数返回对应的字符数组类型的字符串</li><li>atoi（ASCII to integer）把字符串转换成整型数</li></ul><h2 id="进行输出"><a href="#进行输出" class="headerlink" title="进行输出"></a>进行输出</h2><p>获取设备上下文，并调整坐标系：</p><pre class="line-numbers language-cpp"><code class="language-cpp">CDC <span class="token operator">*</span>pDC<span class="token operator">=</span><span class="token function">GetDC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取设备上下文</span>CRect rect<span class="token punctuation">;</span><span class="token function">GetClientRect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetMapMode</span><span class="token punctuation">(</span>MM_ANISOTROPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetWindowExt</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetViewportExt</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetViewportOrg</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rect<span class="token punctuation">.</span><span class="token function">OffsetRect</span><span class="token punctuation">(</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">Rectangle</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空屏幕</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出数据，并释放设备上下文：</p><pre class="line-numbers language-cpp"><code class="language-cpp">CRectangle <span class="token function">crect</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>CString perimeter_text<span class="token punctuation">,</span>area_text<span class="token punctuation">;</span>perimeter_text<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"长方形的周长为：%.2f"</span><span class="token punctuation">,</span>crect<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>area_text<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"长方形的面积为：%.2f"</span><span class="token punctuation">,</span>crect<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">TextOut</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>perimeter_text<span class="token punctuation">)</span><span class="token punctuation">;</span>pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">TextOut</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>area_text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ReleaseDC</span><span class="token punctuation">(</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放设备上下文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就完成了</p><h2 id="菜单代码概览"><a href="#菜单代码概览" class="headerlink" title="菜单代码概览"></a>菜单代码概览</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CComputerGraphicsExerciseView<span class="token operator">::</span><span class="token function">OnHomework2_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add your command handler code here</span>    CInputRectangleDlg inputDlg<span class="token punctuation">;</span>    <span class="token keyword">int</span> nResponse <span class="token operator">=</span> inputDlg<span class="token punctuation">.</span><span class="token function">DoModal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nResponse<span class="token operator">==</span>IDOK<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CDC <span class="token operator">*</span>pDC<span class="token operator">=</span><span class="token function">GetDC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CRect rect<span class="token punctuation">;</span>        <span class="token function">GetClientRect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetMapMode</span><span class="token punctuation">(</span>MM_ANISOTROPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetWindowExt</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetViewportExt</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetViewportOrg</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rect<span class="token punctuation">.</span><span class="token function">OffsetRect</span><span class="token punctuation">(</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">Rectangle</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空屏幕</span>        <span class="token keyword">int</span> width<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>inputDlg<span class="token punctuation">.</span>m_edWidth<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span>inputDlg<span class="token punctuation">.</span>m_edLength<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CRectangle <span class="token function">crect</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        CString perimeter_text<span class="token punctuation">,</span>area_text<span class="token punctuation">;</span>        perimeter_text<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"长方形的周长为：%.2f"</span><span class="token punctuation">,</span>crect<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        area_text<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"长方形的面积为：%.2f"</span><span class="token punctuation">,</span>crect<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">TextOut</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>perimeter_text<span class="token punctuation">)</span><span class="token punctuation">;</span>        pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">TextOut</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>area_text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ReleaseDC</span><span class="token punctuation">(</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="错误思路"><a href="#错误思路" class="headerlink" title="错误思路"></a>错误思路</h1><p>一开始我以为需要编写对话框的<code>ok</code>按钮的响应事件，写成了下面这样，试了一下不行，不知道为什么：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> CInputRectangleDlg<span class="token operator">::</span><span class="token function">OnOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO: Add extra validation here</span>    CDialog<span class="token operator">::</span><span class="token function">OnOK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">UpdateData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于将数据从对话框同步到成员变量中</span>    <span class="token keyword">int</span> width<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span> m_edWidth<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token operator">=</span><span class="token function">atoi</span><span class="token punctuation">(</span> m_edLength<span class="token punctuation">.</span><span class="token function">GetBuffer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CRectangle <span class="token function">crect</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    CDC <span class="token operator">*</span>pDC<span class="token operator">=</span><span class="token function">GetDC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    CRect rect<span class="token punctuation">;</span>    <span class="token function">GetClientRect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetMapMode</span><span class="token punctuation">(</span>MM_ANISOTROPIC<span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetWindowExt</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetViewportExt</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">SetViewportOrg</span><span class="token punctuation">(</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rect<span class="token punctuation">.</span><span class="token function">OffsetRect</span><span class="token punctuation">(</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span>rect<span class="token punctuation">.</span><span class="token function">Height</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">Rectangle</span><span class="token punctuation">(</span>rect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空屏幕</span>    CString perimeter_text<span class="token punctuation">,</span>area_text<span class="token punctuation">;</span>    perimeter_text<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"长方形的周长为：%.2f"</span><span class="token punctuation">,</span>crect<span class="token punctuation">.</span><span class="token function">perimeter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    area_text<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"长方形的面积为：%.2f"</span><span class="token punctuation">,</span>crect<span class="token punctuation">.</span><span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">TextOut</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span>perimeter_text<span class="token punctuation">)</span><span class="token punctuation">;</span>    pDC<span class="token operator">-</span><span class="token operator">></span><span class="token function">TextOut</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span>area_text<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ReleaseDC</span><span class="token punctuation">(</span>pDC<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> mfc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫解析库BeautifulSoup速查</title>
      <link href="/posts/python_spider_parser_beautifulsoup/"/>
      <url>/posts/python_spider_parser_beautifulsoup/</url>
      
        <content type="html"><![CDATA[<p>为了方便使用，将BeautifulSoup库常用的接口进行总结。</p><p>总结内容来源：《python3网络爬虫开发实战》崔庆才</p><a id="more"></a><h2 id="导入与解析"><a href="#导入与解析" class="headerlink" title="导入与解析"></a>导入与解析</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> Beatsoup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="节点选择器"><a href="#节点选择器" class="headerlink" title="节点选择器"></a>节点选择器</h2><h3 id="提取属性"><a href="#提取属性" class="headerlink" title="提取属性"></a>提取属性</h3><p>获取到的是第一个标签</p><ul><li><code>soup.title.string</code>:获取title标签的文本内容</li><li><code>soup.title.name</code>:获取节点名称“title”</li><li><code>soup.p.attrs</code>:获取节点属性字典</li><li><code>soup.p.attrs[&#39;class&#39;]</code>或者<code>soup.p[&#39;class&#39;]</code>:获取节点属性</li></ul><h3 id="关联选择"><a href="#关联选择" class="headerlink" title="关联选择"></a>关联选择</h3><h4 id="子孙"><a href="#子孙" class="headerlink" title="子孙"></a>子孙</h4><ul><li><code>soup.p.contents</code>:获取直接子节点列表</li><li><code>soup.p.children</code>：获取直接子节点生成器</li><li><code>soup.p.descendants</code>：获取所有子孙节点生成器</li></ul><h4 id="祖先"><a href="#祖先" class="headerlink" title="祖先"></a>祖先</h4><ul><li><code>soup.p.parent</code>：获取直接父节点</li><li><code>soup.p.parents</code>：获取所有祖先节点生成器</li></ul><h4 id="兄弟"><a href="#兄弟" class="headerlink" title="兄弟"></a>兄弟</h4><ul><li><code>soup.a.next_sibling</code>：获取下一个兄弟节点</li><li><code>soup.a.previous_sibling</code>：获取上一个兄弟节点</li><li><code>soup.a.next_siblings</code>：获取后面所有兄弟节点列表</li><li><code>soup.a.previous_siblings</code>：获取前面所有兄弟节点列表</li></ul><h2 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h2><h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all()"></a>find_all()</h3><pre class="line-numbers language-python"><code class="language-python">find_all<span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> recursive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> text<span class="token operator">=</span>None<span class="token punctuation">,</span>limit<span class="token operator">=</span>None<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用法：</p><ul><li><code>soup.find_all(name=&#39;ul&#39;)</code>：获取所有ul节点组成的列表</li><li><code>soup.find_all(attrs={&#39;id&#39;:&#39;list&#39;})</code>：获取id为list的节点</li><li>常用参数如id和class可以直接传入，如：<code>soup.find_all(id = &#39;list&#39;)</code>或<code>soup.find_all(class_=&#39;element&#39;)</code></li><li><code>soup.find_all(text=re.compile(&#39;link&#39;))</code>可以匹配文本，也可以用正则表达式对象</li></ul><h3 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h3><p>返回第一个匹配的元素，和find_all用法差不多</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>find_parents()</code>,<code>find_parent()</code></li><li><code>find_next_siblings()</code>,<code>find_next_sibling()</code></li><li><code>find_previous_siblings()</code>,<code>find_previous_sibling()</code></li><li><code>find_all_next()</code>,<code>find_next()</code>返回节点后符合条件的节点</li><li><code>find_all_previous()</code>,<code>find_previous()</code></li></ul><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><p><code>soup.select(&#39;CSS选择器&#39;)</code>：返回列表</p>]]></content>
      
      
      <categories>
          
          <category> 知识整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年暑假总结</title>
      <link href="/posts/2019_summer_holidays_summary/"/>
      <url>/posts/2019_summer_holidays_summary/</url>
      
        <content type="html"><![CDATA[<p>这个暑假大致是7月7日（到家时间）至8月24日，已经过了6周左右。</p><p>如果是以前的假期，肯定是不记得自己做过什么了，但是这次每周做了一次周总结，因此可以对照着周总结来进行假期总结。应该是头一次有参考地记录下自己的整个假期了。</p><a id="more"></a><h1 id="做了什么事情"><a href="#做了什么事情" class="headerlink" title="做了什么事情"></a>做了什么事情</h1><h2 id="科目二"><a href="#科目二" class="headerlink" title="科目二"></a>科目二</h2><p>最主要做的事情是考驾照的科目二，每天都去练一个上午或者一个下午。</p><p>认识了几个同一个高中的同学，并且和陌生人打交道没有那么困难了。</p><h2 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h2><p>代码分享群里面有个人问我要不要参与b站的暑假爆肝活动，在7月28日之前投稿4个视频。我想要奖励里面的一个月大会员，于是就参加了。</p><p>7月13日投了一个:<a href="https://www.bilibili.com/video/av58951308/" target="_blank" rel="noopener">“如何像项目一样整理和管理你的个人电脑文件”</a>，分享了一下我自己不久前开始使用的整理电脑文件的方式，而且特地利用“网易见外”这个网站来试着加上字幕。比起分享代码思路，这种视频受众更加广一些。</p><p>通过自动上字幕，我发现自己讲解的时候语气词和停顿还蛮多的，需要多锻炼表达能力。</p><p>学习python，利用python写了一个脚本，用来自动帮我的明日方舟的关卡点“开始游戏”按钮，灵感来自一个用机械装置做“物理外挂”的视频。录制了一个演示视频：<a href="https://www.bilibili.com/video/av60038926/" target="_blank" rel="noopener">“明日方舟代理指挥“代理指挥”的代理指挥”</a></p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190821160011.png" alt="运行示意图"></p><p>后来没什么想做的视频主题，就没有继续做了。</p><p>到了八月，买了一个板绘用的数位板，开始学习板绘作为平时的兴趣。八月录制了三个临摹过程的视频，感觉不错。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190821160255.png" alt=""></p><h2 id="个人博客-amp-github"><a href="#个人博客-amp-github" class="headerlink" title="个人博客 &amp; github"></a>个人博客 &amp; github</h2><h3 id="python爬虫"><a href="#python爬虫" class="headerlink" title="python爬虫"></a>python爬虫</h3><p>使我开始更加积极地更新博客的事件是，我终于在7月15日解决了信息门户的登录密码加密问题。</p><p>将以前存放在有道云笔记里面的分析过程重新整理了一下写成博文：<a href="https://hanechiri.github.io/post/portal_login_encrypt/" target="_blank" rel="noopener">“学校信息门户模拟登录之密码加密”</a></p><p>再利用这个加密模块，很快写出了模拟登录信息门户的python自定义包：<a href="https://hanechiri.github.io/post/portal_login/" target="_blank" rel="noopener">“学校信息门户模拟登录”</a></p><p>没想到这个自定义包竟然获得了<a href="https://lollipopnougat.github.io/Crepeblog/" target="_blank" rel="noopener"><strong>封掣</strong></a>大佬的pull request（也就是他参与了这个项目，贡献了一部分代码）！这可是我第一次获得pull request！兴奋之情可想而知，我当时就想继续写点什么出来。</p><p>不过<a href="https://github.com/HaneChiri/chd_portal_login" target="_blank" rel="noopener">这个项目</a>发展空间并没有太多，最多输出cookies文件给别的程序或者脚本用。在写好了文档，增加了成绩查询，学习了如何将其打包成exe文件，又学习了如何release一个版本之后，就没有什么可以扩展的地方了。</p><p>在这个过程中，除了上面说到的那些，我还开始使用github的issue来记录待办事项和bug，等到有空的时候去修复。</p><p><strong>在github上面终于有了一个像样的项目了，这让我很高兴。</strong></p><p>我又开始把之前写的信息门户爬虫给整理了一下，整理到了一个github仓库当中：<a href="https://github.com/HaneChiri/chd_spider" target="_blank" rel="noopener">“chd_spider”</a></p><p>在这个成绩的激励下，我开始尝试做之前领取的任务：爬取微信公众号，确实有<a href="https://hanechiri.github.io/post/wechat_offical_account_spider_1_get_article_urls/" target="_blank" rel="noopener">成功的部分</a>，不过目前<a href="https://hanechiri.github.io/post/wechat_offical_account_spider_2_fail_to_get_html/" target="_blank" rel="noopener">卡关了</a></p><h3 id="博客主题优化"><a href="#博客主题优化" class="headerlink" title="博客主题优化"></a>博客主题优化</h3><p>给博客增加了几个功能：</p><ul><li>RSS简易信息聚合</li><li>valine评论</li></ul><p>hexo的Next主题挺方便的，将所有东西都准备好了，增加这些功能挺容易的。</p><h4 id="RSS简易信息聚合"><a href="#RSS简易信息聚合" class="headerlink" title="RSS简易信息聚合"></a>RSS简易信息聚合</h4><p>在设计自我管理系统中的信息输入子系统时，了解到<a href="https://baike.baidu.com/item/rss/24470?fr=aladdin" target="_blank" rel="noopener">RSS</a>这个概念。</p><blockquote><p>RSS(Really Simple Syndication)是一种描述和同步网站内容的格式，是使用最广泛的XML应用。RSS搭建了信息迅速传播的一个技术平台，使得每个人都成为潜在的信息提供者。发布一个RSS文件后，这个RSS Feed中包含的信息就能直接被其他站点调用，而且由于这些数据都是标准的XML格式，所以也能在其他的终端和服务中使用，是一种描述和同步网站内容的格式。</p><p>就本质而言，RSS和Atom是一种信息聚合的技术，都是为了提供一种更为方便、高效的互联网信息的发布和共享，用更少的时间分享更多的信息。同时RSS和Atom又是实现信息聚合的两种不同规范</p><p>（来自百度百科）</p></blockquote><p>以我的理解，RSS的Feed其实就是一个将网站的内容格式化的XML文件，也就是一个“地图”，按照一定的标准标注了特定内容，RSS阅读器其实就是一个爬虫软件。将RSS Feed给RSS阅读器之后，阅读器爬虫按照这份“地图”，解析出需要爬取的链接，然后获取文章内容，再展现给用户。</p><p>弄懂了原理之后，我帮我的博客也加了一个RSS插件，在部署博客的同时生成RSS Feed（<a href="https://hanechiri.github.io/atom.xml" target="_blank" rel="noopener">我博客的RSS Feed</a>），这样别人使用RSS阅读器就可以“订阅”我的博客，在我的博客更新的时候可以第一时间看到。</p><p>在电脑上我下了一个RSS阅读器<a href="http://irreader.fatecore.com/" target="_blank" rel="noopener">irreader</a>，订阅了几个朋友的博客。除此之外，这个阅读器还能订阅没有Feed的链接，我猜原理是根据你选择的几个链接来自动生成一个Feed来进行订阅，甚至能订阅B站up的视频以及贴吧的帖子，还是挺好用的。</p><h3 id="valine评论"><a href="#valine评论" class="headerlink" title="valine评论"></a>valine评论</h3><p>和阅读量计数用了同一个leancloud应用，效果挺不错：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190821164256.png" alt=""></p><p>但遗憾的是，leancloud在经过上个月的域名封禁事件之后，又是实名注册又是绑定备案域名的，十月一号之后就得找别的办法来弄评论和点击数了。</p><h1 id="半途而废的事情"><a href="#半途而废的事情" class="headerlink" title="半途而废的事情"></a>半途而废的事情</h1><ul><li>暑假开始的运动目标没有完成，意志力随着身体素质的变差越来越弱</li><li>跟着廖雪峰python教程写代码的目标没有完成</li><li>利用time meter记录时间</li><li>每天在anki录入30个单词</li><li>晚上十一点睡</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一封邀请函</title>
      <link href="/posts/invitation/"/>
      <url>/posts/invitation/</url>
      
        <content type="html"><![CDATA[<p>如果你是从外部链接来到这个页面，那么你也许是获得了进入一个自我管理群的邀请函。</p><p>你可以阅读下面的介绍，以确定要不要加入这个群。</p><p>建议在电脑上查看，有侧边栏目录方便跳转。</p><p><strong>无论是否选择加入此群，都请不要将此链接随意传播。</strong></p><a id="more"></a><h1 id="群简介"><a href="#群简介" class="headerlink" title="群简介"></a>群简介</h1><p>这是一个QQ群，于2019年4月26日创建。</p><p>是为了营造一个良好的学习氛围，提供一个外在监督环境建立的。</p><p>在建立之初，我并没有想好这是一个什么样的群，只是想聚集一些小伙伴一起学习。后来，这个群慢慢地发展起来，变成了一个有着<strong>打卡系统</strong>和<strong>反思系统</strong>的群。</p><ul><li><strong>打卡系统：</strong>本群的打卡系统利用了QQ群的群相册。如果你有想要打卡的项目，可以在登记了信息之后创建群相册用于打卡，由管理员以及全体群成员监督，<strong>超过一定天数未打卡，就会删除对应的相册，并扣除一定的积分</strong>。而达到一定天数可以将相册归档，获得与持续天数正相关的积分。</li><li><strong>反思系统：</strong>作为本群成员，需要每周周日总结一下本周的收获，并以文字的形式发到群内。如果没有收获，也需要在群里说明（例如说：“本周无总结”）。<strong>没有声明本周没有总结且未总结的</strong>，扣除一定的积分，在下一周周日结算之前补回，则取消扣分。正常总结会获得一定量的积分。</li><li><strong>积分系统：</strong>进群之后初始积分为0，若<strong>积分为负数且在下一周周日结算之前仍然为负数</strong>，则会强制离开群聊。</li><li><strong>邀请系统：</strong>本群采用邀请制，每个月最多邀请一个愿意遵守群规则的人入群。如果没有这样的人选，这个月就不邀请，宁缺毋滥。</li><li><strong>文件系统：</strong>为了方便学习交流，如果需要上传文件，请将文件上传到对应的文件夹，并使得看文件名就知道这个文件的作用，多版本文件请用6位数日期+修改次数的后缀</li><li><strong>群活动：</strong>群内会不定期地进行一些活动，自愿参与。</li></ul><p>简单来说，想要留在这个群里面，最简单的方式是只需要在每周日发一条“本周无总结”，维持积分不为负。</p><p>而在这个基础上，你可以选择群里面提供的规则来进行自我提升、自我管理，也可以向管理员提出自己的规则提案、活动提案。</p><p><strong>本群提供的是一种氛围，一种监督环境，至于能否从中获得提升，还需要看你自己。</strong></p><p>详细内容见下：</p><h2 id="打卡系统"><a href="#打卡系统" class="headerlink" title="打卡系统"></a>打卡系统</h2><p>由一个.xlsx文件（即电子表格文件）来实现。下图为示意图，点击可放大。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190818105321.png" alt=""></p><h3 id="创建打卡相册"><a href="#创建打卡相册" class="headerlink" title="创建打卡相册"></a>创建打卡相册</h3><p>创建打卡相册需要以下步骤：</p><ol><li>在群文件内下载“打卡相册登记表xxxxxx-x.xlsx”文件</li><li>在其中根据工作表“打卡相册字段描述”内的说明，在工作表“打卡相册登记表”内填写好对应的信息</li><li>将文件名修改为“打卡相册登记表+6位数日期+任意分隔符+这一天第几次修改”，<br>如：“打卡相册登记表190617_1“代表2019年6月17日的第一次修改。并将文件上传</li><li>在群相册创建自己的打卡相册，开始打卡</li></ol><h3 id="打卡相册规则"><a href="#打卡相册规则" class="headerlink" title="打卡相册规则"></a>打卡相册规则</h3><p>下面只列出比较重要的几个规则，具体的积分计算规则见<a href="https://hanechiri.github.io/post/excel_clock_in_album/" target="_blank" rel="noopener">这里</a></p><ul><li>相册状态：正在进行、放弃、失败、归档</li><li>如果<strong>连续三天</strong>未打卡，管理员就删除相册，并在登记表内将相册状态设置为“失败”。</li><li><strong>不创建打卡不扣分，创建打卡而未坚持下来会扣分。没有请假制度，创建打卡前请考虑好</strong></li><li>对于有期限的相册，比如打卡目标是“两周读完《xxx》”，那么在结束日期时，可以将其状态设置为“归档”。相册资源回收（删除或改作他用），避免资源闲置。若<strong>持续时间大于等于一百天</strong>，则可以选择保留相册。（可以给其他群员作榜样）</li><li>对于没有期限的相册，比如“每天背单词”，那么在<strong>创建时间满三十天</strong>后就可以选择“归档”（三十天应该够养成一个小习惯了），删除规则同上一条。</li><li>相册删除后，相册记录还会保留在登记表里面，是<strong>公开的</strong>哦。</li></ul><h2 id="反思系统"><a href="#反思系统" class="headerlink" title="反思系统"></a>反思系统</h2><p>其登记表与打卡相册登记表使用同一个工作簿。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190818111657.png" alt=""></p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>在群文件内复习自己学习内容</li><li>看到别人学习了自己却没有而产生激励效果。</li><li>保持群内一定的活跃度，去除不活跃成员</li><li>作为群内一个基本的群活动，强化学习氛围</li></ol><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li>每周日，每个人在群聊天发一个周总结，内容是自己这周学习了什么，没有限制，只是给大家一个自我反省的机会。</li><li>如果没有可以写的东西，那么也在群里面报备，方式为在群聊天中说：“本周无总结”或者别的能表明这一事实的话。别有压力，只是回复一句话的功夫。</li><li>无论总结多少，只要总结了，都会获得一定量的积分。</li><li>如果周日那一天状态不好或者很忙，可以在群里@管理员，告知推迟时间（不可超过下周周日），只要在报备的时间之前补了总结，也可以获得总结积分。</li><li>如果没有报备也没有在截止之前发周总结，可以在下一周总结之前补。如果没有补，则会扣除一定的积分。</li><li>每周所有成员的周总结将会被管理员整理到一个文件中，发到群内，即<strong>周总结是公开的</strong>，方便你随时查看自己的周总结以及自己下周的目标。</li><li>尽量使用markdown语法，方便管理员整理。如果你不了解什么是markdown，那么就只需要在你的总结前面加上一行“## 你的昵称”即可。如果你想要学习markdown，可以参考我在b站发的<a href="https://www.bilibili.com/video/av56611630/" target="_blank" rel="noopener">这个视频</a>。本篇文章就是使用markdown语法来书写的。</li></ul><h3 id="总结示例"><a href="#总结示例" class="headerlink" title="总结示例"></a>总结示例</h3><p>内容没有限制，想写什么都可以，不限字数，但是最起码的格式是，在总结前面加上“## 你的昵称”</p><p>以下内容仅供参考，可以根据自己的喜好来增加或删除模块。</p><h4 id="简易总结示例"><a href="#简易总结示例" class="headerlink" title="简易总结示例"></a>简易总结示例</h4><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 憧憬少</span>本周没做什么事情<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="详细总结示例"><a href="#详细总结示例" class="headerlink" title="详细总结示例"></a>详细总结示例</h4><p>摘自“周总结week5”，使用了markdown语法，可以在群文件的“周报”文件夹中找到它，看一下markdown的渲染效果。</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">##</span> 憧憬少</span><span class="token title important"><span class="token punctuation">###</span> 本周做了什么</span><span class="token list punctuation">-</span> 驾校练完了右侧倒车入库，开始学习左侧<span class="token list punctuation">-</span> （周一）完成信息门户密码加密模块并上传github和[编写博客](https://hanechiri.github.io/post/portal<span class="token italic"><span class="token punctuation">_</span>login<span class="token punctuation">_</span></span>encrypt/#more)<span class="token list punctuation">-</span> （周三）完成信息门户模拟登录模块并上传[github](https://github.com/HaneChiri/CHD<span class="token italic"><span class="token punctuation">_</span>portal<span class="token punctuation">_</span></span>login)和<span class="token url">[编写博客](https://hanechiri.github.io/post/portal_login/#more)</span><span class="token list punctuation">-</span> 驾校排队练车的时候无聊，开始使用墨者写作APP来重新开始以前放弃的小说并在群里连载<span class="token list punctuation">-</span> （周六）写了一个python脚本用于自动启动明日方舟的代理指挥，学习了<span class="token code keyword">`pyautogui`</span>库。<span class="token list punctuation">-</span> （周日）发布上述脚本的<span class="token url">[介绍视频](https://www.bilibili.com/video/av60038926/)</span>以及上传脚本和打包的exe到<span class="token url">[github](https://github.com/HaneChiri/arknights_assist)</span><span class="token title important"><span class="token punctuation">###</span> 本周的目标有没有达到</span>【目标链编号，每完成一个目标，生成下一个目标，编号增加，未完成则归零】<span class="token list punctuation">-</span> [x] 【1】一周四次运动<span class="token list punctuation">-</span> [x] 【0】一周三次，每天写代码半小时<span class="token title important"><span class="token punctuation">###</span> 下周的目标</span><span class="token list punctuation">-</span> [ ] 【2】一周四次运动，包括不限于跑步，散步等<span class="token list punctuation">-</span> [ ] 【1】一周三次，每天写代码半小时<span class="token list punctuation">-</span> [ ] 【0】每天利用time meter记录时间开销<span class="token title important"><span class="token punctuation">###</span> 概括这一周</span>分数：85%<span class="token list punctuation">-</span> 在驾校遇到了同一个高中的同学（虽然不是一个班不认识）<span class="token list punctuation">-</span> 做了挺多事情<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="群活动"><a href="#群活动" class="headerlink" title="群活动"></a>群活动</h2><p>可以在群内向管理员提出群活动的建议。</p><p>目前已经举行过的群活动：</p><h3 id="1学期总结"><a href="#1学期总结" class="headerlink" title="#1学期总结"></a>#1学期总结</h3><p>【活动】学期总结<br>【编号】#1（也就是第一次活动）<br>【时间】2019-6-21~2019-7-10<br>【内容】本学期已经告一段落，学科的内容是否考完试就忘得差不多了呢？为了避免这一学期白学，各位学研都市居民可以在活动时间内在群文件的群活动作品提交文件夹内提交自己的学期总结。<br>形式不限，可以是手写总结拍照，可以是知识框架思维导图，可以是笔记文件，可以是录音讲解等。<br>【存档】活动结束之后，会将群文件中提交的总结统一打包，保存到群活动文件夹中，群活动提交文件夹会被清空。<br>【排名】活动结束之后，会进行作品投票，票数最多的参与者可以获得奖励<br>【奖励】目前我能想到的奖励就只有30天自定义专属头衔了</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬取微信公众号文章2获取页面失败</title>
      <link href="/posts/wechat_offical_account_spider_2_fail_to_get_html/"/>
      <url>/posts/wechat_offical_account_spider_2_fail_to_get_html/</url>
      
        <content type="html"><![CDATA[<p>虽然获取到了微信公众号文章的链接，但没法获取到包含文章内容的html。</p><p>花了一个小时来研究怎么获取页面，最后还是失败了。</p><a id="more"></a><h1 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h1><p>首先按照一般思路，使用requests库来获取页面，但是获取到的却是不含有文章内容的一堆js代码和css代码，以及少量的没有内容的html。</p><p>去查看Ajax请求，有4个请求，其中三个都是没有文章内容的json，而第一个请求也是最可疑的一个，无法预览。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190811153654.png" alt=""></p><p>第一个请求的接口：</p><pre><code>https://mp.weixin.qq.com/mp/appmsgreport?action=page_time&amp;__biz=MzAwNjA3Nzg0MA==&amp;uin=&amp;key=&amp;pass_ticket=&amp;wxtoken=777&amp;devicetype=&amp;clientversion=&amp;appmsg_token=&amp;x5=0&amp;f=json</code></pre><p>这是以POST方式访问的接口，下面一大堆的Form data，<strong>这其中甚至还有文章的标题！</strong></p><p>也就是说在访问这个接口之前，就已经得知了文章的内容了吗？</p><h1 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h1><p>我觉得模拟请求太过于复杂，于是尝试使用selenium来获取。</p><p>但是得到的内容和上文说的一样，并没有什么不同。非常奇怪。加了60秒的延时让它充分渲染也没用，问题不在这里。</p><h1 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h1><p>后来输出到文件才发现，内容并没有少，确确实实地获取到了文章内容，但是由于print出来的字符数有限制，无法在控制台显示完，才导致我以为获取失败。当个教训吧。</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年年中总结</title>
      <link href="/posts/2019_semi-annual_summary/"/>
      <url>/posts/2019_semi-annual_summary/</url>
      
        <content type="html"><![CDATA[<p>要一个人在家一周，有些孤独，有些茫然，想起来写总结。</p><p>不太清楚总结怎么写，就和以前一样，把过去的东西列出来看看吧，帮助自己回顾一番。</p><p>这是2019上半年的总结，也是大二第二学期的学期总结。</p><a id="more"></a><h1 id="过去做了什么事情"><a href="#过去做了什么事情" class="headerlink" title="过去做了什么事情"></a>过去做了什么事情</h1><p>翻了一下qq空间动态以及别的一些痕迹，大概了解了一下我自己在2019年上半年干了些什么事情。</p><h2 id="输出平台"><a href="#输出平台" class="headerlink" title="输出平台"></a>输出平台</h2><p>上半年我主要在三个平台上输出一些东西：</p><ul><li>个人博客</li><li>bilibili</li><li>github</li></ul><h3 id="个人博客"><a href="#个人博客" class="headerlink" title="个人博客"></a>个人博客</h3><p>2019年2月6日，我在github上部署了<a href="https://hanechiri.github.io/" target="_blank" rel="noopener">我的个人博客</a>，并记录下了<a href="https://hanechiri.github.io/post/hexo_deploy_log/" target="_blank" rel="noopener">过程</a>（不算教程啦，更像是日记）</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190810204859.png" alt=""></p><p>到今天（2019年8月10日）为止，已经有29篇博文了。标签中占的比例比较大的是“python”和“spider”，2月份之后除了5月没有python文之外，其他月份都有至少2篇的博文关于python，因为觉得python写起来很舒服，比起c++和java的严格语法，python更容易写出东西来。自从2月份的寒假开始学习python爬虫之后，就时不时地更新相关的博文。</p><p>有了个人博客之后，我就彻底抛弃了原本的微信公众号。</p><p>在个人博客里面写东西有一种更加快乐的感觉。一步一步了解Hexo博客搭建的原理，一步一步改进博客功能，添加右下角的live2D人物，安装图片插件，添加基于leancloud的评论和阅读次数统计……这些让我有种掌控感。</p><h3 id="Hexo日记本"><a href="#Hexo日记本" class="headerlink" title="Hexo日记本"></a>Hexo日记本</h3><p>搭建了Hexo个人博客之后，又新建了一个博客作为日记本，把以前写的电子版日记存在里面，不部署到服务器，只留存在我电脑上，主要是想利用它好看的渲染效果和各种插件来丰富日记本。</p><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p>下图是我目前的github资料页：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190810205614.png" alt=""></p><p>从contributions日历可以看到，2018年还只是零星的几个commits，2019年的commits就增加了好多。</p><p>主要有两个原因。</p><p>第一个原因，是我部署了个人博客之后，写博客以及频繁调试博客提供了commits数。不过这只是次要原因。</p><p>第二个原因，是我真正开始把git当成生产工具了，这才是主要原因。</p><p>我大概是在2018年4月15日创建了github账号，2018年下半年的时间并没有去管github账号，因为那时候还不知道怎么用github，觉得得把git命令行给用熟了才能去玩这个网站。但是这就形成了一个不算太高但是我不想跨的门槛，而且我觉得平时我也用不到这么高级的东西，于是就没去学了。</p><p>一次偶然的机会，我看到了社团里面一个大佬——<a href="https://lollipopnougat.github.io/Crepeblog/" target="_blank" rel="noopener">封掣</a>是如何使用github-desktop（github官方的GUI桌面软件）来管理自己的代码，终于明白，管它那么多高大上的命令干什么，一个工具，能够解决人的问题就行。于是我开始用起有GUI的git软件了（现在用的就是github-desktop），把它当成存档软件，写课设的时候，写完一个功能就存一个档，写错了就回档。</p><h3 id="bilibili"><a href="#bilibili" class="headerlink" title="bilibili"></a>bilibili</h3><p>从创作中心的日历来看，今天是我成为up主的464天。2018年5月4日，我投稿了第一个视频。</p><p>到今天，已经陆陆续续投稿了26个视频。主要的主题是分享代码思路。</p><p>然而总是有人只要代码不要思路，这让我很是苦恼，详情可以看<a href="https://www.bilibili.com/read/cv2926690" target="_blank" rel="noopener">这个</a></p><p>现在前往代码分享群的通道基本已经关闭，只有少数几个视频下面的群号我没有删除，避免伸手党直接进来。一到期末，需要课程设计的时候，我的视频播放量就会增加，我算是明白怎么回事了。</p><p>想要解决“代码分享和代码抄袭的矛盾”，我有一个初步的想法，就是在视频里面先介绍思路，声明视频主要分享思路，不提供源代码，如果是伸手党，估计就直接走了找别的代码，同时也能够让真正想学的人学到思路。</p><p>不过还有一个问题，我做的视频的主题注定我每个视频的观众很少有重叠。我并不像教程up主一样，针对某个固定主题来出视频，而是更加注重于巩固自己学到的知识，分享只是顺带的。这也不是太大的问题。</p><h2 id="组织团队"><a href="#组织团队" class="headerlink" title="组织团队"></a>组织团队</h2><h3 id="网络安全协会"><a href="#网络安全协会" class="headerlink" title="网络安全协会"></a>网络安全协会</h3><p>虽然加了这个社团，但是感觉自己很难进入网络安全这个领域。</p><h3 id="易班工作站"><a href="#易班工作站" class="headerlink" title="易班工作站"></a>易班工作站</h3><p>大概2019年3月的时候，偶然看到易班工作站的群里面发了一个通知，说是辅导员有个技术讲座。当时我只是一个普普通通的社团成员，想去就去，那时候正好没什么事情，就去了。没想到会对我影响这么大。</p><p>我当时只是过去凑个热闹，没想到这是工作站的技术组的又一次纳新。</p><hr><p>以前的技术组纳新我也有去，那时候是大一，啥也不懂，连html都不会，然后就让我们自学来制作一个留言板。</p><p>自学诶！</p><p>刚开始自学html的时候，感觉这个难度我能hold住，没问题，可以进去！</p><p>但是学到后面我连需要用什么东西，需要学什么都不知道，很长一段时间没有进展，想放弃了。可能是因为很多同学也是如此，辅导员无奈之下，给大家简单演示了一下怎么用easyPHP来写，然后又放着我们去自学。</p><p>其实有问题确实可以问他，但是我对和辅导员打交道这件事情有些畏惧。一个自闭的人。</p><p>然后越学越自闭，最后放弃。</p><p>和我一起参加纳新的老朱则坚持了下来，加入了技术组。挺羡慕的，也明白自己不够强大，不够努力。</p><hr><p>这次我是大二，在课堂上和课外学了更多的东西，以前没写成功的留言板也写了一下，以及一个注册登录系统，录了个视频发b站（<a href="https://www.bilibili.com/video/av30714748/" target="_blank" rel="noopener">传送门</a>）。</p><p>成功完成写一个爬虫的挑战，也因此入了python的坑。</p><h3 id="打卡学习群"><a href="#打卡学习群" class="headerlink" title="打卡学习群"></a>打卡学习群</h3><p>2019年4月26日，一时心血来潮，建了一个学习群。</p><p>我给这个群制定了一些规则，比如：每月最多邀请一人进群，每周做个周总结，可以申请群相册来打卡等。</p><p>现在过去差不多四个月了，从刚开始的三个人到现在的五个人。还是有按照我的预期来发展的。</p><p>我认为能顺利发展的主要因素是邀请制进群，人多了就不好管了，人少就容易遵守规则。</p><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><p>在2018年6月30日，也就是大一的暑假快要开始的时候，我在QQ空间建了一个打卡相册，名字叫做《到6月30日要有300张》，一年365天，运动300天。</p><p>到2019年6月30日结算时，共有218张截图打卡，虽然没有达成目标，但是进度也差不多三分之二，比较满意。</p><p>开学之后打算开始新的打卡。</p><h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><h2 id="兴趣爱好"><a href="#兴趣爱好" class="headerlink" title="兴趣爱好"></a>兴趣爱好</h2><h3 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h3><p>在我建的打卡学习群里，有人建了一个写小说的打卡相册，这让我又开始想要写小说了。</p><p>我曾经写过网络小说，在起点中文网上面发过，但是写的很烂，挤出二十几章就没了。</p><p>不过他把我的兴趣又勾起来了。不要像以前那样，一打算写就把全部的精力都耗费在上面，而是合理分配时间精力</p><h3 id="板绘"><a href="#板绘" class="headerlink" title="板绘"></a>板绘</h3><p>2019年7月29日，我网购的数位板到了。这是我第一块数位板。</p><p>上一次想要买数位板时，我对自己说，得把手绘的习惯稳定下来之后才准买，不能买了不用。</p><p>我以前有一定的手绘基础，一般是临摹，偶尔会画几幅原创的画（比较丑啦）。很久没画，没时间，也没有那份兴趣。</p><p>打卡群里面唯一的妹子会板绘，有一次在上课之前我坐她旁边看到她在用数位板画画，是个大触。她在群里也新建了一个打卡相册，是一个画画相册。</p><p>这一次是快要过20岁生日了，我想买一个自己真正喜欢的生日礼物。犹豫了很久，终于下定决心买了。在知乎上查推荐品牌型号，在b站上看推荐视频，买到了一块两百多的数位板。</p><p>买完之后我还是很担心自己会不会把它扔在一边吃灰，安慰自己说老弟的高达和假面骑士模型比我这个贵多了，我买个这个来玩没啥的。</p><p>没想到板绘真的挺好玩的，到货当天我就临摹了一个menhera酱表情图，录了一个视频发在b站，挺有成就感的。</p><p>今天（2019年8月11日）晚上还打算试试直播临摹，昨天探过绘画直播间了，也是有人看这种的。</p><h2 id="人际交往"><a href="#人际交往" class="headerlink" title="人际交往"></a>人际交往</h2><p>这个暑假在驾校学科目二，多了很多和别人交流的机会，和陌生人聊天也没有那么困难了。</p><h2 id="健康状况"><a href="#健康状况" class="headerlink" title="健康状况"></a>健康状况</h2><p>健康状况不容乐观。</p><p>现在喝任何一种饮料都和喝咖啡一样兴奋，抵抗力越来越差，肚子也越来越胖了，成为了一个肥宅。</p><p>所适应的刺激水平越来越高，控制不住自己玩手机，玩电脑（主要是看b站）。</p>]]></content>
      
      
      <categories>
          
          <category> 日志随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬取微信公众号文章1获取文章链接</title>
      <link href="/posts/wechat_offical_account_spider_1_get_article_urls/"/>
      <url>/posts/wechat_offical_account_spider_1_get_article_urls/</url>
      
        <content type="html"><![CDATA[<p>爬取微信公众号的文章，之前一直觉得应该很难，我搞不定，但是尝试了一下发现，其实这和之前爬取的网站没有太大的区别。</p><p>本文记录了2019年8月7日爬取某一特定微信公众号的所有文章链接的方式，读者请注意时效性。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>需要一个可登录的微信公众号。本文采用的方法是使用微信公众号内部的搜索来搜索文章。</li><li>由于登录部分很复杂，我还没搞懂，本文直接手动获取cookies来登录。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/wnma3mz/article/details/78570580" target="_blank" rel="noopener">记一次微信公众号爬虫的经历-CSDN</a></p><h1 id="如何手动获取"><a href="#如何手动获取" class="headerlink" title="如何手动获取"></a>如何手动获取</h1><p>在登录后的微信公众平台的【素材管理】页面，点击【新建图文素材】，在新出现的编辑页面内，找到用于插入别的文章引用的，【超链接】图标。接着就会出现下图的窗口，输入需要获取的公众号查找即可。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190807143111.png" alt=""></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>打开F12开发者工具，搜索到公众号之后，查看Ajax请求</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190807143627.png" alt=""></p><p>换页的时候会再次发出Ajax请求，多换几页，查看它们的参数的规律。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190807144157.png" alt=""></p><p>通过观察，知道了接口是：</p><pre><code>https://mp.weixin.qq.com/cgi-bin/appmsg</code></pre><p>在访问这个接口时，需要在后面带上参数：</p><pre class="line-numbers language-python"><code class="language-python">    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'token'</span><span class="token punctuation">:</span><span class="token string">'271444813'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#在同一次登录不变，在首页源代码里面可以获取</span>        <span class="token string">'lang'</span><span class="token punctuation">:</span><span class="token string">'zh_CN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'f'</span><span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'ajax'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'random'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 随机数</span>        <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">'list_ex'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'begin'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 代表页数，每翻一页就会+5，但是每一页的文章数不一定为5篇</span>        <span class="token string">'count'</span><span class="token punctuation">:</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 应该是每一次获取的文章篇数</span>        <span class="token string">'query'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'fakeid'</span><span class="token punctuation">:</span><span class="token string">'MzAwNjA3Nzg0MA=='</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 文章所在的公众号的id</span>        <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="获取步骤"><a href="#获取步骤" class="headerlink" title="获取步骤"></a>获取步骤</h1><ol><li>登录微信公众平台</li><li>手动在开发者工具中获取cookies字符串</li><li>带好参数访问Ajax接口，获取到所需要的json数据</li></ol><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">cookiejar_from_str</span><span class="token punctuation">(</span>cookies_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将cookies字符串转换为cookiejar    '''</span>    cookies<span class="token operator">=</span>dict<span class="token punctuation">(</span><span class="token punctuation">[</span>item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> item <span class="token keyword">in</span> cookies_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span>    cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">return</span> cookies<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># cookies字符串</span>    cookies_str<span class="token operator">=</span><span class="token triple-quoted-string string">'''openid2ticket_okSCe0vbk_v5067L-AuViT1wrkEg=ARU37unMfUwam3yNHXFcw5CMFvTHMvmBnjjS8A8=    '''</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里我手动截去了大部分cookies字符串，明白意思即可</span>    <span class="token comment" spellcheck="true"># headers</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.25 Safari/537.36 Core/1.70.3722.400 QQBrowser/10.5.3738.400'</span>    <span class="token punctuation">}</span>    cookies <span class="token operator">=</span> cookiejar_from_str<span class="token punctuation">(</span>cookies_str<span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'token'</span><span class="token punctuation">:</span><span class="token string">'271444813'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#在同一次登录不变，在首页源代码里面可以获取</span>        <span class="token string">'lang'</span><span class="token punctuation">:</span><span class="token string">'zh_CN'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'f'</span><span class="token punctuation">:</span><span class="token string">'json'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'ajax'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'random'</span><span class="token punctuation">:</span> str<span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 随机数</span>        <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">'list_ex'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'begin'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 代表页数，每翻一页就会+5，但是每一页的文章数不一定为5篇</span>        <span class="token string">'count'</span><span class="token punctuation">:</span><span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 应该是每一次获取的文章篇数</span>        <span class="token string">'query'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>        <span class="token string">'fakeid'</span><span class="token punctuation">:</span><span class="token string">'MzAwNjA3Nzg0MA=='</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 文章所在的公众号的id</span>        <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 不变</span>    <span class="token punctuation">}</span>    url<span class="token operator">=</span><span class="token string">'https://mp.weixin.qq.com/cgi-bin/appmsg'</span>    response_json <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> response_json<span class="token punctuation">[</span><span class="token string">"app_msg_list"</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取url</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'link'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易密码生成器</title>
      <link href="/posts/simple_password_generater/"/>
      <url>/posts/simple_password_generater/</url>
      
        <content type="html"><![CDATA[<p>为了管理自己平时各种各样的账号密码，我使用了一个加密了的xlsx文件来记录，同时使用了密码生成规则。为了方便生成密码，使用python写了一个小工具。</p><p><strong>由于代码比较简单，因此不做过多说明，仅做记录。</strong></p><a id="more"></a><h1 id="密码生成规则"><a href="#密码生成规则" class="headerlink" title="密码生成规则"></a>密码生成规则</h1><p>对于一些比较重要的账号，比如QQ，密码采用随机字符串，再记住，这样的字符串是没有规律的。</p><p>对于一些不太重要的账号，就使用对应的网站变量进行偏移。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> clipboard<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="生成随机密码"><a href="#生成随机密码" class="headerlink" title="生成随机密码"></a>生成随机密码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_random</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> alphabeta<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    生成指定长度的随机密码    '''</span>    length <span class="token operator">=</span> int<span class="token punctuation">(</span>length<span class="token punctuation">)</span>    <span class="token keyword">if</span> alphabeta <span class="token operator">==</span> None<span class="token punctuation">:</span>        alphabeta <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>  <span class="token comment" spellcheck="true"># 字母表</span>    password <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>        password <span class="token operator">+=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>alphabeta<span class="token punctuation">)</span>    <span class="token keyword">return</span> password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成偏移密码"><a href="#生成偏移密码" class="headerlink" title="生成偏移密码"></a>生成偏移密码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_offset</span><span class="token punctuation">(</span>raw_password<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> alphabeta<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将原始密码进行偏移    '''</span>    offset <span class="token operator">=</span> int<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>    <span class="token keyword">if</span> alphabeta <span class="token operator">==</span> None<span class="token punctuation">:</span>        alphabeta <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>  <span class="token comment" spellcheck="true"># 字母表</span>    password <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> character <span class="token keyword">in</span> raw_password<span class="token punctuation">:</span>        index <span class="token operator">=</span> alphabeta<span class="token punctuation">.</span>index<span class="token punctuation">(</span>character<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取原本的索引</span>        new_index <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token operator">+</span>offset<span class="token punctuation">)</span> <span class="token operator">%</span> len<span class="token punctuation">(</span>alphabeta<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取偏移后的索引</span>        password <span class="token operator">+=</span> alphabeta<span class="token punctuation">[</span>new_index<span class="token punctuation">]</span>    <span class="token keyword">return</span> password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q退出'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'random 生成随机密码'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'offset 生成偏移密码'</span><span class="token punctuation">)</span>    cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> cmd <span class="token operator">!=</span> <span class="token string">'q'</span> <span class="token operator">and</span> cmd <span class="token operator">!=</span> <span class="token string">'Q'</span><span class="token punctuation">:</span>        password <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">if</span> cmd <span class="token operator">==</span> <span class="token string">'random'</span><span class="token punctuation">:</span>            length <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入密码长度：'</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> generate_random<span class="token punctuation">(</span>length<span class="token punctuation">)</span>            clipboard<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>password<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码已复制到剪切板:\n'</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">elif</span> cmd <span class="token operator">==</span> <span class="token string">'offset'</span><span class="token punctuation">:</span>            raw_password <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入原始密码：'</span><span class="token punctuation">)</span>            offset <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入偏移量：'</span><span class="token punctuation">)</span>            password <span class="token operator">=</span> generate_offset<span class="token punctuation">(</span>raw_password<span class="token punctuation">,</span> offset<span class="token punctuation">)</span>            clipboard<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>password<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'密码已复制到剪切板:\n'</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入正确的指令'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'q退出'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'random 生成随机密码'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'offset 生成偏移密码'</span><span class="token punctuation">)</span>        cmd <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校信息门户模拟登录</title>
      <link href="/posts/portal_login/"/>
      <url>/posts/portal_login/</url>
      
        <content type="html"><![CDATA[<p>将登陆学校信息门户的部分专门封装成一个模块，需要的时候导入。</p><a id="more"></a><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://github.com/HaneChiri/CHD_portal_login" target="_blank" rel="noopener">本文代码的github链接</a></p><h1 id="获取登录所需表单数据"><a href="#获取登录所需表单数据" class="headerlink" title="获取登录所需表单数据"></a>获取登录所需表单数据</h1><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718144535.png" alt=""></p><p>从图中看到的，和在登录页面源代码中查找的，需要的表单数据如下：</p><ul><li>username：用户名，也就是信息门户账号</li><li>password：是经过加密之后的密码</li><li>lt：是一个每次请求都会变化的表单隐藏域值</li><li>dllt：固定表单隐藏域值</li><li>execution：固定表单隐藏域值</li><li>_eventId：固定表单隐藏域值</li><li>rmShown：固定表单隐藏域值</li></ul><p>除了需要表单数据之外，还需要在登录页面源代码中获取密钥，详情见：<a href="https://hanechiri.github.io/post/portal_login_encrypt/#more" target="_blank" rel="noopener">学校信息门户模拟登录之密码加密</a></p><p>使用<code>BeautifulSoup</code>来获取这些数据。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> portal_login<span class="token punctuation">.</span>encrypt <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">get_login_data</span><span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    长安大学登录表单数据解析    :param login_url: 登录页面的url    :return (登录信息字典,获取时得到的cookies)    '''</span>    username<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'input username:'</span><span class="token punctuation">)</span>    password<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'input password:'</span><span class="token punctuation">)</span>    username<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#去除头尾空格</span>    <span class="token comment" spellcheck="true">#获取登录所需表单数据</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>    html<span class="token operator">=</span>response<span class="token punctuation">.</span>text    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取密钥来加密密码</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'var\s*?pwdDefaultEncryptSalt\s*?=\s*?"(.*?)"'</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    password<span class="token operator">=</span>encrypt_aes<span class="token punctuation">(</span>password<span class="token punctuation">,</span>key<span class="token punctuation">)</span>    lt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    dllt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    _eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    login_data<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> username<span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> password<span class="token punctuation">,</span>        <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>        <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>        <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>        <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>        <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>login_data<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要注意的是，获取完数据之后，需要将response的cookies留下来，因为不同cookies对应的登录数据也不一样（比如说每次打开页面都不一样的密钥和lt）</p><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><h2 id="登录过程分析"><a href="#登录过程分析" class="headerlink" title="登录过程分析"></a>登录过程分析</h2><p>在登录页面输入账号密码，F12打开开发者工具，<code>Network</code>勾选<code>Preserve log</code>，点击登录，然后就会出现下图场景：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720115959.png" alt=""></p><p>找到从登陆页面出去的第一个响应，可以发现这个响应的状态码是302，代表“重定向”。在<code>Response Headers</code>里面可以找到<code>Location</code>这个键，它指示的是重定向的地址。</p><p>这个响应的含义大概是“服务器告诉浏览器带着给它的cookies去访问<code>Location</code>指示的url”</p><p>在刷出来的一大堆响应中继续寻找，找到下一个地址：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720121006.png" alt=""></p><p>从图中可以看到，目的地址已经是门户的主页url了，继续跳转：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720121212.png" alt=""></p><p>随便打开一个登陆才能查看的页面，查看它的cookie，发现浏览器带着这几个cookies来访问这个页面，也就是说，我们需要获取到这几个cookies，才能登录成功：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190720121401.png" alt=""></p><h2 id="处理跳转"><a href="#处理跳转" class="headerlink" title="处理跳转"></a>处理跳转</h2><p>默认情况下，requests的<code>post()</code>方法是得到跳转后最终页面的响应，也就是说，登录成功就返回门户主页的响应，登录失败就返回跳转之后回到的登录页面的响应。</p><p>需要设置一个参数，来阻止它进行跳转：</p><pre class="line-numbers language-python"><code class="language-python">response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是：</p><pre class="line-numbers language-python"><code class="language-python">allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不允许跳转，第一次请求得到什么响应就返回什么响应。</p><p>每一次跳转，我们需要做的工作如下：</p><ol><li>将现有的cookies与新获取的cookies合并</li><li>找到下一个重定向地址，带上cookies，再一次请求</li></ol><p>实现代码如下：</p><pre class="line-numbers language-python"><code class="language-python">response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">302</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果响应状态是“重定向”</span>    <span class="token comment" spellcheck="true">#合并新获取到的cookies</span>    cookies<span class="token operator">=</span>join_cookies<span class="token punctuation">(</span>cookies<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取下一个需要跳转的url</span>    next_station<span class="token operator">=</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Location'</span><span class="token punctuation">]</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>next_station<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>cookies<span class="token operator">=</span>join_cookies<span class="token punctuation">(</span>cookies<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>join_cookies()</code>的实现如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">join_cookies</span><span class="token punctuation">(</span>cookies1<span class="token punctuation">,</span>cookies2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将cookies1和cookies2合并    '''</span>    cookies<span class="token operator">=</span>dict<span class="token punctuation">(</span>cookies1<span class="token punctuation">,</span><span class="token operator">**</span>cookies2<span class="token punctuation">)</span>    cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>cookies<span class="token punctuation">)</span>    <span class="token keyword">return</span> cookies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="登录函数总览"><a href="#登录函数总览" class="headerlink" title="登录函数总览"></a>登录函数总览</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>check_url<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    登录到CHD信息门户    :param login_url: 登录页面的url    :param headers: 使用的headers    :param check_url: 用于检查的url，尝试请求此页面并核对是否能请求到    :return: 已登录的cookies    '''</span>    data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>get_login_data<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取登录数据</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">302</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果响应状态是“重定向”</span>        <span class="token comment" spellcheck="true">#合并新获取到的cookies</span>        cookies<span class="token operator">=</span>join_cookies<span class="token punctuation">(</span>cookies<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获取下一个需要跳转的url</span>        next_station<span class="token operator">=</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Location'</span><span class="token punctuation">]</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>next_station<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    cookies<span class="token operator">=</span>join_cookies<span class="token punctuation">(</span>cookies<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#登录检查</span>    <span class="token keyword">if</span> check_url <span class="token operator">!=</span> None<span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>check_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>url<span class="token operator">==</span>check_url<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cookies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学校信息门户模拟登录之密码加密</title>
      <link href="/posts/portal_login_encrypt/"/>
      <url>/posts/portal_login_encrypt/</url>
      
        <content type="html"><![CDATA[<p>以前写的爬虫无法登录到学校的信息门户上去了，因为门户的新JS代码将表单的密码先加密了一次，再将其与别的表单数据POST过去。使用的是AES加密的CBC模式。</p><p>本文前半部分是我的python组长<strong>雁横</strong>给组员们讲解的信息门户的密码加密思路，然后由我总结成文，后半部分是我自己写的加密代码实现，使用python的<code>PyCryptodome</code>库来进行加密。</p><a id="more"></a><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.cnblogs.com/mojita/p/5769350.html" target="_blank" rel="noopener">浏览器开发者工具基本使用教程-博客园</a></li><li><a href="https://blog.csdn.net/xc_zhou/article/details/80952155" target="_blank" rel="noopener">Python运行js代码</a></li><li><a href="https://www.cnblogs.com/xiao-apple36/p/8744408.html" target="_blank" rel="noopener">python加密与解密（大致介绍了加密解密算法）-博客园</a></li><li><a href="https://www.jianshu.com/p/4ba20afacce2" target="_blank" rel="noopener">常见加密方式与python实现-简书</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/cipher.html#" target="_blank" rel="noopener">PyCryptodome库的官方文档</a></li><li><a href="https://www.runoob.com/python/att-string-encode.html" target="_blank" rel="noopener">python encode方法-菜鸟教程</a></li></ul><hr><p><a href="https://github.com/HaneChiri/CHD_portal_login/blob/master/portal_login/encrypt.py" target="_blank" rel="noopener">本文代码的github链接</a></p><hr><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>登录之后查看原本提交表单的部分可以发现，密码由明文传输改成密文传输了。于是原本只需要POST账号和密码的明文就行，现在需要多经过一步——加密。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718144535.png" alt=""></p><p>起码咱们学校还是有考虑安全问题嘛！OVO</p><h1 id="分析加密过程"><a href="#分析加密过程" class="headerlink" title="分析加密过程"></a>分析加密过程</h1><p>因为登录到主页的时候已经是加密好的密码，所以加密工作应该是在登录页面就进行的。</p><p>所以回到<a href="http://ids.chd.edu.cn/authserver/login?service=http://portal.chd.edu.cn/index.portal" target="_blank" rel="noopener">登录页面</a>刷新一下，筛选javascript文件（因为js文件是用于动作的）</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718160057.png" alt=""></p><p>在这几个js文件中找找有没有线索，然后在其中一个js文件中找到了一个密码加密函数。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145319.png" alt=""></p><h2 id="encryptPassword"><a href="#encryptPassword" class="headerlink" title="encryptPassword()"></a>encryptPassword()</h2><p>传入密码，返回加密后的密码。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">encryptPassword</span><span class="token punctuation">(</span>pwd0<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> pwd1 <span class="token operator">=</span> <span class="token function">encryptAES</span><span class="token punctuation">(</span>pwd0<span class="token punctuation">,</span>pwdDefaultEncryptSalt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#casLoginForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"#passwordEncrypt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>pwd1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#casLoginForm"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">"#passwordEncrypt"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span>pwd0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>核心逻辑就一句。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> pwd1 <span class="token operator">=</span> <span class="token function">encryptAES</span><span class="token punctuation">(</span>pwd0<span class="token punctuation">,</span>pwdDefaultEncryptSalt<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>encryptPassword()</code>调用了一个名为<code>encryptAES()</code>的函数，参数<code>pwd0</code>可能是未加密的密码，<code>pwdDefaultEncryptSalt</code>可能是加密用的密钥。try-catch不用说了，就是错误处理。</p><p>encrypt是加密的意思，而AES是一种加密的方式。</p><p>而刚刚的js文件里面有一个文件就带着encrypt这个单词，点进去看，找到了下一个函数：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145605.png" alt=""></p><h2 id="encryptAES"><a href="#encryptAES" class="headerlink" title="encryptAES()"></a>encryptAES()</h2><p>传入密码明文和AES密钥，返回密文。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">encryptAES</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>aesKey<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加密</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>aesKey<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> encrypted <span class="token operator">=</span><span class="token function">getAesString</span><span class="token punctuation">(</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">+</span>data<span class="token punctuation">,</span>aesKey<span class="token punctuation">,</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//密文</span>    <span class="token keyword">return</span> encrypted<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码逻辑：</p><ul><li>如果没有给出密钥，那么就不加密直接返回明文；</li><li>如果给出了密钥，那么就调用<code>getAesString()</code>函数来获取密文</li><li>返回密文</li></ul><p>其中<code>randomString()</code>函数代码如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $aes_chars <span class="token operator">=</span> <span class="token string">'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'</span><span class="token punctuation">;</span><span class="token keyword">var</span> aes_chars_len <span class="token operator">=</span> $aes_chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">randomString</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> retStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        retStr <span class="token operator">+</span><span class="token operator">=</span> $aes_chars<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> aes_chars_len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> retStr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上图可以看到，<code>getAesString()</code>就在这个函数上方。</p><h2 id="getAesString"><a href="#getAesString" class="headerlink" title="getAesString()"></a>getAesString()</h2><p>传入明文、密钥、偏移量，返回密文。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//AES-128-CBC加密模式，key需要为16位，key和iv可以一样</span><span class="token keyword">function</span> <span class="token function">getAesString</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key0<span class="token punctuation">,</span>iv0<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//加密</span>    key0<span class="token operator">=</span>key0<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(^\s+)|(\s+$)/g</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//去除开头和结尾的空白</span>    <span class="token keyword">var</span> key  <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>key0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> iv   <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>iv0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> encrypted <span class="token operator">=</span>CryptoJS<span class="token punctuation">.</span>AES<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>        <span class="token punctuation">{</span>            iv<span class="token punctuation">:</span>iv<span class="token punctuation">,</span>            mode<span class="token punctuation">:</span>CryptoJS<span class="token punctuation">.</span>mode<span class="token punctuation">.</span>CBC<span class="token punctuation">,</span>            padding<span class="token punctuation">:</span>CryptoJS<span class="token punctuation">.</span>pad<span class="token punctuation">.</span>Pkcs7        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> encrypted<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回的是base64格式的密文</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个函数中调用了aes加密算法的函数来加密</p><h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><p>还差密钥<code>pwdDefaultEncryptSalt</code>，去js文件里面搜索：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145810.png" alt=""></p><p>图中可以看到，密钥的来源是<code>pwdEncryptArr[1]</code>变量，但是在js文件里面却找不到这个从哪里来的了。</p><p>不过去搜索登录页面源代码的时候发现它就写在页面里面。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190718145859.png" alt=""></p><p>得到了密钥：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> pwdDefaultEncryptSalt <span class="token operator">=</span> <span class="token string">"QgkxfHXdbwRHcvDI"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后来发现，这个密钥同样每次都会变化，可以在获取表单变化的隐藏域值的时候顺便获取了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>信息门户加密算法是：AES-128-CBC加密模式，key需要为16位，key和iv可以一样（从注释里面得到的）</p><ul><li>密文data是长度为64的随机字符串与登录密码连接。</li><li>密钥key就放在登录页面源码内，每次都会变化，需要动态获取。</li><li>偏移量iv是长度为16的随机字符串。</li></ul><p>现在知道了它的加密算法以及密钥，我们在模拟登录的时候把我们的密码用同样的方式加密，向以前那样发送就可以登录了。</p><p>有两种解决方案：</p><ol><li>直接在python里面运行复制来的js代码。参考：<a href="https://blog.csdn.net/xc_zhou/article/details/80952155" target="_blank" rel="noopener">Python运行js代码</a></li><li>使用python进行加密</li></ol><h1 id="加密python代码实现"><a href="#加密python代码实现" class="headerlink" title="加密python代码实现"></a>加密python代码实现</h1><h2 id="AES简介"><a href="#AES简介" class="headerlink" title="AES简介"></a>AES简介</h2><p>AES（Advanced Encryption Standard）（高级加密标准），用于代替原本的DES（Data Encryption Standard）</p><blockquote><p>2006年，高级加密标准已然成为<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=72260379&ss_c=ssc.citiao.link" target="_blank" rel="noopener">对称密钥</a>加密中最流行的算法之一。——搜狗百科</p></blockquote><p>AES算法将明文分为长度相等的若干组，每次加密一组数据。</p><p>分组长度固定为128位（16字节），密钥长度则可以是128，192或256比特（16、24和32字节）。</p><p>我遇到的加密问题需要的是128位的密钥。</p><h2 id="PyCryptodome库"><a href="#PyCryptodome库" class="headerlink" title="PyCryptodome库"></a>PyCryptodome库</h2><p>这个库是PyCrypto库（已经停止更新）的延续。</p><p><a href="https://www.pycryptodome.org/en/latest/src/cipher/cipher.html#" target="_blank" rel="noopener">PyCryptodome库的官方文档</a></p><p>安装方式（windows）：</p><pre class="line-numbers language-shell"><code class="language-shell">pip install pycryptodomex<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>导入方式：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> Cryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h2><p>在页面源码里面密钥的格式是：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> pwdDefaultEncryptSalt <span class="token operator">=</span> <span class="token string">"QgkxfHXdbwRHcvDI"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用正则表达式来解析：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_encrypt_salt</span><span class="token punctuation">(</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取密钥    :param login_url:登录页面的url    :return: (密钥,密钥对应的cookies)    '''</span>    response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'var\s*?pwdDefaultEncryptSalt\s*?=\s*?"(.*?)"'</span><span class="token punctuation">)</span>    pwdDefaultEncryptSalt <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>pwdDefaultEncryptSalt<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取初始化向量"><a href="#获取初始化向量" class="headerlink" title="获取初始化向量"></a>获取初始化向量</h2><p>iv是初始化向量，也称作偏移量。</p><p>在上面的分析中，传给加密函数的iv是一个随机字符串：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> encrypted <span class="token operator">=</span><span class="token function">getAesString</span><span class="token punctuation">(</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">+</span>data<span class="token punctuation">,</span>aesKey<span class="token punctuation">,</span><span class="token function">randomString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//密文</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在用python来实现这个<code>randomString()</code></p><h3 id="randomString-的python实现"><a href="#randomString-的python实现" class="headerlink" title="randomString()的python实现"></a>randomString()的python实现</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">random_string</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取随机字符串    :param length:随机字符串长度    '''</span>    ret_string<span class="token operator">=</span><span class="token string">''</span>    aes_chars <span class="token operator">=</span> <span class="token string">'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret_string<span class="token operator">+=</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>aes_chars<span class="token punctuation">)</span>    <span class="token keyword">return</span> ret_string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那一串用于随机的字符串是我从js文件的注释里面复制下来的，这个串并没有覆盖全部的字母和数字，为了防止意外，直接使用它的。</p><h2 id="getAesString-的python实现"><a href="#getAesString-的python实现" class="headerlink" title="getAesString()的python实现"></a>getAesString()的python实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">from</span> Cryptodome<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token comment" spellcheck="true">#用于对齐</span><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">get_aes_string</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>iv<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    用AES-CBC方式加密字符串    :param data: 需要加密的字符串    :param key: 密钥    :param iv: 偏移量    :return: base64格式的加密字符串    '''</span>    <span class="token comment" spellcheck="true">#预处理字符串</span>    data<span class="token operator">=</span>str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    data<span class="token operator">=</span>pad<span class="token punctuation">(</span>data<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>block_size<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将明文对齐</span>    <span class="token comment" spellcheck="true">#预处理密钥和偏移量</span>    key<span class="token operator">=</span>str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    iv<span class="token operator">=</span>str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>iv<span class="token punctuation">)</span>    cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#初始化加密器</span>    cipher_text<span class="token operator">=</span>cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加密</span>    <span class="token comment" spellcheck="true">#返回的是base64格式的密文</span>    cipher_b64<span class="token operator">=</span>str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher_text<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> cipher_b64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h3><p>首先，先将明文对齐，因为AES加密是分组加密，所以明文的长度需要是组长度的倍数。</p><p>有两种方式</p><ol><li><code>Cryptodome.Util.Padding</code>中的pad函数就可以实现对齐，就是我采用的办法。</li><li><a href="https://github.com/hfldqwe/encrypt/blob/master/encrypt/aes_cbc.py" target="_blank" rel="noopener">组长雁横的代码</a>是这样实现对齐的：</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_to_16</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        value <span class="token operator">+=</span> <span class="token string">'\0'</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 返回bytes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>js代码里面在加密之前，对数据做了编码处理：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> key  <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>key0<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> iv   <span class="token operator">=</span> CryptoJS<span class="token punctuation">.</span>enc<span class="token punctuation">.</span>Utf8<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>iv0<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>因此也顺便处理一下。</p><p><a href="https://www.runoob.com/python/att-string-encode.html" target="_blank" rel="noopener">python encode方法</a></p><blockquote><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>Python encode() 方法以 <em>encoding</em> 指定的编码格式编码字符串。errors参数可以指定不同的错误处理方案。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>encode()方法语法：</p><pre class="line-numbers language-python"><code class="language-python">str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'UTF-8'</span><span class="token punctuation">,</span>errors<span class="token operator">=</span><span class="token string">'strict'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="encryptAES-的python实现"><a href="#encryptAES-的python实现" class="headerlink" title="encryptAES()的python实现"></a>encryptAES()的python实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encrypt_aes</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    进行AES加密    :param data: 需要加密的字符串    :param key: 密钥    :return: 如果key存在，则返回密文，否则返回明文    '''</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">else</span><span class="token punctuation">:</span>        data<span class="token operator">=</span>random_string<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">+</span>data        iv<span class="token operator">=</span>random_string<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#偏移量</span>        encrypted <span class="token operator">=</span>get_aes_string<span class="token punctuation">(</span>data<span class="token punctuation">,</span>key<span class="token punctuation">,</span>iv<span class="token punctuation">)</span>        <span class="token keyword">return</span> encrypted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="encryptPassword-的python实现"><a href="#encryptPassword-的python实现" class="headerlink" title="encryptPassword()的python实现"></a>encryptPassword()的python实现</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encrypt_password</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    加密密码    :param password: 需要加密的密码    :param login_url:登录页面的url    :return: (加密后的密码,对应的cookies)    '''</span>    key<span class="token punctuation">,</span>cookies<span class="token operator">=</span>get_encrypt_salt<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>    password<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#去除头尾空格</span>    encrypted<span class="token operator">=</span>encrypt_aes<span class="token punctuation">(</span>password<span class="token punctuation">,</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span>cookies<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就完成了</p><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    login_url<span class="token operator">=</span><span class="token string">'http://ids.chd.edu.cn/authserver/login?service=http%3A%2F%2Fportal.chd.edu.cn%2F'</span>    password<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'password:'</span><span class="token punctuation">)</span>    password<span class="token punctuation">,</span>cookies<span class="token operator">=</span>encrypt_password<span class="token punctuation">(</span>password<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'encrypted password:'</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="有效性检验"><a href="#有效性检验" class="headerlink" title="有效性检验"></a>有效性检验</h1><p>可以使用浏览器开发者工具的控制台，调用js函数，传入同样的参数，看是否得到相同的结果。</p><p>测试结果如图：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/QQ%E5%9B%BE%E7%89%8720190718160740.png" alt=""><br><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/QQ%E5%9B%BE%E7%89%8720190718160734.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> 密码算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python读取ini文件失败的原因</title>
      <link href="/posts/python_read_ini_No_section/"/>
      <url>/posts/python_read_ini_No_section/</url>
      
        <content type="html"><![CDATA[<p>尝试使用python的<code>configparser</code>来读取<code>ini</code>配置文件，但是遇到了<code>No Section</code>的错误。</p><p>最终发现其实是路径出了问题。</p><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>初始代码简化之后是：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> configparser <span class="token keyword">import</span> ConfigParser<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    config<span class="token operator">=</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建配置对象</span>    config<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token string">'test.ini'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#读取配置文件</span>    result<span class="token operator">=</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span>section<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>option<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#读取test下的name</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同目录的<code>test.ini</code>的内容如下：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[test]</span><span class="token constant">name</span> <span class="token attr-value"><span class="token punctuation">=</span> tom</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是运行出现了<code>configparser.NoSectionError: No section: &#39;test&#39;</code>的错误</p><h1 id="原因探索"><a href="#原因探索" class="headerlink" title="原因探索"></a>原因探索</h1><p>经过单步调试后发现并没有读取到文件的内容，猜测可能是没有找到文件。</p><p>以前在import自定义模块的时候遇到过类似的问题，当时的解决方法是把当前工作路径设置为正在执行的文件所在的路径。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ol><li>使用绝对路径</li><li>将当前工作路径改为当前文件路径，再使用相对路径</li></ol><p>第二种方法的代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> configparser <span class="token keyword">import</span> ConfigParser<span class="token keyword">import</span> os<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    curpath<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>    filename<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>curpath<span class="token punctuation">,</span><span class="token string">"test.ini"</span><span class="token punctuation">)</span>    config<span class="token operator">=</span>ConfigParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建配置对象</span>    config<span class="token punctuation">.</span>read<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#读取配置文件</span>    result<span class="token operator">=</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span>section<span class="token operator">=</span><span class="token string">'test'</span><span class="token punctuation">,</span>option<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#读取test下的name</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel实现周总结签到积分制</title>
      <link href="/posts/excel_weekly_sign/"/>
      <url>/posts/excel_weekly_sign/</url>
      
        <content type="html"><![CDATA[<p>我在自己一个学习群里设定了一个周总结制度，这篇博客记录一下如何使用excel函数来实现计算打卡相册的积分。<strong>这里其实我用的是wps表格，但是函数一样，所以我就分类在excel里面。</strong></p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>每周日，每个人在群聊天发一个周总结，内容是自己这周学习了什么，没有限制，只是给大家一个自我反省的机会。</p><p>如果没有可以写的东西，那么也在群里面报备，方式为在群聊天中说：“本周无总结”或者别的能表明这一事实的话。别有压力，只是回复一句话的功夫。</p><p>如果没有报备也没有在截止之前发周总结，将会被艾特提醒。可以在下一周总结之前补。</p><p>为了方便描述，下文把发送周总结称为“签到”</p><h1 id="积分规则"><a href="#积分规则" class="headerlink" title="积分规则"></a>积分规则</h1><ul><li>如果本周签到了，积分=原本积分+正调整参数</li><li>如果未签到，积分=原本积分+负调整参数</li><li>如果补签到，积分=原本积分</li></ul><h1 id="签到登记表样例"><a href="#签到登记表样例" class="headerlink" title="签到登记表样例"></a>签到登记表样例</h1><table><thead><tr><th>成员ID</th><th>昵称</th><th>正常签到次数</th><th>周总结积分</th><th>week1</th><th>week2</th><th>week3</th><th>week4</th><th>week5</th><th>week6</th></tr></thead><tbody><tr><td>1</td><td>憧憬少</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td>听星缘</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td>简白</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>HUST</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>咸鱼米</td><td>1</td><td>1</td><td>1</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>1表示已签到，-1表示未签到，补签改为0</p><h1 id="编写公式"><a href="#编写公式" class="headerlink" title="编写公式"></a>编写公式</h1><h2 id="正常签到次数"><a href="#正常签到次数" class="headerlink" title="正常签到次数"></a>正常签到次数</h2><p>即计算1出现的次数（补签不算），如果用之前的<code>SUMIF</code>函数就是：</p><pre><code>=SUMIF(对应成员的签到区域,1)</code></pre><p>但是我又查到一个更适合的函数：<code>COUNTIF</code></p><p>参数和<code>SUMIF</code>差不多含义，写成公式也是一样</p><pre><code>=COUNTIF(对应成员的签到区域,1)</code></pre><p>但是前者只能计算1出现的次数，如果计算-1出现的次数就不行了。</p><h2 id="周总结积分"><a href="#周总结积分" class="headerlink" title="周总结积分"></a>周总结积分</h2><p>比较简单，不赘述了。</p><pre><code>=COUNTIF(E2:ZZ2,1)*积分规则!$C$3+COUNTIF(E2:ZZ2,-1)*积分规则!$D$3*(-1)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>excel实现打卡相册积分制</title>
      <link href="/posts/excel_clock_in_album/"/>
      <url>/posts/excel_clock_in_album/</url>
      
        <content type="html"><![CDATA[<p>我在自己一个学习群里设定了一个打卡相册制度，这篇博客记录一下如何使用sumif函数来实现计算打卡相册的积分。<strong>这里其实我用的是wps表格，但是函数一样，所以我就分类在excel里面。</strong></p><a id="more"></a><h1 id="规则说明"><a href="#规则说明" class="headerlink" title="规则说明"></a>规则说明</h1><p>群员可以申请建立打卡相册，需要自己下载群文件中的登记表填写相关信息，然后就可以创建群相册，在群相册描述里面写上打卡内容。</p><h2 id="相册状态"><a href="#相册状态" class="headerlink" title="相册状态"></a>相册状态</h2><ul><li>相册状态：正在进行、放弃、失败、归档</li><li>如果连续三天未打卡，管理员就删除相册，并在登记表内将相册状态设置为“失败”。</li><li>对于有期限的相册，比如打卡目标是“两周读完《xxx》”，那么在结束日期时，可以将其状态设置为“归档”。相册资源回收（删除或改作他用），避免资源闲置。若持续时间大于等于一百天，则可以选择保留相册。（可以给其他群员作榜样）</li><li>对于没有期限的相册，比如“每天背单词”，那么在创建时间满三十天后就可以选择“归档”（三十天应该够养成一个小习惯了）</li><li>相册删除后，相册记录还会保留在登记表里面</li></ul><h2 id="积分计算"><a href="#积分计算" class="headerlink" title="积分计算"></a>积分计算</h2><ul><li><p>创建相册不需要积分，但是“放弃”或“失败”每个会扣除5积分</p></li><li><p>一个成员的打卡相册总积分=他所有相册的积分之和</p></li><li><p>单个相册的积分：</p><ul><li>若相册状态是“正在进行”，则<code>积分=持续天数1*正调整参数=正调整参数*（当前日期-创建日期）</code></li><li>若相册状态是“归档”，则<code>积分=正调整参数*持续天数2=正调整参数*（结束日期-创建日期）</code>,目前参数为0.5</li><li>若相册状态是“放弃”或“失败”，则<code>积分=负调整参数</code>，也就是扣除积分，目前参数为-5，即扣除5积分</li></ul></li></ul><h2 id="相册字段"><a href="#相册字段" class="headerlink" title="相册字段"></a>相册字段</h2><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>相册ID</td><td>这个手动赋值为：最大的相册ID+1</td></tr><tr><td>申请人昵称</td><td>可以写真名或者自己的群名片昵称，只要大家能通过这个知道是谁即可</td></tr><tr><td>相册名称</td><td>无特别要求，不过最好写明昵称和目的，例如：憧憬少的英语流利说APP打卡</td></tr><tr><td>相册目标描述</td><td>描述你要通过这个打卡相册达到的目标，例如：每天读口语10分钟</td></tr><tr><td>如何判断目标完成</td><td>上传到打卡相册的图片应当满足怎样的要求，例如：每天在相册内上传一张可以表明读了10分钟的截图</td></tr><tr><td>相册状态</td><td>目前用到的状态：正在进行，放弃，失败，归档（仅留表中记录，相册本身删除，若打卡满100天可选择保留）</td></tr><tr><td>创建日期</td><td>用于计算持续天数的字段</td></tr><tr><td>结束日期</td><td>归档日期，或有期相册结束日期。</td></tr><tr><td>持续天数</td><td>除了正在进行状态，其他状态都停止增加持续天数</td></tr><tr><td>相册类型</td><td>目前的类型：无期（未规定期限，满30天可以选择归档），有期（规定了完成期限，若期限内完成则归档，未完成则为失败）</td></tr><tr><td>打卡相册积分</td><td>利用表格的自动填充功能复制上一个相册的公式</td></tr></tbody></table><h1 id="编写公式"><a href="#编写公式" class="headerlink" title="编写公式"></a>编写公式</h1><h2 id="计算相册持续天数"><a href="#计算相册持续天数" class="headerlink" title="计算相册持续天数"></a>计算相册持续天数</h2><p>相册持续天数有两种情况，一种是“正在进行”，一种是其他状态，只有“正在进行”的打卡相册会继续计算天数。</p><p>也就是说：</p><ul><li>“正在进行”的相册的<code>持续天数=今天日期-创建日期</code></li><li>其他状态相册的<code>持续天数=结束日期-创建日期</code></li></ul><p>因此需要一个IF判断。</p><p>IF函数的语法是：</p><pre><code>IF(条件，条件为真时的返回值，条件为假时的返回值)</code></pre><p>公式如下（中文处替换为对应的单元格）</p><pre><code>=IF(相册状态=&quot;正在进行&quot;,TODAY()-创建日期,结束日期-创建日期)</code></pre><h2 id="计算打卡相册积分"><a href="#计算打卡相册积分" class="headerlink" title="计算打卡相册积分"></a>计算打卡相册积分</h2><p>根据上述规则，我们需要用IF函数判断一下相册状态。</p><p>这里还用到了一个函数<code>OR</code></p><p>excel里面的与或非不是用逻辑运算符的，而是用函数。</p><p>公式如下：</p><pre><code>=IF(相册状态=&quot;正在进行&quot;,1,0)*(积分规则!$C$2)*持续天数+IF(相册状态=&quot;归档&quot;,1,0)*(积分规则!$C$2)*持续天数+IF(OR(相册状态=&quot;失败&quot;,相册状态=&quot;放弃&quot;),1,0)*(积分规则!$D$2)*(-1)</code></pre><p>其中，<code>积分规则!$C$2</code>代表的是我在另一个名为“积分规则”的表中的C2格中设置的一个正调整参数。<code>积分规则!$D$2</code>同理。</p><h2 id="计算个人总积分"><a href="#计算个人总积分" class="headerlink" title="计算个人总积分"></a>计算个人总积分</h2><p>一个成员可以有多个相册，因此需要将他所有的相册的积分相加。</p><p>相加可以使用<code>SUM</code>函数，来将已知区域求和。</p><p>例如现在的情况是这样的：</p><table><thead><tr><th>申请人昵称</th><th>相册名称</th><th>打卡相册积分</th></tr></thead><tbody><tr><td>憧憬少</td><td>憧憬少的英语流利说打卡</td><td>18</td></tr><tr><td>简白</td><td>简白的英语打卡</td><td>12</td></tr><tr><td>咸鱼米</td><td>米米的啃书打卡</td><td>12</td></tr><tr><td>咸鱼米</td><td>米米的每日练习</td><td>5</td></tr><tr><td>H.U.S.T.</td><td>H.U.S.T.的小说练笔</td><td>3</td></tr></tbody></table><p>米米有两个相册，她的积分就是12+5=17，相加的格子不确定，要如何用公式计算她的积分呢？</p><p>我查到了<code>SUMIF</code>这个函数，也就是“条件相加”，格式如下：</p><pre><code>SUMIF(条件区域,求和条件,[实际求和区域])</code></pre><p><a href="https://support.office.com/zh-cn/article/SUMIF-%E5%87%BD%E6%95%B0-169b8c99-c05c-4483-a712-1697a653039b" target="_blank" rel="noopener">它的官方文档链接</a></p><ul><li><p>条件区域：也就是要按条件计算的单元格区域。不太好理解，我的理解是，这个函数对于“条件区域”内符合条件的单元格进行求和。</p></li><li><p>求和条件：定义进行求和的单元格需要满足的条件。例如：32、”&gt;32”、B5、”32”、”苹果” 或 TODAY ()。<strong>任何文本条件或任何含有逻辑或数学符号的条件都必须使用双引号 (“) 括起来。 如果条件为数字，则无需使用双引号。</strong></p></li><li><p>实际求和区域：如果省略，则将条件区域当作实际求和区域。</p></li></ul><p>在这里，条件区域是“申请人昵称”，实际求和区域是“打卡相册积分”，求和条件是要计算积分的成员昵称。这样我们就可以将某个成员的所有相册数据所在的那几行给筛选出来，再将这几行的打卡相册积分相加，得到这个成员的总积分了。</p><p>某成员打卡相册总积分计算公式：</p><pre><code>=SUMIF(打卡相册登记表!B:B,某成员昵称,打卡相册登记表!K:K)</code></pre><p>这里的<code>B:B</code>和<code>K:K</code>就分别对应了“申请人昵称”和“打卡相册积分”这两列。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WIN10共享文件夹</title>
      <link href="/posts/win10_share_folder/"/>
      <url>/posts/win10_share_folder/</url>
      
        <content type="html"><![CDATA[<p>这是我以前写的第一篇博客的补档，由于图片太多于是就发在了CSDN，现在不愁图片的问题了，于是就在整理电脑文件时把这篇博客在个人博客这边发一下。</p><a id="more"></a><hr><p>这是在CSDN的第一篇博客，也是我第一篇正式的博客。</p><p>我们的linux老师上课时用到了共享文件夹，于是我就百度学习了一下。</p><p>来写一下刚刚学到的共享文件夹的方法。</p><hr><h2 id="共享方法"><a href="#共享方法" class="headerlink" title="共享方法"></a>共享方法</h2><ol><li>首先右键你想要共享的文件夹，【共享】-&gt;【特定用户】<br><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181216235630691_31597.png" alt=""></li></ol><p>2.在选择框里面选择Everyone，接着点击旁边的【添加】</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181216235804941_8233.png" alt=""></p><p>3.调整权限后，点击【共享】即可</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217000001385_2104.png" alt=""></p><p>4.共享完成</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217000107855_13168.png" alt=""></p><h2 id="别人进入共享文件夹的方法"><a href="#别人进入共享文件夹的方法" class="headerlink" title="别人进入共享文件夹的方法"></a>别人进入共享文件夹的方法</h2><p>1.你可以复制系统给你的链接给局域网内（我只试过局域网）的别人，让他复制到文件资源管理器地址栏</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217000424314_5387.png" alt=""></p><p>2.或者找到资源管理器最左下角的【网络】，让他点进去就是了。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217001303716_12814.png" alt=""></p><p>点进去之后的效果是这样：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20181217001517394_32227.png" alt=""></p><p>然后你就可以用这个文件夹和局域网里的各位来分享文件了。</p>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个好用的图床管理工具PicGo</title>
      <link href="/posts/PicGo_imgur/"/>
      <url>/posts/PicGo_imgur/</url>
      
        <content type="html"><![CDATA[<p>先前给hexo博客插图片都是把图片commit到github上再手动构造链接，比较麻烦，又不想把图片直接放在博客所在的库。</p><p>这次找到了一个好东西：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></p><a id="more"></a><p>测试一下图片：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/20190628115031.png" alt=""></p><p>很方便的一个工具，简单地截图然后上传剪切板图片，它就自动帮我上传到github上我准备好的库里面，然后把markdown格式的图片引用复制到我的剪切板里面。</p><p>具体如何下载安装和使用，它的<a href="https://picgo.github.io/PicGo-Doc/zh/guide/getting-started.html" target="_blank" rel="noopener">官方文档</a>肯定比我写的详细，不赘述。</p><p>我使用的是github图床（当然，它还支持别的图床），提一下与它相关的一个比较重要的插件。</p><h1 id="PicGo插件：github-plus"><a href="#PicGo插件：github-plus" class="headerlink" title="PicGo插件：github-plus"></a>PicGo插件：github-plus</h1><p><a href="https://github.com/zWingz/picgo-plugin-github-plus" target="_blank" rel="noopener">它的github库链接</a></p><p>它的作用是，让本地的PicGo相册和github库的内容同步。</p><p>PicGo本体只负责上传，不负责删除。我在发现上传错图片，在PicGo相册中删除了图片之后，发现github上面并没有删除这些图片。这是个比较严重的问题。而手动删除的时候很麻烦，要clone到本地，删除之后再提交。</p><p>好在找到了这个插件。</p><p>这个插件的功能：</p><ul><li>将删除操作同步到github</li><li>从github上把图片同步到本地相册，从而可以复制链接</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python相对路径是相对于哪里</title>
      <link href="/posts/python_relative_path/"/>
      <url>/posts/python_relative_path/</url>
      
        <content type="html"><![CDATA[<p>在学习scrapy时，保存数据到文件的时候，发现一直出现“找不到这样的文件或文件夹”的错误，最后发现是因为python的相对路径。</p><a id="more"></a><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>学习scrapy时，编写pipeline来将数据保存到文件当中，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">NovelPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'Novel/'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            <span class="token keyword">for</span> p <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看着爬取时调试信息飞快闪过（爬取的东西有点多），却没有发现我准备好的Novel文件夹里面多出文件，连忙把爬虫停下来。发现出现了“找不到这样的文件或文件夹”的错误。</p><h1 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h1><p>查看日志信息，发现文件名是对的，但是为什么不行呢？</p><p>于是我在<code>pipelines.py</code>里面写了测试代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'Novel/'</span><span class="token operator">+</span><span class="token string">'文件名'</span><span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现同样的错误。</p><p>我把前面的文件夹去掉，也就是：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'文件名'</span><span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>发现文件生成在了我的工作目录下！</strong></p><p>这个时候我才注意到相对路径的问题。</p><p>当前目录是这样的（略去无关文件）：</p><ul><li>learn_scrapy<ul><li>文件名.txt</li><li>practice<ul><li>practice<ul><li>pipeline.py</li></ul></li></ul></li></ul></li></ul><p>我本来以为这个相对路径会使得文件生成在<code>pipelines.py</code>的同级目录下，但是却生成在了我的VScode的工作文件夹？</p><p>我回忆起java课时老师写错相对路径导致无法显示图片的问题。那时也是需要相对当前项目的根目录来写相对路径的。我认为这是eclipse的特性。</p><p>会不会这个也是vscode的特性？</p><p>于是我搜索“python 相对路径”，找到了和我遇到类似问题的朋友：<a href="https://www.zhihu.com/question/313379182" target="_blank" rel="noopener">vscode中使用python相对路径问题?-知乎</a></p><blockquote><p>我的工作目录是/Work</p><p>我在工作目录中创建了文件/Work/Program/main.py 并且运行main.py 生成了 file.txt文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'file.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'HelloWorld'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我以为file.txt在/Work/Program路径下，和创建它的main.py在一个路径中</p><p>结果file.txt这个文件却在/Work路径下面（/Work/file.txt），而不是我所期望的/Python/Program路径下面</p><p>所以应该怎么配置，或者安装什么插件，能让py创建的文件在自己的相对路径下，而不是直接跑到了工作路径那里？</p><p>这个问题怎么解决啊，困扰了我好久，而我又比较喜欢vscode的界面不想放弃它。求解答！</p></blockquote><p>看了回答之后我继续搜索，终于解决了困惑。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>参考链接：</p><ul><li><a href="https://www.sogou.com/link?url=DSOYnZeCC_pKZzihDKzFgzQoUkRGi7SFYAlUdwl14k9my3KYeiwMRQ.." target="_blank" rel="noopener">Python里使用相对路径的坑-简书</a></li></ul><blockquote><p><strong>Python里写这种相对路径, 是相对于终端的当前目录的.</strong></p><p>解决办法是, 获取脚本所在目录, 构造绝对路径</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 解决方案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>调整博客分类</title>
      <link href="/posts/adjust_categories/"/>
      <url>/posts/adjust_categories/</url>
      
        <content type="html"><![CDATA[<p>目前个人博客内的分类不太合理，于是重新调整分类</p><a id="more"></a><h1 id="调整前"><a href="#调整前" class="headerlink" title="调整前"></a>调整前</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>c++</li><li>java</li><li>python</li><li>工具</li><li>日志</li><li>流程</li><li>算法</li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li>awt </li><li>c++ </li><li>git </li><li>hexo </li><li>java </li><li>mysql </li><li>notepad++ </li><li>python </li><li>scrapy </li><li>stl </li><li>信息检索 </li><li>小游戏 </li><li>日志 </li><li>爬虫 </li><li>算法 </li><li>项目 </li><li>题目</li></ul><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>c++、java、python等大类很明显和标签重叠了。</p><p>我目前对二者的理解：</p><p><strong>分类</strong>表明一个事物<strong>是什么</strong>；</p><p><strong>标签</strong>表明一个事物<strong>有什么</strong>。</p><p>按照文章区别于其他类型文章的特征来分类。</p><p>新建一个标签前，要考虑这个标签的可重用性，比如c++、java这类标签肯定会经常用到，但是notepad++这类基本只用一次了，所以将它归到IDE这个标签内。stl和awt这类标签不常用，可以删去。</p><h1 id="调整后"><a href="#调整后" class="headerlink" title="调整后"></a>调整后</h1><h2 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h2><table><thead><tr><th>分类</th><th>内容</th></tr></thead><tbody><tr><td>工具使用</td><td>工具的获取（下载安装）、使用，类似教程</td></tr><tr><td>编程语言</td><td>记录遇到的一些语法问题</td></tr><tr><td>项目总结</td><td>主要记录过程及遇到的问题与方案，包括一些感想和体会</td></tr><tr><td>算法模型</td><td>记录一些算法相关的题目以及概念</td></tr><tr><td>过程记录</td><td>记录解决方案和过程，记录经验总结，简化版的项目总结，侧重过程</td></tr></tbody></table><p>调整之后，分类比之前清晰多了，我写新的博文，就知道应该归类到哪里，找的时候也知道应该到哪里去找了。</p><h2 id="标签-1"><a href="#标签-1" class="headerlink" title="标签"></a>标签</h2><p>减少了一些标签</p><ul><li>IDE ：分得比较宽泛，连notepad++都算进去</li><li>c++ </li><li>git</li><li>hexo </li><li>java</li><li>mysql </li><li>python </li><li>scrapy </li><li>框架 </li><li>爬虫</li></ul>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo日记本</title>
      <link href="/posts/hexo_diary/"/>
      <url>/posts/hexo_diary/</url>
      
        <content type="html"><![CDATA[<p>打算从纸质日记转到电子日记。</p><p>之前是一个月的日记放在一个markdown文件里面，每天一个一级标题。昨天突发奇想，为啥不用Hexo来搭建日记本呢？它本来就是用来写博客（blog网络日志）的呀。</p><p>于是今天就来搭建hexo日记本</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文只分享设计思路以及步骤，不提供详细教程，详细教程可以看这个：<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析-遇见西门</a></p><h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><p>利用hexo搭建日记本有很多优点：</p><ul><li>好看，并且可以随时换主题</li><li>比我之前的方式更加地将日记格式化，便于以后编写脚本来管理</li><li>可以在<code>scaffolds</code>里面设置日记模板</li><li>可以设置分类与标签</li><li>有的主题甚至能搜索文章</li></ul><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul><li><p>不联网：这个日记本和我部署到github上面的博客有些不一样，因为这个是比较隐私的，我不打算放在网上，仅利用移动硬盘备份。并且看日记都在本地，不使用外链图片，以免断网的时候无法查看</p></li><li><p>功能少：并且不需要评论，阅读计数等功能，起到的只是一个阅读器的作用。</p></li><li><p>重美观：需要能够方便地切换主题。</p></li><li><p>无需侧边目录：因为我打算一篇只记录一天的内容，写不了太多，标题层级不会太多。</p></li><li><p>写日记要便捷</p></li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>参考链接：</p><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方中文文档</a></li></ul><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><p>刚开始的时候我不是很清楚hexo在一台电脑上是否可以搭多个博客，后来发现，hexo的每个博客其实就是一个“项目”，那些命令得在已经搭建博客的文件夹里面才能使用，而不是我之前想的“全局命令”。</p><p>首先初始化：</p><pre class="line-numbers language-powershell"><code class="language-powershell">hexo init &lt;folder>cd &lt;folder>npm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后就可以通过以下命令查看本地内容了：</p><pre class="line-numbers language-powershell"><code class="language-powershell">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或简写为</p><pre class="line-numbers language-powershell"><code class="language-powershell">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="全局设置"><a href="#全局设置" class="headerlink" title="全局设置"></a>全局设置</h2><p>在博客根目录下的<code>_config.yml</code>内配置</p><h3 id="标题相关"><a href="#标题相关" class="headerlink" title="标题相关"></a>标题相关</h3><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 日记<span class="token key atrule">subtitle</span><span class="token punctuation">:</span><span class="token key atrule">description</span><span class="token punctuation">:</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 憧憬少<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CNtimezone<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="permalink"><a href="#permalink" class="headerlink" title="permalink"></a>permalink</h3><p>这个设置会决定你的文件最后渲染之后放在哪里。</p><p>利用<code>hexo g</code>来渲染markdown文件，它会将渲染好的html文件放在<code>public</code>目录下，部署到github时，上传的就是这个文件夹里面的内容。</p><p>比如最开始的设置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>day/<span class="token punctuation">:</span>title/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则会将最开始的<code>hello-world.md</code>示例文章给生成在<code>public\2019\06\26\hello-world</code>这个文件夹当中。</p><p>我觉得一天的内容单独放一个文件夹有点不太合适，而一年的内容全部放在一个文件夹的话，三百多个文件也不好管理，所以按照一个月的内容放在一个文件夹内的规则，将这个设置改成：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month/<span class="token punctuation">:</span>title/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="new-post-name"><a href="#new-post-name" class="headerlink" title="new_post_name"></a>new_post_name</h3><p>新建文章的文件名，因为日记按照时间管理比较方便，因此在文件名中加入日期</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year<span class="token punctuation">-</span><span class="token punctuation">:</span>month<span class="token punctuation">-</span><span class="token punctuation">:</span>day<span class="token punctuation">-</span><span class="token punctuation">:</span>title.md <span class="token comment" spellcheck="true"># File name of new posts</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>我之前一直是将图片上传到github的一个repo上面然后使用链接的，看了文档之后才发现原来还有更简便的方法！</p><h3 id="方法一-外链"><a href="#方法一-外链" class="headerlink" title="方法一 外链"></a>方法一 外链</h3><p>首先开启仓库的github page这个设置。</p><p>比如用户名是<code>HaneChiri</code>，创建的仓库名叫<code>blog_images</code>，那么在这个仓库根目录下的图片<code>avatar.jpg</code>的链接就是</p><pre><code>https://hanechiri.github.io/blog_images/avatar.jpg</code></pre><p>而不是</p><pre><code>https://github.com/HaneChiri/blog_images/avatar.jpg</code></pre><p>后者是浏览编辑这个图片的链接，而不是图片本身。</p><p>上传之后无法访问这个链接也不要急，等几分钟就可以了。</p><p>日记本不能使用这个，因为我需要在不联网的时候也能看。</p><h3 id="方法二-资源文件夹"><a href="#方法二-资源文件夹" class="headerlink" title="方法二 资源文件夹"></a>方法二 资源文件夹</h3><p>来自<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">资源文件夹-hexo官方文档</a></p><blockquote><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p></blockquote><p>早知道认真看文档了，插图片就简单多了。</p><p>这个是将图片放在<code>source/images</code>中，而我将Typora设置成将图片自动保存在同目录下的<code>images</code>中，编辑之后只要将这个文件夹内图片给复制到前者所述文件夹，就可以在编辑以及渲染时都看到图片了。</p><h3 id="方法三-下载插件"><a href="#方法三-下载插件" class="headerlink" title="方法三 下载插件"></a>方法三 下载插件</h3><p><a href="https://blog.csdn.net/Fitz1318/article/details/86548129" target="_blank" rel="noopener">Hexo文章中插入图片的方法-CSDN</a></p><hr><p>我不需要每个文章的图片分开管理，这样会导致<code>source\_posts\</code>内有太多没用的空文件夹，因此我使用方法二，读者可以选择适合自己的方法。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>为了防止和联网的博客弄混（毕竟一旦将日记上传上去，repo里面就会留下痕迹，哪怕删掉也看得到，除非删repo），我打算换个别的主题。</p><p>找到了几个心仪的：</p><ul><li><a href="https://github.com/ZEROKISEKI/hexo-theme-gal" target="_blank" rel="noopener">Gal</a> ：galgame。和我第一次用的夏娜 <a href="https://github.com/ShanaMaid/hexo-theme-shana" target="_blank" rel="noopener">shana</a>主题是同类型的</li><li><a href="https://github.com/honjun/hexo-theme-sakura" target="_blank" rel="noopener">Sakura</a> ：樱。贼好看，功能蛮多的样子</li><li><a href="https://github.com/EYHN/hexo-theme-one" target="_blank" rel="noopener">One</a> ：单页面。每个文章都可以配图，上面的几个也是</li></ul><p>但是考虑到个人的一些因素，还是先用着Next吧，反正可以换。</p><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>Next主题有四种外观（scheme），在配置文件（<code>themes\next\_config.yml</code>）中可以找到并修改：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Schemes</span><span class="token comment" spellcheck="true">#scheme: Muse</span><span class="token comment" spellcheck="true">#scheme: Mist</span><span class="token comment" spellcheck="true">#scheme: Pisces</span><span class="token key atrule">scheme</span><span class="token punctuation">:</span> Gemini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><h4 id="社交链接"><a href="#社交链接" class="headerlink" title="社交链接"></a>社交链接</h4><p>最右边的<code>||</code>后面跟着的是文字边上显示的图标</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">social</span><span class="token punctuation">:</span>  <span class="token key atrule">GitHub</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/HaneChiri <span class="token punctuation">|</span><span class="token punctuation">|</span> github  <span class="token comment" spellcheck="true">#E-Mail: mailto:yourname@gmail.com || envelope</span>  <span class="token comment" spellcheck="true">#Weibo: https://weibo.com/yourname || weibo</span>  <span class="token comment" spellcheck="true">#Google: https://plus.google.com/yourname || google</span>  <span class="token comment" spellcheck="true">#Twitter: https://twitter.com/yourname || twitter</span>  <span class="token comment" spellcheck="true">#FB Page: https://www.facebook.com/yourname || facebook</span>  <span class="token comment" spellcheck="true">#VK Group: https://vk.com/yourname || vk</span>  <span class="token comment" spellcheck="true">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span>  <span class="token comment" spellcheck="true">#YouTube: https://youtube.com/yourname || youtube</span>  <span class="token comment" spellcheck="true">#Instagram: https://instagram.com/yourname || instagram</span>  <span class="token comment" spellcheck="true">#Skype: skype:yourname?call|chat || skype</span>  <span class="token key atrule">Bilibili</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//space.bilibili.com/13290087<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><p>在对应的位置放上头像图片</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Sidebar Avatar</span><span class="token key atrule">avatar</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># In theme directory (source/images): /images/avatar.gif</span>  <span class="token comment" spellcheck="true"># In site directory (source/uploads): /uploads/avatar.gif</span>  <span class="token comment" spellcheck="true"># You can also use other linking images.</span>  <span class="token key atrule">url</span><span class="token punctuation">:</span> /images/avatar.gif  <span class="token comment" spellcheck="true"># If true, the avatar would be dispalyed in circle.</span>  <span class="token key atrule">rounded</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment" spellcheck="true"># The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span>  <span class="token key atrule">opacity</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># If true, the avatar would be rotated with the cursor.</span>  <span class="token key atrule">rotated</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="左右"><a href="#左右" class="headerlink" title="左右"></a>左右</h4><p>为了防止和博客混淆而误将日记上传，而将侧边栏调整到相反方向</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">sidebar</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Sidebar Position, available values: left | right (only for Pisces | Gemini).</span>  <span class="token comment" spellcheck="true">#position: left</span>  <span class="token key atrule">position</span><span class="token punctuation">:</span> right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h4><p>这么好用的小功能当然要开着呀！</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">back2top</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># Back to top in sidebar.</span>  <span class="token key atrule">sidebar</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># Scroll percent label in b2t button.</span>  <span class="token key atrule">scrollpercent</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><p>首先在解开“分类”(<code>categories</code>)和“标签”(<code>tags</code>)的注释</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">home</span><span class="token punctuation">:</span> / <span class="token punctuation">|</span><span class="token punctuation">|</span> home  <span class="token comment" spellcheck="true">#about: /about/ || user</span>  <span class="token key atrule">tags</span><span class="token punctuation">:</span> /tags/ <span class="token punctuation">|</span><span class="token punctuation">|</span> tags  <span class="token key atrule">categories</span><span class="token punctuation">:</span> /categories/ <span class="token punctuation">|</span><span class="token punctuation">|</span> th  <span class="token key atrule">archives</span><span class="token punctuation">:</span> /archives/ <span class="token punctuation">|</span><span class="token punctuation">|</span> archive  <span class="token comment" spellcheck="true">#schedule: /schedule/ || calendar</span>  <span class="token comment" spellcheck="true">#sitemap: /sitemap.xml || sitemap</span>  <span class="token comment" spellcheck="true">#commonweal: /404/ || heartbeat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这个还只是在侧边的菜单栏处显示了“分类”和“标签”两项，还没有功能。</p><p>需要在根目录下使用指令来生成这两个页面：</p><pre class="line-numbers language-powershell"><code class="language-powershell">hexo new page categorieshexo new page tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这下能显示了，但是仍然不够，因为Next还没有识别出这两个页面就是分类和标签页面。</p><p>打开<code>source\categories\index.md</code>，里面是：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-06-26 15:44:09</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在里面加上一句，变成：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-06-26 15:44:09</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就能识别出这是分类页面了，能够使用了。标签页面同理。</p><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><h4 id="第一步-修改主题设置"><a href="#第一步-修改主题设置" class="headerlink" title="第一步 修改主题设置"></a>第一步 修改主题设置</h4><p>找到这个设置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Local search</span><span class="token comment" spellcheck="true"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><span class="token key atrule">local_search</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment" spellcheck="true"># If auto, trigger search by changing input.</span>  <span class="token comment" spellcheck="true"># If manual, trigger search by pressing enter key or search button.</span>  <span class="token key atrule">trigger</span><span class="token punctuation">:</span> auto  <span class="token comment" spellcheck="true"># Show top n results per article, show all results by setting to -1</span>  <span class="token key atrule">top_n_per_article</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># Unescape html strings to the readable one.</span>  <span class="token key atrule">unescape</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将<code>enable</code>改为true之后就会在菜单显示一个”搜索“，但是还无法使用。</p><p>照着注释里面<a href="https://github.com/theme-next/hexo-generator-searchdb" target="_blank" rel="noopener">那个github项目</a>内的说明</p><h4 id="第二步-下载插件："><a href="#第二步-下载插件：" class="headerlink" title="第二步 下载插件："></a>第二步 下载插件：</h4><pre class="line-numbers language-powershell"><code class="language-powershell">npm install hexo<span class="token operator">-</span>generator<span class="token operator">-</span>searchdb <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第三步-添加全局设置"><a href="#第三步-添加全局设置" class="headerlink" title="第三步 添加全局设置"></a>第三步 添加全局设置</h4><p>在根目录下的<code>_config.yml</code>加上如下设置：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post  <span class="token key atrule">format</span><span class="token punctuation">:</span> html  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我把帮助中的注释复制过来就是下面这样：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># see https://github.com/theme-next/hexo-generator-searchdb</span><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token comment" spellcheck="true">#  the search scope you want to search, you can chose:</span>  <span class="token comment" spellcheck="true">#    post (Default) - will only covers all the posts of your blog.</span>  <span class="token comment" spellcheck="true">#    page - will only covers all the pages of your blog.</span>  <span class="token comment" spellcheck="true">#    all - will covers all the posts and pages of your blog.</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span> post  <span class="token comment" spellcheck="true"># the form of the page contents, works with xml mode, options are:</span>  <span class="token comment" spellcheck="true">#    html (Default) - original html string being minified.</span>  <span class="token comment" spellcheck="true">#    raw - markdown text of each posts or pages.</span>  <span class="token comment" spellcheck="true">#    excerpt - only collect excerpt.</span>  <span class="token comment" spellcheck="true">#    more - act as you think.</span>  <span class="token key atrule">format</span><span class="token punctuation">:</span> html  <span class="token comment" spellcheck="true">#define the maximum number of posts being indexed, always prefer the newest.</span>  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">10000</span>  <span class="token comment" spellcheck="true"># whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>意外地轻松便捷呢。</p><h2 id="编写快捷打开的脚本"><a href="#编写快捷打开的脚本" class="headerlink" title="编写快捷打开的脚本"></a>编写快捷打开的脚本</h2><p>虽然弄好了，但是每次想写还得打开命令行输入命令，再进入文件夹用Typora打开文件，太麻烦了。</p><p>于是写一下bat批处理脚本。</p><p>这东西其实就是把在命令行执行的命令放在一个文本文件然后把后缀名改成.bat而已。</p><p>不过我不是很熟命令，弄了很久。</p><h3 id="快速打开本地预览"><a href="#快速打开本地预览" class="headerlink" title="快速打开本地预览"></a>快速打开本地预览</h3><p>首先是快速查看我的日记。目标是双击一下脚本文件就可以在浏览器中看到我的日记。</p><p>一般情况下的步骤：</p><ol><li>在根目录打开命令行</li><li>输入<code>hexo s</code></li><li>打开浏览器</li><li>在地址栏输入<code>localhost:4000</code></li></ol><p>我写出来的.bat文件是这样的：</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">set</span> browser=<span class="token string">"C:\Program Files (x86)\Tencent\QQBrowser\QQBrowser.exe"</span><span class="token operator">%</span>browser<span class="token operator">%</span> localhost:4000 &amp;&amp; hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>只有两行，第一行是设置用于打开日记本的浏览器所在的位置，当然，如果设置了环境变量，这里可以直接写浏览器的名字。</p><p>第二行是利用这个浏览器打开<code>localhost:4000</code>，打开成功才执行<code>hexo s</code>来启动hexo。</p><h3 id="新建日记"><a href="#新建日记" class="headerlink" title="新建日记"></a>新建日记</h3><p>一般情况下的步骤：</p><ol><li>在根目录打开命令行</li><li>输入<code>hexo new &lt;title&gt;</code></li><li>打开<code>source\_posts\</code></li><li>找到并打开新建的日记</li></ol><h4 id="获取标题"><a href="#获取标题" class="headerlink" title="获取标题"></a>获取标题</h4><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">set</span> <span class="token operator">/</span>p title=请输入标题:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>/p</code>表示动态输入</p><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><pre class="line-numbers language-powershell"><code class="language-powershell">hexo new <span class="token string">"%title%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>%变量名%</code>表示引用已经赋值的变量。</p><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>由于我设置的文件名不只是标题，因此还需要获取日期来组成文件名。</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">set</span> year=<span class="token operator">%</span>date:~0<span class="token punctuation">,</span>4<span class="token operator">%</span><span class="token function">set</span> month=<span class="token operator">%</span>date:~5<span class="token punctuation">,</span>2<span class="token operator">%</span><span class="token function">set</span> day=<span class="token operator">%</span>date:~8<span class="token punctuation">,</span>2<span class="token operator">%</span>rem 在这里设置你的文件名格式<span class="token function">set</span> new_post_name=<span class="token operator">%</span>year%<span class="token operator">-</span><span class="token operator">%</span>month%<span class="token operator">-</span><span class="token operator">%</span>day%<span class="token operator">-</span><span class="token operator">%</span>title<span class="token operator">%</span><span class="token string">"S:\Program Files\Typora\Typora.exe"</span> source\_posts\<span class="token operator">%</span>new_post_name<span class="token operator">%</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>%date%</code>是系统变量，用于获取系统时间，返回的值的格式是<code>2019/06/26 周三</code></li><li><code>%date:~x,y%</code>代表从第x个字符开始，获取y个字符</li></ul><p>刚开始的脚本代码是这样的：</p><pre class="line-numbers language-powershell"><code class="language-powershell"><span class="token function">set</span> <span class="token operator">/</span>p title=请输入标题:hexo new <span class="token string">"%title%"</span><span class="token function">set</span> year=<span class="token operator">%</span>date:~0<span class="token punctuation">,</span>4<span class="token operator">%</span><span class="token function">set</span> month=<span class="token operator">%</span>date:~5<span class="token punctuation">,</span>2<span class="token operator">%</span><span class="token function">set</span> day=<span class="token operator">%</span>date:~8<span class="token punctuation">,</span>2<span class="token operator">%</span>rem 在这里设置你的文件名格式<span class="token function">set</span> new_post_name=<span class="token operator">%</span>year%<span class="token operator">-</span><span class="token operator">%</span>month%<span class="token operator">-</span><span class="token operator">%</span>day%<span class="token operator">-</span><span class="token operator">%</span>title<span class="token operator">%</span><span class="token string">"S:\Program Files\Typora\Typora.exe"</span> source\_posts\<span class="token operator">%</span>new_post_name<span class="token operator">%</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是我发现在执行完<code>hexo new &quot;%title%&quot;</code>之后，命令行直接退出，加<code>pause</code>都没用。</p><p>猜测是因为，hexo创建文件需要时间，还没创建好就打开，于是出错了。</p><p>后来改成：</p><pre class="line-numbers language-powershell"><code class="language-powershell">hexo new <span class="token string">"%title%"</span> &amp;&amp; call z_open_editor<span class="token punctuation">.</span>bat<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在创建完之后，才会执行后面的内容，后面的代码都放在<code>z_open_editor.bat</code>里面</p><p>最终代码：</p><pre class="line-numbers language-powershell"><code class="language-powershell">rem z_new_diary<span class="token punctuation">.</span>bat@<span class="token function">echo</span> off<span class="token function">set</span> <span class="token operator">/</span>p title=请输入标题:hexo new <span class="token string">"%title%"</span> &amp;&amp; call z_open_editor<span class="token punctuation">.</span>bat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-powershell"><code class="language-powershell">rem z_open_editor<span class="token punctuation">.</span>batrem 本文件只支持打开默认布局的文件@<span class="token function">echo</span> off<span class="token function">set</span> year=<span class="token operator">%</span>date:~0<span class="token punctuation">,</span>4<span class="token operator">%</span><span class="token function">set</span> month=<span class="token operator">%</span>date:~5<span class="token punctuation">,</span>2<span class="token operator">%</span><span class="token function">set</span> day=<span class="token operator">%</span>date:~8<span class="token punctuation">,</span>2<span class="token operator">%</span><span class="token function">dir</span> source\_posts<span class="token keyword">if</span> not defined title <span class="token function">set</span> <span class="token operator">/</span>p title=请输入标题:rem 在这里设置你的文件名格式<span class="token function">set</span> new_post_name=<span class="token operator">%</span>year%<span class="token operator">-</span><span class="token operator">%</span>month%<span class="token operator">-</span><span class="token operator">%</span>day%<span class="token operator">-</span><span class="token operator">%</span>title<span class="token operator">%</span><span class="token function">echo</span> source\_posts\<span class="token operator">%</span>new_post_name<span class="token operator">%</span><span class="token punctuation">.</span>md<span class="token string">"S:\Program Files\Typora\Typora.exe"</span> source\_posts\<span class="token operator">%</span>new_post_name<span class="token operator">%</span><span class="token punctuation">.</span>md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>练习利用Scrapy爬取b站排行榜</title>
      <link href="/posts/Scrapy_spider_bilibiliRank/"/>
      <url>/posts/Scrapy_spider_bilibiliRank/</url>
      
        <content type="html"><![CDATA[<p>开始学python的Scrapy框架了，参考书是崔庆才的《python3网络爬虫开发实战》</p><p>跟着示例敲完之后，又试着按照一样的逻辑去爬取了B站排行榜的数据。</p><p>通过这个小项目学习使用Scrapy框架。</p><a id="more"></a><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>首先新建一个名为<code>practice</code>的项目</p><pre class="line-numbers language-shell"><code class="language-shell">$scrapy startproject practice<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个项目的目录结构（省略init文件）：</p><ul><li>practice<ul><li>practice<ul><li>items.py</li><li>middlewares.py</li><li>pipelines.py</li><li>settings.py</li></ul></li><li>scrapy.cfg</li></ul></li></ul><p>这一个项目里面的代码是整个项目的爬虫通用的。</p><h2 id="新建Spider"><a href="#新建Spider" class="headerlink" title="新建Spider"></a>新建Spider</h2><p>新建一个爬虫<code>bilibiliRank</code></p><pre class="line-numbers language-shell"><code class="language-shell">$cd practice$scrapy genspider bilibiliRank<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后与在此目录下出现了一个<code>spider</code>文件夹，用于存放这个新的爬虫</p><ul><li>spider<ul><li>bilibiliRank.py</li></ul></li></ul><p><code>bilibiliRank.py</code>中：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">BilibilirankSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibiliRank'</span><span class="token comment" spellcheck="true">#爬虫名字</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bilibili.com'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#允许爬取的域名</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/ranking/'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#初始url</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>spider</code>文件夹里面是用于爬取不同网站的爬虫，它继承自<code>scrapy.Spider</code>，scrapy的引擎<code>Engine</code>就是利用你写的爬虫里面的<code>parse()</code>方法来解析页面获取数据，可以在这个方法里面将数据以<code>item</code>的形式返回出去，给<code>ItemPipeline</code>继续处理。</p><h2 id="创建Item"><a href="#创建Item" class="headerlink" title="创建Item"></a>创建Item</h2><p><code>items.py</code>里面定义了不同的item，这些item都继承自<code>scrapy.Item</code>，文件生成的内容如下（无关注释已删去）：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">PracticeItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里你可以照着它的模板新建一个类，也可以直接修改，总之只要符合要求就可以：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">RankItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    <span class="token comment" spellcheck="true"># name = scrapy.Field()</span>    num<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    title<span class="token operator">=</span>scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个Item子类当中，我新建了两个域，也可以说是字段。按照注释给出的格式来就可以了。</p><h2 id="解析response"><a href="#解析response" class="headerlink" title="解析response"></a>解析response</h2><p>适当简化的流程大概是：引擎利用爬虫的<code>start_url</code>发起请求，然后将得到的响应<code>response</code>作为参数传入爬虫的<code>parse()</code>方法中。<code>parse()</code>将解析出的数据装入<code>Item</code>并返回给引擎。</p><p>需要解析的html页面内容（只展示其中一个项的结构）：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rank-list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rank-item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>img<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>//www.bilibili.com/video/av56121331/<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazy-img cover<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>视频标题<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>watch-later-trigger w-later<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>视频url<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>视频标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!----></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>detail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b-icon play<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>366.8万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b-icon view<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>3.8万<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>视频url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data-box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>b-icon author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>作者名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>3798978<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                综合得分              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!----></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爬虫文件：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">from</span> practice<span class="token punctuation">.</span>items <span class="token keyword">import</span> RankItem<span class="token comment" spellcheck="true">#这是之前自定义的item</span><span class="token keyword">class</span> <span class="token class-name">BilibilirankSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'bilibiliRank'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'bilibili.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'https://www.bilibili.com/ranking/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获取所有的项目</span>        rank_items<span class="token operator">=</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.rank-list .rank-item'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#获取每一项中的数据</span>        <span class="token keyword">for</span> rank_item <span class="token keyword">in</span> rank_items<span class="token punctuation">:</span>            item<span class="token operator">=</span>RankItem<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token operator">=</span>rank_item<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.num::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token operator">=</span>rank_item<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.content .info .title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">yield</span> item<span class="token comment" spellcheck="true">#每次调用就会返回一个item</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遇到的问题：</p><ol><li>注意获取的所有项目得是一个节点，不能用<code>extract()</code>读取其中的数据，第一次写时，写成了：</li></ol><pre class="line-numbers language-python"><code class="language-python">rank_list<span class="token operator">=</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.rank-item'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> rank_item <span class="token keyword">in</span> rank_list<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#……</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h2><pre class="line-numbers language-shell"><code class="language-shell">$scrapy crawl bilibiliRank -o bilibiliRank.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用名为<code>bilibiliRank</code>爬虫进行爬取，并将得到的结果保存在<code>bilibiliRank.json</code>文件中</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/intro/tutorial.html" target="_blank" rel="noopener">scrapy官方中文文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基于AWT的对战小游戏</title>
      <link href="/posts/java_game_FightFieldFrame/"/>
      <url>/posts/java_game_FightFieldFrame/</url>
      
        <content type="html"><![CDATA[<p>这学期的java课设弄完了，写个博客总结一下。</p><p><a href="https://www.bilibili.com/video/av54526303/" target="_blank" rel="noopener">哔哩哔哩对应视频的传送门</a></p><a id="more"></a><h1 id="课设目的与要求"><a href="#课设目的与要求" class="headerlink" title="课设目的与要求"></a>课设目的与要求</h1><p>根据讲义中策略模式的案例，设计和实现一个基于<strong>策略模式</strong>的角色扮演游戏。其中包括主要有角色类及其子类、相关的行为类集合和测试类等。</p><p>通过本次实验，能够在掌握面向对象程序设计的基本思想基础上；深化理解 Java 面向对象程序设计中消息、继承、多态、接口、抽象类和抽象方法等概念和实现方式；并进一步掌握 Java 程序设计中的基本语法和 Java程序运行方法等；理解和应用包（package）。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>一个游戏中有多种角色(Character)，例如：国王（King）、皇后（Queen）、骑士（Knight）、老怪（Troll）。角色之间可能要发生战斗(fight)，每场战斗都是一个角色与另一角色之间的一对一战 斗。</p><p>每个角色都有自己的生命值 (hitPoint) 、 魔法值（magicPoint）、攻击力值(damage)和防御力值(defense)。</p><p>每种角色都有一种武器进行攻击（fight）；在程序运行中，可以动态修改角色的武器(setWeaponBehavior)。</p><p>每种角色都有一种魔法对自己或者其他角色施法（performMagic）；可以动态改变拥有的魔法（setMagicBehavior）。</p><ol><li><p>首先设计和实现抽象类 Characters。</p></li><li><p>设计和实现 Character 类的几个子类：King、Queen、Knight、Troll。位</p></li><li><p>设计接口 WeaponBehavior 和 MagicBehavior。</p><ul><li><p>接 口 WeaponBehavior 的 实 现 类 ：</p><ul><li><p>KnifeBehavior （ 用 刀 ）</p></li><li><p>BowAndArrowBehavior （ 用 弓 箭 ）</p></li><li><p>AxeBehavior （ 用 斧 ）</p></li><li><p>SwordBehavior（用剑）</p></li></ul></li><li><p>接口MagicBehavior的实现类：</p><ul><li>HealBehavior（治疗）</li><li>InvisibleBehavior（隐身）。</li></ul></li></ul></li></ol><p>实现接口中的抽象方法，可以只在屏幕输出简单信息，也可以结合生命值(hitPoint)、攻击力值(damage)和防御力值(defense)计算。</p><ol start="4"><li><p>编写测试代码，对以上设计的系统进行测试。要求在程序运行期间，能动态改变角色拥有的武器或者魔法。</p></li><li><p>自己添加一种角色、或者添加一种武器及魔法，设计相应的类，并编写测试代码进行测试。</p></li><li><p>按照 Java 的规范，添加详细的文档注释，并用 Javadoc 生成标准的帮助文档。</p></li><li><p>将上述编译、运行、生成帮助文档的命令，填写至实验报告相应位置。</p></li><li><p>填写实验报告。并将程序代码及生成的帮助文档打包上交。</p></li></ol><h1 id="涉及的主要内容"><a href="#涉及的主要内容" class="headerlink" title="涉及的主要内容"></a>涉及的主要内容</h1><ol><li>单例模式。游戏窗口只能有一个对象，因此使用了单例模式。</li><li>策略模式。在角色类中有两个抽象策略（武器策略和魔法策略），具体策略在类中实现。</li><li>双缓冲技术。在绘制游戏画面的时候使用了双缓冲技术，防止画面闪烁。</li><li>多线程。在两处使用了多线程，一处是为了解决按键冲突的问题，另一处是为了实现游戏周期性判定的功能。</li><li>awt。</li></ol><h1 id="基本逻辑流程"><a href="#基本逻辑流程" class="headerlink" title="基本逻辑流程"></a>基本逻辑流程</h1><ol><li>抽象角色类由具体子类实现，子类主要实现了抽象方法<code>getAppearance</code>，用于获取角色的外貌（即图片），外貌会根据角色状态的不同而改变，比如角色死亡时外貌是墓碑；</li><li>根据角色的坐标以及属性（例如是否隐身，当前武器是什么）来绘制角色以及属性条、武器栏和魔法栏。</li><li>游戏时钟周期线程用于周期性地执行一些操作，例如每秒钟恢复一定的HP和MP，对于隐身状态的角色，每秒钟扣除一定量的MP等。</li></ol><h1 id="游戏说明"><a href="#游戏说明" class="headerlink" title="游戏说明"></a>游戏说明</h1><ol><li><strong>玩家1操作：</strong>键盘上A键D键分别对应左右移动，J键使用武器攻击，K键使用魔法，L键切换武器，O键切换魔法；</li><li><strong>玩家2操作：</strong>键盘上←键→键分别对应左右移动，小键盘上，1键使用武器攻击，2键使用魔法，3键切换武器，6键切换魔法；</li><li>每把武器有自己的攻击威力和攻击距离，只有在两个角色的距离在武器的攻击范围内时，才能够攻击成功；</li><li>伤害计算公式为：被攻击者受到的最终伤害=攻击者攻击力+攻击者武器威力-被攻击者的防御力。若伤害小于等于0，则不予扣除；</li><li>每秒钟会恢复一定量的HP和MP；</li><li>一方死亡（HP降为0及以下）则游戏结束。</li></ol><h1 id="设计与实现"><a href="#设计与实现" class="headerlink" title="设计与实现"></a>设计与实现</h1><h2 id="主要框架"><a href="#主要框架" class="headerlink" title="主要框架"></a>主要框架</h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FightFieldFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//一些游戏常量以及窗口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Dimension         SCREEN_DIMENSION<span class="token operator">=</span>Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScreenSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FFF_X<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FFF_Y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FFF_HEIGHT<span class="token operator">=</span>SCREEN_DIMENSION<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FFF_WIDTH<span class="token operator">=</span>SCREEN_DIMENSION<span class="token punctuation">.</span>width<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//……省略其他成员函数，下面会列举来说明</span><span class="token comment" spellcheck="true">/*******************main函数**************************/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FightFieldFrame f<span class="token operator">=</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"战斗领域"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">initFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化角色</span>        f<span class="token punctuation">.</span><span class="token function">initCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加事件监听者</span>        f<span class="token punctuation">.</span><span class="token function">addWindowListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyWindowListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">addKeyListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GamePad</span><span class="token punctuation">(</span>player1<span class="token punctuation">,</span>player2<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//新建时钟线程，用于游戏中的周期性属性检查</span>        Thread clockThread<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClockThread</span><span class="token punctuation">(</span>player1<span class="token punctuation">,</span> player2<span class="token punctuation">,</span> fff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clockThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>FightFieldFrame 类中：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//只能有一个窗体对象，使用单例模式</span><span class="token keyword">private</span> <span class="token keyword">static</span> FightFieldFrame fff<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//单例模式使用的对象</span><span class="token keyword">private</span> <span class="token function">FightFieldFrame</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> FightFieldFrame <span class="token function">getInstance</span><span class="token punctuation">(</span>String title<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fff<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fff<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FightFieldFrame</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> fff<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双缓冲"><a href="#双缓冲" class="headerlink" title="双缓冲"></a>双缓冲</h2><p>双缓冲因为有两个绘图对象而得名，先在一个image对象上绘图然后再将此对象绘制到Frame上，用于减少重绘时的闪烁。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 初始化框架的位置和大小，以及缓冲对象 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这里准备一些对象构造完成之后才能做的事情</span>    fff<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setBounds</span><span class="token punctuation">(</span>FFF_X<span class="token punctuation">,</span> FFF_Y<span class="token punctuation">,</span> FFF_WIDTH<span class="token punctuation">,</span> FFF_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span>    Dimension d<span class="token operator">=</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    imgBuffer<span class="token operator">=</span><span class="token function">createImage</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>width<span class="token punctuation">,</span> d<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>    gBuffer<span class="token operator">=</span>imgBuffer<span class="token punctuation">.</span><span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建好缓冲对象后，在缓冲对象上绘制：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//全都先绘制在缓冲区        </span>    <span class="token comment" spellcheck="true">//绘制背景</span>    Image background<span class="token operator">=</span><span class="token function">getToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token string">"image\\background.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>background<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        gBuffer<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>background<span class="token punctuation">,</span> FFF_X<span class="token punctuation">,</span> FFF_Y<span class="token punctuation">,</span> FFF_WIDTH<span class="token punctuation">,</span> FFF_HEIGHT<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//绘制人物</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player1<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">drawCharacter</span><span class="token punctuation">(</span>gBuffer<span class="token punctuation">,</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drawStrand</span><span class="token punctuation">(</span>gBuffer<span class="token punctuation">,</span> player1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>player2<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">drawCharacter</span><span class="token punctuation">(</span>gBuffer<span class="token punctuation">,</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">drawStrand</span><span class="token punctuation">(</span>gBuffer<span class="token punctuation">,</span> player2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">drawSlot</span><span class="token punctuation">(</span>gBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//drawStrand(gBuffer);//绘制绝对位置的属性条，由于没有什么技术含量就只做了一个示例</span>    <span class="token comment" spellcheck="true">//由于使用了背景图片，所以不必特地清空背景</span>    g<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>imgBuffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，即便如此仍然会闪烁，这是因为重绘时调用的update函数会将Frame用背景色填充一次 再绘制。所以应该覆盖掉原本的方法，让它只绘制，不清空：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//======================//</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>Graphics g<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//覆盖原本的方法</span>    <span class="token function">paint</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//======================/*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="玩家操纵"><a href="#玩家操纵" class="headerlink" title="玩家操纵"></a>玩家操纵</h2><p>使用GamePad类作为键盘监听者，监听Frame的按键，调用角色对应的方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 游戏手柄类 * 用于将键位与角色的动作对应起来 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GamePad</span> <span class="token keyword">implements</span> <span class="token class-name">KeyListener</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Characters player1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家1</span>    <span class="token keyword">private</span> Characters player2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家2</span>    <span class="token keyword">private</span> FightFieldFrame fff<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">GamePad</span><span class="token punctuation">(</span>Characters p1<span class="token punctuation">,</span> Characters p2<span class="token punctuation">,</span> FightFieldFrame f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO Auto-generated constructor stub</span>        player1<span class="token operator">=</span>p1<span class="token punctuation">;</span>        player2<span class="token operator">=</span>p2<span class="token punctuation">;</span>        fff<span class="token operator">=</span>f<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyPressed</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> code<span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_J<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">1</span>攻击            player1<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>            player2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_K<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">1</span>使用魔法            player1<span class="token punctuation">.</span><span class="token function">performMagic</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_A<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">1</span>左            player1<span class="token punctuation">.</span><span class="token function">setMoveLeftFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            player1<span class="token punctuation">.</span><span class="token function">setDirection</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false为朝右，true为朝左</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_D<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">1</span>右            player1<span class="token punctuation">.</span><span class="token function">setMoveRightFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            player1<span class="token punctuation">.</span><span class="token function">setDirection</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_L<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">1</span>切换武器            player1<span class="token punctuation">.</span><span class="token function">changeWeapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_O<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">1</span>切换魔法            player1<span class="token punctuation">.</span><span class="token function">changeMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/****************************************************************/</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_NUMPAD1<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">2</span>攻击            player2<span class="token punctuation">.</span><span class="token function">fight</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>            player1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_NUMPAD2<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">2</span>使用魔法            player2<span class="token punctuation">.</span><span class="token function">performMagic</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_LEFT<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">2</span>左            player2<span class="token punctuation">.</span><span class="token function">setMoveLeftFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            player2<span class="token punctuation">.</span><span class="token function">setDirection</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false为朝右，true为朝左</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_RIGHT<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">2</span>右            player2<span class="token punctuation">.</span><span class="token function">setMoveRightFlag</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            player2<span class="token punctuation">.</span><span class="token function">setDirection</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_NUMPAD3<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">2</span>切换武器            player2<span class="token punctuation">.</span><span class="token function">changeWeapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_NUMPAD6<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>玩家<span class="token number">2</span>切换魔法            player2<span class="token punctuation">.</span><span class="token function">changeMagic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fff<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重绘</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyReleased</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> code<span class="token operator">=</span>e<span class="token punctuation">.</span><span class="token function">getKeyCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_J<span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_A<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>左            player1<span class="token punctuation">.</span><span class="token function">setMoveLeftFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_D<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>右            player1<span class="token punctuation">.</span><span class="token function">setMoveRightFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_K<span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_NUMPAD1<span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_LEFT<span class="token operator">:</span>            player2<span class="token punctuation">.</span><span class="token function">setMoveLeftFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> KeyEvent<span class="token punctuation">.</span>VK_RIGHT<span class="token operator">:</span>            player2<span class="token punctuation">.</span><span class="token function">setMoveRightFlag</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fff<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//重绘</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keyTyped</span><span class="token punctuation">(</span>KeyEvent e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，这里控制角色左右移动并不是直接调用角色的移动方法，而是更改角色移动的标志变量，利用线程来调用角色的移动方法。这样可以解决角色的按键冲突问题。</p><h2 id="角色移动线程"><a href="#角色移动线程" class="headerlink" title="角色移动线程"></a>角色移动线程</h2><p>移动线程只负责发送消息给角色，而角色移动的具体判定由角色自身完成，从而更好地实现面向对象的思想。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoveThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Characters character<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MoveThread</span><span class="token punctuation">(</span>Characters c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        character<span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//线程只负责发送消息，让角色自己判断移动</span>            character<span class="token punctuation">.</span><span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            character<span class="token punctuation">.</span><span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面这是Characters类中的角色移动函数，添加了延时以免在按下移动按键的一瞬间，角色移动太快出了屏幕外面。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 向左移动&lt;br/>     * 由于两个线程各自操作自己的角色，所以此函数不需要同步 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isAliveFlag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>moveLeftFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止跑得太快</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 向右移动&lt;br/> * 由于两个线程各自操作自己的角色，所以此函数不需要同步 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isAliveFlag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>moveRightFlag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        x<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="武器攻击实现机制"><a href="#武器攻击实现机制" class="headerlink" title="武器攻击实现机制"></a>武器攻击实现机制</h2><p>在Characters类中，使用武器进行攻击的方法如下，它的主要逻辑是调用useWeapon方法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 攻击某个角色 * @param c 要攻击的角色 * @return 造成的真实伤害 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fight</span><span class="token punctuation">(</span>Characters c<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//由于武器有不同的特性，所以伤害的逻辑让武器实现</span>    <span class="token comment" spellcheck="true">//比如后期编写高级玩法时，弓需要计算射程</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isAliveFlag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果已死亡，直接返回，下同</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>weapon<span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"没有武器，无法攻击"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> attackRange<span class="token operator">=</span>weapon<span class="token punctuation">.</span><span class="token function">getAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>attackRange<span class="token operator">></span><span class="token function">distance</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//攻击距离大于角色之间的距离才可攻击</span>        <span class="token keyword">return</span> weapon<span class="token punctuation">.</span><span class="token function">useWeapon</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此角色攻击角色c</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>角色类的两个属性，武器和魔法，使用的都是对应接口的引用：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> WeaponBehavior weapon<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器</span><span class="token keyword">protected</span> MagicBehavior magic<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//魔法</span>以下是武器接口：<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WeaponBehavior</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 使用武器     * @param attacker 武器持有者     * @param victim 被攻击者     * @return 造成的真实伤害     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">useWeapon</span><span class="token punctuation">(</span>Characters attacker<span class="token punctuation">,</span>Characters victim<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用武器</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Image <span class="token function">getAppearance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>以下是具体的武器实现（以剑为例，其他大同小异）：<span class="token comment" spellcheck="true">/** * 剑 * 实现武器接口 * 威力中等，攻击距离中等 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwordBehavior</span> <span class="token keyword">implements</span> <span class="token class-name">WeaponBehavior</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token operator">=</span><span class="token string">"剑"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Image appearance<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DAMAGE<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器基础威力</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ATTACK_RANGE<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器攻击距离,单位px</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String APPEARANCE_PATH<span class="token operator">=</span><span class="token string">"image\\Weapon\\Sword.png"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">SwordBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SwordBehavior</span><span class="token punctuation">(</span>String _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        name<span class="token operator">=</span>_name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//剑，岂能无名OVO</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 使用武器攻击     * @param attacker 攻击者     * @param victim 被攻击者     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">useWeapon</span><span class="token punctuation">(</span>Characters attacker<span class="token punctuation">,</span>Characters victim<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> attackDamage<span class="token operator">=</span>DAMAGE<span class="token operator">+</span>attacker<span class="token punctuation">.</span><span class="token function">getDamage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//造成的伤害为攻击者的伤害加上武器威力</span>        <span class="token keyword">int</span> finalDamage<span class="token operator">=</span>victim<span class="token punctuation">.</span><span class="token function">hitBy</span><span class="token punctuation">(</span>attacker<span class="token punctuation">,</span> attackDamage<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>attacker<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"使用"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"对"</span><span class="token operator">+</span>victim<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"造成了"</span><span class="token operator">+</span>finalDamage<span class="token operator">+</span><span class="token string">"点伤害"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> finalDamage<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回最终伤害</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAttackRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ATTACK_RANGE<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> Image <span class="token function">getAppearance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        appearance<span class="token operator">=</span>Toolkit<span class="token punctuation">.</span><span class="token function">getDefaultToolkit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span>APPEARANCE_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> appearance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里面主要的代码是useWeapon方法里面调用的角色类的hitBy方法，里面有着伤害计算逻辑：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 被某个角色攻击 * @param attacker 攻击者 * @param attackDamage 攻击者给予的攻击伤害 * @return 最后造成的真实伤害 */</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hitBy</span><span class="token punctuation">(</span>Characters attacker<span class="token punctuation">,</span><span class="token keyword">int</span> attackDamage<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//被攻击</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>isAliveFlag<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> finalDamage<span class="token operator">=</span><span class="token punctuation">(</span>attackDamage<span class="token operator">-</span>defense<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//伤害计算：最终伤害=敌方攻击伤害-我方防御力</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">incHP</span><span class="token punctuation">(</span><span class="token operator">-</span>finalDamage<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果血量被扣到负数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">killedBy</span><span class="token punctuation">(</span>attacker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> finalDamage<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回最后造成的真实伤害</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>魔法的实现机制大同小异，不做特殊说明。</p><h2 id="武器切换和魔法切换"><a href="#武器切换和魔法切换" class="headerlink" title="武器切换和魔法切换"></a>武器切换和魔法切换</h2><p>实现方法是在角色类里面声明数组：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> WeaponBehavior weaponSlots<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//武器栏位，用于存储角色携带的武器</span><span class="token keyword">protected</span> MagicBehavior magicSlots<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//魔法栏位</span><span class="token keyword">protected</span> <span class="token keyword">int</span> weaponSlotsIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//栏位索引，指示当前武器</span><span class="token keyword">protected</span> <span class="token keyword">int</span> magicSlotsIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以切换武器为例，如果当前武器是最后一把，那么换回第一把，否则索引自增：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 按顺序切换武器 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeWeapon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setWeaponBehavior</span><span class="token punctuation">(</span>weaponSlots<span class="token punctuation">[</span>weaponSlotsIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>weaponSlotsIndex<span class="token operator">+</span><span class="token number">1</span><span class="token operator">>=</span>weaponSlots<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        weaponSlotsIndex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        weaponSlotsIndex<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时钟线程"><a href="#时钟线程" class="headerlink" title="时钟线程"></a>时钟线程</h2><p>时钟线程用于进行一些游戏周期性方法的调用，比如周期性恢复HP，对角色属性值的判断等。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 时钟线程，用于一些周期性的计算 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClockThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Characters player1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家1</span>    <span class="token keyword">private</span> Characters player2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//玩家2</span>    <span class="token keyword">private</span> FightFieldFrame fff<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> interval<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时钟周期</span>    <span class="token keyword">public</span> <span class="token function">ClockThread</span><span class="token punctuation">(</span>Characters p1<span class="token punctuation">,</span> Characters p2<span class="token punctuation">,</span> FightFieldFrame f<span class="token punctuation">)</span> <span class="token punctuation">{</span>        player1<span class="token operator">=</span>p1<span class="token punctuation">;</span>        player2<span class="token operator">=</span>p2<span class="token punctuation">;</span>        fff<span class="token operator">=</span>f<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 核对属性，并对于特定属性作出不同的事情     * @param c 核对角色c的属性     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cheackStatus</span><span class="token punctuation">(</span>Characters c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> Characters<span class="token punctuation">.</span>ST_INVISIBLE<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>隐身魔法每个周期扣除一定的魔力            <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">incMP</span><span class="token punctuation">(</span><span class="token operator">-</span>InvisibleBehavior<span class="token punctuation">.</span>COST<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果魔力不够</span>                c<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>Characters<span class="token punctuation">.</span>ST_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 周期性恢复属性值（回血回魔）     * @param c 周期性恢复角色c的HP和MP     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span>Characters c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>c<span class="token punctuation">.</span><span class="token function">getIsAliveFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//角色死亡就不再回血</span>        c<span class="token punctuation">.</span><span class="token function">incHP</span><span class="token punctuation">(</span>Characters<span class="token punctuation">.</span>HP_RECOVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">incMP</span><span class="token punctuation">(</span>Characters<span class="token punctuation">.</span>MP_RECOVER<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//做这个周期要做的事情            </span>            <span class="token function">cheackStatus</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">cheackStatus</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">recover</span><span class="token punctuation">(</span>player1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">recover</span><span class="token punctuation">(</span>player2<span class="token punctuation">)</span><span class="token punctuation">;</span>                fff<span class="token punctuation">.</span><span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待下一个周期</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://www.oschina.net/uploads/doc/javase-6-doc-api-zh_CN/java/awt/class-use/Image.html" target="_blank" rel="noopener">java.awt.Image官方文档</a></li><li><a href="https://www.cnblogs.com/bigthing33/p/5148807.html" target="_blank" rel="noopener">使用eclipse生成javadoc-博客园</a></li><li><a href="https://blog.csdn.net/kai_wei_zhang/article/details/8120382" target="_blank" rel="noopener">java双缓冲技术-CSDN</a></li><li><a href="https://blog.csdn.net/u011393661/article/details/38434581" target="_blank" rel="noopener">java获取屏幕大小-CSDN</a></li><li><a href="https://www.jb51.net/article/31981.htm" target="_blank" rel="noopener">java线程传参三种方式-脚本之家</a></li><li><a href="https://y-1746119035.iteye.com/blog/2094687" target="_blank" rel="noopener">游戏角色移动流畅度的处理-ITeye</a></li><li><a href="https://blog.csdn.net/qq_34781336/article/details/80569632" target="_blank" rel="noopener">eclipse调试方式和快捷键-CSDN</a></li><li><a href="https://www.bilibili.com/video/av40583293?from=search&seid=15415941635306934765" target="_blank" rel="noopener">一个讲eclipse调试的b站视频（靠这个视频解决了调试问题）-bilibili</a></li><li><a href="https://blog.csdn.net/asd765028286/article/details/78365274" target="_blank" rel="noopener">绘制字体修改-CSDN</a></li></ul><h1 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h1><p>这次课设对我来说是个挑战，首先时间比较紧张，和考试放在了一周，并且用的是学了几周还没私底下练习多少的JAVA。不过还是做的让我自己比较满意。</p><p>我选择的是看上去较为简单的一道题目，虽然简单，但是这个题目的可扩展性很强，可以尽情开脑洞，我看中的就是这一点。我在高中的时候就尝试使用Visual Basic来编写类似的小游戏，一些可能会遇到的困难在那时已经思考过了，所以总体来说没有遇到太过麻烦的地方。</p><p>随着经验的增长，我逐渐开始一边编程一边整理，让以后的自己也能够回顾这一次的项目。在写完这个课设之后，我用录屏软件录制了一个视频来整体讲述我编写过程中的思路，并上传到了Bilibili弹幕视频网站，总结经验，分享思路，以及为了便于以后回顾。地址是（<a href="https://www.bilibili.com/video/av54526303/）" target="_blank" rel="noopener">https://www.bilibili.com/video/av54526303/）</a></p><p>当然，过程中也遇到了一些问题。</p><p>比如绘制图片的时候遇到了只能使用绝对路径的问题，在老师上课演示的过程中也遇到过这个问题，后来我知道了JAVA相对路径是以项目根目录为基准而不是以文件目录为基准的。</p><p>比如角色控制按键冲突。解决方法是使用多线程，两个线程控制分别控制两个角色。</p><p>比如游戏周期性事件。在以前我使用Visual Basic的时候，是利用时钟控件来解决这个问题的，而JAVA里面可以使用线程来模拟那个时钟控件。这让我对时钟控件的原理有了比较好的认识。</p><p>在假期里面，我可能会通过继续完善这个小游戏，来更加深入地学习JAVA。</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> awt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记5爬虫类结构优化</title>
      <link href="/posts/python_spider_note5optimization_of_the_spider_class/"/>
      <url>/posts/python_spider_note5optimization_of_the_spider_class/</url>
      
        <content type="html"><![CDATA[<p>打算全部以cookie来登陆，而不依赖于session（因为听组长说session没cookie快，而且我想学些新东西而不是翻来覆去地在舒适区鼓捣）。弄了几天终于弄出来个代码不那么混乱的爬虫类了，更新一下博文来总结一下。代码在我github的spider库里面。</p><a id="more"></a><h1 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h1><p>既然要封装成爬虫类，那么就以面向对象的思维来思考一下结构。</p><p>从通用的爬虫开始，先不考虑如何爬取特定的网站。</p><p>以下只是刚开始的思路，并不是最终思路。</p><p>爬虫的行为步骤并不复杂，分为以下几步：</p><ol><li>请求并获取网页（往往需要模拟登录）</li><li>解析网页提取内容（还需要先获取需要爬取的url）</li><li>保存内容（保存到数据库）</li></ol><p>爬虫类方法（初步设计）：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>login</td><td>登录</td></tr><tr><td>parse</td><td>解析</td></tr><tr><td>save</td><td>保存</td></tr><tr><td>crawl</td><td>爬取（外部调用者只需调用这个方法即可）</td></tr></tbody></table><p>爬虫类属性（初步设计）：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>headers</td><td>请求的头部信息，用于伪装成浏览器</td></tr><tr><td>cookies</td><td>保存登录后得到的cookies</td></tr><tr><td>db_data</td><td>数据库的信息，用于连接数据库</td></tr></tbody></table><h1 id="进一步设计"><a href="#进一步设计" class="headerlink" title="进一步设计"></a>进一步设计</h1><p>我想将这个爬虫类设计得更为通用，也就是只修改解析的部分就能爬取不同的网站。组长说我这是打算写一个爬虫框架，我可没那么厉害，只是觉得把逻辑写死不能通用的类根本不能叫做类罢了。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><p>我看了一下组长给出的参考代码，大致结构是这样的：</p><p>首先一个<code>Parse</code>解析类（为了关注结构，具体内容省略）：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">parse_index</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        用于解析首页        :param text: 抓取到的文本        :return: cpatcha_url, 一个由元组构成的列表(元组由两个元素组成 (代号，学校名称))        '''</span>       <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">parse_captcha</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> content<span class="token punctuation">,</span> client<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        解析验证码        :return: &lt;int> or &lt;str> a code        '''</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">parse_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        解析出基本信息        :param text:        :return:        '''</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">parse_current_record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        解析消费记录        :param text:        :return:        '''</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parse_info<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_history_record</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        解析历史消费记录        :param text:        :return:        '''</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>parse_info<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个思路不错，<strong>将解析部分独立形成一个类</strong>，不过这样要如何与爬虫类进行逻辑上的关联呢？解析类的对象，是什么？是解析器吗？解析器与爬虫应该是什么关系呢？</p><p>我继续往下看：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">login_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> captcha<span class="token punctuation">,</span> schoolcode<span class="token punctuation">,</span> signtype<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        构造登陆使用的参数        :return:data        '''</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true">#省略代码，下同</span>    <span class="token keyword">def</span> <span class="token function">history_record_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> beginTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        历史消费记录data        :param beginTime:        :param endTime:        :return: data        '''</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个<code>Prepare</code>类，准备类？准备登录用的数据。说起来似乎比解析类更难以让我接受。解析器还可以说是装在爬虫身上，但是，但是“准备”这件事情分明是一个动作啊喂！</p><p>好吧，“一类动作”倒能说得过去吧。我看看怎么和爬虫类联系起来：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Spider</span><span class="token punctuation">(</span>Parse<span class="token punctuation">,</span> Prepare<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#???</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>等会儿等会儿……</p><p>继承关系？</p><p>让我捋捋。</p><p>为了让爬虫能解析和能准备还真是不按套路出牌啊……</p><p>子类应该是父类的特化吧不是吗，就像猫类继承动物类，汽车类继承车类一样，猫是动物，汽车也是车。</p><p>算了不继续了，毕竟我不是为了故意和我组长作对。只是将其作为一个例子来说明我的思路。</p><h2 id="解析器类"><a href="#解析器类" class="headerlink" title="解析器类"></a>解析器类</h2><p>参考代码虽然不太能让我接受，但是它的结构仍然带给了我一定启发。就是解析函数不一定要作为爬虫的方法。</p><p>解析这个步骤如果真的只写在一个函数里面真的非常非常乱，因为解析不只一个函数。比如解析表单的隐藏域，解析页面的url，解析页面内容等。</p><p>单独写一个解析类也可以。至于它和爬虫类的关系，我觉得<strong>组合关系</strong>更为合适（想象出了一只蜘蛛身上背着一个红外透视仪的样子），spider的解析器可以更换，这样子我觉着更符合逻辑一些。</p><p>关于更换解析器的方式，我打算先写一个通用的解析器类作为基类，而后派生出子解析器类，子解析器根据不同的网站采取不同的解析行为。</p><p>然后新建<code>my_parser.py</code>文件，写了一个<code>MyParser</code>类。解析方式是xpath和beautifulsoup。这里面的代码是我把已经用于爬取学校网站的特定代码通用化之后的示例代码，实际上并不会被调用，只是统一接口，用的时候会新写一个类继承它，并覆盖里面的函数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyParser</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">login_data_parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        This parser is for chd        :param url: the url you want to login        :return (a dict with login data,cookies)        '''</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>        html<span class="token operator">=</span>response<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># parse the html</span>        soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#insert parser,following is an example</span>        example_data<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'example_data'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        login_data<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">'example_data'</span><span class="token punctuation">:</span>example_data        <span class="token punctuation">}</span>        <span class="token keyword">return</span> login_data<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies    <span class="token keyword">def</span> <span class="token function">uni_parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">,</span>xpath<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        html<span class="token operator">=</span>response<span class="token punctuation">.</span>text        tree<span class="token operator">=</span>etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span>        result_list<span class="token operator">=</span>tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>xpath<span class="token punctuation">)</span>        <span class="token keyword">return</span> result_list    <span class="token keyword">def</span> <span class="token function">get_urls</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>catalogue_url<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        get all urls that needs to crawl.        '''</span>        <span class="token comment" spellcheck="true">#prepare</span>        base_url<span class="token operator">=</span><span class="token string">'http://example.cn/'</span>        cata_base_url<span class="token operator">=</span>catalogue_url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        para <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'pageIndex'</span><span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">#get the number of pages</span>        xpath<span class="token operator">=</span><span class="token string">'//*[@id="page_num"]/text()'</span>        page_num<span class="token operator">=</span>int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>uni_parser<span class="token punctuation">(</span>cata_base_url<span class="token punctuation">,</span>xpath<span class="token punctuation">,</span>params<span class="token operator">=</span>para<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#repeat get single catalogue's urls</span>        xpath<span class="token operator">=</span><span class="token string">'//a/@href'</span><span class="token comment" spellcheck="true">#link tag's xpath</span>        url_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>page_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            para<span class="token punctuation">[</span><span class="token string">'pageIndex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i            <span class="token comment" spellcheck="true">#get single catalogue's urls</span>            urls<span class="token operator">=</span>self<span class="token punctuation">.</span>uni_parser<span class="token punctuation">(</span>cata_base_url<span class="token punctuation">,</span>xpath<span class="token punctuation">,</span>params<span class="token operator">=</span>para<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>            <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>                url_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base_url<span class="token operator">+</span>str<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> url_list    <span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        get content from the parameter "url"        '''</span>        html<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">.</span>text        soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>        content<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>id<span class="token operator">=</span><span class="token string">'content'</span><span class="token punctuation">)</span>        content<span class="token operator">=</span>str<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">return</span> content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我把构造登录信息的部分放在了解析器中。并在登录中调用。</p><p>登录之后得到的cookies就在参数中传递。</p><h2 id="数据库类"><a href="#数据库类" class="headerlink" title="数据库类"></a>数据库类</h2><p>由于只打算存到数据库，所以并没有写一个“存档宝石类“，或许之后会写。</p><p>目前我只写了一个保存函数，以及自己封装的一个数据库类。</p><p>这个数据库类是<code>my_database.py</code>中的<code>MyDatabase</code>（应该不会撞名吧），目前只封装了insert函数，传入的参数有三个：数据库名，表名，装有记录的字典。代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">MyDatabase</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn<span class="token operator">=</span>pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor<span class="token operator">=</span>self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>db<span class="token punctuation">,</span>table<span class="token punctuation">,</span>record_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param db:name of database that you want to use        :param table:name of table that you want to use        :param record_dict:key for column,value for value        '''</span>        <span class="token comment" spellcheck="true">#1.use the database</span>        sql<span class="token operator">=</span><span class="token string">'use {}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>db<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#2.connect the sql commend</span>        sql<span class="token operator">=</span><span class="token string">'insert into {}('</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>table<span class="token punctuation">)</span>        record_list<span class="token operator">=</span>list<span class="token punctuation">(</span>record_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> record_list<span class="token punctuation">:</span>            sql <span class="token operator">+=</span> str<span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r <span class="token operator">!=</span> record_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                sql <span class="token operator">+=</span> <span class="token string">','</span>        sql<span class="token operator">+=</span><span class="token string">') values('</span>        <span class="token keyword">for</span> r <span class="token keyword">in</span> record_list<span class="token punctuation">:</span>            sql <span class="token operator">+=</span> <span class="token string">'"'</span>            sql <span class="token operator">+=</span> str<span class="token punctuation">(</span>r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            sql <span class="token operator">+=</span> <span class="token string">'"'</span>            <span class="token keyword">if</span> r <span class="token operator">!=</span> record_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                sql <span class="token operator">+=</span> <span class="token string">','</span>        sql<span class="token operator">+=</span><span class="token string">')'</span>        <span class="token comment" spellcheck="true">#3.commit</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    db_data<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'host'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'user'</span><span class="token punctuation">:</span><span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'passwd'</span><span class="token punctuation">:</span><span class="token string">'password'</span><span class="token punctuation">,</span>        <span class="token string">'port'</span><span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">,</span>        <span class="token string">'charset'</span><span class="token punctuation">:</span><span class="token string">'utf8'</span>    <span class="token punctuation">}</span>    test_record<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'idnew_table'</span><span class="token punctuation">:</span><span class="token string">'233'</span>    <span class="token punctuation">}</span>    mydb<span class="token operator">=</span>MyDatabase<span class="token punctuation">(</span><span class="token operator">**</span>db_data<span class="token punctuation">)</span>    mydb<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">'news'</span><span class="token punctuation">,</span><span class="token string">'new_table'</span><span class="token punctuation">,</span>test_record<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>封装之后用起来比较方便。</p><h3 id="save函数"><a href="#save函数" class="headerlink" title="save函数"></a>save函数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token operator">**</span>save_params<span class="token punctuation">)</span><span class="token punctuation">:</span>    mydb<span class="token operator">=</span>MyDatabase<span class="token punctuation">(</span><span class="token operator">**</span>save_params<span class="token punctuation">)</span>    record<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'content'</span><span class="token punctuation">:</span>pymysql<span class="token punctuation">.</span>escape_string<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    mydb<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token string">'dbase'</span><span class="token punctuation">,</span><span class="token string">'bulletin'</span><span class="token punctuation">,</span>record<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pymysql.escape_string()函数是用于将内容转义的，因为爬取的是html代码（就不解析那么细了，直接把那一块html代码全部存下来，打开的时候格式还不会乱），有些内容可能使组合成的sql语句无法执行。</p><h2 id="爬虫类"><a href="#爬虫类" class="headerlink" title="爬虫类"></a>爬虫类</h2><p>给构造函数传入特定的解析器和保存函数，然后调用crawl方法就可以让spider背着特制的parser去爬取网站内容啦~</p><p>登录函数和上次不太一样，做了一些修改，不过主要功能仍然是获取登录之后的cookies的。</p><p>简单说一下修改：我们学校网站登录之后会从登陆页面开始，经过三四次跳转之后才到达首页，期间获取到的cookies都需要保留，这样才能利用这些cookies来进入新闻公告页面。于是禁止重定向，手动获取下一个url，得到这一站的cookies之后再手动跳转，直到跳转到首页。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">class</span> <span class="token class-name">MySpider</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>parser<span class="token punctuation">,</span>save<span class="token punctuation">,</span><span class="token operator">**</span>save_params<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>parser<span class="token operator">=</span>parser<span class="token comment" spellcheck="true">#parser is a object of class</span>        self<span class="token punctuation">.</span>save<span class="token operator">=</span>save<span class="token comment" spellcheck="true">#save is a function</span>        self<span class="token punctuation">.</span>save_params<span class="token operator">=</span>save_params        self<span class="token punctuation">.</span>cookies<span class="token operator">=</span>None        self<span class="token punctuation">.</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.103 Safari/537.36"</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">,</span>home_page_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        login        :param login_url: the url you want to login        :param login_data_parser: a callback function to get the login_data you need when you login,return (login_data,response.cookies)        :param target_url: Used to determine if you have logged in successfully        :return: response of login        '''</span>        login_data<span class="token operator">=</span>None        <span class="token comment" spellcheck="true">#get the login data</span>        login_data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>login_data_parser<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#login without redirecting</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>login_data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        cookies_num<span class="token operator">=</span><span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>home_page_url<span class="token operator">!=</span>None <span class="token operator">and</span> response<span class="token punctuation">.</span>url<span class="token operator">!=</span>home_page_url<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#if spider is not reach the target page</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[spider]: I am at the "{}" now'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[spider]: I have got a cookie!Its content is that \n"{}"'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#merge the two cookies</span>            cookies<span class="token operator">=</span>dict<span class="token punctuation">(</span>cookies<span class="token punctuation">,</span><span class="token operator">**</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>            cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>cookies<span class="token punctuation">)</span>            cookies_num<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[spider]: Now I have {} cookies!'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>cookies_num<span class="token punctuation">)</span><span class="token punctuation">)</span>            next_station<span class="token operator">=</span>response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Location'</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[spider]: Then I will go to the page whose url is "{}"'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>next_station<span class="token punctuation">)</span><span class="token punctuation">)</span>            response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>next_station<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        cookies<span class="token operator">=</span>dict<span class="token punctuation">(</span>cookies<span class="token punctuation">,</span><span class="token operator">**</span>response<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>        cookies<span class="token operator">=</span>requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>cookies<span class="token punctuation">)</span>        cookies_num<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>home_page_url<span class="token operator">!=</span>None <span class="token operator">and</span> response<span class="token punctuation">.</span>url<span class="token operator">==</span>home_page_url<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"login successfully"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cookies<span class="token operator">=</span>cookies        <span class="token keyword">return</span> response    <span class="token keyword">def</span> <span class="token function">crawl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">,</span>home_page_url<span class="token punctuation">,</span>catalogue_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>login<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>home_page_url<span class="token punctuation">)</span>        url_list<span class="token operator">=</span>self<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>get_urls<span class="token punctuation">(</span>catalogue_url<span class="token punctuation">,</span>cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> url_list<span class="token punctuation">:</span>            content<span class="token operator">=</span>self<span class="token punctuation">.</span>parser<span class="token punctuation">.</span>get_content<span class="token punctuation">(</span>url<span class="token punctuation">,</span>cookies<span class="token operator">=</span>self<span class="token punctuation">.</span>cookies<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>save<span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token operator">**</span>self<span class="token punctuation">.</span>save_params<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><p>为了更好地展示结构，大部分内容都pass省略掉。想看具体代码可以去我github的<a href="https://github.com/HaneChiri/Spider" target="_blank" rel="noopener">spider库</a></p><p>这个文件内首先创建了一个特定解析类，继承自通用解析类，再写了一个保存函数，准备好参数，最后爬取。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> my_spider <span class="token keyword">import</span> MySpider<span class="token keyword">from</span> my_parser <span class="token keyword">import</span> MyParser<span class="token keyword">from</span> my_database <span class="token keyword">import</span> MyDatabase<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> requests<span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">chdParser</span><span class="token punctuation">(</span>MyParser<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">login_data_parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        This parser is for chd        :param url: the url you want to login        :return (a dict with login data,cookies)        '''</span>        <span class="token keyword">pass</span>        <span class="token keyword">return</span> login_data<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies    <span class="token keyword">def</span> <span class="token function">get_urls</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>catalogue_url<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        get all urls that needs to crawl.        '''</span>        <span class="token comment" spellcheck="true">#prepare</span>        <span class="token keyword">pass</span>        <span class="token comment" spellcheck="true">#get page number</span>        <span class="token keyword">pass</span>        <span class="token comment" spellcheck="true">#repeat get single catalogue's urls</span>        <span class="token keyword">pass</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>page_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            para<span class="token punctuation">[</span><span class="token string">'pageIndex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i            <span class="token comment" spellcheck="true">#get single catalogue's urls</span>            <span class="token keyword">pass</span>        <span class="token keyword">return</span> url_list<span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span><span class="token operator">**</span>save_params<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    login_url<span class="token operator">=</span><span class="token string">"pass"</span><span class="token comment" spellcheck="true">#省略</span>    home_page_url<span class="token operator">=</span><span class="token string">"pass"</span>    catalogue_url<span class="token operator">=</span><span class="token string">"pass"</span>    parser<span class="token operator">=</span>chdParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    save_params<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'host'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'user'</span><span class="token punctuation">:</span><span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'passwd'</span><span class="token punctuation">:</span><span class="token string">'password'</span><span class="token punctuation">,</span>        <span class="token string">'port'</span><span class="token punctuation">:</span><span class="token number">3306</span><span class="token punctuation">,</span>        <span class="token string">'charset'</span><span class="token punctuation">:</span><span class="token string">'utf8'</span>    <span class="token punctuation">}</span>    sp<span class="token operator">=</span>MySpider<span class="token punctuation">(</span>parser<span class="token punctuation">,</span>save<span class="token punctuation">,</span><span class="token operator">**</span>save_params<span class="token punctuation">)</span>    sp<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>home_page_url<span class="token punctuation">,</span>catalogue_url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记4模拟登录函数的优化</title>
      <link href="/posts/python_spider_note4optimization_of_the_login_function/"/>
      <url>/posts/python_spider_note4optimization_of_the_login_function/</url>
      
        <content type="html"><![CDATA[<p>前面写的代码虽然完成了爬取的功能，但是过于凌乱，于是打算重构一遍。首先从登陆开始</p><a id="more"></a><h1 id="改进前的代码"><a href="#改进前的代码" class="headerlink" title="改进前的代码"></a>改进前的代码</h1><h2 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h2><p>这是第一次写的登录函数，获取登录信息和登录本身是放在一起的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    登录并返回已经登录的会话    :return: 已经登录的会话（session）    """</span>    <span class="token comment" spellcheck="true">#设置</span>    login_url <span class="token operator">=</span> <span class="token string">'http://ids.chd.edu.cn/authserver/login?service=http%3A%2F%2Fportal.chd.edu.cn%2F'</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#新建会话</span>    session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取登录校验码</span>    html<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    lt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    dllt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    _eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    login_data<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'btn'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>        <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>        <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>        <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>        <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#登录</span>    response<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>login_data<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>url<span class="token operator">==</span><span class="token string">'http://portal.chd.edu.cn/'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功！'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>第二次是将全部函数封装到类中，这次将获取登录信息从其中分出来。但是两者关系仍然太过于紧密。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">spider</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    爬虫类    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#初始化登录session</span>        self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#登录状态</span>        self<span class="token punctuation">.</span>headers<span class="token operator">=</span>headers<span class="token comment" spellcheck="true">#头信息</span>        self<span class="token punctuation">.</span>cookiejar<span class="token operator">=</span>http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span><span class="token string">'cookie.txt'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_login_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        获取登录需要的数据        :param login_url: 登录页面url        :return: 一个存有登录数据的字典        '''</span>        <span class="token comment" spellcheck="true"># 获取登录校验码</span>        html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        lt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        dllt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        _eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        login_data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'btn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>            <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>            <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>            <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>            <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown        <span class="token punctuation">}</span>        <span class="token keyword">return</span> login_data    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""            登录并返回已经登录的会话            :return: 已经登录的会话（session）        """</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>load_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>is_login <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#获取登录信息</span>            login_data<span class="token operator">=</span>self<span class="token punctuation">.</span>get_login_data<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 登录</span>            response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>login_data<span class="token punctuation">)</span>            <span class="token keyword">if</span> response<span class="token punctuation">.</span>url<span class="token operator">!=</span>login_url<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">True</span>                self<span class="token punctuation">.</span>save_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>session    <span class="token comment" spellcheck="true">#省略后面的函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>这次改进，我打算让<code>login()</code>函数与获取登录信息用的函数关系没有那么紧密，让后者可以被替换或者不用。</p><p>所以使用了回调函数，也就是将函数指针作为参数传入，不过python变量本身就像指针一样，直接传变量即可。</p><h2 id="函数头"><a href="#函数头" class="headerlink" title="函数头"></a>函数头</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">,</span>login_data_parser<span class="token operator">=</span>None<span class="token punctuation">,</span>target_url<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入了三个参数，</p><ul><li><strong>login_url</strong> :  显而易见，这是登录页面的url</li><li><strong>login_data_parser</strong> : 这是一个函数，用于解析页面中随机生成的隐藏域代码的函数，可以不传入</li><li><strong>target_url</strong> : 用于判断是否登录成功，这是登录之后会跳转到的页面</li></ul><h2 id="获取登录信息"><a href="#获取登录信息" class="headerlink" title="获取登录信息"></a>获取登录信息</h2><p>接着判断参数是否为函数（是否可调用），如果可以调用，就调用它获取登录信息。在这里不需要关心函数内部具体如何获取，而只用关心它的接口。</p><p>这个函数的返回值是一个装有登录信息的dict，和一个cookies。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">,</span>login_data_parser<span class="token operator">=</span>None<span class="token punctuation">,</span>target_url<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        login_data<span class="token operator">=</span>None        <span class="token comment" spellcheck="true">#get the login data</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>login_data_parser<span class="token operator">!=</span>None <span class="token operator">and</span> callable<span class="token punctuation">(</span>login_data_parser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            login_data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>login_data_parser<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>然后就完成了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">,</span>login_data_parser<span class="token operator">=</span>None<span class="token punctuation">,</span>target_url<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        login        :param login_url: the url you want to login        :param login_data_parser: a callback function to get the login_data you need when you login,return (login_data,response.cookies)        :param target_url: Used to determine if you have logged in successfully        :return: response of login        '''</span>        login_data<span class="token operator">=</span>None        <span class="token comment" spellcheck="true">#get the login data</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>login_data_parser<span class="token operator">!=</span>None <span class="token operator">and</span> callable<span class="token punctuation">(</span>login_data_parser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            login_data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>login_data_parser<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#login</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>login_data<span class="token punctuation">,</span>cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target_url<span class="token operator">!=</span>None <span class="token operator">and</span> response<span class="token punctuation">.</span>url<span class="token operator">==</span>target_url<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"login successfully"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cookies<span class="token operator">=</span>cookies        <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取登录信息函数"><a href="#获取登录信息函数" class="headerlink" title="获取登录信息函数"></a>获取登录信息函数</h2><p>这个和前面就是一样的了。只要修改传给login函数的函数，就可以获取不同网站的登录信息。login函数变得更加通用了，不再过于依赖登录信息函数存在。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">chd_login_data_parser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        This parser is for chd        :param url: the url you want to login        :return (a dict with login data,cookies)        '''</span>        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>        html<span class="token operator">=</span>response<span class="token punctuation">.</span>text        <span class="token comment" spellcheck="true"># parse the html</span>        soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>        lt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        dllt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        _eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>        login_data<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">'input account:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">'input passwd:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'btn'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>            <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>            <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>            <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>            <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>            <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown        <span class="token punctuation">}</span>        <span class="token keyword">return</span> login_data<span class="token punctuation">,</span>response<span class="token punctuation">.</span>cookies<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git恢复误提交的内容</title>
      <link href="/posts/git_reset_incorrect_commit/"/>
      <url>/posts/git_reset_incorrect_commit/</url>
      
        <content type="html"><![CDATA[<p>在图书馆敲下最后几行代码，然后就着手机热点把爬虫代码push上去之后，突然想起来，我好像忘了把账号密码部分改成手动输入，现在push上去的是明文啊！掀桌！早知道就回宿舍上传了，说不准还能想起来。</p><a id="more"></a><h1 id="问题及其解决方案"><a href="#问题及其解决方案" class="headerlink" title="问题及其解决方案"></a>问题及其解决方案</h1><p>已经上传了，即便我再改回来上传，别人也可以从git log里面看到我的账号密码。</p><p>那就版本回退，重新更新再上传。但是在我使用<code>GitHub Desktop</code>的<code>Revert this commit</code>的时候它却让我解决一大堆冲突……等会儿，啥时候多出来那么多“changes”？？？刚刚还一个都没有啊，怎么我用了这个选项还没回退就出现一大堆冲突？</p><p>我对git其实不熟练，用GUI界面也是，解决这些冲突比较麻烦。所以最后的解决方案比较粗暴：</p><ol><li>删除本地库以解决那一大堆的冲突文件</li><li>从远程库clone回来</li><li>把库内文件全部打包复制在别的路径</li><li>在库里面打开git bash，使用<code>git reset --hard 版本号</code>回到没出事的版本</li><li>将前面备份的文件复制回来</li><li>修改之后重新提交，完成</li></ol><h1 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h1><ul><li>得多准备一条分支，别直接在主分支上边写</li><li>一定要注意代码中的隐私信息！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手工归档编程项目</title>
      <link href="/posts/archive_project/"/>
      <url>/posts/archive_project/</url>
      
        <content type="html"><![CDATA[<p>以前写代码建立的工程到处堆放，导致不能很好的找到以前的代码。虽然以前简单地划分了一下文件夹，但并没有投入太多精力去想如何分类。所以打算养成归档编程项目的好习惯，记录一下过程。也给读者们一个参考。</p><a id="more"></a><p>不放图了，文件树结构就用无序列表来显示。</p><h1 id="分类整理"><a href="#分类整理" class="headerlink" title="分类整理"></a>分类整理</h1><p>首先把所有项目文件夹全部放进一个专门的文件夹里面，最好不要中文名，也不要拼音，这是个好习惯，以后的命名也是。我将它起名为<code>DEVELOP</code>。</p><p>将它放置在F盘（我拿F盘当文件盘），并且设置一个快捷方式在桌面，嘿嘿我还给快捷方式选了一个很炫酷的图标让自己开心一下。</p><p>然后根据语言将其分为<code>cpp_develop</code>，<code>py_develop</code>，<code>vb_develop</code>，<code>web_develop</code>等（html，css，js等统一划分到web_develop里面，因为我个人觉得它们三个分不开）</p><p>在每一个语言文件夹里面再细分(用cpp举例)</p><table><thead><tr><th>文件夹名</th><th>内容</th></tr></thead><tbody><tr><td>cpp_archive</td><td>用于归档已经完成的项目，方便以后查找</td></tr><tr><td>cpp_project</td><td>用于存放正在开发的项目</td></tr><tr><td>cpp_test</td><td>用于测试。这里面我建立了几个空项目用于在别人问我代码问题的时候测试</td></tr><tr><td>cpp_example</td><td>用于存放从各种渠道得到的源代码，用于研究学习，里面的代码是别人的</td></tr><tr><td>cpp_lessonwork</td><td>用于存放课设或者课程实验代码，可并入cpp_project</td></tr><tr><td>cpp_pratice</td><td>用于存放一些不足以称为项目的代码</td></tr></tbody></table><p>现在的目录大概是这样的：</p><ul><li>DEVELOP<ul><li>cpp_develop<ul><li>cpp_archive  </li><li>cpp_project </li><li>cpp_test </li><li>cpp_example </li><li>cpp_lessonwork  </li><li>cpp_pratice</li></ul></li><li>py_develop</li><li>vb_develop</li><li>web_develop</li></ul></li></ul><h1 id="归档规则"><a href="#归档规则" class="headerlink" title="归档规则"></a>归档规则</h1><p>项目名称+六位数日期(附加信息)</p><p>比如：</p><p>词法分析代码高亮190403(修复了xx)</p><p>日期是为了手动版本控制，利用肉眼就能知道哪些信息。以前做课设的时候就这样弄的（不过队友都不配合我这样搞，我发的版本是多少，改了之后发过来还是多少……）</p><p>总之归档时保证下次打开这个项目时能够唤醒当时编写时的记忆即可。</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简易倒排索引</title>
      <link href="/posts/simple_inverted_index/"/>
      <url>/posts/simple_inverted_index/</url>
      
        <content type="html"><![CDATA[<p>智能信息检索这门课程有个上机作业，题目是“实现倒排索引”。</p><p>用到了以前没有学的STL中的vector。</p><p>经过两次课上写代码（3小时）加上课后修bug的时间（晚上十点到十二点）总共5个小时，终于完成了一个简易的倒排索引。因为十点时已经太困，喝了柠檬茶提神结果现在睡不着，所以继续熬夜把博客写完吧。</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>勿抄袭代码，代码仅供参考。转载注明出处</p><h1 id="倒排索引简介"><a href="#倒排索引简介" class="headerlink" title="倒排索引简介"></a>倒排索引简介</h1><p>为了从文档集（collection）中检索出想要的结果，首先要将文档集中的每个词项（term）建立索引，以确定词项所在的文档（document）的id，从而返回根据关键字查询的结果。</p><p>倒排索引的格式大概是下图这样（代码成果图）：</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/simple_inverted_index.png" alt=""></p><p>每一个词项后面跟着它在文档集中出现的次数，以及出现过的文档的id所组成的一个序列。</p><p>例如第一条：</p><table><thead><tr><th>词项</th><th>词频</th><th>倒排记录表</th></tr></thead><tbody><tr><td>API</td><td>6</td><td>4，5，6</td></tr></tbody></table><p>就代表<code>API</code>这个词在文档集（六个文件）中出现了六次，这六次分布在文档4、文档5和文档6。</p><p>搜索引擎大致就是这个原理，建立好了索引之后，只需要把你搜索的关键词对应的posting求交集然后把对应的文档显示出来就可以了。</p><h1 id="数据结构设计"><a href="#数据结构设计" class="headerlink" title="数据结构设计"></a>数据结构设计</h1><h2 id="文档（Document）"><a href="#文档（Document）" class="headerlink" title="文档（Document）"></a>文档（Document）</h2><p>文档其实在这里就是文件，对于每个文档，都有一个文档名，以及相对应的文档ID，它们得绑定好，否则会混乱。因此将它们放在一个结构体里面。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> Document<span class="token punctuation">{</span>    string docName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文档名</span>    <span class="token keyword">int</span> docID<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文档id</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引项（IndexItem）"><a href="#索引项（IndexItem）" class="headerlink" title="索引项（IndexItem）"></a>索引项（IndexItem）</h2><p>同样的，每一个记录的词项、词频和记录表也是绑定的，所以也打包起来。文档id的数目不定，又不想自己写链表或者动态数组怕出错，因此采用了STL（标准模板库）里面的动态数组vector（向量容器）。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">struct</span> IndexItem<span class="token punctuation">{</span>    string term<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//词项</span>    <span class="token keyword">int</span> frequence<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//词频</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> posting<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录表</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引类（CIndex）"><a href="#索引类（CIndex）" class="headerlink" title="索引类（CIndex）"></a>索引类（CIndex）</h2><p>代码应该不难看懂。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CIndex</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>IndexItem<span class="token operator">></span> indexList<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//索引表</span>    vector<span class="token operator">&lt;</span>Document<span class="token operator">></span> collection<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//文档集</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//利用文件名数组初始化文档集</span>    <span class="token function">CIndex</span><span class="token punctuation">(</span>string p_collection<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示文档集内所有文档的文件名</span>    <span class="token keyword">void</span> <span class="token function">showCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//显示当前倒排索引表</span>    <span class="token keyword">void</span> <span class="token function">showIndexList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//索引单篇文档</span>    <span class="token keyword">int</span> <span class="token function">indexDocument</span><span class="token punctuation">(</span>FILE<span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token keyword">int</span> docID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//索引文档集</span>    <span class="token keyword">int</span> <span class="token function">indexCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//排序索引表</span>    <span class="token keyword">int</span> <span class="token function">sortIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//索引表合并同类项</span>    <span class="token keyword">int</span> <span class="token function">mergeIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">CIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h1><ol><li>扫描一篇文档，将这篇文档对应的文档ID加入对应词项的posting</li><li>对文档集中每一篇文档重复第一步，获取所有词项及其对应的posting加入索引表，此时每个词项的posting中只有一个文档ID，并且有很多重复的词项记录；</li><li>排序索引表；</li><li>将重复的项的posting合并，并且增加词频，删除重复项。</li></ol><p>2019-4-4补充：想到一个新思路——直接按照ID从小到大扫描一遍整个文档集，每扫描一个词项，就在词典中查找这个词项，增加词频，然后把现在正在处理的文档的ID加入到posting，最后再排个序即可。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="有参构造函数"><a href="#有参构造函数" class="headerlink" title="有参构造函数"></a>有参构造函数</h2><p>初始化文档集</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@name &lt;CIndex::CIndex></span><span class="token comment" spellcheck="true">//@brief &lt;初始化文档集></span><span class="token comment" spellcheck="true">//@param &lt;string p_collection[]:文档文件名数组>&lt;int n:数组长度></span>CIndex<span class="token operator">::</span><span class="token function">CIndex</span><span class="token punctuation">(</span>string p_collection<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    Document nextDoc<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        nextDoc<span class="token punctuation">.</span>docName <span class="token operator">=</span> p_collection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nextDoc<span class="token punctuation">.</span>docID <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编号从1开始</span>        collection<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nextDoc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引单篇文档"><a href="#索引单篇文档" class="headerlink" title="索引单篇文档"></a>索引单篇文档</h2><p>大致思路是，一个个字符读取进来，如果是字母就一直读完整个单词，并把这个单词作为词项加入表中。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@name &lt;CIndex::indexDocument></span><span class="token comment" spellcheck="true">//@brief &lt;索引单篇文档></span><span class="token comment" spellcheck="true">//@param &lt;FILE * fp:已打开的文件指针>&lt;int docID:此文件的编号></span><span class="token comment" spellcheck="true">//@return &lt;扫描到的词项数量></span><span class="token keyword">int</span> CIndex<span class="token operator">::</span><span class="token function">indexDocument</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span> fp<span class="token punctuation">,</span> <span class="token keyword">int</span> docID<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//扫描用的变量</span>    IndexItem indexItem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打包用的变量</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//扫描到的词项数量</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//一次循环获取一个单词</span>        <span class="token comment" spellcheck="true">//找到第一个字母</span>        <span class="token keyword">do</span>        <span class="token punctuation">{</span>            ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止空文件导致的无限循环</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isalpha</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//防止因文件后面的空行而索引空字符串</span>        <span class="token comment" spellcheck="true">//读取单词，给索引项赋值</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            indexItem<span class="token punctuation">.</span>term <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>            ch <span class="token operator">=</span> <span class="token function">fgetc</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        indexItem<span class="token punctuation">.</span>frequence <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        indexItem<span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>docID<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将本文件的文档ID加入posting</span>        <span class="token comment" spellcheck="true">//把索引项加入词典</span>        indexList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>indexItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//清空索引项，准备下一次</span>        indexItem<span class="token punctuation">.</span>term<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        indexItem<span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="索引文档集"><a href="#索引文档集" class="headerlink" title="索引文档集"></a>索引文档集</h2><p>索引文档弄好之后，索引整个文档集不过是加个循环而已</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@name &lt;CIndex::indexCollection></span><span class="token comment" spellcheck="true">//@brief &lt;索引文档集></span><span class="token comment" spellcheck="true">//@return &lt;词项总数目></span><span class="token keyword">int</span> CIndex<span class="token operator">::</span><span class="token function">indexCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打开对应的文件并索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> collection<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//打开文件</span>        FILE<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>collection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>docName<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//索引单篇文档</span>        num<span class="token operator">+</span><span class="token operator">=</span><span class="token function">indexDocument</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> collection<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>docID<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭文件</span>        <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排序索引表"><a href="#排序索引表" class="headerlink" title="排序索引表"></a>排序索引表</h2><p>直接使用<code>&lt;algorithm&gt;</code>头文件里面的<code>sort()</code>函数进行排序，自定义比较函数<code>cmp()</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>IndexItem a<span class="token punctuation">,</span> IndexItem b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span>term<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>term<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//词项按照从小到大排序</span><span class="token punctuation">}</span><span class="token keyword">int</span> CIndex<span class="token operator">::</span><span class="token function">sortIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">sort</span><span class="token punctuation">(</span>indexList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> indexList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@name &lt;CIndex::mergeIndex></span><span class="token comment" spellcheck="true">//@brief &lt;索引表合并同类项></span><span class="token keyword">int</span> CIndex<span class="token operator">::</span><span class="token function">mergeIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    IndexItem item1<span class="token punctuation">,</span>item2<span class="token punctuation">;</span>    <span class="token function">sortIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>IndexItem<span class="token operator">></span><span class="token operator">::</span>iterator it_cur<span class="token operator">=</span>indexList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建迭代器</span>    vector<span class="token operator">&lt;</span>IndexItem<span class="token operator">></span><span class="token operator">::</span>iterator it_next <span class="token operator">=</span> it_cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> temp<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于合并posting的迭代器</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>it_cur <span class="token operator">!=</span> indexList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>it_cur<span class="token operator">+</span><span class="token number">1</span><span class="token operator">!=</span>indexList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> it_next <span class="token operator">=</span> it_cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>term <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_next<span class="token punctuation">)</span><span class="token punctuation">.</span>term<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这个循环内处理掉所有与当前词项重复的词项</span>            <span class="token comment" spellcheck="true">//将二者的posting排序</span>            <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>it_next<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_next<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//有序合并两者的posting</span>            p1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_next<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_next<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果集中加入较小的元素</span>                <span class="token punctuation">{</span>                    temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//这个while用于跳过重复的元素</span>                    p1<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>                    p2<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//遇到相同的则两个都后移，避免出现重复</span>                    p1<span class="token operator">++</span><span class="token punctuation">;</span>                    p2<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p1 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果串1没有合并完则将串1后面部分直接复制</span>            <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>                p1<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p2 <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token operator">*</span>it_next<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token operator">*</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>                p2<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//删除结果集重复部分</span>            temp<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>frequence<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//词频增加</span>            <span class="token punctuation">(</span><span class="token operator">*</span>it_cur<span class="token punctuation">)</span><span class="token punctuation">.</span>posting<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将结果复制</span>            indexList<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it_next<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除重复项</span>            temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>it_cur <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">!=</span> indexList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> it_next <span class="token operator">=</span> it_cur <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        it_cur<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*失败代码    for (int i = 0; i &lt; indexList.size()-1; i++)    {        item1 = indexList[i];        item2 = indexList[i + 1];        int j = 1;//j是相对于item1的偏移量        while (item1.term == item2.term)        {            vector&lt;int> temp(item1.posting.size()+item2.posting.size());            sort(item1.posting.begin(), item1.posting.end());            sort(item2.posting.begin(), item2.posting.end());            merge(item1.posting.begin(), item1.posting.end(), item2.posting.begin(), item2.posting.end(), temp.begin());            indexList[i].posting.assign(temp.begin(), temp.end());            indexList.erase(indexList.begin()+i+j);            indexList[i].frequence++;            item2 = indexList[i + j];        }        j = 1;    }    */</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一开始使用的是普通的for循环，但是发现随着元素的删除，循环次数应该改变，因此改成了迭代器加while的方式。</p><p>迭代器还是个蛮有用的东西，就是一个封装得比较好的指针。</p><h2 id="main测试"><a href="#main测试" class="headerlink" title="main测试"></a>main测试</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"CIndex.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string fileList<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">"doc1.txt"</span><span class="token punctuation">,</span>    <span class="token string">"doc2.txt"</span><span class="token punctuation">,</span>    <span class="token string">"doc3.txt"</span><span class="token punctuation">,</span>    <span class="token string">"doc4.txt"</span><span class="token punctuation">,</span>    <span class="token string">"doc5.txt"</span><span class="token punctuation">,</span>    <span class="token string">"doc6.txt"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CIndex <span class="token function">in</span><span class="token punctuation">(</span>fileList<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">showCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">indexCollection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">mergeIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    in<span class="token punctuation">.</span><span class="token function">showIndexList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>老鼠和毒药问题</title>
      <link href="/posts/rats_and_poison/"/>
      <url>/posts/rats_and_poison/</url>
      
        <content type="html"><![CDATA[<p>昨天在上完课回宿舍的路上，楠哥提起了一道他在某个基础知识竞赛上遇到的题目，我觉得解法很巧妙，分享记录一下。</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>有1024瓶水，其中一瓶有毒，你有10只老鼠用于试毒（这里是题目假设，所以别下不了手让老鼠试毒OVO），老鼠如果喝到毒药，会在一星期后死亡。你有一周时间，如何找出这一瓶毒药？</p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>楠哥说他刚开始想用二分，可是时间上不允许。</p><p>也就是把瓶子分两组，每组的瓶子里都倒出一点混合在一起给一只老鼠喝，哪一组的老鼠中毒了，就再把这一组的瓶子分两组，以此类推。但是这样时间上来不及，第一周缩小范围到512瓶……第九周2瓶，第十周找到。耗时太长。</p><hr><p>于是他想到了另一种解法：</p><p>给每个瓶子标号，给老鼠也标号0到9。</p><p>从逻辑上将10只老鼠当成10位的二进制数。</p><p>将瓶子的编号转换为二进制数，比如第5号瓶子转换为第101号瓶子，将编号第0位（即最右边一位）为1的水给0号老鼠喝，编号第1位（即从右边数第二位）为1的水给1号老鼠喝，以此类推。</p><p>也就是说，0号老鼠喝了1,11,101,111……这些瓶子的水，1号老鼠喝了10,11，110,111……这些瓶子的水，后面的老鼠也是如此。</p><p>如果一周时间到，0号老鼠嗝屁了，那么就说明有毒的水的编号的第0位（最右边的位）为1；如果1号老鼠嗝屁了，就说明有毒的水编号的第1位是1……</p><p>最后根据10只老鼠中毒情况，得到一个10位的二进制数，这个数转换为十进制就是毒药的编号。</p><p>我觉得这个解法很巧妙。</p><p>这让我想起了在听我们学校ACM协会的某节课的时候提到的状态压缩，也是使用二进制的，不过我当时没听懂，也就没记下来。</p><p>老鼠有10只，它们的死活可以表示2^10种状态，恰好是1024种。</p>]]></content>
      
      
      <categories>
          
          <category> 算法模型 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记3封装爬虫类</title>
      <link href="/posts/python_spider_note3class_spider/"/>
      <url>/posts/python_spider_note3class_spider/</url>
      
        <content type="html"><![CDATA[<p>在完成了基本的爬取任务之后，接到了将其封装为一个爬虫类的任务</p><p>传送门：</p><ul><li><p><a href="https://hanechiri.github.io/post/python_spider_note1simple_spider/#more" target="_blank" rel="noopener">python爬虫学习笔记1一个简单的爬虫</a></p></li><li><p><a href="https://hanechiri.github.io/post/python_spider_note2login_and_database/#more" target="_blank" rel="noopener">python爬虫学习笔记2模拟登录与数据库</a></p></li></ul><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>转载注明出处。</p><h1 id="任务介绍"><a href="#任务介绍" class="headerlink" title="任务介绍"></a>任务介绍</h1><p>1、尝试不使用session去进行爬取，最好能将cookies保存下来可以供下次使用。<br>2、第二个是尝试将这些封装成面向对象的方式，模拟登陆，爬取，解析，写入数据库这几个部分分离开来。</p><p>先做第二个任务</p><h1 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h1><h2 id="190310-周日"><a href="#190310-周日" class="headerlink" title="190310 周日"></a>190310 周日</h2><h3 id="创建爬虫类"><a href="#创建爬虫类" class="headerlink" title="创建爬虫类"></a>创建爬虫类</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">spider</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    爬虫类    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#初始化登录session</span>        self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#登录状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取登录所需信息"><a href="#获取登录所需信息" class="headerlink" title="获取登录所需信息"></a>获取登录所需信息</h3><p>获取登录信息（账号密码以及校验码）这部分与登录可以分开，单独写一个成员函数。</p><p>在输入密码这个地方，本来查到可以使用<code>getpass</code>这个库里面的<code>getpass()</code>函数来使用类似linux的密码不回显，用法如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> getpasspasswd<span class="token operator">=</span>getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#测试用输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但是直接在pycharm里面运行是会卡在输入那里，并且也会回显。后来查到了，这个方法是在命令行当中才管用，我试了一下在python命令行中使用，</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">import</span> getpass<span class="token operator">>></span><span class="token operator">></span>passwd<span class="token operator">=</span>getpass<span class="token punctuation">.</span>getpass<span class="token punctuation">(</span><span class="token punctuation">)</span>Warning<span class="token punctuation">:</span> Password input may be echoed<span class="token punctuation">.</span>Password<span class="token punctuation">:</span> <span class="token operator">></span>? <span class="token number">123</span><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">print</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然可以使用了，但是仍然会回显。所以这个命令行说的应该不是python命令行，而是cmd或者shell。</p><p>在虚拟环境的cmd里面，成功了，Password后面未回显我的输入，下面的数字是测试用的输出，将密码打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">(</span>venv<span class="token punctuation">)</span> F<span class="token punctuation">:</span>\DEVELOP\py_develop\spider<span class="token operator">></span>python test<span class="token punctuation">.</span>pyPassword<span class="token punctuation">:</span><span class="token number">123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不过为了方便调试代码，我还是使用了<code>input()</code>函数</p><p>参考链接：</p><ul><li><a href="https://www.cnblogs.com/AaronFan/p/6057224.html" target="_blank" rel="noopener">python3-password在输入密码时隐藏密码-博客园</a></li><li><a href="https://www.cnblogs.com/Richardzhu/p/5162289.html" target="_blank" rel="noopener">Python之控制台输入密码的方法-博客园</a></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_login_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取登录需要的数据    :param login_url: 登录页面url    :return: 一个存有登录数据的字典    '''</span>    <span class="token comment" spellcheck="true"># 获取登录校验码</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    lt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    dllt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    _eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    login_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'btn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>        <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>        <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>        <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>        <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown    <span class="token punctuation">}</span>    <span class="token keyword">return</span> login_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        登录并返回已经登录的会话        :return: 已经登录的会话（session）    """</span>    login_data<span class="token operator">=</span>self<span class="token punctuation">.</span>get_login_data<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取登录信息</span>    <span class="token comment" spellcheck="true"># 登录</span>    response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>login_data<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>url<span class="token operator">!=</span>login_url<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果没有跳转回登录页面，那么就是登录成功</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="day8进度"><a href="#day8进度" class="headerlink" title="day8进度"></a>day8进度</h3><ol><li>了解了一下Python类与对象的语法，尝试将代码封装到类中（一些中间代码未保留），不过想要将它改的有通用性（能够爬取其他网站）有些困难，还是先固定只能爬取信息门户</li><li>接下来的计划：将类完成之后再慢慢优化，学习使用cookie代替session保持登录，以及数据库的更多知识</li></ol><h2 id="190311-周一"><a href="#190311-周一" class="headerlink" title="190311 周一"></a>190311 周一</h2><h3 id="day9进度"><a href="#day9进度" class="headerlink" title="day9进度"></a>day9进度</h3><ol><li>图书馆借了一本mysql的书籍，在mysql命令行上练习创建数据库，表以及字段的操作</li><li>在将代码封装成类的过程中，学习了如何将参数作为一个字典传入，以及将一个字典作为参数传入</li></ol><h2 id="190312-周二"><a href="#190312-周二" class="headerlink" title="190312 周二"></a>190312 周二</h2><h3 id="获取单页目录内的公告url"><a href="#获取单页目录内的公告url" class="headerlink" title="获取单页目录内的公告url"></a>获取单页目录内的公告url</h3><p>目录网页的内容：</p><ul><li>关于……的通知</li><li>关于……获奖</li><li>……</li><li>2700条记录，分为138页显示，下一页</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_url_from_cata</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    返回当前页面的url组成的列表    :param url: 无参数的url#如：http://portal.xxx.edu.cn/detach.portal    :param params:url的？后参数#如：?pageIndex=1    :return:以页面指向的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式    '''</span>    <span class="token comment" spellcheck="true">#获取url域名部分</span>    <span class="token comment" spellcheck="true">#如：http://portal.xxx.edu.cn</span>    base<span class="token operator">=</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    base<span class="token operator">=</span>base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'//'</span><span class="token operator">+</span>base<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#获取当前页所有链接</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token comment" spellcheck="true">#用params参数来拼接参数</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    rss_title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'rss-title'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有链接</span>    result_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> rss_title<span class="token punctuation">:</span>        title<span class="token operator">=</span>url<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        page_url<span class="token operator">=</span>base<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>url<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#将url拼接完整</span>        l<span class="token operator">=</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>page_url<span class="token punctuation">)</span>        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(result_list)</span>    <span class="token keyword">return</span> result_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取所有目录内的公告url"><a href="#获取所有目录内的公告url" class="headerlink" title="获取所有目录内的公告url"></a>获取所有目录内的公告url</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_url_from_cata_all</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取页面的底部跳转到其他页的链接并获取目录，给出一个目录页的url，获取相关的所有目录页的url并获取链接    :param url: 其中任何一个目录页的url#如：http://portal.xxx.edu.cn/detach.portal?pageIndex=1    :return:以所有页面的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式    '''</span>    <span class="token comment" spellcheck="true">#获取除去参数之后的url</span>    <span class="token comment" spellcheck="true">#如：http://portal.xxx.edu.cn/detach.portal</span>    base<span class="token operator">=</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取页数</span>    reg <span class="token operator">=</span> <span class="token string">'共.*?条记录 分(.*?)页显示'</span>    reg <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取url</span>    para <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'pageIndex'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'.pmn'</span><span class="token punctuation">:</span> <span class="token string">'view'</span><span class="token punctuation">,</span>        <span class="token string">'.ia'</span><span class="token punctuation">:</span> <span class="token string">'false'</span><span class="token punctuation">,</span>        <span class="token string">'action'</span><span class="token punctuation">:</span> <span class="token string">'bulletinsMoreView'</span><span class="token punctuation">,</span>        <span class="token string">'search'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token string">'groupid'</span><span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>        <span class="token string">'.pen'</span><span class="token punctuation">:</span> <span class="token string">'pe65'</span>    <span class="token punctuation">}</span>    ret<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_url_from_cata<span class="token punctuation">(</span>base<span class="token punctuation">,</span>params<span class="token operator">=</span>para<span class="token punctuation">)</span><span class="token punctuation">)</span>        para<span class="token punctuation">[</span><span class="token string">'pageIndex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="day10进度"><a href="#day10进度" class="headerlink" title="day10进度"></a>day10进度</h3><p>实现了自动获取目录页数，并从每一页目录获取所有的url，返回当前所有公告的url的列表</p><h2 id="190313-周三"><a href="#190313-周三" class="headerlink" title="190313 周三"></a>190313 周三</h2><h3 id="获取正文"><a href="#获取正文" class="headerlink" title="获取正文"></a>获取正文</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    提取页面中的公告正文    :param url: 页面url    :return: 正文    '''</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    bulletin_content <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'bulletin-content'</span><span class="token punctuation">)</span>    bulletin_content <span class="token operator">=</span>bulletin_content<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> bulletin_content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存到txt"><a href="#保存到txt" class="headerlink" title="保存到txt"></a>保存到txt</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_by_txt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>file_content<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取单个公告页面的公告并保存到txt    :param file_content:文件内容(str)    :param file_name:输出文件名(str)    :return:无    '''</span>    <span class="token comment" spellcheck="true"># 转换为可以作为文件名字的形式</span>    reg <span class="token operator">=</span> r<span class="token string">'[\/:*?"&lt;>|]'</span>    file_name <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span>        fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file_content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功保存到{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存到db"><a href="#保存到db" class="headerlink" title="保存到db"></a>保存到db</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_by_db</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>content<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#未改造完成</span>    db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'news'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into spider(`title`,`content`) values('{0}','{1}')"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经成功保存公告到数据库：“{}”'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="day11进度"><a href="#day11进度" class="headerlink" title="day11进度"></a>day11进度</h3><p>尝试将保存到数据库的函数里面的数据库参数放到函数形参处，怎么弄都觉得不太合适，于是还是将原本的代码放入</p><h2 id="190314-周四"><a href="#190314-周四" class="headerlink" title="190314 周四"></a>190314 周四</h2><h3 id="cookie保持登录"><a href="#cookie保持登录" class="headerlink" title="cookie保持登录"></a>cookie保持登录</h3><p>参考链接：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/42950252" target="_blank" rel="noopener">Python——Cookie保存到本地-知乎</a>（解决了问题的主要链接）</li><li><a href="https://blog.csdn.net/qq_33472765/article/details/80738923" target="_blank" rel="noopener">爬虫保存cookies时重要的两个参数（ignore_discard和ignore_expires）的作用</a></li></ul><p>首先是库</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#初始化登录session</span>    self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#登录状态</span>    self<span class="token punctuation">.</span>headers<span class="token operator">=</span>headers<span class="token comment" spellcheck="true">#头信息</span>    self<span class="token punctuation">.</span>cookiejar<span class="token operator">=</span>http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span><span class="token string">'cookie.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="保存cookie的函数"><a href="#保存cookie的函数" class="headerlink" title="保存cookie的函数"></a>保存cookie的函数</h4><p>大概是将已登录的session对象的cookies转换为字典（用了一个类似列表生成式的东西，查了一下，是字典生成式，python还真是方便，这么多简写方式），然后保存到cookiejar对象中，调用<code>save()</code>函数来将cookie内容保存到第一个参数指定的文件中，即使cookie已经被抛弃和过期。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_cookie</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span><span class="token punctuation">{</span>c<span class="token punctuation">.</span>name<span class="token punctuation">:</span> c<span class="token punctuation">.</span>value <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>cookies<span class="token punctuation">}</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>cookiejar<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存到本地文件</span>    self<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'cookies'</span><span class="token punctuation">,</span> ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加载cookie的函数"><a href="#加载cookie的函数" class="headerlink" title="加载cookie的函数"></a>加载cookie的函数</h4><p>首先初始化一个LWPCookieJar对象</p><pre class="line-numbers language-python"><code class="language-python">load_cookiejar <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着从文件中加载cookie</p><pre class="line-numbers language-python"><code class="language-python">load_cookiejar<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'cookies'</span><span class="token punctuation">,</span> ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有个问题，这里如果加载失败了（没有这个文件，之前没有保存），需要知道已经失败了。所以使用一个try语句块测试一下。</p><p>然后把这个LWPCookieJar对象给转换成字典，再转换赋值给session.cookie，这样就加载成功了</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_cookie</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    加载cookie    :return: 是否成功    '''</span>    load_cookiejar <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从文件中加载cookies(LWP格式)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        load_cookiejar<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'cookies'</span><span class="token punctuation">,</span> ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 转换成字典</span>    load_cookies <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>load_cookiejar<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将字典转换成RequestsCookieJar，赋值给session的cookies.</span>    self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>cookies <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>load_cookies<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改后的login"><a href="#修改后的login" class="headerlink" title="修改后的login()"></a>修改后的login()</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        登录并返回已经登录的会话        :return: 已经登录的会话（session）    """</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>load_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>is_login <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获取登录信息</span>        login_data<span class="token operator">=</span>self<span class="token punctuation">.</span>get_login_data<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 登录</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>login_data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>url<span class="token operator">!=</span>login_url<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">True</span>            self<span class="token punctuation">.</span>save_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="day12进度"><a href="#day12进度" class="headerlink" title="day12进度"></a>day12进度</h3><ol><li>完成了爬虫类的封装</li><li>使用http.cookiejar库实现了登录一次，在cookie有效期内不必再次登录的功能</li></ol><h1 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h1><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> pymysql<span class="token keyword">import</span> re<span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">spider</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    爬虫类    '''</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#初始化登录session</span>        self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">False</span><span class="token comment" spellcheck="true">#登录状态</span>        self<span class="token punctuation">.</span>headers<span class="token operator">=</span>headers<span class="token comment" spellcheck="true">#头信息</span>        self<span class="token punctuation">.</span>cookiejar<span class="token operator">=</span>http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span><span class="token string">'cookie.txt'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取登录信息"><a href="#获取登录信息" class="headerlink" title="获取登录信息"></a>获取登录信息</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_login_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取登录需要的数据    :param login_url: 登录页面url    :return: 一个存有登录数据的字典    '''</span>    <span class="token comment" spellcheck="true"># 获取登录校验码</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    lt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    dllt <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    _eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    login_data <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'btn'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>        <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>        <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>        <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>        <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown    <span class="token punctuation">}</span>    <span class="token keyword">return</span> login_data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="登录-1"><a href="#登录-1" class="headerlink" title="登录"></a>登录</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        登录并返回已经登录的会话        :return: 已经登录的会话（session）    """</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>load_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>is_login <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#获取登录信息</span>        login_data<span class="token operator">=</span>self<span class="token punctuation">.</span>get_login_data<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 登录</span>        response <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>login_data<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>url<span class="token operator">!=</span>login_url<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录成功"</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>is_login<span class="token operator">=</span><span class="token boolean">True</span>            self<span class="token punctuation">.</span>save_cookie<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录失败"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取单页目录"><a href="#获取单页目录" class="headerlink" title="获取单页目录"></a>获取单页目录</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_url_from_cata</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    返回当前页面的url组成的列表    :param url: 无参数的url    :param params:url的？后参数    :return:以页面指向的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式    '''</span>    <span class="token comment" spellcheck="true">#获取url域名部分</span>    base<span class="token operator">=</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>    base<span class="token operator">=</span>base<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'//'</span><span class="token operator">+</span>base<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#获取当前页所有链接</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token comment" spellcheck="true">#用params参数来拼接参数</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    rss_title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'rss-title'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有链接</span>    result_list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> url <span class="token keyword">in</span> rss_title<span class="token punctuation">:</span>        title<span class="token operator">=</span>url<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        page_url<span class="token operator">=</span>base<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>url<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#将url拼接完整</span>        l<span class="token operator">=</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>page_url<span class="token punctuation">)</span>        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(result_list)</span>    <span class="token keyword">return</span> result_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取全部目录"><a href="#获取全部目录" class="headerlink" title="获取全部目录"></a>获取全部目录</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_url_from_cata_all</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取页面的底部跳转到其他页的链接并获取目录，给出一个目录页的url，获取相关的所有目录页的url并获取链接    :param url: 其中任何一个目录页的url    :return:以所有页面的标题和url组成的元组为元素的列表，即[(title,content),(title,content)]的形式    '''</span>    <span class="token comment" spellcheck="true">#获取除去参数之后的url</span>    base<span class="token operator">=</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取页数</span>    reg <span class="token operator">=</span> <span class="token string">'共.*?条记录 分(.*?)页显示'</span>    num <span class="token operator">=</span> int<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取url</span>    para <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'pageIndex'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'.pmn'</span><span class="token punctuation">:</span> <span class="token string">'view'</span><span class="token punctuation">,</span>        <span class="token string">'.ia'</span><span class="token punctuation">:</span> <span class="token string">'false'</span><span class="token punctuation">,</span>        <span class="token string">'action'</span><span class="token punctuation">:</span> <span class="token string">'bulletinsMoreView'</span><span class="token punctuation">,</span>        <span class="token string">'search'</span><span class="token punctuation">:</span> <span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token string">'groupid'</span><span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span>        <span class="token string">'.pen'</span><span class="token punctuation">:</span> <span class="token string">'pe65'</span>    <span class="token punctuation">}</span>    ret<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_url_from_cata<span class="token punctuation">(</span>base<span class="token punctuation">,</span>params<span class="token operator">=</span>para<span class="token punctuation">)</span><span class="token punctuation">)</span>        para<span class="token punctuation">[</span><span class="token string">'pageIndex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取正文-1"><a href="#获取正文-1" class="headerlink" title="获取正文"></a>获取正文</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_page</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    提取页面中的公告正文    :param url: 页面url    :return: 正文    '''</span>    html <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>self<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    bulletin_content <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'bulletin-content'</span><span class="token punctuation">)</span>    bulletin_content <span class="token operator">=</span>bulletin_content<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> bulletin_content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保存到txt-1"><a href="#保存到txt-1" class="headerlink" title="保存到txt"></a>保存到txt</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_by_txt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>file_content<span class="token punctuation">,</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取单个公告页面的公告并保存到txt    :param file_content:文件内容(str)    :param file_name:输出文件名(str)    :return:无    '''</span>    <span class="token comment" spellcheck="true"># 转换为可以作为文件名字的形式</span>    reg <span class="token operator">=</span> r<span class="token string">'[\/:*?"&lt;>|]'</span>    file_name <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> file_name<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span>        fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>file_content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功保存到{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保存到数据库"><a href="#保存到数据库" class="headerlink" title="保存到数据库"></a>保存到数据库</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_by_db</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>content<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'news'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into spider(`title`,`content`) values('{0}','{1}')"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经成功保存公告到数据库：“{}”'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保存cookie"><a href="#保存cookie" class="headerlink" title="保存cookie"></a>保存cookie</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_cookie</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span><span class="token punctuation">{</span>c<span class="token punctuation">.</span>name<span class="token punctuation">:</span> c<span class="token punctuation">.</span>value <span class="token keyword">for</span> c <span class="token keyword">in</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>cookies<span class="token punctuation">}</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>cookiejar<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存到本地文件</span>    self<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'cookies'</span><span class="token punctuation">,</span> ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="加载cookie"><a href="#加载cookie" class="headerlink" title="加载cookie"></a>加载cookie</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_cookie</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    加载cookie    :return: 是否成功    '''</span>    load_cookiejar <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>LWPCookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 从文件中加载cookies(LWP格式)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        load_cookiejar<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">'cookies'</span><span class="token punctuation">,</span> ignore_discard<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ignore_expires<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cookie加载失败'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 转换成字典</span>    load_cookies <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>dict_from_cookiejar<span class="token punctuation">(</span>load_cookiejar<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将字典转换成RequestsCookieJar，赋值给session的cookies.</span>    self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>cookies <span class="token operator">=</span> requests<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>cookiejar_from_dict<span class="token punctuation">(</span>load_cookies<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="爬取"><a href="#爬取" class="headerlink" title="爬取"></a>爬取</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">crawl</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>login_url<span class="token punctuation">,</span>cata_url<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>login<span class="token punctuation">(</span>login_url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#登陆</span>    item_list<span class="token operator">=</span>self<span class="token punctuation">.</span>get_url_from_cata_all<span class="token punctuation">(</span>cata_url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取所有标题以及对应链接</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> item_list<span class="token punctuation">:</span>        title<span class="token punctuation">,</span>url<span class="token operator">=</span>i<span class="token comment" spellcheck="true">#解包</span>        text<span class="token operator">=</span>self<span class="token punctuation">.</span>get_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取内容</span>        self<span class="token punctuation">.</span>save_by_txt<span class="token punctuation">(</span>text<span class="token punctuation">,</span>title<span class="token operator">+</span><span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#保存</span>        <span class="token comment" spellcheck="true">#self.save_by_db(text,title)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><pre class="line-numbers language-python"><code class="language-python">headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span><span class="token punctuation">,</span><span class="token punctuation">}</span>login_url<span class="token operator">=</span><span class="token string">'http://xxx.xxx.xxx.cn/authserver/login?service=http%3A%2F%2Fportal.chd.edu.cn%2F'</span>cata_url<span class="token operator">=</span><span class="token string">'http://xxxxxx.xxx.xxx.cn/detach.portal?pageIndex=1&amp;pageSize=&amp;.pmn=view&amp;.ia=false&amp;action=bulletinsMoreView&amp;search=true&amp;groupid=all&amp;.pen=pe65'</span><span class="token comment" spellcheck="true">#调用</span>spiderman<span class="token operator">=</span>spider<span class="token punctuation">(</span>headers<span class="token punctuation">)</span>spiderman<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span> cata_url<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记2模拟登录与数据库</title>
      <link href="/posts/python_spider_note2login_and_database/"/>
      <url>/posts/python_spider_note2login_and_database/</url>
      
        <content type="html"><![CDATA[<p>为了加入学校里面一个技术小组，我接受了写一个爬取学校网站通知公告的任务。这个任务比以前写的爬虫更难的地方在于，需要模拟登录才能获得页面，以及将得到的数据存入数据库。</p><p>本文按照日期来记录我完成任务的过程，然后再整理一遍全部代码。读者可以通过侧栏目录跳转阅读。不介绍库的安装。</p><p>传送门：<a href="https://hanechiri.github.io/post/python_spider_note1simple_spider/#more" target="_blank" rel="noopener">爬虫学习笔记1</a></p><a id="more"></a><h1 id="转载声明"><a href="#转载声明" class="headerlink" title="转载声明"></a>转载声明</h1><p><strong>关于参考链接：</strong>本文用到的其他博客的链接都以（我自己对内容的概括或者文章原标题-来源网站-作者名）的格式给出，关于作者名，只有博客作者自己明确声明为“原创”，我才会加上作者名。引用的文章内容我会放在来源链接的下方。</p><p><strong>关于本文：</strong>我发一下链接都注明出处了，如果想转载，也请这样做。作者<strong>憧憬少</strong>，链接的话看浏览器地址栏。</p><h1 id="任务介绍"><a href="#任务介绍" class="headerlink" title="任务介绍"></a>任务介绍</h1><p>爬取信息门户新闻并且存入数据库。</p><p>首先分解任务：</p><ol><li>实现爬取综合新闻页面的公开新闻存入markdown文件中(190303完成)</li><li>将数据存到数据库（190304完成）</li><li>学习模拟登录（190305到190307完成）</li><li>爬取信息门户新闻（190308完成）</li><li>（进阶）将代码进行封装、优化（目前未封装）</li><li>（进阶）动态更新（目前未着手）</li></ol><h1 id="过程记录"><a href="#过程记录" class="headerlink" title="过程记录"></a>过程记录</h1><h2 id="190303-周日"><a href="#190303-周日" class="headerlink" title="190303 周日"></a>190303 周日</h2><h3 id="练习爬取公开页面"><a href="#练习爬取公开页面" class="headerlink" title="练习爬取公开页面"></a>练习爬取公开页面</h3><p>我的<a href="https://hanechiri.github.io/post/python_spider_note1simple_spider/#more" target="_blank" rel="noopener">第一个爬虫</a>是在2月多的时候在家写的，那个只是个简单的爬虫，目标是公开的页面，不需要模拟登录，也不需要存储到数据库，直接存到txt文件中。</p><p>先爬取学校官网的综合新闻页面复习一下。</p><p>首先讲一下我的思路：</p><p>由于新闻和公告页面通常是有一个目录页面的，也就是包含子页面的链接，在目录的子页面内才是正文内容。</p><p>假设这一页目录有三个新闻，就像是下面：</p><ul><li>新闻目录<ul><li>新闻一</li><li>新闻二</li><li>新闻三</li><li>点击查看下一页</li></ul></li></ul><p>这样的结构。</p><p>如果要写一个爬虫函数来爬取所有新闻页面，那么就要从目录着手。目录中含有前往别的新闻页面的链接，所以可以在目录页获取本页所有新闻的链接，遍历所有链接并提取新闻内容。</p><p>至于翻页也可以这样做到，“下一页”按钮也是一个链接，可以通过这个链接获取到下一页的内容。翻页部分原理比较简单，我是先攻克其他难关，把它留到最后写的。</p><h4 id="提取单页面新闻"><a href="#提取单页面新闻" class="headerlink" title="提取单页面新闻"></a>提取单页面新闻</h4><p>首先是提取单个页面的新闻。向目标url发出访问请求：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">getNews</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    提取页面的新闻与图片并存储为markdown文件    :param url: 要爬取的目标网页url    :return: 无    '''</span>    <span class="token comment" spellcheck="true">#发送请求</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#r为response对象</span>    html<span class="token operator">=</span>r<span class="token punctuation">.</span>text<span class="token comment" spellcheck="true">#r.text是请求的网页的内容</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h5><p>这里遇到了第一个问题，提取到的页面有乱码。</p><p>解决方法：先获取响应对象的二进制响应内容，然后将其编码为utf8</p><p><strong>参考链接：</strong></p><ul><li><a href="https://blog.csdn.net/t8116189520/article/details/78930009" target="_blank" rel="noopener">python中response.text与response.content的区别-CSDN</a></li></ul><blockquote><p>requests.content返回的是二进制响应内容</p><p>而requests.text则是根据网页的响应来猜测编码</p></blockquote><ul><li><a href="https://www.cnblogs.com/gavin-num1/p/5170247.html" target="_blank" rel="noopener">UNICODE,GBK,UTF-8区别（一个比较好的编码的教程，便于理解编码的概念）-博客园</a></li><li><a href="https://blog.csdn.net/w_linux/article/details/78370218" target="_blank" rel="noopener">Python解决抓取内容乱码问题（decode和encode解码）-CSDN-浅然_</a></li></ul><blockquote><p>字符串在Python内部的表示是unicode编码，在做编码转换时，通常需要以unicode作为中间编码，即先将其他编码的字符串解码（decode）成unicode，再从unicode编码（encode）成另一种编码。</p><p>decode的作用是将其他编码的字符串转换成unicode编码，如str1.decode(‘gb2312’)，表示将gb2312编码的字符串str1转换成unicode编码。</p><p>encode的作用是将unicode编码转换成其他编码的字符串，如str2.encode(‘utf-8’)，表示将unicode编码的字符串str2转换成utf-8编码。</p></blockquote><p>修改代码为：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#发送请求</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>html<span class="token operator">=</span>r<span class="token punctuation">.</span>content<span class="token comment" spellcheck="true">#获取二进制字节流</span>html<span class="token operator">=</span>html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换为utf8编码（该网页使用的是utf8编码）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="解析网页（bs4）"><a href="#解析网页（bs4）" class="headerlink" title="解析网页（bs4）"></a>解析网页（bs4）</h5><p>一开始我和之前一样使用正则表达式来提取，但是不够熟悉，总是写不出匹配的上的正则表达式。还是使用另一个东西——BeautifulSoup库</p><p>具体如何使用请查看其他教程，本文只说我自己用到的部分。</p><p><strong>参考链接：</strong></p><ul><li><p><a href="https://blog.csdn.net/qq_42331423/article/details/80796683" target="_blank" rel="noopener">Python爬虫常用的几种数据提取方式-CSDN-凯里潇</a></p></li><li><p><a href="https://www.bilibili.com/video/av18202461?p=11" target="_blank" rel="noopener">零基础入门python3爬虫-bilibili</a>（里面的视频p11）</p></li><li><p><a href="https://blog.csdn.net/qq_41686130/article/details/79856474" target="_blank" rel="noopener">beautifulsoup（基本选择器，标准选择器，css选择器）-CSDN-Halosec_Wei</a>（基本上是上面一个b站链接的文字版，不知道是不是同一个人）</p></li><li><p><a href="https://www.jb51.net/article/65287.htm" target="_blank" rel="noopener">beautifulsoup详细教程-脚本之家</a></p></li><li><p><a href="https://blog.csdn.net/kikaylee/article/details/56841789" target="_blank" rel="noopener">beautifulsoup基本用法总结-CSDN-kikay</a></p></li></ul><blockquote><p>BeautifulSoup是Python的一个库，最主要的功能就是从网页爬取我们需要的数据。BeautifulSoup将html解析为对象进行处理，全部页面转变为字典或者数组，相对于正则表达式的方式，可以大大简化处理过程。</p></blockquote><p>我目前的理解是，这个BeautifulSoup库需要用到其他html解析库，可以使用python自带的，也可以安装第三方库，其他的库就像功能扩展插件一样，没有的话它自己也能解析。我安装了名为lxml的解析库。</p><p>查看源代码，找到网页中有关新闻的代码，手动将其格式化之后如下（内容不重要，省略）：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arti-title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>标题省略<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arti-metas<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arti-update<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>发布时间：2019-01-23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arti-update1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>作者：xx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arti-update2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>来源：xxx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>entry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>read<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>wp_articlecontent<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>新闻前言省略             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>新闻内容省略             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>556<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>320<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bottom<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url省略<span class="token punctuation">"</span></span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-align</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>（审稿：xx <span class="token entity" title="&nbsp;">&amp;nbsp;</span>网络编辑：xx）             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着上面的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#解析html</span>soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回已解析的对象</span><span class="token comment" spellcheck="true">#获取标题</span>title<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'arti-title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string<span class="token comment" spellcheck="true">#获取时间</span>update<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'arti-update'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string<span class="token comment" spellcheck="true">#获取正文标签</span>content<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'wp_articlecontent'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="提取图片"><a href="#提取图片" class="headerlink" title="提取图片"></a>提取图片</h5><p>我打算将新闻保存到markdown文件中，提取新闻中的图片的链接的地址，这样在md文件中就能显示出图片了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取图片链接</span>base<span class="token operator">=</span><span class="token string">'学校官网url，用于和img标签中的相对地址拼接成绝对地址'</span>imgsTag<span class="token operator">=</span>content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>imgsUrl<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> img <span class="token keyword">in</span> imgsTag<span class="token punctuation">:</span>    imgsUrl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base<span class="token operator">+</span>img<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#拼接成完整的url</span>    img<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除图片标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="删除多余标签"><a href="#删除多余标签" class="headerlink" title="删除多余标签"></a>删除多余标签</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#删除多余标签</span><span class="token keyword">for</span> p <span class="token keyword">in</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'style'</span><span class="token punctuation">:</span><span class="token string">"text-align:center;"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token operator">=</span>content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'style'</span><span class="token punctuation">:</span> <span class="token string">"text-align:right;"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="保存到文件"><a href="#保存到文件" class="headerlink" title="保存到文件"></a>保存到文件</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 拼接成字符串</span><span class="token comment" spellcheck="true">#后来知道这样的提取方式其实不能完全提取到所有内容</span>fileContent<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">.</span>contents<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#遍历正文内容的所有子标签</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>string<span class="token operator">!=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果子标签里面有内容</span>        <span class="token comment" spellcheck="true">#print(i.string)#调试</span>        fileContent<span class="token operator">+=</span>i<span class="token punctuation">.</span>string<span class="token comment" spellcheck="true">#基本只剩下p标签了</span>        fileContent<span class="token operator">+=</span><span class="token string">'\n\n'</span><span class="token comment" spellcheck="true">#保存到md文件</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.md'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span>    fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="代码总览"><a href="#代码总览" class="headerlink" title="代码总览"></a>代码总览</h5><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment" spellcheck="true">#第4个版本改名bs4而不是全名那么长了</span><span class="token keyword">def</span> <span class="token function">getNews</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    提取页面的新闻与图片并存储为markdown文件    :param url: 要爬取的目标网页url    :return: 无    '''</span>    <span class="token comment" spellcheck="true">#发出请求</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    html<span class="token operator">=</span>r<span class="token punctuation">.</span>content    html<span class="token operator">=</span>html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换编码</span>    <span class="token comment" spellcheck="true">#解析html</span>    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>    content<span class="token operator">=</span>soup<span class="token punctuation">.</span>article    <span class="token comment" spellcheck="true">#获取标题</span>    title<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'arti-title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true">#获取时间</span>    update<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'span'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'arti-update'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>string    <span class="token comment" spellcheck="true">#获取正文</span>    content<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'wp_articlecontent'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取图片链接</span>    base<span class="token operator">=</span><span class="token string">'http://xxxxx.xxx'</span><span class="token comment" spellcheck="true">#学校官网url，用于和img标签中的相对地址拼接成绝对地址</span>    imgsTag<span class="token operator">=</span>content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>    imgsUrl<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> img <span class="token keyword">in</span> imgsTag<span class="token punctuation">:</span>        imgsUrl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>base<span class="token operator">+</span>img<span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#拼接成完整的url</span>        img<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#删除图片标签</span>    <span class="token comment" spellcheck="true">#删除多余标签</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'style'</span><span class="token punctuation">:</span><span class="token string">"text-align:center;"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token operator">=</span>content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'style'</span><span class="token punctuation">:</span> <span class="token string">"text-align:right;"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">!=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        p<span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串</span>    fileContent<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> content<span class="token punctuation">.</span>contents<span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>string<span class="token operator">!=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#print(i.string)#调试</span>            fileContent<span class="token operator">+=</span>i<span class="token punctuation">.</span>string            fileContent<span class="token operator">+=</span><span class="token string">'\n\n'</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'data.md'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span>        fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fileContent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="提取多页面新闻"><a href="#提取多页面新闻" class="headerlink" title="提取多页面新闻"></a>提取多页面新闻</h4><p>原理在上面说了，提取完单页基本上就完成了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">def</span> <span class="token function">getNewsContents</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    爬取目录页面链接到的页面    :param url: 新闻目录页面的url    :return: 无    '''</span>    <span class="token comment" spellcheck="true">#获取网页内容</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#以get方式访问</span>    html<span class="token operator">=</span>r<span class="token punctuation">.</span>content    html<span class="token operator">=</span>html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取每篇新闻的链接</span>    base<span class="token operator">=</span><span class="token string">'http://xxxxx.xxx'</span><span class="token comment" spellcheck="true">#学校官网url，用于和相对地址拼接成绝对地址</span>    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> page_url <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'column-news-item'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        page_url<span class="token operator">=</span>base<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>page_url<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>page_url<span class="token punctuation">)</span>        getNews<span class="token punctuation">(</span>page_url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用提取单页函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="day1进度"><a href="#day1进度" class="headerlink" title="day1进度"></a>day1进度</h3><ol><li>实现爬取长安大学综合新闻页面的公开新闻存入markdown文件中</li><li>复习了requests库的使用</li><li>学习了BeautifulSoup4库的基本使用</li></ol><h2 id="190304-周一"><a href="#190304-周一" class="headerlink" title="190304 周一"></a>190304 周一</h2><p>这一天主要是将前一天爬取的数据存入数据库。</p><h3 id="将数据存入数据库"><a href="#将数据存入数据库" class="headerlink" title="将数据存入数据库"></a>将数据存入数据库</h3><h4 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h4><p>参考链接：</p><ul><li><a href="https://www.bilibili.com/video/av18202461/?p=4" target="_blank" rel="noopener">零基础入门python3爬虫-bilibili</a>（里面的视频p4）</li></ul><h4 id="使用MySQL-Workbench"><a href="#使用MySQL-Workbench" class="headerlink" title="使用MySQL Workbench"></a>使用MySQL Workbench</h4><p>MySQL Workbench是一个可视化工具，安装MySQL的时候自带（我安装的是最新版的），在安装目录找到它的exe然后加个快捷方式在桌面，可以方便地查看数据和执行SQL查询指令，具体使用方法可以问度娘。我现在也不是很会。</p><p>我创建的数据库名为news，里面创建了一个数据表chdnews。</p><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><p>和大多数数据库一样，MySQL是C/S模式的，也就是客户端（client）/服务端（server）模式的。数据库有可能在远程服务器上。想要使用数据库，就需要连接到数据库。</p><p>python中要使用数据库需要一个pymysql库。</p><p>下面是连接的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token comment" spellcheck="true">#连接数据库</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'news'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个连接函数看参数名就可以看出含义了。</p><ul><li>host：主机ip，127.0.0.1是回传地址，指本机。也就是连接本电脑的MySQL的意思</li><li>port：端口号，用来和ip一起指定需要使用数据库的软件。在安装的时候会让你设置，默认3306</li><li>user&amp;passwd：用户名和密码，在安装的时候已经设置好了</li><li>db：你要连接的数据库的名字。一台电脑上可以有很多数据库，数据库里面可以有很多数据表。</li><li>charset：字符编码</li></ul><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>接着可以准备一个游标，游标大概是一个用于存储结果集开头地址的指针吧，我是这么理解的。在我学了更多数据库知识后可能会更新这一部分。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#创建游标</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着执行SQL的插入语句：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#插入</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into chdnews(`title`,`article`) values('{0}','{1}')"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">,</span>fileContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#此处变量为上文代码中的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里的SQL语句是这样的：</p><pre class="line-numbers language-SQL"><code class="language-SQL">insert into 数据表名(字段名1，字段名2) values(值1，值2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>后面的<code>format</code>函数是python的格式化函数，将变量的值加入到字符串中对应位置。</p><p>最后提交：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#提交更改</span>db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着打开workbench，就会发现已经存入数据库了。（你得把代码放在上面提取单页新闻的函数那里，放在保存到文件的那部分代码那儿）</p><h3 id="day2进度"><a href="#day2进度" class="headerlink" title="day2进度"></a>day2进度</h3><ol><li>下载并安装MySQL以及MySQL Workbench</li><li>使用pymysql库进行数据库的连接，实现了把第一天得到的数据存入数据库</li></ol><h2 id="190305-周二"><a href="#190305-周二" class="headerlink" title="190305 周二"></a>190305 周二</h2><h3 id="初步了解模拟登录"><a href="#初步了解模拟登录" class="headerlink" title="初步了解模拟登录"></a>初步了解模拟登录</h3><p>最后的任务需要爬取登录后才能查看的页面，于是我去搜索了很多博客，只放一部分对我有帮助的链接。</p><p>参考链接：</p><ul><li><p><a href="https://www.cnblogs.com/woainifanfan/p/5754580.html" target="_blank" rel="noopener">模拟登录CSDN-博客园</a></p></li><li><p><a href="https://www.cnblogs.com/wodeboke-y/p/9873609.html" target="_blank" rel="noopener">模拟登录github-博客园</a></p></li></ul><p>首先查看一下需要的登录数据：</p><ol><li>打开登录网页，用F12打开开发者工具，选择network（网络）选项卡</li><li>登录你的账号，此时控制台会显示一大堆请求与响应，找到以post方式发送的请求，一般排在第一个</li><li>那里会显示几个栏目，找到<code>Form Data</code>（表单数据），这个里面是你填写登录表单之后使用POST方式发送给服务端的内容。这里面除了自己填写的账号密码之外还有一些东西，比如下图的<code>lt</code>,<code>dllt</code>,<code>execution</code>,<code>_eventId</code>,<code>rmShown</code>这些都是在表单的隐藏域中，查看登录页面的源代码是可以看的到的。这些隐藏起来的东西是为了检验你是否是从浏览器进来的，只要获取到这些东西，再加上头部信息，就能伪装成浏览器了</li><li>至于头部信息，在下图也可以看到我折叠起来的几个栏目，有一个是<code>Request Headers</code>，这是我们在点击登录按钮时发送的POST请求信息的信息头。将里面的<code>User-Agent</code>给复制到你代码里面存在一个字典里面等会用</li><li>把头部信息和表单数据都看一下，准备一下</li></ol><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/spider_f12_form_data.png" alt=""></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#登录前的准备</span>login_url <span class="token operator">=</span> <span class="token string">'http://xxxx.xxx'</span><span class="token comment" spellcheck="true">#登录页面的url</span><span class="token comment" spellcheck="true">#头部信息</span>headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span>    <span class="token comment" spellcheck="true">#加上后面这些会后悔的，别加。</span>    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'xx.xx.xx.xx'</span><span class="token punctuation">,</span>    <span class="token string">'Referer'</span><span class="token punctuation">:</span><span class="token string">'http://xxx.xxx?xxx=http://xxx.xx'</span><span class="token punctuation">,</span>    <span class="token string">'Origin'</span><span class="token punctuation">:</span><span class="token string">'http://xxx.xxx.xx'</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#登录用的数据</span>login_data<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'你的账号'</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'你的密码'</span><span class="token punctuation">,</span>        <span class="token string">'btn'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'lt'</span><span class="token punctuation">:</span> LT<span class="token number">-790162</span><span class="token operator">-</span>J9kW2aEFsK3ihu4AzXcovdsJy6cYBM1552123884047<span class="token operator">-</span>D1Nx<span class="token operator">-</span>cas，    <span class="token comment" spellcheck="true">#实际上lt并不能这样写上去，下文会解释。这里记录我自己的错误</span>        <span class="token string">'dllt'</span><span class="token punctuation">:</span> <span class="token string">'userNamePasswordLogin'</span><span class="token punctuation">,</span>        <span class="token string">'execution'</span><span class="token punctuation">:</span> <span class="token string">'e1s1'</span><span class="token punctuation">,</span>        <span class="token string">'_eventId'</span><span class="token punctuation">:</span> <span class="token string">'submit'</span><span class="token punctuation">,</span>        <span class="token string">'rmShown'</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据准备好之后就开始登录，使用的是requests的另一个方法——post。</p><p>向服务器发出请求（request）的方式有get和post，查看html源代码的时候在表单标签处可以看到表单提交的方法。如：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>casLoginForm<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像这样写html代码会让浏览器在你按下登录按钮的时候以post的方式提交表单，也就是以post的方式向服务器发起request，将form data发送过去。</p><p>post方法的好处是在发送过程中会隐藏你的表单数据，不会被直接看到；</p><p>而前面使用过的get方法，会把你的表单数据加在url后面，网址后边以问号开头，以&amp;连接的就是发送过去的参数。</p><p>涉及登录用post比较好，以免轻易泄露密码。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#以post方式发出登录请求</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>login_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>按理来说应该可以了呀，为什么不行？仍然得到登录页面。在这一天我折腾了很久，没有得到答案。</p><p>不过在找资料时却学到了其他的一些知识，关于cookie和session。</p><h3 id="cookie和session"><a href="#cookie和session" class="headerlink" title="cookie和session"></a>cookie和session</h3><p>我目前的理解（如果不对欢迎留言）：</p><p>http是无状态协议，两次访问都是独立的，不会保存状态信息。也就是你来过一次，下次再来的时候网站还是当你第一次来。那么怎么知道你来过，从而给你还原之前的数据呢？就有人想出cookie和session两种方式。</p><p><strong>cookie</strong>（直译：小甜饼）是服务端（网站服务器）收到客户端（你电脑）的request（请求）的时候和response（响应）一起发给客户端的数据。客户端把它存在文件里面，并在下一次访问这个网站时将cookie随着request一起发送过去，这样服务端就会知道你就是之前来过的那个人了。cookie存储在客户端。</p><ol><li>客户端发送request</li><li>服务端发送response附带一个cookie（一串数据）</li><li>客户端第二次访问时把cookie复制一份一起发过去</li><li>服务端看到你的cookie就知道你是谁了</li></ol><p><strong>session</strong>（会话）是在服务端内存中保存的一个数据结构，一旦有客户端来访问，那么就给这个客户端创建一个新的session在服务端的内存，并将它的session ID随着response发回给客户端。客户端第二次访问时，会将被分配的SID随着request一起发过来，服务端在这边验证SID之后就会知道你来过。session存储在服务端。</p><ol><li>客户端发送request</li><li>服务端发送response并在自己这边创建一个session（一堆数据）并发送一个session ID给客户端</li><li>客户端第二次访问时把session ID一起发过去</li><li>服务端看到你的session ID就知道你是谁了</li></ol><p>不过这俩是用来保持登录的，我还没登录成功想这个干啥？请看下一天。</p><h3 id="day3进度"><a href="#day3进度" class="headerlink" title="day3进度"></a>day3进度</h3><ol><li>初步了解cookie和session的概念</li><li>了解如何使用chrome浏览器的控制台查看post表单信息</li><li>尝试使用requests的post方法模拟登录，失败，返回登录页面</li></ol><h2 id="190306-周三"><a href="#190306-周三" class="headerlink" title="190306 周三"></a>190306 周三</h2><h3 id="表单校验码（非验证码）"><a href="#表单校验码（非验证码）" class="headerlink" title="表单校验码（非验证码）"></a>表单校验码（非验证码）</h3><p>怎么弄都不成功，都跳回登录页面。我只好去询问组长这是为什么。</p><p>原来我没发现表单校验码会变的！</p><p>一直没注意啊啊啊啊啊啊！</p><p>我没有认真比对过两次打开的乱码不一样，看结尾一样就以为一样了。其中的<code>lt</code>这个域每次打开网页都是不一样的，随机出的！</p><p>既然知道了问题，就好解决了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取登录校验码</span>html<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>textsoup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>lt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>dllt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>_eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>login_data<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'username'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">'btn'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>    <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>    <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>    <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>    <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了保险，我把其他的表单域也给解析赋值给变量了。</p><p>不过仍然无法登陆成功，而是进入了一个诡异的页面:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Welcome to nginx!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">35</span>em<span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> Tahoma, Verdana, Arial, sans-serif<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Welcome to nginx!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>For online documentation and support please refer to<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://nginx.org/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nginx.org<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>Commercial support is available at<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://nginx.com/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>nginx.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>Thank you for using nginx.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>确实有进展，但是这是啥？nginx？查了一下是一个高性能的HTTP和反向代理服务器，但是和我现在登录有什么关系呢？（黑人问号.jpg）</p><h3 id="利用session保持校验码"><a href="#利用session保持校验码" class="headerlink" title="利用session保持校验码"></a>利用session保持校验码</h3><p>即使登录成功，还有一个问题无法解决，那就是我获取校验码的request和登录用的request是两次不同的访问请求呀，这样校验码又会变化。</p><p>我想起了前一天看到的session，这玩意不就能让服务端记住我？（cookie试了一下，保存下来的是空的文件不知道怎么回事）</p><p>于是新建一个会话：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#新建会话</span>session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在获取校验码的时候改成使用session变量来发起请求：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取登录校验码</span>html<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>这里的session是在客户端创建的，并不是服务端那个，我想它可能存储的是服务端发送过来的session ID吧。</strong></p><p>同理在正式发送请求时这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#登录</span>r<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>login_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就能让服务端知道我是刚刚获取校验码的那个小伙汁：D</p><p>在这一天我没有办法验证是否有效，不过在之后我验证了这个方法的成功性。</p><h3 id="day4进度"><a href="#day4进度" class="headerlink" title="day4进度"></a>day4进度</h3><ol><li>知道了原来有个每次会变化的校验码“lt”，找到了跳转回登录页面的原因。使用Beautifulsoup来获取每次的校验码，不过仍然没有解决无法登录的问题</li><li>使用session对象来保证获取校验码和登录时是同一个会话，未验证</li></ol><h2 id="190307-周四"><a href="#190307-周四" class="headerlink" title="190307 周四"></a>190307 周四</h2><h3 id="多余的头部信息"><a href="#多余的头部信息" class="headerlink" title="多余的头部信息"></a>多余的头部信息</h3><p>我终于发现了问题所在！！！！！</p><pre class="line-numbers language-python"><code class="language-python">headers<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">#'Host':'xxx.xxx.xxx.xxx',</span>    <span class="token comment" spellcheck="true">#'Referer':'http://xxx.xxx.xxx.xxx...',#不详细打码了</span>    <span class="token comment" spellcheck="true">#'Origin':'http://xxx.xxx.xxxx'</span>    <span class="token comment" spellcheck="true">#去掉多余的头信息才成功登录！！！！！卡了很久没想到是因为这个</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头部信息写多了，我只保留了<code>User-Agent</code>之后成功登录了，你们能体会到我当时有多开心吗！</p><p>我将成为<del>新世界的卡密</del>小组里面最快完成的人！</p><p>解决了这个问题，剩下的就特别简单了。</p><p>当时我有一个下午的时间，于是我将进度迅速推进。</p><h3 id="爬取通知公告"><a href="#爬取通知公告" class="headerlink" title="爬取通知公告"></a>爬取通知公告</h3><p>设登录页面为pageA，登录之后的页面跳转到pageB，而pageB有一个按钮跳转到pageC，这个pageC就是day1的时候的目录页面，里面有着pageC1、pageC2、pageC3……等页面的链接，而这个pageC最后面还有个按钮用于跳转到目录的下一页，也就是pageC?pageIndex=2，还有137页公告栏目录。</p><p>没有什么新的东西，和day1说的爬取方式差不多，只是页面正文的格式和day1的新闻不太一样。核心结构如下，我省略了很多：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bulletin-content<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bulletin-contentpe65<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span> white</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>_GoBack<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span> 仿宋</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     校属各单位：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大概就是一个<code>&lt;p&gt;</code>标签里面放一个或多个<code>&lt;span&gt;</code>标签，而这里面可能还会嵌套几个<code>&lt;span&gt;</code>标签，里面才有内容，而两个内部的<code>&lt;span&gt;</code>之间还可能有内容。</p><p>这要怎么解析？</p><p>在尝试了很多方案之后，我终于百度到一个函数：</p><pre class="line-numbers language-python"><code class="language-python">tag<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#提取名为tag的bs4标签的内部的所有文字</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考链接：</p><ul><li><p><a href="https://blog.csdn.net/ScapeD/article/details/81913923" target="_blank" rel="noopener">BeautifulSoup获取标签中包含的文字-CSDN-niewzh</a>（正是这个博客解决了我的问题）</p></li><li><p><a href="https://blog.csdn.net/f156207495/article/details/78074240/" target="_blank" rel="noopener">BeautifulSoup中的.text方法和get_text()方法的区别-CSDN</a></p></li></ul><p>解决方案：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#获取正文内容</span>html<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>textsoup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>article<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'bulletin-content'</span><span class="token punctuation">)</span>news_content<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> p <span class="token keyword">in</span> article<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> p<span class="token punctuation">.</span>span<span class="token operator">!=</span>None<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果p含有一层span</span>        text<span class="token operator">=</span>str<span class="token punctuation">(</span>p<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#获取内容并去除多余空格</span>        news_content<span class="token operator">+=</span>text<span class="token operator">+</span><span class="token string">'\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着我就把爬下来的东西存到数据库里面去了。弄完之后得去赶作业了，这一天的时间用完了。</p><h3 id="day5进度"><a href="#day5进度" class="headerlink" title="day5进度"></a>day5进度</h3><p>1.找到无法登录且跳转到未知页面的原因是头部信息加了多余的值，解决之后成功登录到信息门户，实现模拟登陆<br>2.利用之前爬取单个页面到文件的方法，用beautifulsoup解析并保存内容到文件<br>3.存入MySQL数据库中<br>4.还差爬取多页目录的功能，预计明天完成。整理代码后可提交</p><h2 id="190308-周五"><a href="#190308-周五" class="headerlink" title="190308 周五"></a>190308 周五</h2><h3 id="更多的目录页"><a href="#更多的目录页" class="headerlink" title="更多的目录页"></a>更多的目录页</h3><p>开了一个新文件准备整理一下代码，并完成最后一个功能——爬取完目录页第一页之后爬取后面更多的页。</p><p>查看源代码的时候，找“第二页”这个按钮对应的链接，发现了规律：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pagination-info clearFix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>共2740条记录 分137页显示<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>        2740/137    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>detach.portal?pageIndex<span class="token punctuation">=</span>1&amp;amp;pageSize<span class="token punctuation">=</span>&amp;amp;.pmn<span class="token punctuation">=</span>view&amp;amp;.ia<span class="token punctuation">=</span>false&amp;amp;action<span class="token punctuation">=</span>bulletinsMoreView&amp;amp;search<span class="token punctuation">=</span>true&amp;amp;groupid<span class="token punctuation">=</span>all&amp;amp;.pen<span class="token punctuation">=</span>pe65<span class="token punctuation">'</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>点击跳转到第1页<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token entity" title="&lt;">&amp;lt;</span><span class="token entity" title="&lt;">&amp;lt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>当前页<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>detach.portal?pageIndex<span class="token punctuation">=</span>2&amp;amp;pageSize<span class="token punctuation">=</span>&amp;amp;.pmn<span class="token punctuation">=</span>view&amp;amp;.ia<span class="token punctuation">=</span>false&amp;amp;action<span class="token punctuation">=</span>bulletinsMoreView&amp;amp;search<span class="token punctuation">=</span>true&amp;amp;groupid<span class="token punctuation">=</span>all&amp;amp;.pen<span class="token punctuation">=</span>pe65<span class="token punctuation">'</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>点击跳转到第2页<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>detach.portal?pageIndex<span class="token punctuation">=</span>3&amp;amp;pageSize<span class="token punctuation">=</span>&amp;amp;.pmn<span class="token punctuation">=</span>view&amp;amp;.ia<span class="token punctuation">=</span>false&amp;amp;action<span class="token punctuation">=</span>bulletinsMoreView&amp;amp;search<span class="token punctuation">=</span>true&amp;amp;groupid<span class="token punctuation">=</span>all&amp;amp;.pen<span class="token punctuation">=</span>pe65<span class="token punctuation">'</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>点击跳转到第3页<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>detach.portal?pageIndex<span class="token punctuation">=</span>4&amp;amp;pageSize<span class="token punctuation">=</span>&amp;amp;.pmn<span class="token punctuation">=</span>view&amp;amp;.ia<span class="token punctuation">=</span>false&amp;amp;action<span class="token punctuation">=</span>bulletinsMoreView&amp;amp;search<span class="token punctuation">=</span>true&amp;amp;groupid<span class="token punctuation">=</span>all&amp;amp;.pen<span class="token punctuation">=</span>pe65<span class="token punctuation">'</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>点击跳转到第4页<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>detach.portal?pageIndex<span class="token punctuation">=</span>5&amp;amp;pageSize<span class="token punctuation">=</span>&amp;amp;.pmn<span class="token punctuation">=</span>view&amp;amp;.ia<span class="token punctuation">=</span>false&amp;amp;action<span class="token punctuation">=</span>bulletinsMoreView&amp;amp;search<span class="token punctuation">=</span>true&amp;amp;groupid<span class="token punctuation">=</span>all&amp;amp;.pen<span class="token punctuation">=</span>pe65<span class="token punctuation">'</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>点击跳转到第5页<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>detach.portal?pageIndex<span class="token punctuation">=</span>6&amp;amp;pageSize<span class="token punctuation">=</span>&amp;amp;.pmn<span class="token punctuation">=</span>view&amp;amp;.ia<span class="token punctuation">=</span>false&amp;amp;action<span class="token punctuation">=</span>bulletinsMoreView&amp;amp;search<span class="token punctuation">=</span>true&amp;amp;groupid<span class="token punctuation">=</span>all&amp;amp;.pen<span class="token punctuation">=</span>pe65<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>detach.portal?pageIndex<span class="token punctuation">=</span>137&amp;amp;pageSize<span class="token punctuation">=</span>&amp;amp;.pmn<span class="token punctuation">=</span>view&amp;amp;.ia<span class="token punctuation">=</span>false&amp;amp;action<span class="token punctuation">=</span>bulletinsMoreView&amp;amp;search<span class="token punctuation">=</span>true&amp;amp;groupid<span class="token punctuation">=</span>all&amp;amp;.pen<span class="token punctuation">=</span>pe65<span class="token punctuation">'</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>点击跳转到最后页<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token entity" title="&gt;">&amp;gt;</span><span class="token entity" title="&gt;">&amp;gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出，指向其他目录页的相对链接，只是参数略有不同，参数中只有<code>pageIndex</code>发生了变化。至于给url加参数，我记得前几天看到过。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#作为参数的字典</span>para<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token string">'pageIndex'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">#这里需要修改，先爬第一页</span>    <span class="token string">'pageSize'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'.pmn'</span><span class="token punctuation">:</span><span class="token string">'view'</span><span class="token punctuation">,</span>    <span class="token string">'.ia'</span><span class="token punctuation">:</span><span class="token string">'false'</span><span class="token punctuation">,</span>    <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">'bulletinsMoreView'</span><span class="token punctuation">,</span>    <span class="token string">'search'</span><span class="token punctuation">:</span><span class="token string">'true'</span><span class="token punctuation">,</span>    <span class="token string">'groupid'</span><span class="token punctuation">:</span><span class="token string">'all'</span><span class="token punctuation">,</span>    <span class="token string">'.pen'</span><span class="token punctuation">:</span><span class="token string">'pe65'</span><span class="token punctuation">}</span>catalogue_url<span class="token operator">=</span><span class="token string">'http://xxx.xx.xx.cn/detach.portal'</span><span class="token comment" spellcheck="true">#未加参数的新闻目录页url</span>    session <span class="token operator">=</span> login<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取已登录的session,这个自定义函数会在下面列出</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>page_count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#page_count是要获取的页数</span>        para<span class="token punctuation">[</span><span class="token string">'pageIndex'</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token comment" spellcheck="true">#设置新闻当前页的索引</span>        <span class="token comment" spellcheck="true"># 从目录页获取新闻页面链接</span>        html <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>catalogue_url<span class="token punctuation">,</span>params<span class="token operator">=</span>para<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整理代码"><a href="#整理代码" class="headerlink" title="整理代码"></a>整理代码</h3><p>要用到的库</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> pymysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="get-bulletin"><a href="#get-bulletin" class="headerlink" title="get_bulletin"></a>get_bulletin</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_bulletin</span><span class="token punctuation">(</span>page_count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    目录有多页，从第一页开始获取，往后获取page_count页的目录，并读取目录指向的所有公告    :param page_count: 要爬取的目录页面的数量    :return: 无    '''</span>    para<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'pageIndex'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">'pageSize'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'.pmn'</span><span class="token punctuation">:</span><span class="token string">'view'</span><span class="token punctuation">,</span>        <span class="token string">'.ia'</span><span class="token punctuation">:</span><span class="token string">'false'</span><span class="token punctuation">,</span>        <span class="token string">'action'</span><span class="token punctuation">:</span><span class="token string">'bulletinsMoreView'</span><span class="token punctuation">,</span>        <span class="token string">'search'</span><span class="token punctuation">:</span><span class="token string">'true'</span><span class="token punctuation">,</span>        <span class="token string">'groupid'</span><span class="token punctuation">:</span><span class="token string">'all'</span><span class="token punctuation">,</span>        <span class="token string">'.pen'</span><span class="token punctuation">:</span><span class="token string">'pe65'</span>    <span class="token punctuation">}</span>    catalogue_url<span class="token operator">=</span><span class="token string">'http://xxx.xxx.xxx.cn/detach.portal'</span><span class="token comment" spellcheck="true">#未加参数的公告目录页url</span>    session <span class="token operator">=</span> login<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取已登录的session</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>page_count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        para<span class="token punctuation">[</span><span class="token string">'pageIndex'</span><span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token comment" spellcheck="true">#设置公告当前页的索引</span>        <span class="token comment" spellcheck="true"># 从目录页获取公告页面链接</span>        html <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>catalogue_url<span class="token punctuation">,</span>params<span class="token operator">=</span>para<span class="token punctuation">)</span><span class="token punctuation">.</span>text        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>        rss_title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'rss-title'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#将得到的链接与标题组装成字典</span>        bulletin_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> rss_title<span class="token punctuation">:</span>            bulletin_title <span class="token operator">=</span> str<span class="token punctuation">(</span>url<span class="token punctuation">.</span>span<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            bulletin_url <span class="token operator">=</span> <span class="token string">'http://xxx.xx.xx.cn/'</span> <span class="token operator">+</span> url<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span>            bulletin_dict<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>bulletin_title<span class="token punctuation">,</span> bulletin_url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#添加一条公告记录</span>        <span class="token comment" spellcheck="true">#保存公告到数据库</span>        <span class="token keyword">for</span> bulletin_title<span class="token punctuation">,</span> bulletin_url <span class="token keyword">in</span> bulletin_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#saveInTXT(bulletin_url, session, bulletin_title)#这个是保存到txt文件的函数，用于测试</span>            saveInDB<span class="token punctuation">(</span>news_url<span class="token punctuation">,</span> session<span class="token punctuation">,</span> news_title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="login"><a href="#login" class="headerlink" title="login"></a>login</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    登录并返回已经登录的会话    :return: 已经登录的会话（session）    """</span>    <span class="token comment" spellcheck="true">#设置</span>    login_url <span class="token operator">=</span> <span class="token string">'http://xxx.xx.xx.cn/authserver/login?service=http%3A%2F%2F%2F'</span>    headers<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#新建会话</span>    session<span class="token operator">=</span>requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#获取登录校验码</span>    html<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    lt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'lt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    dllt<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'dllt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    execution <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'execution'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    _eventId <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'_eventId'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    rmShown <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'rmShown'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span>    login_data<span class="token operator">=</span><span class="token punctuation">{</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入学号："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> input<span class="token punctuation">(</span><span class="token string">"请输入密码："</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'btn'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        <span class="token string">'lt'</span><span class="token punctuation">:</span> lt<span class="token punctuation">,</span>        <span class="token string">'dllt'</span><span class="token punctuation">:</span> dllt<span class="token punctuation">,</span>        <span class="token string">'execution'</span><span class="token punctuation">:</span> execution<span class="token punctuation">,</span>        <span class="token string">'_eventId'</span><span class="token punctuation">:</span> _eventId<span class="token punctuation">,</span>        <span class="token string">'rmShown'</span><span class="token punctuation">:</span> rmShown    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#登录</span>    response<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>login_url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>data<span class="token operator">=</span>login_data<span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">.</span>url<span class="token operator">==</span><span class="token string">'http://xxx.xx.xx.cn/'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'登录成功！'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="saveInTXT"><a href="#saveInTXT" class="headerlink" title="saveInTXT"></a>saveInTXT</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">saveInTXT</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> session<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取单个公告页面的公告并保存到txt    :param url: 要获取的页面的url    :param session:已经登录的会话    :param title:公告标题    :return:无    '''</span>    <span class="token comment" spellcheck="true">#将标题转换为可以作为文件名字的形式</span>    reg <span class="token operator">=</span> r<span class="token string">'[\/:*?"&lt;>|]'</span>    title <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> title<span class="token punctuation">)</span>    path<span class="token operator">=</span><span class="token string">'bullet\\'</span> <span class="token operator">+</span> title<span class="token operator">+</span><span class="token string">'.txt'</span><span class="token comment" spellcheck="true">#保存在py文件目录下的bulletin文件夹内，以txt格式保存</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span>    <span class="token punctuation">}</span>    <span class="token triple-quoted-string string">'''    #测试代码，从文件读取手动获取的公告html页面，单机测试    with open('new.txt','r',encoding='utf8') as fin:        html=fin.read()    '''</span>    html<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print(soup.prettify())</span>    bulletin_content<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'bulletin-content'</span><span class="token punctuation">)</span>    bulletin_content<span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> bulletin_content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>span<span class="token operator">!=</span>None<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果p含有一层span</span>            text<span class="token operator">=</span>str<span class="token punctuation">(</span>p<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            bulletin_content<span class="token operator">+=</span> text <span class="token operator">+</span> <span class="token string">'\n'</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span>        fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>bulletin_content<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'“{}”成功保存到{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="saveInDB"><a href="#saveInDB" class="headerlink" title="saveInDB"></a>saveInDB</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">saveInDB</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> session<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取单个公告页面的公告并保存到txt    :param url: 要获取的页面的url    :param session:已经登录的会话    :param title:公告标题    :return:无    '''</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36'</span>    <span class="token punctuation">}</span>    html<span class="token operator">=</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>text    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span>    bulletin_content<span class="token operator">=</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'bulletin-content'</span><span class="token punctuation">)</span>    bulletin_content<span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> bulletin_content<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> p<span class="token punctuation">.</span>span<span class="token operator">!=</span>None<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#如果p含有一层span</span>            text<span class="token operator">=</span>str<span class="token punctuation">(</span>p<span class="token punctuation">.</span>get_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            bulletin_content<span class="token operator">+=</span> text <span class="token operator">+</span> <span class="token string">'\n'</span>    <span class="token comment" spellcheck="true">#保存到数据库</span>    db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> passwd<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token string">'news'</span><span class="token punctuation">,</span> charset<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>    cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">"insert into chdnews(`title`,`content`) values('{0}','{1}')"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">,</span> bulletin_content<span class="token punctuation">)</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经成功保存公告到数据库：“{}”'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#调用</span>get_bulletin<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#爬取10页公告</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>暂时没有将其通用化，直接将网址写死在函数里面了。</p><h3 id="day6进度"><a href="#day6进度" class="headerlink" title="day6进度"></a>day6进度</h3><ol><li>通过调整服务门户的url中的参数来获取通知公告的每一个目录页的url，从而爬取所有公告</li><li>将学习中写的测试代码重新构造整理，添加函数注释，提交任务</li></ol><h2 id="190309-周六"><a href="#190309-周六" class="headerlink" title="190309 周六"></a>190309 周六</h2><h3 id="day7进度"><a href="#day7进度" class="headerlink" title="day7进度"></a>day7进度</h3><p>写了本篇博客进行总结</p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换了一个主题</title>
      <link href="/posts/hexo_change_theme/"/>
      <url>/posts/hexo_change_theme/</url>
      
        <content type="html"><![CDATA[<p>把主题从<a href="https://github.com/ShanaMaid/hexo-theme-shana" target="_blank" rel="noopener">shana</a>（夏娜）换成了<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>，记录一下这个过程，以及遇到的一些有用的博客链接。流水账，主要保存链接。</p><a id="more"></a><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>刚弄了hexo博客很兴奋，于是去鼓捣各种东西，首先选了一个二次元的主题shana，虽然这个主题我很喜欢，但是想要加目录或者是其他的一些东西，网上根本就搜不到相关的内容，在解决各种问题的过程中，我发现搜索到的几乎都是关于NexT这个主题的解决方法，应为这个主题很多人用。</p><p>在又一次发现主题的文件被我“弄坏了”（背景图片的幻灯片播放只显示一次）之后，我想还是换成NexT吧，这样就能专注于写博客，而不是为设置博客而烦恼。</p><h1 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h1><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT</a>主题安装和其他主题一样，clone下来再改一下站点配置文件<code>_config.yml</code>就好了。</p><p>然后再设置这个主题的配置文件。这个主题的配置文件与shana相比起来不知道详细了多少，各种设置都准备齐全了。没费多少功夫就配置好很好看的站点了。接着就是把站长统计之类的东西设置一下。</p><ul><li>cnzz站长统计，统计访问</li><li>leanCloud数据统计，统计文章阅读数，参考链接：<a href="https://yfzhou.coding.me/2018/08/08/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E6%B7%BB%E5%8A%A0%E7%BB%9F%E8%AE%A1%E8%AE%BF%E5%AE%A2%E9%87%8F%E4%BB%A5%E5%8F%8A%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%EF%BC%89/" target="_blank" rel="noopener">Hexo-Next搭建个人博客（添加统计访客量以及文章阅读量）</a></li></ul><p>当然我也试着弄了一下gitment评论，仍然不行，那么只能继续采用“直接在菜单中给出issue页面链接”的方式了。参考链接：<a href="https://ryanluoxu.github.io/2017/11/27/Hexo-Next-添加-Gitment-评论系统/" target="_blank" rel="noopener">Hexo-Next 添加 Gitment 评论系统</a></p>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++学生信息管理系统（一）</title>
      <link href="/posts/cpp_student_info_management_system1/"/>
      <url>/posts/cpp_student_info_management_system1/</url>
      
        <content type="html"><![CDATA[<p>尝试重新设计与编写大一第一学期的c++课设——学生信息管理系统。本文作简单思路分析与代码分享。B站视频内录制了从头开始写的整个过程：<a href="https://www.bilibili.com/video/av44801291/" target="_blank" rel="noopener">课程设计|c++控制台简易学生信息管理系统</a></p><a id="more"></a><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>要求：能够录入，显示，查找，删除，文件存取学生信息</p><p>以当时的知识是以链表来实现的，这次也是使用链表。</p><p>首先，创建一个链表结点类用于存放学生的信息，每个对象都是一个学生。</p><p>其次，创建一个链表类用于将结点连接起来。</p><p>最后，利用链表类已经创建好的各种接口，在main函数中进行装配，实现所需要的各种功能。</p><h1 id="链表结点类"><a href="#链表结点类" class="headerlink" title="链表结点类"></a>链表结点类</h1><ul><li>类名：CStudent</li><li>属性：姓名、性别、成绩、其余本质相同的属性（如班级号，学号）省略。</li><li>方法：以不同方式显示该学生所有信息、手动录入学生信息</li></ul><h2 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token comment" spellcheck="true">//链表结点类</span><span class="token comment" spellcheck="true">//学生类</span><span class="token comment" spellcheck="true">//属性：姓名、性别、成绩</span><span class="token comment" spellcheck="true">//方法：录入、显示</span><span class="token keyword">class</span> <span class="token class-name">CStudent</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> sex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true为男，false为女</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//链表需要的指针域</span>    CStudent<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//=======================================</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> p_name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> p_sex<span class="token punctuation">,</span> <span class="token keyword">int</span> p_score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//录入与显示</span>    <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//get</span>    <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> sex<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> score<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类实现"><a href="#类实现" class="headerlink" title="类实现"></a>类实现</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@fileName &lt;CStudent.cpp></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"CStudent.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>CStudent<span class="token operator">::</span><span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> p_name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">bool</span> p_sex<span class="token punctuation">,</span> <span class="token keyword">int</span> p_score<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//有参构造则自动录入信息</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> p_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    sex <span class="token operator">=</span> p_sex<span class="token punctuation">;</span>    score <span class="token operator">=</span> p_score<span class="token punctuation">;</span><span class="token punctuation">}</span>CStudent<span class="token operator">::</span><span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果无参构造，则手动录入信息</span><span class="token punctuation">}</span><span class="token keyword">void</span> CStudent<span class="token operator">::</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学生姓名："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果遇到cin连续输入出错的问题，可以在每次输入后加个cin.get()</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学生性别（1为男，0为女）："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> isex<span class="token punctuation">;</span>    cin <span class="token operator">>></span> isex<span class="token punctuation">;</span>    sex <span class="token operator">=</span> isex <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学生成绩："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> score<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> CStudent<span class="token operator">::</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> method<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>method<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>横向显示，一行一条记录        cout <span class="token operator">&lt;&lt;</span> name<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span>            <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sex <span class="token operator">?</span> <span class="token string">"男"</span> <span class="token operator">:</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span>            <span class="token operator">&lt;&lt;</span> score<span class="token operator">&lt;&lt;</span><span class="token string">"\t"</span>            <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>纵向显示，每行一个属性        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名："</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> endl            <span class="token operator">&lt;&lt;</span> <span class="token string">"性别："</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>sex <span class="token operator">?</span> <span class="token string">"男"</span> <span class="token operator">:</span> <span class="token string">"女"</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl            <span class="token operator">&lt;&lt;</span> <span class="token string">"成绩："</span> <span class="token operator">&lt;&lt;</span> score <span class="token operator">&lt;&lt;</span> endl            <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>CStudent<span class="token operator">::</span><span class="token operator">~</span><span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="链表类"><a href="#链表类" class="headerlink" title="链表类"></a>链表类</h1><h2 id="类声明-1"><a href="#类声明-1" class="headerlink" title="类声明"></a>类声明</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@fileName &lt;CStudentList.h></span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"CStudent.h"</span></span><span class="token comment" spellcheck="true">//链表类（带头结点的单向链表）</span><span class="token comment" spellcheck="true">//属性：指向头结点的头指针</span><span class="token comment" spellcheck="true">//方法：构造函数（手动输入）、构造函数（传入结点对象数组）、析构函数</span><span class="token comment" spellcheck="true">//方法：显示表、查找、删除、把数据存入文件、从文件中读取数据</span><span class="token keyword">class</span> <span class="token class-name">CStudentList</span><span class="token punctuation">{</span>    CStudent<span class="token operator">*</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头指针</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//手动录入n个学生的信息</span>    <span class="token function">CStudentList</span><span class="token punctuation">(</span>CStudent s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过对象数组自动录入n个学生的信息</span>    <span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//读取文件中的数据信息来初始化</span>    <span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//功能</span>    <span class="token keyword">void</span> <span class="token function">showList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示整个链表的信息</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//按名字查找并返回找到的个数</span>    <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>CStudent<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除指针p指向的结点</span>    <span class="token keyword">int</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除表中第一个匹配的记录，同时返回是否删除成功</span>    <span class="token comment" spellcheck="true">//文件读写</span>    <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类实现-1"><a href="#类实现-1" class="headerlink" title="类实现"></a>类实现</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>我设计了四个构造函数。</p><p>1.如果没有参数，那么就只建立一个空链表，即只有一个头结点的链表。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::CStudentList></span><span class="token comment" spellcheck="true">//@brief &lt;创建空链表></span>CStudentList<span class="token operator">::</span><span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//头结点本身的数据并不重要，所以随意填写。</span>    head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.手动录入信息的构造函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::CStudentList(int n)></span><span class="token comment" spellcheck="true">//@brief &lt;创建n个结点的链表，并手动录入信息></span><span class="token comment" spellcheck="true">//@parameter &lt;n:初始链表结点数目（不计头结点）></span>CStudentList<span class="token operator">::</span><span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CStudent <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.通过数组自动录入信息的构造函数</p><p>和上一个差不多。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::CStudentList(CStudent s[],int n)></span><span class="token comment" spellcheck="true">//@brief &lt;创建n个结点的链表，并自动从数组中获取信息></span><span class="token comment" spellcheck="true">//@parameter &lt;s:结点类对象数组>&lt;n:数组s的长度></span>CStudentList<span class="token operator">::</span><span class="token function">CStudentList</span><span class="token punctuation">(</span>CStudent s<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        CStudent <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CStudent</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.通过文件自动录入信息的构造函数</p><p>使用到了另一个成员函数<code>open()</code></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::CStudentList(const char fileName[])></span><span class="token comment" spellcheck="true">//@brief &lt;自动从文件中读取信息></span><span class="token comment" spellcheck="true">//@parameter &lt;fileName:数据来源文件的名字></span>CStudentList<span class="token operator">::</span><span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CStudent</span><span class="token punctuation">(</span><span class="token string">"HEAD"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">open</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="显示链表"><a href="#显示链表" class="headerlink" title="显示链表"></a>显示链表</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::showList()></span><span class="token comment" spellcheck="true">//@brief &lt;显示整个链表></span><span class="token keyword">void</span> CStudentList<span class="token operator">::</span><span class="token function">showList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CStudent<span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名\t性别\t成绩"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以一行一记录的形式显示</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//工作指针向后移动</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询结点"><a href="#查询结点" class="headerlink" title="查询结点"></a>查询结点</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::search></span><span class="token comment" spellcheck="true">//@brief &lt;按照名字查找数据并显示></span><span class="token comment" spellcheck="true">//@parameter &lt;name:要查找的学生的名字></span><span class="token comment" spellcheck="true">//@return &lt;找到的记录数目></span><span class="token keyword">int</span> CStudentList<span class="token operator">::</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    CStudent<span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"---------查找结果---------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//遍历链表</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找到了需要的信息</span>        <span class="token punctuation">{</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            p<span class="token operator">-</span><span class="token operator">></span><span class="token function">show</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找删除"><a href="#查找删除" class="headerlink" title="查找删除"></a>查找删除</h3><p>由于删除结点与查找要删除的结点相对独立，因此将删除结点独立出来一个函数，以便查找删除不同属性的数据。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::deleteNode></span><span class="token comment" spellcheck="true">//@brief &lt;删除指针指向的链表节点></span><span class="token comment" spellcheck="true">//@parameter &lt;p:要删除的结点的指针></span><span class="token keyword">void</span> CStudentList<span class="token operator">::</span><span class="token function">deleteNode</span><span class="token punctuation">(</span>CStudent<span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    CStudent<span class="token operator">*</span>p1 <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>p2 <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">!=</span> p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p1 <span class="token operator">=</span> p1<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        p2 <span class="token operator">=</span> p2<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p1<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">delete</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以查找姓名的删除函数为例子：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::deleteByName></span><span class="token comment" spellcheck="true">//@brief &lt;按名字查找并删除第一个符合条件的结点></span><span class="token comment" spellcheck="true">//@parameter &lt;name:要删除的结点的名字></span><span class="token comment" spellcheck="true">//@return &lt;是否删除成功(成功返回0，失败返回-1)></span><span class="token keyword">int</span> CStudentList<span class="token operator">::</span><span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CStudent<span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//找到了需要的信息</span>        <span class="token punctuation">{</span>            <span class="token function">deleteNode</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::open></span><span class="token comment" spellcheck="true">//@brief &lt;从文件中读取数据并以覆盖形式写入链表></span><span class="token comment" spellcheck="true">//@parameter &lt;fileName:数据文件名></span><span class="token keyword">void</span> CStudentList<span class="token operator">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//清空链表</span>    CStudent<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">delete</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//未删除head</span>    <span class="token comment" spellcheck="true">//从文件读取数据</span>    ifstream <span class="token function">fin</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>fin<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//end of file</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> sex<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        fin <span class="token operator">>></span> name <span class="token operator">>></span> sex <span class="token operator">>></span> score<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用头插法把数据插入到链表中</span>        CStudent <span class="token operator">*</span>newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">CStudent</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>sex<span class="token punctuation">,</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        head<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//@funcName &lt;CStudentList::save></span><span class="token comment" spellcheck="true">//@brief &lt;将链表存入文件></span><span class="token comment" spellcheck="true">//@parameter &lt;fileName:保存到的数据文件名></span><span class="token keyword">void</span> CStudentList<span class="token operator">::</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> fileName<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ofstream <span class="token function">fout</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打开文件，创建文件流对象</span>    <span class="token comment" spellcheck="true">//遍历链表</span>    CStudent <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将数据存入</span>        fout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>            <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>            <span class="token operator">&lt;&lt;</span> p<span class="token operator">-</span><span class="token operator">></span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><pre class="line-numbers language-cpp"><code class="language-cpp">CStudentList<span class="token operator">::</span><span class="token operator">~</span><span class="token function">CStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CStudent<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">delete</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h1><p>菜单比较简单，整个程序主要流程：</p><ol><li>显示菜单选项，等待输入选项编号</li><li>分支语句，按照不同选项调用链表提供的函数</li><li>如果没有选择退出选项就循环</li></ol><h2 id="菜单函数示例"><a href="#菜单函数示例" class="headerlink" title="菜单函数示例"></a>菜单函数示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"========学生信息管理系统========"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1.显示学生信息表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2.查找学生信息"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3.从文件读取"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4.将数据存入文件"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"0.退出"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选项分支示例"><a href="#选项分支示例" class="headerlink" title="选项分支示例"></a>选项分支示例</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> opt <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    CStudentList <span class="token function">list</span><span class="token punctuation">(</span><span class="token string">"data.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>opt <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> opt<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">showList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>notepad++添加文件关联</title>
      <link href="/posts/notepadpp_file_association/"/>
      <url>/posts/notepadpp_file_association/</url>
      
        <content type="html"><![CDATA[<p>将一些常用notepad++打开的文件设置为默认notepad++打开的方法</p><a id="more"></a><p>在研究hexo博客的各种功能的时候，总是需要打开配置文件<code>.yml</code>，一开始我是用右键菜单里面的【用notepad++打开】的方式来打开，后来又遇到了各种<code>.ejs</code>,<code>.styl</code>之类的文件也需要用notepad++来编辑，就将这些文件类型的默认打开方式设置为notepad++。</p><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/hexo_dir.png" alt=""></p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><ol><li>菜单栏【设置】-&gt;【首选项】</li><li>如图选择【文件关联】，找到需要添加的文件类型，如果没有就选择【customize】（自定义）自己输入，然后添加。</li></ol><p><img src="https://raw.githubusercontent.com/HaneChiri/PicBed/master/blog_images/notepad%2B%2B_filelink.png" alt=""></p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><ol><li>【ctrl+r】打开【运行】输入<code>control</code>（也就是打开控制面板）</li><li>小图标查看方式，找到【默认程序】，选择【将文件类型或协议与程序关联】，找到需要的后缀名，选择它的默认程序即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具使用 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习笔记1简易爬虫</title>
      <link href="/posts/python_spider_note1simple_spider/"/>
      <url>/posts/python_spider_note1simple_spider/</url>
      
        <content type="html"><![CDATA[<p>学了python语法之后在b站搜索练手的小项目，发现了这个视频：<a href="https://www.bilibili.com/video/av24431072" target="_blank" rel="noopener">Python实用练手小项目（超简单）</a></p><p>视频里面讲解了一个爬取图片网站图片的小爬虫。后面用到了我还没学的数据库，不过前面的部分是已经学了的，于是我就打算写一个不用数据库的，爬取某个盗版小说内容的爬虫。</p><p><strong>声明：本人不会将得到的小说内容作任何商业用途，也请阅读此文章的各位读者遵纪守法，此文章只用作学习交流，原创内容，转载请注明出处。</strong></p><a id="more"></a><h1 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h1><p>爬虫，在我理解中就是模拟人的浏览行为来获取网站上的信息的脚本，爬虫能得到的信息，一般情况下人也有权限可以得到。</p><p>盗版小说网站，不需要登录就可以看到小说内容，内容是写死在html文件里面的，通过右键菜单的<code>查看源代码</code>就能够查看到小说内容，很适合拿来练手。</p><p><strong>再次声明：本人不会将得到的小说内容作任何商业用途，也请阅读此文章的各位读者遵纪守法，此文章只用作学习交流，原创内容，转载请注明出处。</strong></p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>爬虫的思路是向服务器发出请求，并收到服务器回复的数据，接着从获取的数据中取得想要的信息，保存在数据库中。</p><p>由于是小说，就直接保存在文本文件当中。</p><p>所以分为以下几步：</p><ol><li>发出请求</li><li>接收数据</li><li>提取信息</li><li>保存数据</li></ol><h1 id="编程原理"><a href="#编程原理" class="headerlink" title="编程原理"></a>编程原理</h1><h2 id="发出请求和接收数据"><a href="#发出请求和接收数据" class="headerlink" title="发出请求和接收数据"></a>发出请求和接收数据</h2><p>发出请求需要一个库，名字叫做<code>requests</code>，它是基于python自带的<code>urllib</code>库写的第三方库，差不多就是升级版的意思吧。</p><p>要注意是<code>requests</code>，不是<code>request</code>，结尾有个s，确实存在一个不带s的库，注意区分。</p><p>可以使用下面的命令进行安装：</p><pre><code>pip install requests</code></pre><p>pip 是 Python 包管理工具，总之有了这个玩意，你不用管它从哪里下载，在哪里安装，总之就告诉它要安装啥，它就帮你安排得明明白白的。以后会遇到很多这样的东西，比如npm啥的。</p><p>命令在cmd里面输就行了，如果电脑上没有这东西就百度一下怎么下载，一般来说安装了python应该就有了。</p><p>如果使用的是pyCharm这种IDE，那就可以直接在代码import这个库，等库的名字变红再在旁边找安装按钮，很方便的。</p><p>这个库里面有个get函数，是采用get的方式（除此之外还有post方式，学html表单的时候应该有学到）来向服务器发出访问请求，并将获得的数据作为返回值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#省略代码</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#url是你要访问的网址</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#如果输出是&lt;Response [200]>，那么就是访问成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时返回变量是请求对象，要从中获取数据，就需要使用它的两个属性<code>text</code>和<code>content</code></p><p><code>r.text</code>是数据的html形式，<code>r.content</code>是字节流的形式。<a href="https://www.jianshu.com/p/0e4ca633c6a6" target="_blank" rel="noopener">二者的区别</a></p><p>前者返回文本格式（即二进制格式经过编码后），后者返回二进制格式。后者一般用于图片的保存。</p><p>我们需要获取的是文本内容，因此需要前者。</p><pre class="line-numbers language-python"><code class="language-python">html<span class="token operator">=</span>r<span class="token punctuation">.</span>text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h2><p>我们打开笔趣阁（一个盗版小说网站）的一个<a href="https://www.biquger.com/biquge/4911/" target="_blank" rel="noopener">小说页面</a>，随便选一章点进去，查看源代码，发现小说的内容是放在一个<code>&lt;div&gt;</code>里面的：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>booktext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>小说内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span>翻页信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他章节也是如此，所以就可以利用这个规律将其提取出来，用的就是正则表达式。</p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>使用正则表达式需要使用一个内置的库<code>re</code>，根据上面的规律可以写出下面的正则表达式：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rereg <span class="token operator">=</span> r<span class="token string">'&lt;div class="content" id="booktext">(.*?)&lt;center>'</span><span class="token comment" spellcheck="true">#正则表达式</span>reg <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将字符串转换为正则表达式对象，加快匹配速度</span>content<span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> html<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回一个列表，列表项为匹配到的内容</span><span class="token keyword">if</span> content<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#未匹配到小说内容</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取失败！"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    content<span class="token operator">=</span>str<span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#将列表转换为字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.cnblogs.com/nomorewzx/p/4203829.html" target="_blank" rel="noopener">re.compile()函数</a></p><h3 id="编码转换"><a href="#编码转换" class="headerlink" title="编码转换"></a>编码转换</h3><p>但是我写到这里的时候遇到了一个问题，就是获取到的内容是乱码。一看到乱码就应该想到是编码出了问题。</p><p>右键菜单查看网页编码，是<code>GBK</code>编码，需要转换编码。现在的情况是，网页利用<code>GBK</code>的编码来“加密”了小说文本，而我们需要用同样的方式来“解码”。需要用到<code>decode</code>函数</p><pre class="line-numbers language-python"><code class="language-python">html<span class="token operator">=</span>r<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">,</span> <span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换编码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将获得的二进制数据按照网页原本的编码<code>GBK</code>来解码，就能获取到正确的内容了。</p><h3 id="去除分隔字符"><a href="#去除分隔字符" class="headerlink" title="去除分隔字符"></a>去除分隔字符</h3><p>此时提取到的内容还有这很多HTML实体，比如<code>&amp;nbsp;</code>和<code>&lt;br /&gt;</code>，注意到它们的分布也有规律：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>booktext<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>小说内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>小说内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>……省略……<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>大雪落下，悄然覆盖着这一切。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>除了开头和结尾之外，都是以<code>&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</code>进行分隔的。</p><p>可以利用<code>split()</code>函数将其分割之后重新组合，</p><p>也可以使用字符串的替换函数<code>replace()</code></p><pre class="line-numbers language-python"><code class="language-python">content<span class="token operator">=</span>content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br />&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token string">"\n\n    "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h2><p>保存在文本文件中就ok了：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#fileName为保存路径加文件名</span>    fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n\n=====================\n\n'</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">'\n\n=====================\n\n'</span><span class="token punctuation">)</span>    fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="获取单章节内容代码"><a href="#获取单章节内容代码" class="headerlink" title="获取单章节内容代码"></a>获取单章节内容代码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">getNovelByURL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    :param url: 网页的url    :param fileName: 保存数据的文件的名字    :return: -1为失败，0为成功    '''</span>    <span class="token comment" spellcheck="true">#筛选文件名内非法字符</span>    <span class="token comment" spellcheck="true">#调试的时候前面几百章都行突然一章不行，发现是因为章节名字里面有非法字符</span>    reg<span class="token operator">=</span>r<span class="token string">'[\/:*?"&lt;>|]'</span>    fileName<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>reg<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span>fileName<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#利用正则表达式去除非法字符</span>    <span class="token comment" spellcheck="true"># 获取网页</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    html <span class="token operator">=</span> r<span class="token punctuation">.</span>content    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">,</span> <span class="token string">"ignore"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取网页中小说内容</span>    reg <span class="token operator">=</span> <span class="token string">'&lt;div class="content" id="booktext">\n&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(.*?)&lt;br />\n&lt;center>'</span>    reg <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#预编译</span>    content <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#保存到文件</span>    <span class="token keyword">if</span> content<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取失败！"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        content<span class="token operator">=</span>str<span class="token punctuation">(</span>content<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换为字符串</span>        content<span class="token operator">=</span>content<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br />&lt;br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span><span class="token punctuation">,</span><span class="token string">"\n\n    "</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>fileName<span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fout<span class="token punctuation">:</span>            fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n\n=====================\n\n'</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">'\n\n=====================\n\n'</span><span class="token punctuation">)</span>            fout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"成功爬取（{}），存储在{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>url<span class="token punctuation">,</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="获取全部章节内容的思路"><a href="#获取全部章节内容的思路" class="headerlink" title="获取全部章节内容的思路"></a>获取全部章节内容的思路</h1><p>盗版小说网站章节的url有个规律，就是url的最后一串数字是连续的，照这个规律，知道第一章的url，就可以获得后续章节的url。于是我着手写这么个函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getNovelByIndexInc</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    此函数用于通过已知的起始url来获取仅有尾部索引不同且连续的一系列网页内的小说，    不连续时会跳过获取失败的网址，不过有可能连续几千个网址都是无效网址，所以慎用此函数    或改用getNovelByContentPage函数    :param url:起始章节的url    :param number: 要获取的章节数    :return:无    '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从我写的注释里面也可以看出，我失败了。</p><p>一开始的一百多章还是没什么问题的，只有偶尔几个网址是无效网址，但是后面爬取的时候等了十分钟还没爬取到下一章，一直输出“无效网址”，我查看了那断片的两个连续章节之后才发现，最后的一串数字差了几万。<del>不会是因为作者断更吧！</del></p><p>这种方式不可靠，还是换一种方式。</p><p>那么要如何可以改进呢？</p><p>我写了另一个函数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">getNovelByContentPage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>path<span class="token operator">=</span><span class="token string">'novel'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    通过获取目录页面链接与标题，进一步调用获取已知链接页面的函数来保存页面内容    :param url: 书籍目录页面    :param path:保存路径，默认为同目录下的novel文件夹    :return:-1为失败，0为成功    '''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网站的书籍页面会有一个目录，而目录下隐藏的就是我需要的全部章节的链接呀！</p><p>这个函数用到的内容上面也都讲到了，就直接放代码吧。</p><h1 id="获取全部章节内容的代码"><a href="#获取全部章节内容的代码" class="headerlink" title="获取全部章节内容的代码"></a>获取全部章节内容的代码</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> os<span class="token keyword">def</span> <span class="token function">getNovelByContentPage</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>path<span class="token operator">=</span><span class="token string">'novel'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    通过获取目录页面链接与标题，进一步调用获取已知链接页面的函数来保存页面内容    :param url: 书籍目录页面    :param path:保存路径，默认为同目录下的novel文件夹    :return:-1为失败，0为成功    '''</span>    <span class="token comment" spellcheck="true"># 获取网页</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    html <span class="token operator">=</span> r<span class="token punctuation">.</span>content<span class="token comment" spellcheck="true">#获取网页二进制内容</span>    html <span class="token operator">=</span> html<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">,</span> <span class="token string">"ignore"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转换编码</span>    <span class="token comment" spellcheck="true"># 获取网页中小说内容</span>    reg <span class="token operator">=</span> <span class="token string">'&lt;dd>&lt;a href="(.*?)" title="(.*?)">.*?&lt;/a>&lt;/dd>'</span><span class="token comment" spellcheck="true">#获取链接和标题</span>    reg <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    info<span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> html<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#由于是分组匹配，得到的列表中每个元素的[0]是链接，[1]是标题</span>    <span class="token comment" spellcheck="true">#保存到文件</span>    <span class="token keyword">if</span> info<span class="token operator">==</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获取章节目录失败"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#检查目录是否已经存在</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> info<span class="token punctuation">:</span>            realpath<span class="token operator">=</span>path<span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">".txt"</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>realpath<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#避免重复爬取</span>                <span class="token keyword">continue</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                getNovelByURL<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>realpath<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用获取单页面内容的函数</span>        <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spider </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为博客增加访问统计</title>
      <link href="/posts/hexo_visit_count/"/>
      <url>/posts/hexo_visit_count/</url>
      
        <content type="html"><![CDATA[<p>用CNZZ统计网站访问量</p><a id="more"></a><p>我用的主题是shana，网站统计的配置部分是这样的：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 网站统计</span><span class="token comment" spellcheck="true"># 站长统计 填写id</span><span class="token comment" spellcheck="true"># eg:　</span><span class="token comment" spellcheck="true"># CNZZ: 123456789</span><span class="token key atrule">CNZZ</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>百度了一下发现CNZZ和百度统计都可以统计网站访问量。当然想统计呀，这样就更有动力来写了。</p><p>尝试了百度统计一个多小时之后还没弄好，我就开始试CNZZ，毕竟主题的作者直接写在配置里面了，还是按照规矩来吧。</p><p><strong>CNZZ不是中国站长（cnzz.cn）那个，而是友盟（cnzz.com）</strong>，我一开始进的是中国站长……找了老半天统计功能才发现进错网站了。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>注册一个cnzz账号</li><li>填写网站信息</li><li>复制统计代码</li><li>粘贴统计id到配置文件</li><li>粘贴统计代码到需要统计的页面开头</li></ol><p>粘贴代码到哪里又是个问题，根据前面尝试弄百度统计的经验，在主题文件夹下的<code>\layout\_partial</code>内是用于生成页面的代码，摸索一阵后发现应该粘贴到<code>head.ejs</code>里面以达到生成在页面前面的效果。</p><p>一开始没显示“站长统计”的字样我以为是无效，甚至还去issue里面问shana的作者怎么弄。</p><p>后来发现，原来是shana主题在切换背景图片的时候会掩盖字样……好吧是我太心急了。</p><h1 id="今日收获"><a href="#今日收获" class="headerlink" title="今日收获"></a>今日收获</h1><h2 id="hexo的页面生成方式"><a href="#hexo的页面生成方式" class="headerlink" title="hexo的页面生成方式"></a>hexo的页面生成方式</h2><p><code>theme\&lt;themeName&gt;\layout\_partial</code>下的文件都是.ejs文件，应该是“扩展的js”文件，用于生成相应的页面。</p><p>例如<code>head.ejs</code>中专门存储生成html文件的<code>&lt;head&gt;</code>部分</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>文章一开始是全部展开的，浏览起来比较难受，查了之后发现其实只需要在文章中加上一个标记就可以折叠。</p><p>.md文件里面是下面这种结构：</p><pre class="line-numbers language-markdown"><code class="language-markdown">显示出来的文章提要<span class="token comment" spellcheck="true">&lt;!--more--></span>正文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署博客的过程记录</title>
      <link href="/posts/hexo_deploy_log/"/>
      <url>/posts/hexo_deploy_log/</url>
      
        <content type="html"><![CDATA[<p>建立Hexo博客的相关知识整理成的笔记，不太全面。</p><a id="more"></a><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p><strong>这部分算是年终总结一样的东西吧。</strong></p><p>在2018年8月底的时候，我还是对域名、服务器等名词没有了解的一个web小白，那时一个朋友在群里发了一个非常好看的个人博客，我一下子就被吸引了，羡慕但是又没有能力自己弄，感觉太难了。当时我只学过一点HTML和CSS，javaScript还未怎么学，而且已经很久没有练习过，已经忘得差不多。</p><p>那个朋友东给我发了一个《基于CentOS搭建WordPress个人博客》的页面，东说他想弄，已经租了个腾讯云服务器，问我有没有兴趣。我当时还是蛮犹豫的，对于我来说难度还是很大的，那个网页上并不是个教程，说的内容我大部分看不懂。不过我还是想整一个的，于是尝试去学。</p><p>我属于那种“如果不能基本上理解一个概念，那么就会完全拒绝相关的知识输入，即便已经记住了也不会长久”的学习类型，而且以前又比较自闭，不想问别人，只在网上查找已有的问题答案，所以学习起来特别困难。</p><p>买了域名，备了案，租了学生价服务器，照着教程<a href="http://www.jianshu.com/p/5b6587b95901" target="_blank" rel="noopener">《新手如何用腾讯云服务器搭建一个wordPress博客-简书》</a>鼓捣了好久终于弄出来一个wordPress博客。但我当时仅仅是“知其然而不知其所以然”，并不认为自己学到了什么，弄好了主页就一直搁置在那里，感觉心疼租服务器的钱但是又没办法。开学了又有很多事情要忙，大学并不像高中的时候想象的那么悠闲。</p><hr><p>直到一个学期结束我才考虑起开始重新弄个博客。经过了一个学期，我学会了更多的东西，把上个暑假的建博客的流程给理解了应该没什么问题。</p><p>我开始整理以前编程留下的笔记。以前使用的是vnote，但是我觉得界面不太好看，而且功能大多用不上，遇到问题百度也搜不到，碰巧它这时又不知道出了什么毛病，于是换成了Typora，把笔记重新筛选了一遍。分类尽可能少，渐渐地开始“一元化”笔记。</p><p>随后又想起了以前只学了一点的git。没有一次性学完它，导致我没有去用它，顶多只是使用网页版github上传一下代码点亮小绿块让自己爽一下，也搁置了很久。说起来我真是喜欢半途而废。</p><p>不如把这整理好的笔记传到github上面备份吧，感觉比网盘备份b格高。刚好前几天学Python的时候找到了廖雪峰的git教程，这让我有些后悔没有听另一个朋友朱的推荐。</p><p>整github的时候又发现了github page的功能，想起来github也可以搭博客，所以今天（2019-2-6）就研究了一整天搭好了这个博客。挑了个和我以前羡慕的个人博客相同的主题，美滋滋，成就感爆棚。</p><hr><p>好了，接下来我来分享一下我是如何搭建这样一个博客的。不保证零基础能看懂。</p><h1 id="Hexo——一个博客框架"><a href="#Hexo——一个博客框架" class="headerlink" title="Hexo——一个博客框架"></a>Hexo——一个博客框架</h1><p>和WordPress差不多，都是用来搭建博客的一个框架。但是问题来了——</p><p><strong>框架</strong>，又是啥？</p><p>自学计算机类的知识最大的问题就在于百度到的东西需要各种各样的前置知识，很难一下子理解那是什么意思，越听越迷糊。不管在看这篇博客的你知不知道框架的意思，反正上个暑假的我是不明白的。而且这是简称，光百度一个“框架”好像又搜不到明确的定义。</p><p>这个障碍一直妨碍着我对<code>bootstrap</code>、<code>vue</code>、<code>MFC</code>、<code>QT</code>等框架的准确理解，后来我才知道，<strong>软件框架</strong>到底是个啥</p><p>简而言之，在我的理解里面，框架，就是<strong>可以复用的代码</strong>，就是“不要重复造轮子”中的<strong>“轮子”</strong>，就是别人已经写好的封装了各种复杂API的<strong>库</strong>。框架可以帮你完成一些基础语法本身也可以完成的事情，让你不必在建房子的时候从烧砖开始，而是可以解放思维直接开始画楼房设计图。</p><p>Hexo，就是一个可以帮助你生成静态网页的一个工具，所有的核心功能比如打标签归档加时间，以及界面美化工作都帮你做好了，你可以专注于博客内容的创作，而不必学习如何“烧砖”（写前端代码）。网上搜索“hexo”，可以找到它的<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">官网</a>。hexo的官网文档做得非常好，不仅提供准确的中文版文档，还附有视频，让我学得非常之愉快。</p><p>不过作为一个“楼房设计工程师”，你还是需要一些其他的帮手来帮助你“建房子”。</p><p>在Hexo官网的文档里面有详细的教程教你如何安装必须的东西，我在这里只讲一些理解性的东西，详细的指令不多讲。</p><hr><p>安装Hexo的时候你需要俩工具：</p><ul><li>node.js</li><li>git</li></ul><h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><p><a href="https://baike.baidu.com/item/node.js/7567977" target="_blank" rel="noopener">node.js-百度百科</a></p><blockquote><p>Node.js 是一个让 JavaScript 运行在服务端的开发平台，实质是对Chrome V8引擎进行了封装。</p></blockquote><p>引用自<a href="https://www.cnblogs.com/thinkam/p/8262743.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/thinkam/p/8262743.html" target="_blank" rel="noopener">node.js和JavaScript的关系-博客园</a></a></p><blockquote><ul><li>JavaScript是一门语言</li><li>node.js不是一门语言，也不是一种特殊的JavaScript方言 - 它仅仅就是用于运行普通JavaScript代码的东西</li><li>所有浏览器都有运行网页上JavaScript的JavaScript引擎。Firefox有叫做Spidermonkey的引擎，Safari有JavaScriptCore，Chrome有V8</li><li>node.js就是带有能操作I/O和网络库的V8引擎，因此你能够在浏览器之外使用JavaScript创建shell脚本和后台服务或者运行在硬件上</li></ul></blockquote><p><strong>个人理解：node.js是javaScript的解释器</strong></p><p>为啥要安装它呢？应该是为了使用node.js的npm（Node Package Manager，是一个node.jS包管理和分发工具）,可以理解为一个安装程序，可以给你安装官方已经整合好的包。当然其他作用我也不知道。</p><p>如果已经有git和node.js，直接使用下面指令进行安装：</p><pre><code>`$ npm install -g hexo-cli`</code></pre><p>虽然前面有个linux系统的shell的命令提示符，但是安装好node.js之后用windows系统的cmd里面也是可以用的。至于打开cmd，win+R打开运行窗口输入“cmd”，回车就出现了。记得输入时不要输入前面的$符号，那是命令提示符。</p><h1 id="git——版本控制系统"><a href="#git——版本控制系统" class="headerlink" title="git——版本控制系统"></a>git——版本控制系统</h1><p>git的<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">安装</a>和<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">使用</a>就不多说了。用于将Hexo生成好的页面给推送到github这个远程库里。至少要知道git的一些基本概念。</p><h1 id="Hexo的使用"><a href="#Hexo的使用" class="headerlink" title="Hexo的使用"></a>Hexo的使用</h1><p>这Hexo安装好之后你可以在cmd使用它的指令。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化Hexo的指令（命令提示符不写了，下同）：</p><pre><code>hexo init 指定目录（省略则初始化当前目录）</code></pre><p>初始化hexo之后会在你指定的目录生成一大堆文件，这些文件和文件夹是从它的官方github库里面clone下来的，这也是一开始要下好git的原因。</p><p>比较重要的几个文件是：</p><table><thead><tr><th>_config.yml</th><th align="left">配置文件，使用YAML来写的数据文件</th></tr></thead><tbody><tr><td>scaffolds</td><td align="left">模板文件夹，存放新文章的模板</td></tr><tr><td>source</td><td align="left">文章，图片，草稿等资源都放在这里</td></tr><tr><td>themes</td><td align="left">主题文件夹，Hexo根据主题生成静态页面</td></tr></tbody></table><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><pre><code>hexo new [layout] &lt;title&gt;</code></pre><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><pre><code>hexo generate</code></pre><p>或者简写成</p><pre><code>hexo g</code></pre><p>前文说过，Hexo是用来帮助你生成静态网页的一个工具，就是用这个指令。这个指令将目前编写好的文章以及主题等东西给包装好，生成用于上传到你的网站上（这里我们用github page）的网页。至于此命令的详细说明，请看Hexo文档。</p><h2 id="部署网站"><a href="#部署网站" class="headerlink" title="部署网站"></a>部署网站</h2><p>说实话我在看文档的时候没看懂“部署网站”是啥意思，后来知道了，这就是将<code>hexo generate</code>生成的静态页面推送到你的github库里面去的意思。</p><p>指令是：</p><pre><code>hexo deploy</code></pre><p>也可以简写成：</p><pre><code>hexo d</code></pre><p><code>deploy</code>可以与<code>generate</code>共同简写成：</p><pre><code>hexo d -g</code></pre><p>或者</p><pre><code>hexo g -d</code></pre><p>一个意思，都是先生成静态页面，再部署网站。</p><h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><pre><code>`$ hexo server`</code></pre><p>在自己电脑上运行服务器来查看博客的效果，默认情况下，访问网址为： <code>http://localhost:4000/</code></p><p>其余指令我目前还没用到，详情请见<a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo文档</a></p><h1 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h1><p>在github仓库的setting里面，有一栏叫做github page，在其中的source选项内选择作为数据源的分支，一般将博客部署在master分支，所以选择master作为数据源。</p><p>你可以选择两种方式来给你用来存放博客数据的仓库起名字，第一种就是你百度经常看到的：<code>你的用户名.github.io</code>的形式，这种形式会让你在选择好数据源之后提示：</p><pre><code>Your site is published at https://你的用户名.github.io/</code></pre><p>然后你可以使用给出的链接来打开你的博客，点击链接，会默认打开你数据源分支内的index.html文件作为主页，如果没有这个文件就会<code>404：找不到页面</code>，当然，Hexo会帮你生成好index.html，只要你把生成好的页面给push上github就可以。如果你知道包含哪些文件的话，自己手动上传应该也ok。</p><p>有了这种方式，其实你甚至可以不需要Hexo，自己写html页面也能做一个博客，不过这样就像前文说的从“烧砖”开始建楼了。</p><p>第二种起名方式就是不按照第一种来，随便起，比如用户名是<code>HaneChiri</code>，创建的仓库名叫<code>blog</code>,那么选择完数据源分支之后呢，得到的提示可能是：</p><pre><code>Your site is published at https://hanechiri.github.io/blog/</code></pre><p>这样需要写的网址就会长一些，要加上仓库名。试了一下这样是可以的。我的两个仓库就分别使用了以上两种方式。</p><h1 id="markdown的图片"><a href="#markdown的图片" class="headerlink" title="markdown的图片"></a>markdown的图片</h1><p>这里的文章使用的是markdown语法，一个比较容易学习的标记语言，可以让你手不离键盘地完成排版，我现在就是在用markdown来写.md文件，然后放进source文件夹的_post子文件夹里面，之后再上传。</p><p>markdown可以方便的插入图片和超链接。但是图片一般来说是利用相对路径放在.md文件的附近的，生成静态页面的时候图片的路径又会被打乱，导致图片显示失败。</p><p>Hexo文档里面提供了几种方式来插入图片，比如插件。但是那种方式无法实时预览，而且难弄。</p><p>所以干脆使用外部图片链接，在github上面再建立一个仓库用来存放图片，提供链接给博客使用。</p><p>要这样使用的前提是去开启github page这个设置。</p><p>比如用户名是<code>HaneChiri</code>，创建的仓库名叫<code>blog_images</code>，那么在这个仓库根目录下的图片<code>avatar.jpg</code>的链接就是</p><pre><code>https://hanechiri.github.io/blog_images/avatar.jpg</code></pre><p>而不是</p><pre><code>https://github.com/HaneChiri/blog_images/avatar.jpg</code></pre><p>后者是浏览编辑这个图片的链接，而不是图片本身。</p><p>上传之后无法访问这个链接也不要急，等几分钟就可以了。</p><h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><ul><li><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析-遇见西门</a></li></ul><h1 id="步骤总结"><a href="#步骤总结" class="headerlink" title="步骤总结"></a>步骤总结</h1><p>由于网上教程很多，我在这里只是简单把我部署博客的步骤总结一下：</p><ol><li>开一个github空仓库（注册和新建仓库应该不用多说）</li><li>在一个本地空文件夹内初始化hexo</li><li>此文件夹内，与远程库建立关联（其实这一步可以不必，不过以后可能用得到，先弄着吧）</li><li>给<code>_config.yml</code>文件内<code>deploy</code>属性设置好<code>type</code>（: git，记得冒号后面有个空格）、<code>url</code>（github仓库的链接）和<code>branch</code>（推送到的分支，一般用master）</li><li>修改其他配置比如<code>title</code>、<code>author</code>、<code>new_post_name</code>、<code>language</code>、<code>post_asset_folder</code></li><li>安装一个git部署的东西<code>npm install --save hexo-deployer-git</code></li><li>生成并在本地测试页面效果</li><li>生成并部署网站<code>hexo d -g</code></li><li>新建，编辑文章然后重复上一步</li></ol>]]></content>
      
      
      <categories>
          
          <category> 过程复盘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
